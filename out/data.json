{
    "project": {},
    "files": {
        "lib/math.js": {
            "name": "lib/math.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/q.js": {
            "name": "lib/q.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "K_Means.js": {
            "name": "K_Means.js",
            "modules": {},
            "classes": {
                "K_Means_Clustering": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "util.js": {
            "name": "util.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "K_Means_Clustering": {
            "name": "K_Means_Clustering",
            "shortname": "K_Means_Clustering",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "K_Means.js",
            "line": 10,
            "description": "The K_Means_Clustering class contains all the necessary logic for clustering unsupervised data.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "args",
                    "description": "Contains all the necessary parameters for K-Means clustering as listed below.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "random_Init_Count",
                            "description": "Required parameter for how many times to randomly initialize centroids.",
                            "type": "Number"
                        },
                        {
                            "name": "cluster_count",
                            "description": "Required value to specify how many clusters in total are to be initialized.",
                            "type": "Number"
                        },
                        {
                            "name": "notify_count",
                            "description": "Required value to execute the iteration_callback after every x number of iterations.",
                            "type": "Number"
                        },
                        {
                            "name": "iteration_callback",
                            "description": "Required callback that can be used for getting information for diagnostics.",
                            "type": "Function"
                        }
                    ]
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "lib/math.js",
            "line": 1,
            "description": "math.js\nhttps://github.com/josdejong/mathjs\n\nMath.js is an extensive math library for JavaScript and Node.js,\nIt features real and complex numbers, units, matrices, a large set of\nmathematical functions, and a flexible expression parser.",
            "version": "3.8.0",
            "date": "2016-11-18",
            "license": "Copyright (C) 2013-2016 Jos de Jong <wjosdejong@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not\nuse this file except in compliance with the License. You may obtain a copy\nof the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\nLicense for the specific language governing permissions and limitations under\nthe License.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39,
            "description": "/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 80,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 82,
            "description": "var core = __webpack_require__(1);\n/**\n\t * math.js factory function. Creates a new instance of math.js\n\t *\n\t * @param {Object} [config] Available configuration options:\n\t *                            {number} epsilon\n\t *                              Minimum relative difference between two\n\t *                              compared values, used by all comparison functions.\n\t *                            {string} matrix\n\t *                              A string 'matrix' (default) or 'array'.\n\t *                            {string} number\n\t *                              A string 'number' (default), 'bignumber', or\n\t *                              'fraction'\n\t *                            {number} precision\n\t *                              The number of significant digits for BigNumbers.\n\t *                              Not applicable for Numbers.\n\t *                            {boolean} predictable\n\t *                              Predictable output type of functions. When true,\n\t *                              output type depends only on the input types. When\n\t *                              false (default), output type can vary depending\n\t *                              on input values. For example `math.sqrt(-2)`\n\t *                              returns `NaN` when predictable is false, and\n\t *                              returns `complex('2i')` when true.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 124,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 126,
            "description": "module.exports = __webpack_require__(2);\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 132,
            "description": "var isFactory = __webpack_require__(3).isFactory;\n\tvar deepExtend = __webpack_require__(3).deepExtend;\n\tvar typedFactory = __webpack_require__(4);\n\tvar emitter = __webpack_require__(8);\nvar importFactory = __webpack_require__(10);\n\tvar configFactory = __webpack_require__(12);\n/**\n\t * Math.js core. Creates a new, empty math.js instance\n\t * @param {Object} [options] Available options:\n\t *                            {number} epsilon\n\t *                              Minimum relative difference between two\n\t *                              compared values, used by all comparison functions.\n\t *                            {string} matrix\n\t *                              A string 'Matrix' (default) or 'Array'.\n\t *                            {string} number\n\t *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n\t *                            {number} precision\n\t *                              The number of significant digits for BigNumbers.\n\t *                              Not applicable for Numbers.\n\t *                            {boolean} predictable\n\t *                              Predictable output type of functions. When true,\n\t *                              output type depends only on the input types. When\n\t *                              false (default), output type can vary depending\n\t *                              on input values. For example `math.sqrt(-2)`\n\t *                              returns `NaN` when predictable is false, and\n\t *                              returns `complex('2i')` when true.\n\t * @returns {Object} Returns a bare-bone math.js instance containing\n\t *                   functions:\n\t *                   - `import` to add new functions\n\t *                   - `config` to change configuration\n\t *                   - `on`, `off`, `once`, `emit` for events",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 211,
            "description": "Load a function or data type from a factory.\nIf the function or data type already exists, the existing instance is\nreturned.",
            "params": [
                {
                    "name": "}",
                    "description": "factory",
                    "type": "Type: string, name: string, factory: Function"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 260,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 262,
            "description": "'use strict';\n/**\n\t * Clone an object\n\t *\n\t *     clone(x)\n\t *\n\t * Can clone any primitive type, array, and object.\n\t * If x has a function clone, this function will be invoked to clone the object.\n\t *\n\t * @param {*} x\n\t * @return {*} clone",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 315,
            "description": "Extend object a with the properties of object b",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 330,
            "description": "Deep extend an object a with the properties of object b",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 364,
            "description": "Deep test equality of all fields in two pairs of arrays or objects.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Array | Object"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Array | Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 412,
            "description": "Test whether the current JavaScript engine supports Object.defineProperty",
            "return": {
                "description": "returns true if supported",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 428,
            "description": "Attach a lazy loading property to a constant.\nThe given function `fn` is called once when the property is first requested.\nOn older browsers (<IE8), the function will fall back to direct evaluation\nof the properties value.",
            "params": [
                {
                    "name": "object",
                    "description": "Object where to add the property",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "Property name",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function returning the property value. Called\n                         without arguments.",
                    "type": "Function"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 466,
            "description": "Traverse a path into an object.\nWhen a namespace is missing, it will be created",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "A dot separated string like 'name.space'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the object at the end of the path",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 490,
            "description": "Test whether an object is a factory. a factory has fields:\n\n- factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n- name: string (optional)\n- path: string    A dot separated path (optional)\n- math: boolean   If true (false by default), the math namespace is passed\n                  as fifth argument of the factory function",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 507,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 509,
            "description": "var typedFunction = __webpack_require__(5);\n\tvar digits = __webpack_require__(6).digits;\n// returns a new instance of typed-function\n\tvar createTyped = function () {\n\t  // initially, return the original instance of typed-function\n\t  // consecutively, return a new instance from typed.create.\n\t  createTyped = typedFunction.create;\n\t  return typedFunction;\n\t};\n/**\n\t * Factory function for creating a new typed instance\n\t * @param {Object} type   Object with data types like Complex and BigNumber\n\t * @returns {Function}",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 702,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 704,
            "description": "var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * typed-function\n\t *\n\t * Type checking for JavaScript functions\n\t *\n\t * https://github.com/josdejong/typed-function",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 732,
            "description": "Get a type test function for a specific data type",
            "params": [
                {
                    "name": "name",
                    "description": "Name of a data type like 'number' or 'string'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a type testing function.\n                                       Throws an error for an unknown type.",
                "type": "Function(obj: *) : boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 764,
            "description": "Retrieve the function name from a set of functions, and check\nwhether the name of all functions match (if given)",
            "params": [
                {
                    "name": "fns",
                    "description": "",
                    "type": "Array.<function>"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 794,
            "description": "Create an ArgumentsError. Creates messages like:\n\n  Unexpected type of argument (expected: ..., actual: ..., index: ...)\n  Too few arguments (expected: ..., index: ...)\n  Too many arguments (expected: ..., actual: ...)",
            "params": [
                {
                    "name": "fn",
                    "description": "Function name",
                    "type": "String"
                },
                {
                    "name": "argCount",
                    "description": "Number of arguments",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "Current argument index",
                    "type": "Number"
                },
                {
                    "name": "actual",
                    "description": "Current argument",
                    "type": "*"
                },
                {
                    "name": "expected",
                    "description": "An optional, comma separated string with\n                           expected types on given index",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "Error",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 845,
            "description": "Collection with function references (local shortcuts to functions)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Optional name for the refs, used to generate\n                               JavaScript code",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'refs'"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 856,
            "description": "Add a function reference.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "category",
                    "description": "A function category, like 'fn' or 'signature'",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'fn'"
                }
            ],
            "return": {
                "description": "Returns the function name, for example 'fn0' or 'signature2'",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 875,
            "description": "Create code lines for all function references",
            "return": {
                "description": "Returns the code containing all function references",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 897,
            "description": "A function parameter",
            "params": [
                {
                    "name": "types",
                    "description": "A parameter type like 'string',\n                                            'number | boolean'",
                    "type": "String | string[] | Param"
                },
                {
                    "name": "varArgs",
                    "description": "Variable arguments if true",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "is_constructor": 1,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 944,
            "description": "Order Params\nany type ('any') will be ordered last, and object as second last (as other\ntypes may be an object as well, like Array).",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Param"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Param"
                }
            ],
            "return": {
                "description": "Returns 1 if a > b, -1 if a < b, and else 0.",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1012,
            "description": "Test whether this parameters types overlap an other parameters types.\nWill not match ['any'] with ['number']",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Param"
                }
            ],
            "return": {
                "description": "Returns true when there are overlapping types",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1027,
            "description": "Test whether this parameters types matches an other parameters types.\nWhen any of the two parameters contains `any`, true is returned",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Param"
                }
            ],
            "return": {
                "description": "Returns true when there are matching types",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1037,
            "description": "Create a clone of this param",
            "return": {
                "description": "Returns a cloned version of this param",
                "type": "Param"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1047,
            "description": "Test whether this parameter contains conversions",
            "return": {
                "description": "Returns true if the parameter contains one or\n                   multiple conversions.",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1056,
            "description": "Tests whether this parameters contains any of the provided types",
            "params": [
                {
                    "name": "types",
                    "description": "A Map with types, like {'number': true}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true when the parameter contains any\n                       of the provided types",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1071,
            "description": "Return a string representation of this params types, like 'string' or\n'number | boolean' or '...number'",
            "params": [
                {
                    "name": "toConversion",
                    "description": "If true, the returned types string\n                                  contains the types where the parameter\n                                  will convert to. If false (default)\n                                  the \"from\" types are returned",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1096,
            "description": "A function signature",
            "params": [
                {
                    "name": "params",
                    "description": "Array with the type(s) of each parameter,\n                        or a comma separated string with types",
                    "type": "String | string[] | Param[]"
                },
                {
                    "name": "fn",
                    "description": "The actual function",
                    "type": "Function"
                }
            ],
            "is_constructor": 1,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1140,
            "description": "Create a clone of this signature",
            "return": {
                "description": "Returns a cloned version of this signature",
                "type": "Signature"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1148,
            "description": "Expand a signature: split params with union types in separate signatures\nFor example split a Signature \"string | number\" into two signatures.",
            "return": {
                "description": "Returns an array with signatures (at least one)",
                "type": "Signature[]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1205,
            "description": "Compare two signatures.\n\nWhen two params are equal and contain conversions, they will be sorted\nby lowest index of the first conversions.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Signature"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Signature"
                }
            ],
            "return": {
                "description": "Returns 1 if a > b, -1 if a < b, and else 0.",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1243,
            "description": "Test whether any of the signatures parameters has conversions",
            "return": {
                "description": "Returns true when any of the parameters contains\n                  conversions.",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1257,
            "description": "Test whether this signature should be ignored.\nChecks whether any of the parameters contains a type listed in\ntyped.ignore",
            "return": {
                "description": "Returns true when the signature should be ignored",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1280,
            "description": "Test whether the path of this signature matches a given path.",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Param[]"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1304,
            "description": "Generate the code to invoke this signature",
            "params": [
                {
                    "name": "refs",
                    "description": "",
                    "type": "Refs"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns code",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1336,
            "description": "Return a string representation of the signature",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1344,
            "description": "A group of signatures with the same parameter on given index",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "Param[]"
                },
                {
                    "name": "signature",
                    "description": "",
                    "type": "Signature",
                    "optional": true
                },
                {
                    "name": "childs",
                    "description": "",
                    "type": "Node[]"
                },
                {
                    "name": "fallThrough",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "is_constructor": 1,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1360,
            "description": "Generate code for this group of signatures",
            "params": [
                {
                    "name": "refs",
                    "description": "",
                    "type": "Refs"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the code as string",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1456,
            "description": "Generate inner code for this group of signatures.\nThis is a helper function of Node.prototype.toCode",
            "params": [
                {
                    "name": "refs",
                    "description": "",
                    "type": "Refs"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the inner code as string",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1490,
            "description": "Generate code to throw exceptions",
            "params": [
                {
                    "name": "refs",
                    "description": "",
                    "type": "Refs"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the inner code as string",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1529,
            "description": "Split all raw signatures into an array with expanded Signatures",
            "params": [
                {
                    "name": "rawSignatures",
                    "description": "",
                    "type": "Object.<string, Function>"
                }
            ],
            "return": {
                "description": "Returns an array with expanded signatures",
                "type": "Signature[]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1623,
            "description": "Filter all any type signatures",
            "params": [
                {
                    "name": "signatures",
                    "description": "",
                    "type": "Signature[]"
                }
            ],
            "return": {
                "description": "Returns only any type signatures",
                "type": "Signature[]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1640,
            "description": "create a map with normalized signatures as key and the function as value",
            "params": [
                {
                    "name": "signatures",
                    "description": "An array with split signatures",
                    "type": "Signature[]"
                }
            ],
            "return": {
                "description": "Returns a map with normalized\n                                    signatures as key, and the function\n                                    as value.",
                "type": "Object.<string, Function>"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1661,
            "description": "Parse signatures recursively in a node tree.",
            "params": [
                {
                    "name": "signatures",
                    "description": "Array with expanded signatures",
                    "type": "Signature[]"
                },
                {
                    "name": "path",
                    "description": "Traversed path of parameter types",
                    "type": "Param[]"
                },
                {
                    "name": "anys",
                    "description": "",
                    "type": "Signature[]"
                }
            ],
            "return": {
                "description": "Returns a node tree",
                "type": "Node"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1756,
            "description": "Generate an array like ['arg0', 'arg1', 'arg2']",
            "params": [
                {
                    "name": "count",
                    "description": "Number of arguments to generate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns an array with argument names",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1771,
            "description": "Compose a function from sub-functions each handling a single type signature.\nSignatures:\n  typed(signature: string, fn: function)\n  typed(name: string, signature: string, fn: function)\n  typed(signatures: Object.<string, function>)\n  typed(name: string, signatures: Object.<string, function>)",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String | null"
                },
                {
                    "name": "signatures",
                    "description": "",
                    "type": "Object.<string, Function>"
                }
            ],
            "return": {
                "description": "Returns the typed function",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1831,
            "description": "Calculate the maximum number of parameters in givens signatures",
            "params": [
                {
                    "name": "signatures",
                    "description": "",
                    "type": "Signature[]"
                }
            ],
            "return": {
                "description": "The maximum number of parameters",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1849,
            "description": "Get the type of a value",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns a string with the type of value",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1875,
            "description": "Test whether an array contains some item",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "item",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns true if array contains item, false if not.",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1885,
            "description": "Returns the last item in the array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "item",
                "type": "*"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1927,
            "description": "Construct the typed function itself with various signatures\n\nSignatures:\n\n  typed(signatures: Object.<string, function>)\n  typed(name: string, signatures: Object.<string, function>)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 1986,
            "description": "Find a specific signature from a (composed) typed function, for\nexample:\n\n  typed.find(fn, ['number', 'string'])\n  typed.find(fn, 'number, string')\n\nFunction find only only works for exact matches.",
            "params": [
                {
                    "name": "fn",
                    "description": "A typed-function",
                    "type": "Function"
                },
                {
                    "name": "signature",
                    "description": "Signature to be found, can be\n                                       an array or a comma separated string.",
                    "type": "String | string[]"
                }
            ],
            "return": {
                "description": "Returns the matching signature, or\n                                       throws an errror when no signature\n                                       is found.",
                "type": "Function"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2035,
            "description": "Convert a given value to another data type.",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2095,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2097,
            "description": "'use strict';\nvar NumberFormatter = __webpack_require__(7);\n/**\n\t * Test whether value is a number\n\t * @param {*} value\n\t * @return {boolean} isNumber",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2112,
            "description": "Check if a number is integer",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number | boolean"
                }
            ],
            "return": {
                "description": "isInteger",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2124,
            "description": "Calculate the sign of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2141,
            "description": "Convert a number to a formatted string representation.\n\nSyntax:\n\n   format(value)\n   format(value, options)\n   format(value, precision)\n   format(value, fn)\n\nWhere:\n\n   {number} value   The value to be formatted\n   {Object} options An object with formatting options. Available options:\n                    {string} notation\n                        Number notation. Choose from:\n                        'fixed'          Always use regular number notation.\n                                         For example '123.40' and '14000000'\n                        'exponential'    Always use exponential notation.\n                                         For example '1.234e+2' and '1.4e+7'\n                        'engineering'    Always use engineering notation.\n                                         For example '123.4e+0' and '14.0e+6'\n                        'auto' (default) Regular number notation for numbers\n                                         having an absolute value between\n                                         `lower` and `upper` bounds, and uses\n                                         exponential notation elsewhere.\n                                         Lower bound is included, upper bound\n                                         is excluded.\n                                         For example '123.4' and '1.4e7'.\n                    {number} precision   A number between 0 and 16 to round\n                                         the digits of the number.\n                                         In case of notations 'exponential' and\n                                         'auto', `precision` defines the total\n                                         number of significant digits returned\n                                         and is undefined by default.\n                                         In case of notation 'fixed',\n                                         `precision` defines the number of\n                                         significant digits after the decimal\n                                         point, and is 0 by default.\n                    {Object} exponential An object containing two parameters,\n                                         {number} lower and {number} upper,\n                                         used by notation 'auto' to determine\n                                         when to return exponential notation.\n                                         Default values are `lower=1e-3` and\n                                         `upper=1e5`.\n                                         Only applicable for notation `auto`.\n   {Function} fn    A custom formatting function. Can be used to override the\n                    built-in notations. Function `fn` is called with `value` as\n                    parameter and must return a string. Is useful for example to\n                    format all values inside a matrix in a particular way.\n\nExamples:\n\n   format(6.4);                                        // '6.4'\n   format(1240000);                                    // '1.24e6'\n   format(1/3);                                        // '0.3333333333333333'\n   format(1/3, 3);                                     // '0.333'\n   format(21385, 2);                                   // '21000'\n   format(12.071, {notation: 'fixed'});                // '12'\n   format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n   format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n   format(12345678, {notation: 'engineering'});        // '12.345678e+6'",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object | Function | number",
                    "optional": true
                }
            ],
            "return": {
                "description": "str The formatted value",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2272,
            "description": "Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "Number of digits in formatted output.\n                             If not provided, the maximum available digits\n                             is used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2284,
            "description": "Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "Number of digits in formatted output.\n                             If not provided, the maximum available digits\n                             is used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2296,
            "description": "Format a number with fixed notation.",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "Optional number of decimals after the\n                                     decimal point. Zero by default.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2306,
            "description": "Format a number with a certain precision",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "Optional number of digits.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "undefined"
                },
                {
                    "name": "}",
                    "description": "[options]  By default:\n                                                   lower = 1e-3 (excl)\n                                                   upper = 1e+5 (incl)",
                    "type": "Lower: number, upper: number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2319,
            "description": "Count the number of significant digits of a number.\n\nFor example:\n  2.34 returns 3\n  0.0034 returns 2\n  120.5e+30 returns 4",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "digits   Number of significant digits",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2338,
            "description": "Minimum number added to one that makes the result different than one",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2343,
            "description": "Compares two floating point numbers.",
            "params": [
                {
                    "name": "x",
                    "description": "First value to compare",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Second value to compare",
                    "type": "Number"
                },
                {
                    "name": "epsilon",
                    "description": "The maximum relative difference between x and y\n                           If epsilon is undefined or null, the function will\n                           test whether x and y are exactly equal.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the two numbers are nearly equal",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2386,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2388,
            "description": "'use strict';\n/**\n\t * Format a number using methods toPrecision, toFixed, toExponential.\n\t * @param {number | string} value\n\t * @constructor",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2434,
            "description": "Format a number with engineering notation.",
            "params": [
                {
                    "name": "precision",
                    "description": "Optional number of decimals after the\n                                     decimal point. Zero by default.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2474,
            "description": "Format a number with fixed notation.",
            "params": [
                {
                    "name": "precision",
                    "description": "Optional number of decimals after the\n                                     decimal point. Zero by default.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2504,
            "description": "Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "params": [
                {
                    "name": "precision",
                    "description": "Number of digits in formatted output.\n                             If not provided, the maximum available digits\n                             is used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2527,
            "description": "Format a number with a certain precision",
            "params": [
                {
                    "name": "precision",
                    "description": "Optional number of digits.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "undefined"
                },
                {
                    "name": "}",
                    "description": "[options]\n                                      By default:\n                                        lower = 1e-3 (excl)\n                                        upper = 1e+5 (incl)",
                    "type": "Lower: number | undefined, upper: number | undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2573,
            "description": "Crete a clone of the NumberFormatter",
            "return": {
                "description": "Returns a clone of the NumberFormatter",
                "type": "NumberFormatter"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2585,
            "description": "Round the number of digits of a number *",
            "params": [
                {
                    "name": "precision",
                    "description": "A positive integer",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a new NumberFormatter with the rounded\n                           digits",
                "type": "NumberFormatter"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2624,
            "description": "Create an array filled with zeros.",
            "params": [
                {
                    "name": "length",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2640,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2642,
            "description": "var Emitter = __webpack_require__(9);\n/**\n\t * Extend given object with emitter functions `on`, `off`, `once`, `emit`\n\t * @param {Object} obj\n\t * @return {Object} obj",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2665,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2667,
            "description": "function E () {\n\t\t// Keep this empty so it's easier to inherit from\n\t  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n\t}\nE.prototype = {\n\t\ton: function (name, callback, ctx) {\n\t    var e = this.e || (this.e = {});\n    (e[name] || (e[name] = [])).push({\n\t      fn: callback,\n\t      ctx: ctx\n\t    });\n    return this;\n\t  },\n  once: function (name, callback, ctx) {\n\t    var self = this;\n\t    function listener () {\n\t      self.off(name, listener);\n\t      callback.apply(ctx, arguments);\n\t    };\n    listener._ = callback\n\t    return this.on(name, listener, ctx);\n\t  },\n  emit: function (name) {\n\t    var data = [].slice.call(arguments, 1);\n\t    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n\t    var i = 0;\n\t    var len = evtArr.length;\n    for (i; i < len; i++) {\n\t      evtArr[i].fn.apply(evtArr[i].ctx, data);\n\t    }\n    return this;\n\t  },\n  off: function (name, callback) {\n\t    var e = this.e || (this.e = {});\n\t    var evts = e[name];\n\t    var liveEvents = [];\n    if (evts && callback) {\n\t      for (var i = 0, len = evts.length; i < len; i++) {\n\t        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n\t          liveEvents.push(evts[i]);\n\t      }\n\t    }\n    // Remove event from queue to prevent memory leak\n\t    // Suggested by https://github.com/lazd\n\t    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n    (liveEvents.length)\n\t      ? e[name] = liveEvents\n\t      : delete e[name];\n    return this;\n\t  }\n\t};\nmodule.exports = E;\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2739,
            "description": "'use strict';\nvar lazy = __webpack_require__(3).lazy;\n\tvar isFactory = __webpack_require__(3).isFactory;\n\tvar traverse = __webpack_require__(3).traverse;\n\tvar extend = __webpack_require__(3).extend;\n\tvar ArgumentsError = __webpack_require__(11);\nfunction factory (type, config, load, typed, math) {\n\t  /**\n\t   * Import functions from an object or a module\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.import(object)\n\t   *    math.import(object, options)\n\t   *\n\t   * Where:\n\t   *\n\t   * - `object: Object`\n\t   *   An object with functions to be imported.\n\t   * - `options: Object` An object with import options. Available options:\n\t   *   - `override: boolean`\n\t   *     If true, existing functions will be overwritten. False by default.\n\t   *   - `silent: boolean`\n\t   *     If true, the function will not throw errors on duplicates or invalid\n\t   *     types. False by default.\n\t   *   - `wrap: boolean`\n\t   *     If true, the functions will be wrapped in a wrapper function\n\t   *     which converts data types like Matrix to primitive data types like Array.\n\t   *     The wrapper is needed when extending math.js with libraries which do not\n\t   *     support these data type. False by default.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    // define new functions and variables\n\t   *    math.import({\n\t   *      myvalue: 42,\n\t   *      hello: function (name) {\n\t   *        return 'hello, ' + name + '!';\n\t   *      }\n\t   *    });\n\t   *\n\t   *    // use the imported function and variable\n\t   *    math.myvalue * 2;               // 84\n\t   *    math.hello('user');             // 'hello, user!'\n\t   *\n\t   *    // import the npm module 'numbers'\n\t   *    // (must be installed first with `npm install numbers`)\n\t   *    math.import(require('numbers'), {wrap: true});\n\t   *\n\t   *    math.fibonacci(7); // returns 13\n\t   *\n\t   * @param {Object | Array} object   Object with functions to be imported.\n\t   * @param {Object} [options]        Import options.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2840,
            "description": "Add a property to the math namespace and create a chain proxy for it.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "See import for a description of the options",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2891,
            "description": "Create a wrapper a round an function which converts the arguments\nto their primitive values (like convert a Matrix to Array)",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the wrapped function",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2915,
            "description": "Import an instance of a factory into math.js",
            "params": [
                {
                    "name": "}",
                    "description": "factory",
                    "type": "Factory: Function, name: string, path: string, math: boolean"
                },
                {
                    "name": "options",
                    "description": "See import for a description of the options",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2967,
            "description": "Check whether given object is a type which can be imported",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Function | number | string | boolean | null | Unit | Complex"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 2987,
            "description": "Test whether a given thing is a typed-function",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns true when `fn` is a typed-function",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3005,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3007,
            "description": "'use strict';\n/**\n\t * Create a syntax error with the message:\n\t *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n\t * @param {string} fn     Function name\n\t * @param {number} count  Actual argument count\n\t * @param {number} min    Minimum required argument count\n\t * @param {number} [max]  Maximum required argument count\n\t * @extends Error",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3045,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3047,
            "description": "'use strict';\nvar object = __webpack_require__(3);\nfunction factory (type, config, load, typed, math) {\n\t  var MATRIX = ['Matrix', 'Array'];                   // valid values for option matrix\n\t  var NUMBER = ['number', 'BigNumber', 'Fraction'];   // valid values for option number\n  /**\n\t   * Set configuration options for math.js, and get current options.\n\t   * Will emit a 'config' event, with arguments (curr, prev).\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.config(config: Object): Object\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.config().number;                // outputs 'number'\n\t   *     math.eval('0.4');                    // outputs number 0.4\n\t   *     math.config({number: 'Fraction'});\n\t   *     math.eval('0.4');                    // outputs Fraction 2/5\n\t   *\n\t   * @param {Object} [options] Available options:\n\t   *                            {number} epsilon\n\t   *                              Minimum relative difference between two\n\t   *                              compared values, used by all comparison functions.\n\t   *                            {string} matrix\n\t   *                              A string 'Matrix' (default) or 'Array'.\n\t   *                            {string} number\n\t   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n\t   *                            {number} precision\n\t   *                              The number of significant digits for BigNumbers.\n\t   *                              Not applicable for Numbers.\n\t   *                            {string} parenthesis\n\t   *                              How to display parentheses in LaTeX and string\n\t   *                              output.\n\t   * @return {Object} Returns the current configuration",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3118,
            "description": "Test whether an Array contains a specific item.",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array.<string>"
                },
                {
                    "name": "item",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3128,
            "description": "Find a string in an array. Case insensitive search",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array.<string>"
                },
                {
                    "name": "item",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the index when found. Returns -1 when not found",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3142,
            "description": "Validate an option",
            "params": [
                {
                    "name": "options",
                    "description": "Object with options",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "Name of the option to validate",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "Array with valid values for this option",
                    "type": "Array.<string>"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3170,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3172,
            "description": "module.exports = [\n\t  __webpack_require__(14),        // data types (Matrix, Complex, Unit, ...)\n\t  __webpack_require__(100),   // constants\n\t  __webpack_require__(102),  // expression parsing\n\t  __webpack_require__(338),    // functions\n\t  __webpack_require__(504),        // serialization utility (math.json.reviver)\n\t  __webpack_require__(506)        // errors\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3186,
            "description": "module.exports = [\n\t  __webpack_require__(15),\n\t  __webpack_require__(20),\n\t  __webpack_require__(21),\n\t  __webpack_require__(26),\n\t  __webpack_require__(33),\n\t  __webpack_require__(37),\n\t  __webpack_require__(70),\n\t  __webpack_require__(71),\n\t  __webpack_require__(73),\n\t  __webpack_require__(74)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3204,
            "description": "module.exports = [\n\t  // type\n\t  __webpack_require__(16),\n  // construction function\n\t  __webpack_require__(18)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3217,
            "description": "var Decimal = __webpack_require__(17);\nfunction factory (type, config, load, typed, math) {\n\t  var BigNumber = Decimal.clone({precision: config.precision});\n  /**\n\t   * Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3230,
            "description": "Get a JSON representation of a BigNumber containing\ntype information",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3243,
            "description": "Instantiate a BigNumber from a JSON object",
            "params": [
                {
                    "name": "json",
                    "description": "a JSON object structured as:\n                      `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "BigNumber"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3268,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 3270,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8295,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8297,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a BigNumber, which can store numbers with arbitrary precision.\n\t   * When a matrix is provided, all elements will be converted to BigNumber.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bignumber(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    0.1 + 0.2;                                  // returns number 0.30000000000000004\n\t   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3\n\t   *\n\t   *\n\t   *    7.2e500;                                    // returns number Infinity\n\t   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500\n\t   *\n\t   * See also:\n\t   *\n\t   *    boolean, complex, index, matrix, string, unit\n\t   *\n\t   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n\t   *                                                    0 by default.\n\t   * @returns {BigNumber} The created bignumber",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8369,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8371,
            "description": "'use strict';\n/**\n\t * Execute the callback function element wise for each element in array and any\n\t * nested array\n\t * Returns an array with the results\n\t * @param {Array | Matrix} array\n\t * @param {Function} callback   The callback is called with two parameters:\n\t *                              value1 and value2, which contain the current\n\t *                              element of both arrays.\n\t * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n\t *\n\t * @return {Array | Matrix} res",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8400,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8402,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a boolean or convert a string or number to a boolean.\n\t   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n\t   * case of zero.\n\t   * Strings can be `'true'` or `'false'`, or can contain a number.\n\t   * When value is a matrix, all elements will be converted to boolean.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.boolean(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.boolean(0);     // returns false\n\t   *    math.boolean(1);     // returns true\n\t   *    math.boolean(-3);     // returns true\n\t   *    math.boolean('true');     // returns true\n\t   *    math.boolean('false');     // returns false\n\t   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, complex, index, matrix, string, unit\n\t   *\n\t   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n\t   * @return {boolean | Array | Matrix} The boolean value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8484,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8486,
            "description": "module.exports = [\n\t  // type\n\t  __webpack_require__(22),\n  // construction function\n\t  __webpack_require__(25)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8499,
            "description": "'use strict';\nvar format = __webpack_require__(23).format;\n\tvar lazy = __webpack_require__(3).lazy;\nfunction factory (type, config, load, typed, math) {\n\t  /**\n\t   * @constructor Chain\n\t   * Wrap any value in a chain, allowing to perform chained operations on\n\t   * the value.\n\t   *\n\t   * All methods available in the math.js library can be called upon the chain,\n\t   * and then will be evaluated with the value itself as first argument.\n\t   * The chain can be closed by executing chain.done(), which will return\n\t   * the final value.\n\t   *\n\t   * The Chain has a number of special functions:\n\t   * - done()             Finalize the chained operation and return the\n\t   *                      chain's value.\n\t   * - valueOf()          The same as done()\n\t   * - toString()         Returns a string representation of the chain's value.\n\t   *\n\t   * @param {*} [value]",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8538,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8544,
            "description": "Close the chain. Returns the final value.\nDoes the same as method valueOf()",
            "return": {
                "description": "value",
                "type": "*"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8553,
            "description": "Close the chain. Returns the final value.\nDoes the same as method done()",
            "return": {
                "description": "value",
                "type": "*"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8562,
            "description": "Get a string representation of the value in the chain",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8570,
            "description": "Create a proxy method for the chain",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to be proxied\n                          If fn is no function, it is silently ignored.",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8583,
            "description": "Create a proxy method for the chain",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "resolver",
                    "description": "The function resolving with the\n                             function to be proxied",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8601,
            "description": "Make a function chainable",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "chain function",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8618,
            "description": "Create a proxy for a single method, or an object with multiple methods.\nExample usage:\n\n  Chain.createProxy('add', function add (x, y) {...});\n  Chain.createProxy({\n    add:      function add (x, y) {...},\n    subtract: function subtract (x, y) {...}\n  }",
            "params": [
                {
                    "name": "arg0",
                    "description": "A name (string), or an object with\n                                functions",
                    "type": "String | Object"
                },
                {
                    "name": "arg1",
                    "description": "A function, when arg0 is a name",
                    "type": "*",
                    "optional": true
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8668,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8670,
            "description": "'use strict';\nvar formatNumber = __webpack_require__(6).format;\n\tvar formatBigNumber = __webpack_require__(24).format;\n/**\n\t * Test whether value is a string\n\t * @param {*} value\n\t * @return {boolean} isString",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8686,
            "description": "Check if a text ends with a certain string.",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "search",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8697,
            "description": "Format a value of any type into a string.\n\nUsage:\n    math.format(value)\n    math.format(value, precision)\n\nWhen value is a function:\n\n- When the function has a property `syntax`, it returns this\n  syntax description.\n- In other cases, a string `'function'` is returned.\n\nWhen `value` is an Object:\n\n- When the object contains a property `format` being a function, this\n  function is invoked as `value.format(options)` and the result is returned.\n- When the object has its own `toString` method, this method is invoked\n  and the result is returned.\n- In other cases the function will loop over all object properties and\n  return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n\nExample usage:\n    math.format(2/7);                // '0.2857142857142857'\n    math.format(math.pi, 3);         // '3.14'\n    math.format(new Complex(2, 3));  // '2 + 3i'\n    math.format('hello');            // '\"hello\"'",
            "params": [
                {
                    "name": "value",
                    "description": "Value to be stringified",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8788,
            "description": "Recursively format an n-dimensional matrix\nExample output: \"[[1, 2], [3, 4]]\"",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8817,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8819,
            "description": "/**\n\t * Convert a BigNumber to a formatted string representation.\n\t *\n\t * Syntax:\n\t *\n\t *    format(value)\n\t *    format(value, options)\n\t *    format(value, precision)\n\t *    format(value, fn)\n\t *\n\t * Where:\n\t *\n\t *    {number} value   The value to be formatted\n\t *    {Object} options An object with formatting options. Available options:\n\t *                     {string} notation\n\t *                         Number notation. Choose from:\n\t *                         'fixed'          Always use regular number notation.\n\t *                                          For example '123.40' and '14000000'\n\t *                         'exponential'    Always use exponential notation.\n\t *                                          For example '1.234e+2' and '1.4e+7'\n\t *                         'auto' (default) Regular number notation for numbers\n\t *                                          having an absolute value between\n\t *                                          `lower` and `upper` bounds, and uses\n\t *                                          exponential notation elsewhere.\n\t *                                          Lower bound is included, upper bound\n\t *                                          is excluded.\n\t *                                          For example '123.4' and '1.4e7'.\n\t *                     {number} precision   A number between 0 and 16 to round\n\t *                                          the digits of the number.\n\t *                                          In case of notations 'exponential' and\n\t *                                          'auto', `precision` defines the total\n\t *                                          number of significant digits returned\n\t *                                          and is undefined by default.\n\t *                                          In case of notation 'fixed',\n\t *                                          `precision` defines the number of\n\t *                                          significant digits after the decimal\n\t *                                          point, and is 0 by default.\n\t *                     {Object} exponential An object containing two parameters,\n\t *                                          {number} lower and {number} upper,\n\t *                                          used by notation 'auto' to determine\n\t *                                          when to return exponential notation.\n\t *                                          Default values are `lower=1e-3` and\n\t *                                          `upper=1e5`.\n\t *                                          Only applicable for notation `auto`.\n\t *    {Function} fn    A custom formatting function. Can be used to override the\n\t *                     built-in notations. Function `fn` is called with `value` as\n\t *                     parameter and must return a string. Is useful for example to\n\t *                     format all values inside a matrix in a particular way.\n\t *\n\t * Examples:\n\t *\n\t *    format(6.4);                                        // '6.4'\n\t *    format(1240000);                                    // '1.24e6'\n\t *    format(1/3);                                        // '0.3333333333333333'\n\t *    format(1/3, 3);                                     // '0.333'\n\t *    format(21385, 2);                                   // '21000'\n\t *    format(12.071, {notation: 'fixed'});                // '12'\n\t *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n\t *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n\t *\n\t * @param {BigNumber} value\n\t * @param {Object | Function | number} [options]\n\t * @return {string} str The formatted value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8976,
            "description": "Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "precision",
                    "description": "Number of digits in formatted output.\n                             If not provided, the maximum available digits\n                             is used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 8993,
            "description": "Format a number with fixed notation.",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "precision",
                    "description": "Optional number of decimals after the\n                                     decimal point. Zero by default.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9006,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9008,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Wrap any value in a chain, allowing to perform chained operations on\n\t   * the value.\n\t   *\n\t   * All methods available in the math.js library can be called upon the chain,\n\t   * and then will be evaluated with the value itself as first argument.\n\t   * The chain can be closed by executing `chain.done()`, which returns\n\t   * the final value.\n\t   *\n\t   * The chain has a number of special functions:\n\t   *\n\t   * - `done()`     Finalize the chain and return the chain's value.\n\t   * - `valueOf()`  The same as `done()`\n\t   * - `toString()` Executes `math.format()` onto the chain's value, returning\n\t   *                a string representation of the value.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.chain(value)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.chain(3)\n\t   *         .add(4)\n\t   *         .subtract(2)\n\t   *         .done();     // 5\n\t   *\n\t   *     math.chain( [[1, 2], [3, 4]] )\n\t   *         .subset(math.index(0, 0), 8)\n\t   *         .multiply(3)\n\t   *         .done();     // [[24, 6], [9, 12]]\n\t   *\n\t   * @param {*} [value]   A value of any type on which to start a chained operation.\n\t   * @return {math.type.Chain} The created chain",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9063,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9065,
            "description": "module.exports = [\n\t  // type\n\t  __webpack_require__(27),\n  // construction function\n\t  __webpack_require__(31)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9078,
            "description": "var Complex = __webpack_require__(28);\n\tvar format = __webpack_require__(6).format;\n\tvar isNumber = __webpack_require__(6).isNumber;\nfunction factory (type, config, load, typed, math) {\n  /**\n\t   * Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9093,
            "description": "Get a JSON representation of the complex number",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9118,
            "description": "Get a string representation of the complex number,\nwith optional formatting options.",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9177,
            "description": "Create a complex number from polar coordinates\n\nUsage:\n\n    Complex.fromPolar(r: number, phi: number) : Complex\n    Complex.fromPolar({r: number, phi: number}) : Complex",
            "params": [
                {
                    "name": "args...",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9223,
            "description": "Create a Complex number from a JSON object",
            "params": [
                {
                    "name": "json",
                    "description": "A JSON Object structured as\n                      {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n                      All properties are optional, default values\n                      for `re` and `im` are 0.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new Complex number",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9254,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9256,
            "description": "var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**\n\t * @license Complex.js v2.0.1 11/02/2016\n\t *\n\t * Copyright (c) 2016, Robert Eisele (robert@xarg.org)\n\t * Dual licensed under the MIT or GPL Version 2 licenses.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9265,
            "description": "This class allows the manipilation of complex numbers.\n You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\nObject form\n { re: <real>, im: <imaginary> }\n { arg: <angle>, abs: <radius> }\n { phi: <angle>, r: <radius> }\nDouble form\n 99.3 - Single double value\nString form\n \"23.1337\" - Simple real number\n \"15+3i\" - a simple complex number\n \"3-i\" - a simple complex number\nExample:\nvar c = new Complex(\"99.3+8i\");\n c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9308,
            "description": "Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9467,
            "is_constructor": 1,
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9488,
            "description": "Calculates the sign of a complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9502,
            "description": "Adds two complex numbers",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9516,
            "description": "Subtracts two complex numbers",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9530,
            "description": "Multiplies two complex numbers",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9549,
            "description": "Divides two complex numbers",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9597,
            "description": "Calculate the power of two complex numbers",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9663,
            "description": "Calculate the complex square root",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9695,
            "description": "Calculate the complex exponent",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9712,
            "description": "Calculate the natural log",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9731,
            "description": "Calculate the magniture of the complex number",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9754,
            "description": "Calculate the angle of the complex number",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9764,
            "description": "Calculate the sine of the complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9779,
            "description": "Calculate the cosine",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9794,
            "description": "Calculate the tangent",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9810,
            "description": "Calculate the cotangent",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9826,
            "description": "Calculate the secant",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9842,
            "description": "Calculate the cosecans",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9858,
            "description": "Calculate the complex arcus sinus",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9879,
            "description": "Calculate the complex arcus cosinus",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9900,
            "description": "Calculate the complex arcus tangent",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9930,
            "description": "Calculate the complex arcus cotangent",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9954,
            "description": "Calculate the complex arcus secant",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 9978,
            "description": "Calculate the complex arcus cosecans",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10002,
            "description": "Calculate the complex sinh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10017,
            "description": "Calculate the complex cosh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10032,
            "description": "Calculate the complex tanh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10048,
            "description": "Calculate the complex coth",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10064,
            "description": "Calculate the complex coth",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10080,
            "description": "Calculate the complex sech",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10096,
            "description": "Calculate the complex asinh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10117,
            "description": "Calculate the complex asinh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10138,
            "description": "Calculate the complex atanh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10170,
            "description": "Calculate the complex acoth",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10195,
            "description": "Calculate the complex acsch",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10223,
            "description": "Calculate the complex asech",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10247,
            "description": "Calculate the complex inverse 1/z",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10264,
            "description": "Returns the complex conjugate",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10274,
            "description": "Gets the negated complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10284,
            "description": "Ceils the actual complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10298,
            "description": "Floors the actual complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10312,
            "description": "Ceils the actual complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10326,
            "description": "Compares two complex numbers",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10339,
            "description": "Clones the actual object",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10349,
            "description": "Gets a string of the actual complex number",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10390,
            "description": "Returns the actual number as a vector",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10400,
            "description": "Returns the actual real value of the current object",
            "return": {
                "description": "",
                "type": "Number|null"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10413,
            "description": "Checks if the given complex number is not a number",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10444,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10446,
            "description": "module.exports = function(module) {\n\t\tif(!module.webpackPolyfill) {\n\t\t\tmodule.deprecate = function() {};\n\t\t\tmodule.paths = [];\n\t\t\t// module.parent = undefined by default\n\t\t\tmodule.children = [];\n\t\t\tmodule.webpackPolyfill = 1;\n\t\t}\n\t\treturn module;\n\t}\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10462,
            "description": "module.exports = function() { throw new Error(\"define cannot be used indirect\"); };\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10469,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Create a complex value or convert a value to a complex value.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.complex()                           // creates a complex value with zero\n\t   *                                              // as real and imaginary part.\n\t   *     math.complex(re : number, im : string)   // creates a complex value with provided\n\t   *                                              // values for real and imaginary part.\n\t   *     math.complex(re : number)                // creates a complex value with provided\n\t   *                                              // real value and zero imaginary part.\n\t   *     math.complex(complex : Complex)          // clones the provided complex value.\n\t   *     math.complex(arg : string)               // parses a string into a complex value.\n\t   *     math.complex(array : Array)              // converts the elements of the array\n\t   *                                              // or matrix element wise into a\n\t   *                                              // complex value.\n\t   *     math.complex({re: number, im: number})   // creates a complex value with provided\n\t   *                                              // values for real an imaginary part.\n\t   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n\t   *                                              // polar coordinates\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i\n\t   *    a.re = 5;                        // a = Complex 5 - 4i\n\t   *    var i = a.im;                    // Number -4;\n\t   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i\n\t   *    var c = math.complex();          // Complex 0 + 0i\n\t   *    var d = math.add(a, b);          // Complex 5 + 2i\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, index, matrix, number, string, unit\n\t   *\n\t   * @param {* | Array | Matrix} [args]\n\t   *            Arguments specifying the real and imaginary part of the complex number\n\t   * @return {Complex | Array | Matrix} Returns a complex value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10573,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10575,
            "description": "'use strict';\nexports.symbols = {\n\t  // GREEK LETTERS\n\t  Alpha: 'A',     alpha: '\\\\alpha',\n\t  Beta: 'B',      beta: '\\\\beta',\n\t  Gamma: '\\\\Gamma',    gamma: '\\\\gamma',\n\t  Delta: '\\\\Delta',    delta: '\\\\delta',\n\t  Epsilon: 'E',   epsilon: '\\\\epsilon',  varepsilon: '\\\\varepsilon',\n\t  Zeta: 'Z',      zeta: '\\\\zeta',\n\t  Eta: 'H',       eta: '\\\\eta',\n\t  Theta: '\\\\Theta',    theta: '\\\\theta',    vartheta: '\\\\vartheta',\n\t  Iota: 'I',      iota: '\\\\iota',\n\t  Kappa: 'K',     kappa: '\\\\kappa',    varkappa: '\\\\varkappa',\n\t  Lambda: '\\\\Lambda',   lambda: '\\\\lambda',\n\t  Mu: 'M',        mu: '\\\\mu',\n\t  Nu: 'N',        nu: '\\\\nu',\n\t  Xi: '\\\\Xi',       xi: '\\\\xi',\n\t  Omicron: 'O',   omicron: 'o',\n\t  Pi: '\\\\Pi',       pi: '\\\\pi',       varpi: '\\\\varpi',\n\t  Rho: 'P',       rho: '\\\\rho',      varrho: '\\\\varrho',\n\t  Sigma: '\\\\Sigma',    sigma: '\\\\sigma',    varsigma: '\\\\varsigma',\n\t  Tau: 'T',       tau: '\\\\tau',\n\t  Upsilon: '\\\\Upsilon',  upsilon: '\\\\upsilon',\n\t  Phi: '\\\\Phi',      phi: '\\\\phi',      varphi: '\\\\varphi',\n\t  Chi: 'X',       chi: '\\\\chi',\n\t  Psi: '\\\\Psi',      psi: '\\\\psi',\n\t  Omega: '\\\\Omega',    omega: '\\\\omega',\n\t  //logic\n\t  'true': '\\\\mathrm{True}',\n\t  'false': '\\\\mathrm{False}',\n\t  //other\n\t  i: 'i', //TODO use \\i ??\n\t  inf: '\\\\infty',\n\t  Inf: '\\\\infty',\n\t  infinity: '\\\\infty',\n\t  Infinity: '\\\\infty',\n\t  oo: '\\\\infty',\n\t  lim: '\\\\lim',\n\t  'undefined': '\\\\mathbf{?}'\n\t};\nexports.operators = {\n\t  'transpose': '^\\\\top',\n\t  'factorial': '!',\n\t  'pow': '^',\n\t  'dotPow': '.^\\\\wedge', //TODO find ideal solution\n\t  'unaryPlus': '+',\n\t  'unaryMinus': '-',\n\t  'bitNot': '~', //TODO find ideal solution\n\t  'not': '\\\\neg',\n\t  'multiply': '\\\\cdot',\n\t  'divide': '\\\\frac', //TODO how to handle that properly?\n\t  'dotMultiply': '.\\\\cdot', //TODO find ideal solution\n\t  'dotDivide': '.:', //TODO find ideal solution\n\t  'mod': '\\\\mod',\n\t  'add': '+',\n\t  'subtract': '-',\n\t  'to': '\\\\rightarrow',\n\t  'leftShift': '<<',\n\t  'rightArithShift': '>>',\n\t  'rightLogShift': '>>>',\n\t  'equal': '=',\n\t  'unequal': '\\\\neq',\n\t  'smaller': '<',\n\t  'larger': '>',\n\t  'smallerEq': '\\\\leq',\n\t  'largerEq': '\\\\geq',\n\t  'bitAnd': '\\\\&',\n\t  'bitXor': '\\\\underline{|}',\n\t  'bitOr': '|',\n\t  'and': '\\\\wedge',\n\t  'xor': '\\\\veebar',\n\t  'or': '\\\\vee'\n\t};\nexports.defaultTemplate = '\\\\mathrm{${name}}\\\\left(${args}\\\\right)';\nvar units = {\n\t  deg: '^\\\\circ'\n\t};\n//@param {string} name\n\t//@param {boolean} isUnit\n\texports.toSymbol = function (name, isUnit) {\n\t  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n\t  if (isUnit) {\n\t    if (units.hasOwnProperty(name)) {\n\t      return units[name];\n\t    }\n\t    return '\\\\mathrm{' + name + '}';\n\t  }\n  if (exports.symbols.hasOwnProperty(name)) {\n\t    return exports.symbols[name];\n\t  }\n\t  else if (name.indexOf('_') !== -1) {\n\t    //symbol with index (eg. alpha_1)\n\t    var index = name.indexOf('_');\n\t    return exports.toSymbol(name.substring(0, index)) + '_{'\n\t      + exports.toSymbol(name.substring(index + 1)) + '}';\n\t  }\n\t  return name;\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10685,
            "description": "module.exports = [\n\t  // type\n\t  __webpack_require__(34),\n  // construction function\n\t  __webpack_require__(36)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10698,
            "description": "var Fraction = __webpack_require__(35);\n/**\n\t * Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10708,
            "description": "Get a JSON representation of a Fraction containing type information",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10721,
            "description": "Instantiate a Fraction from a JSON object",
            "params": [
                {
                    "name": "json",
                    "description": "a JSON object structured as:\n                      `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "BigNumber"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10741,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10743,
            "description": "var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**\n\t * @license Fraction.js v3.3.1 09/09/2015\n\t * http://www.xarg.org/2014/03/precise-calculations-in-javascript/\n\t *\n\t * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n\t * Dual licensed under the MIT or GPL Version 2 licenses.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 10754,
            "description": "This class offers the possibility to calculate fractions.\n You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\nArray/Object form\n [ 0 => <nominator>, 1 => <denominator> ]\n [ n => <nominator>, d => <denominator> ]\nInteger form\n - Single integer value\nDouble form\n - Single double value\nString form\n 123.456 - a simple double\n 123/456 - a string fraction\n 123.'456' - a double with repeating decimal places\n 123.(456) - synonym\n 123.45'6' - a double with repeating last place\n 123.45(6) - synonym\nExample:\nvar f = new Fraction(\"9.4'31'\");\n f.mul([-4, 3]).div(4.9);",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11044,
            "description": "Module constructor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number|Fraction"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number="
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11070,
            "description": "Boolean global variable to be able to disable automatic reduction of the fraction",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11082,
            "description": "Calculates the absolute value\n\nEx: new Fraction(-4).abs() => 4",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11092,
            "description": "Inverts the sign of the current fraction\n\nEx: new Fraction(-4).neg() => 4",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11102,
            "description": "Adds two rational numbers\n\nEx: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11116,
            "description": "Subtracts two rational numbers\n\nEx: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11130,
            "description": "Multiplies two rational numbers\n\nEx: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11144,
            "description": "Divides two rational numbers\n\nEx: new Fraction(\"-17.(345)\").inverse().div(3)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11158,
            "description": "Clones the actual object\n\nEx: new Fraction(\"-17.(345)\").clone()",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11167,
            "description": "Calculates the modulo of two rational numbers - a more precise fmod\n\nEx: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11207,
            "description": "Calculates the fractional gcd of two rational numbers\n\nEx: new Fraction(5,8).gcd(3,7) => 1/56",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11221,
            "description": "Calculates the fractional lcm of two rational numbers\n\nEx: new Fraction(5,8).lcm(3,7) => 15",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11238,
            "description": "Calculates the ceil of a rational number\n\nEx: new Fraction('4.(3)').ceil() => (5 / 1)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11253,
            "description": "Calculates the floor of a rational number\n\nEx: new Fraction('4.(3)').floor() => (4 / 1)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11268,
            "description": "Rounds a rational numbers\n\nEx: new Fraction('4.(3)').round() => (4 / 1)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11283,
            "description": "Gets the inverse of the fraction, means numerator and denumerator are exchanged\n\nEx: new Fraction([-3, 4]).inverse() => -4 / 3",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11293,
            "description": "Calculates the fraction to some integer exponent\n\nEx: new Fraction(-1,2).pow(-3) => -8",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11307,
            "description": "Check if two rational numbers are the same\n\nEx: new Fraction(19.6).equals([98, 5]);",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11318,
            "description": "Check if two rational numbers are the same\n\nEx: new Fraction(19.6).equals([98, 5]);",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11330,
            "description": "Check if two rational numbers are divisible\n\nEx: new Fraction(19.6).divisible(1.5);",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11341,
            "description": "Returns a decimal representation of the fraction\n\nEx: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11351,
            "description": "Returns a string-fraction representation of a Fraction object\n\nEx: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11382,
            "description": "Returns a latex representation of a Fraction object\n\nEx: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11414,
            "description": "Returns an array of continued fraction elements\n\nEx: new Fraction(\"7/8\").toContinued() => [0,1,7]",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11436,
            "description": "Creates a string representation of a fraction with all digits\n\nEx: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11527,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11529,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a fraction convert a value to a fraction.\n\t   *\n\t   * Syntax:\n\t   *     math.fraction(numerator, denominator)\n\t   *     math.fraction({n: numerator, d: denominator})\n\t   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n\t   *                                                   into fractions\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.fraction(1, 3);\n\t   *     math.fraction('2/3');\n\t   *     math.fraction({n: 2, d: 3});\n\t   *     math.fraction([0.2, 0.25, 1.25]);\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, number, string, unit\n\t   *\n\t   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n\t   *            Arguments specifying the numerator and denominator of\n\t   *            the fraction\n\t   * @return {Fraction | Array | Matrix} Returns a fraction",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11602,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11604,
            "description": "module.exports = [\n\t  // types\n\t  __webpack_require__(38),\n\t  __webpack_require__(46),\n\t  __webpack_require__(47),\n\t  __webpack_require__(50),\n\t  __webpack_require__(59),\n\t  __webpack_require__(65),\n\t  __webpack_require__(66),\n\t  __webpack_require__(67),\n  // construction functions\n\t  __webpack_require__(68),\n\t  __webpack_require__(52),\n\t  __webpack_require__(69)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11626,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\nvar isString = string.isString;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * @constructor Matrix\n\t   *\n\t   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n\t   * array. A matrix can be constructed as:\n\t   *     var matrix = math.matrix(data)\n\t   *\n\t   * Matrix contains the functions to resize, get and set values, get the size,\n\t   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n\t   * Furthermore, one can iterate over the matrix using map and forEach.\n\t   * The internal Array of the Matrix can be accessed using the function valueOf.\n\t   *\n\t   * Example usage:\n\t   *     var matrix = math.matrix([[1, 2], [3, 4]]);\n\t   *     matix.size();              // [2, 2]\n\t   *     matrix.resize([3, 2], 5);\n\t   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]\n\t   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n\t   *",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11663,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11669,
            "description": "Get the Matrix storage constructor for the given format.",
            "params": [
                {
                    "name": "format",
                    "description": "The Matrix storage format.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Matrix storage constructor.",
                "type": "Function"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11695,
            "description": "Get the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "return": {
                "description": "The storage format.",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11708,
            "description": "Get the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "return": {
                "description": "The datatype.",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11721,
            "description": "Create a new Matrix With the type of the current matrix instance",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array | Object"
                },
                {
                    "name": "datatype",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11730,
            "description": "Get a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "",
                    "type": "Array | Matrix | *",
                    "optional": true
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11748,
            "description": "Get a single element from the matrix.",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "value",
                "type": "*"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11758,
            "description": "Replace a single element in the matrix.",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be left undefined.",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "self",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11772,
            "description": "Resize the matrix to the given size. Returns a copy of the matrix when \n`copy=true`, otherwise return the matrix itself (resize in place).",
            "params": [
                {
                    "name": "size",
                    "description": "The new size the matrix should have.",
                    "type": "Number[]"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries.\n                                 If not provided, the matrix elements will\n                                 be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "copy",
                    "description": "Return a resized copy of the matrix",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The resized matrix",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11789,
            "description": "Create a clone of the matrix",
            "return": {
                "description": "clone",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11798,
            "description": "Retrieve the size of the matrix.",
            "return": {
                "description": "size",
                "type": "Number[]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11807,
            "description": "Create a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                },
                {
                    "name": "skipZeros",
                    "description": "Invoke callback function for non-zero values only.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11822,
            "description": "Execute a callback function on each entry of the matrix.",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11833,
            "description": "Create an Array with a copy of the data of the Matrix",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11842,
            "description": "Get the primitive value of the Matrix: a multidimensional array",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11851,
            "description": "Get a string representation of the matrix, with optional formatting options.",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11864,
            "description": "Get a string representation of the matrix",
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11882,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11884,
            "description": "'use strict';\nexports.array = __webpack_require__(40);\n\texports['boolean'] = __webpack_require__(44);\n\texports['function'] = __webpack_require__(45);\n\texports.number = __webpack_require__(6);\n\texports.object = __webpack_require__(3);\n\texports.string = __webpack_require__(23);\n\texports.types = __webpack_require__(41);\n\texports.emitter = __webpack_require__(8);\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11900,
            "description": "'use strict';\nvar number = __webpack_require__(6);\n\tvar string = __webpack_require__(23);\n\tvar object = __webpack_require__(3);\n\tvar types = __webpack_require__(41);\nvar DimensionError = __webpack_require__(42);\n\tvar IndexError = __webpack_require__(43);\n/**\n\t * Calculate the size of a multi dimensional array.\n\t * This function checks the size of the first entry, it does not validate\n\t * whether all dimensions match. (use function `validate` for that)\n\t * @param {Array} x\n\t * @Return {Number[]} size",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11930,
            "description": "Recursively validate whether each element in a multi dimensional array\nhas a size corresponding to the provided size array.",
            "params": [
                {
                    "name": "array",
                    "description": "Array to be validated",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "Array with the size of each dimension",
                    "type": "Number[]"
                },
                {
                    "name": "dim",
                    "description": "Current dimension",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "DimensionError"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11968,
            "description": "Validate whether each element in a multi dimensional array has\na size corresponding to the provided size array.",
            "params": [
                {
                    "name": "array",
                    "description": "Array to be validated",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "Array with the size of each dimension",
                    "type": "Number[]"
                }
            ],
            "throws": {
                "description": "DimensionError"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 11989,
            "description": "Test whether index is an integer number with index >= 0 and index < length\nwhen length is provided",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "Length of the array",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12007,
            "description": "Resize a multi dimensional array. The resized array is returned.",
            "params": [
                {
                    "name": "array",
                    "description": "Array to be resized",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "Array with the size of each dimension",
                    "type": "Array.<number>"
                },
                {
                    "name": "defaultValue",
                    "description": "Value to be filled in in new entries,\n                             zero by default. To leave new entries undefined,\n                             specify array.UNINITIALIZED as defaultValue",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "array         The resized array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12042,
            "description": "Recursively resize a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "Array to be resized",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "Array with the size of each dimension",
                    "type": "Number[]"
                },
                {
                    "name": "dim",
                    "description": "Current dimension",
                    "type": "Number"
                },
                {
                    "name": "defaultValue",
                    "description": "Value to be filled in in new entries,\n                             undefined by default.",
                    "type": "*",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12105,
            "description": "Squeeze a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "returns the array itself",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12135,
            "description": "Recursively squeeze a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dims",
                    "description": "Required number of dimensions",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "Current dimension",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the squeezed array",
                "type": "Array | *"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12161,
            "description": "Unsqueeze a multi dimensional array: add dimensions when missing\n\nParamter `size` will be mutated to match the new, unqueezed matrix size.",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dims",
                    "description": "Desired number of dimensions of the array",
                    "type": "Number"
                },
                {
                    "name": "outer",
                    "description": "Number of outer dimensions to be added",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "size",
                    "description": "Current size of array.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "returns the array itself",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12193,
            "description": "Recursively unsqueeze a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dims",
                    "description": "Required number of dimensions",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "Current dimension",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the squeezed array",
                "type": "Array | *"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12218,
            "description": "Flatten a multi dimensional array, put all elements in a one dimensional\narray",
            "params": [
                {
                    "name": "array",
                    "description": "A multi dimensional array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The flattened array (1 dimensional)",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12243,
            "description": "Test whether an object is an array",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "isArray",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12251,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12253,
            "description": "'use strict';\n/**\n\t * Determine the type of a variable\n\t *\n\t *     type(x)\n\t *\n\t * The following types are recognized:\n\t *\n\t *     'undefined'\n\t *     'null'\n\t *     'boolean'\n\t *     'number'\n\t *     'string'\n\t *     'Array'\n\t *     'Function'\n\t *     'Date'\n\t *     'RegExp'\n\t *     'Object'\n\t *\n\t * @param {*} x\n\t * @return {string} Returns the name of the type. Primitive types are lower case,\n\t *                  non-primitive types are upper-camel-case.\n\t *                  For example 'number', 'string', 'Array', 'Date'.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12300,
            "description": "Test whether a value is a scalar",
            "params": [
                {
                    "name": "x",
                    "description": ""
                }
            ],
            "return": {
                "description": "Returns true when x is a scalar, returns false when\n                  x is a Matrix or Array.",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12311,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12313,
            "description": "'use strict';\n/**\n\t * Create a range error with the message:\n\t *     'Dimension mismatch (<actual size> != <expected size>)'\n\t * @param {number | number[]} actual        The actual size\n\t * @param {number | number[]} expected      The expected size\n\t * @param {string} [relation='!=']          Optional relation between actual\n\t *                                          and expected size: '!=', '<', etc.\n\t * @extends RangeError",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12352,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12354,
            "description": "'use strict';\n/**\n\t * Create a range error with the message:\n\t *     'Index out of range (index < min)'\n\t *     'Index out of range (index < max)'\n\t *\n\t * @param {number} index     The actual index\n\t * @param {number} [min=0]   Minimum index (included)\n\t * @param {number} [max]     Maximum index (excluded)\n\t * @extends RangeError",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12404,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12406,
            "description": "'use strict';\n/**\n\t * Test whether value is a boolean\n\t * @param {*} value\n\t * @return {boolean} isBoolean",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12420,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12422,
            "description": "// function utils\n/*\n\t * Memoize a given function by caching the computed result.\n\t * The cache of a memoized function can be cleared by deleting the `cache`\n\t * property of the function.\n\t *\n\t * @param {function} fn                     The function to be memoized.\n\t *                                          Must be a pure function.\n\t * @param {function(args: Array)} [hasher]  A custom hash builder.\n\t *                                          Is JSON.stringify by default.\n\t * @return {function}                       Returns the memoized function",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12456,
            "description": "Find the maximum number of arguments expected by a typed function.",
            "params": [
                {
                    "name": "fn",
                    "description": "A typed function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the maximum number of expected arguments.\n                 Returns -1 when no signatures where found on the function.",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12471,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12473,
            "description": "'use strict';\nvar util = __webpack_require__(39);\n\tvar DimensionError = __webpack_require__(42);\nvar string = util.string;\n\tvar array = util.array;\n\tvar object = util.object;\n\tvar number = util.number;\nvar isArray = Array.isArray;\n\tvar isNumber = number.isNumber;\n\tvar isInteger = number.isInteger;\n\tvar isString = string.isString;\nvar validateIndex = array.validateIndex;\nfunction factory (type, config, load, typed) {\n\t  var Matrix = load(__webpack_require__(38)); // force loading Matrix (do not use via type.Matrix)\n  /**\n\t   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n\t   * @class DenseMatrix",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12550,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12556,
            "description": "Get the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "memberof": "DenseMatrix",
            "return": {
                "description": "The storage format.",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12569,
            "description": "Get the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "memberof": "DenseMatrix",
            "return": {
                "description": "The datatype.",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12582,
            "description": "Create a new DenseMatrix",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "datatype",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12592,
            "description": "Get a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "",
                    "type": "Array | DenseMatrix | *",
                    "optional": true
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12621,
            "description": "Get a single element from the matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "value",
                "type": "*"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12647,
            "description": "Replace a single element in the matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be left undefined.",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "self",
                "type": "DenseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12687,
            "description": "Get a submatrix of this matrix",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "DenseMatrix"
                },
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Index"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12725,
            "description": "Recursively get a submatrix of a multi dimensional matrix.\nIndex is not checked for correct number or length of dimensions.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "dims",
                    "description": "Total number of dimensions",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "Current dimension",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "submatrix",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12753,
            "description": "Replace a submatrix in this matrix\nIndexes are zero-based.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "DenseMatrix"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "submatrix",
                    "description": "",
                    "type": "DenseMatrix | Array | *"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "DenseMatrix"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12838,
            "description": "Replace a submatrix of a multi dimensional matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "submatrix",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dims",
                    "description": "Total number of dimensions",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12866,
            "description": "Resize the matrix to the given size. Returns a copy of the matrix when\n`copy=true`, otherwise return the matrix itself (resize in place).",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "size",
                    "description": "The new size the matrix should have.",
                    "type": "Number[]"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries.\n                                 If not provided, the matrix elements will\n                                 be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "copy",
                    "description": "Return a resized copy of the matrix",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The resized matrix",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12908,
            "description": "Enlarge the matrix when it is smaller than given size.\nIf the matrix is larger or equal sized, nothing is done.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "The matrix to be resized",
                    "type": "DenseMatrix"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number[]"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries.",
                    "type": "*"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12941,
            "description": "Create a clone of the matrix",
            "memberof": "DenseMatrix",
            "return": {
                "description": "clone",
                "type": "DenseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12955,
            "description": "Retrieve the size of the matrix.",
            "memberof": "DenseMatrix",
            "return": {
                "description": "size",
                "type": "Number[]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12964,
            "description": "Create a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "DenseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 12995,
            "description": "Execute a callback function on each entry of the matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13018,
            "description": "Create an Array with a copy of the data of the DenseMatrix",
            "memberof": "DenseMatrix",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13027,
            "description": "Get the primitive value of the DenseMatrix: a multidimensional array",
            "memberof": "DenseMatrix",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13036,
            "description": "Get a string representation of the matrix, with optional formatting options.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13049,
            "description": "Get a string representation of the matrix",
            "memberof": "DenseMatrix",
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13058,
            "description": "Get a JSON representation of the matrix",
            "memberof": "DenseMatrix",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13072,
            "description": "Get the kth Matrix diagonal.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "k",
                    "description": "The kth diagonal where the vector will retrieved.",
                    "type": "Number | BigNumber",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The array vector with the diagonal values.",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13122,
            "description": "Create a diagonal matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "size",
                    "description": "The matrix size.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The values for the diagonal.",
                    "type": "Number | Array"
                },
                {
                    "name": "k",
                    "description": "The kth diagonal where the vector will be filled in.",
                    "type": "Number | BigNumber",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "defaultValue",
                    "description": "The default value for non-diagonal",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DenseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13247,
            "description": "Generate a matrix from a JSON object",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "json",
                    "description": "An object structured like\n                      `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n                      where mathjs is optional",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DenseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13259,
            "description": "Swap rows i and j in Matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "i",
                    "description": "Matrix row index 1",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "Matrix row index 2",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The matrix reference",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13287,
            "description": "Swap rows i and j in Dense Matrix data structure.",
            "params": [
                {
                    "name": "i",
                    "description": "Matrix row index 1",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "Matrix row index 2",
                    "type": "Number"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13300,
            "description": "Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\nMatrices. Replaces all nested Matrices with Arrays",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "data",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13334,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13336,
            "description": "'use strict';\nvar util = __webpack_require__(39);\n\tvar DimensionError = __webpack_require__(42);\nvar array = util.array;\n\tvar object = util.object;\n\tvar string = util.string;\n\tvar number = util.number;\nvar isArray = Array.isArray;\n\tvar isNumber = number.isNumber;\n\tvar isInteger = number.isInteger;\n\tvar isString = string.isString;\nvar validateIndex = array.validateIndex;\nfunction factory (type, config, load, typed) {\n\t  var Matrix = load(__webpack_require__(38)); // force loading Matrix (do not use via type.Matrix)\n\t  var equalScalar = load(__webpack_require__(48));\n  /**\n\t   * Sparse Matrix implementation. This type implements a Compressed Column Storage format\n\t   * for sparse matrices.\n\t   * @class SparseMatrix",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13493,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13499,
            "description": "Get the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "memberof": "SparseMatrix",
            "return": {
                "description": "The storage format.",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13512,
            "description": "Get the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "memberof": "SparseMatrix",
            "return": {
                "description": "The datatype.",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13525,
            "description": "Create a new SparseMatrix",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "datatype",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13535,
            "description": "Get the matrix density.\n\nUsage:\n    var density = matrix.density()                   // retrieve matrix density",
            "memberof": "SparseMatrix",
            "return": {
                "description": "The matrix density.",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13552,
            "description": "Get a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "",
                    "type": "Array | Maytrix | *",
                    "optional": true
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13751,
            "description": "Get a single element from the matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "value",
                "type": "*"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13784,
            "description": "Replace a single element in the matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be set to zero.",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "self",
                "type": "SparseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 13892,
            "description": "Resize the matrix to the given size. Returns a copy of the matrix when \n`copy=true`, otherwise return the matrix itself (resize in place).",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "size",
                    "description": "The new size the matrix should have.",
                    "type": "Number[]"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries.\n                                 If not provided, the matrix elements will\n                                 be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "copy",
                    "description": "Return a resized copy of the matrix",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The resized matrix",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14046,
            "description": "Create a clone of the matrix",
            "memberof": "SparseMatrix",
            "return": {
                "description": "clone",
                "type": "SparseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14062,
            "description": "Retrieve the size of the matrix.",
            "memberof": "SparseMatrix",
            "return": {
                "description": "size",
                "type": "Number[]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14071,
            "description": "Create a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                },
                {
                    "name": "skipZeros",
                    "description": "Invoke callback function for non-zero values only.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "matrix",
                "type": "SparseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14100,
            "description": "Create a new matrix with the results of the callback function executed on the interval\n[minRow..maxRow, minColumn..maxColumn].",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14177,
            "description": "Execute a callback function on each entry of the matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                },
                {
                    "name": "skipZeros",
                    "description": "Invoke callback function for non-zero values only.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14225,
            "description": "Create an Array with a copy of the data of the SparseMatrix",
            "memberof": "SparseMatrix",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14234,
            "description": "Get the primitive value of the SparseMatrix: a two dimensions array",
            "memberof": "SparseMatrix",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14274,
            "description": "Get a string representation of the matrix, with optional formatting options.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14307,
            "description": "Get a string representation of the matrix",
            "memberof": "SparseMatrix",
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14316,
            "description": "Get a JSON representation of the matrix",
            "memberof": "SparseMatrix",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14332,
            "description": "Get the kth Matrix diagonal.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "k",
                    "description": "The kth diagonal where the vector will retrieved.",
                    "type": "Number | BigNumber",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The matrix vector with the diagonal values.",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14403,
            "description": "Generate a matrix from a JSON object",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "json",
                    "description": "An object structured like\n                      `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n                      where mathjs is optional",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "SparseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14415,
            "description": "Create a diagonal matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "size",
                    "description": "The matrix size.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The values for the diagonal.",
                    "type": "Number | Array | Matrix"
                },
                {
                    "name": "k",
                    "description": "The kth diagonal where the vector will be filled in.",
                    "type": "Number | BigNumber",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "datatype",
                    "description": "The Matrix datatype, values must be of this datatype.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "SparseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14556,
            "description": "Swap rows i and j in Matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "i",
                    "description": "Matrix row index 1",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "Matrix row index 2",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The matrix reference",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14584,
            "description": "Loop rows with data in column j.",
            "params": [
                {
                    "name": "j",
                    "description": "Column",
                    "type": "Number"
                },
                {
                    "name": "values",
                    "description": "Matrix values",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "Matrix row indeces",
                    "type": "Array"
                },
                {
                    "name": "ptr",
                    "description": "Matrix column pointers",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Callback function invoked for every row in column j",
                    "type": "Function"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14604,
            "description": "Swap rows x and y in Sparse Matrix data structures.",
            "params": [
                {
                    "name": "x",
                    "description": "Matrix row index 1",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Matrix row index 2",
                    "type": "Number"
                },
                {
                    "name": "columns",
                    "description": "Number of columns in matrix",
                    "type": "Number"
                },
                {
                    "name": "values",
                    "description": "Matrix values",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "Matrix row indeces",
                    "type": "Array"
                },
                {
                    "name": "ptr",
                    "description": "Matrix column pointers",
                    "type": "Array"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14678,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14680,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t  \n\t  /**\n\t   * Test whether two values are equal.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n\t   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n\t   * @private",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14737,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14739,
            "description": "'use strict';\n/**\n\t * Compares two BigNumbers.\n\t * @param {BigNumber} x       First value to compare\n\t * @param {BigNumber} y       Second value to compare\n\t * @param {number} [epsilon]  The maximum relative difference between x and y\n\t *                            If epsilon is undefined or null, the function will\n\t *                            test whether x and y are exactly equal.\n\t * @return {boolean} whether the two numbers are nearly equal",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14788,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14790,
            "description": "'use strict';\nfunction factory (type, config, load) {\n\t  \n\t  var add = load(__webpack_require__(51));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  \n\t  /**\n\t   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array \n\t   * of the vector elements and an ordered list of non-zero elements.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14812,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14818,
            "description": "Set the value for index i.",
            "params": [
                {
                    "name": "i",
                    "description": "The index",
                    "type": "Number"
                },
                {
                    "name": "The",
                    "description": "value at index i",
                    "type": "Number | BigNumber | Complex"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14935,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 14937,
            "description": "'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var latex = __webpack_require__(32);\n\t  \n\t  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm04 = load(__webpack_require__(55));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Add two or more values, `x + y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.add(x, y)\n\t   *    math.add(x, y, z, ...)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.add(2, 3);               // returns number 5\n\t   *    math.add(2, 3, 4);            // returns number 9\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    var b = math.complex(-4, 1);\n\t   *    math.add(a, b);               // returns Complex -2 + 4i\n\t   *\n\t   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\t   *\n\t   *    var c = math.unit('5 cm');\n\t   *    var d = math.unit('2.1 mm');\n\t   *    math.add(c, d);               // returns Unit 52.1 mm\n\t   *\n\t   *    math.add(\"2.3\", \"4\");         // returns number 6.3\n\t   *\n\t   * See also:\n\t   *\n\t   *    subtract, sum\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15105,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15107,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a Matrix. The function creates a new `math.type.Matrix` object from\n\t   * an `Array`. A Matrix has utility functions to manipulate the data in the\n\t   * matrix, like getting the size and getting or setting values in the matrix.\n\t   * Supported storage formats are 'dense' and 'sparse'.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n\t   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n\t   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n\t   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n\t   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n\t   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var m = math.matrix([[1, 2], [3, 4]]);\n\t   *    m.size();                        // Array [2, 2]\n\t   *    m.resize([3, 2], 5);\n\t   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n\t   *    m.get([1, 0])                    // number 3\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, number, string, unit, sparse\n\t   *\n\t   * @param {Array | Matrix} [data]    A multi dimensional array\n\t   * @param {string} [format]          The Matrix storage format\n\t   *\n\t   * @return {Matrix} The created matrix",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15178,
            "description": "Create a new Matrix with given storage format",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "datatype",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new Matrix",
                "type": "Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15199,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15201,
            "description": "'use strict';\nfunction factory(type, config, load, typed) {\n  /**\n\t   * Add two scalar values, `x + y`.\n\t   * This function is meant for internal use: it is used by the public function\n\t   * `add`\n\t   *\n\t   * This function does not support collections (Array or Matrix), and does\n\t   * not validate the number of of inputs.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n\t   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`\n\t   * @private",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15256,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15258,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n\t   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n\t   *\n\t   *\n\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤\n\t   *          └  Dij          ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15376,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15378,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n\t   *          └  B(i,j)       ; B(i,j) !== 0\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15569,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15571,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t   * Callback function invoked NZ times (number of nonzero items in S).\n\t   *\n\t   *\n\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  b          ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15685,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15687,
            "description": "'use strict';\nvar util = __webpack_require__(39);\n\tvar DimensionError = __webpack_require__(42);\nvar string = util.string,\n\t    isString = string.isString;\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   * C(i,j,...z) = f(Aij..z, Bij..z)\n\t   *\n\t   * @param {Matrix}   a                 The DenseMatrix instance (A)\n\t   * @param {Matrix}   b                 The DenseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15795,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15797,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   * C(i,j,...z) = f(Aij..z, b)\n\t   *\n\t   * @param {Matrix}   a                 The DenseMatrix instance (A)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15883,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15885,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  \n\t  var smaller = load(__webpack_require__(60));\n\t  var larger = load(__webpack_require__(64));\n\t  \n\t  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\t  \n\t  /**\n\t   * Fibonacci Heap implementation, used interally for Matrix math.\n\t   * @class FibonacciHeap\n\t   * @constructor FibonacciHeap",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15910,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15916,
            "description": "Inserts a new data element into the heap. No heap consolidation is\nperformed at this time, the new node is simply inserted into the root\nlist of this heap. Running time: O(1) actual.",
            "memberof": "FibonacciHeap",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15957,
            "description": "Returns the number of nodes in heap. Running time: O(1) actual.",
            "memberof": "FibonacciHeap",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15965,
            "description": "Removes all elements from this heap.",
            "memberof": "FibonacciHeap",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15974,
            "description": "Returns true if the heap is empty, otherwise false.",
            "memberof": "FibonacciHeap",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 15982,
            "description": "Extracts the node with minimum key from heap. Amortized running \ntime: O(log n).",
            "memberof": "FibonacciHeap",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16038,
            "description": "Removes a node from the heap given the reference to the node. The trees\nin the heap will be consolidated, if necessary. This operation may fail\nto remove the correct element if there are nodes with key value -Infinity.\nRunning time: O(log n) amortized.",
            "memberof": "FibonacciHeap",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16052,
            "description": "Decreases the key value for a heap node, given the new value to take on.\nThe structure of the heap may be changed and will not be consolidated. \nRunning time: O(1) amortized.",
            "memberof": "FibonacciHeap",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16076,
            "description": "The reverse of the link operation: removes node from the child list of parent.\nThis method assumes that min is non-null. Running time: O(1).",
            "memberof": "FibonacciHeap",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16103,
            "description": "Performs a cascading cut operation. This cuts node from its parent and then\ndoes the same for its parent, and so on up the tree.\nRunning time: O(log n); O(1) excluding the recursion.",
            "memberof": "FibonacciHeap",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16127,
            "description": "Make the first node a child of the second one. Running time: O(1) actual.",
            "memberof": "FibonacciHeap",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16238,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16240,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether value x is smaller than y.\n\t   *\n\t   * The function returns true when x is smaller than y and the relative\n\t   * difference between x and y is smaller than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.smaller(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.smaller(2, 3);            // returns true\n\t   *    math.smaller(5, 2 * 2);        // returns false\n\t   *\n\t   *    var a = math.unit('5 cm');\n\t   *    var b = math.unit('2 inch');\n\t   *    math.smaller(a, b);            // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16423,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16425,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n\t   * Callback function invoked M*N times.\n\t   *\n\t   *\n\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤\n\t   *          └  f(Dij, 0)    ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16554,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16556,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   * C(i,j) = f(Aij, Bij)\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16684,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16686,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   *\n\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  f(0, b)    ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16800,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16802,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether value x is larger than y.\n\t   *\n\t   * The function returns true when x is larger than y and the relative\n\t   * difference between x and y is larger than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.larger(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.larger(2, 3);             // returns false\n\t   *    math.larger(5, 2 + 2);         // returns true\n\t   *\n\t   *    var a = math.unit('5 cm');\n\t   *    var b = math.unit('2 inch');\n\t   *    math.larger(a, b);             // returns false\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, smallerEq, largerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16985,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 16987,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\n\tvar object = util.object;\nvar isArray = Array.isArray;\n\tvar isString = string.isString;\nfunction factory (type, config, load) {\n  var DenseMatrix = load(__webpack_require__(46));\n  var smaller = load(__webpack_require__(60));\n  function ImmutableDenseMatrix(data, datatype) {\n\t    if (!(this instanceof ImmutableDenseMatrix))\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    if (datatype && !isString(datatype))\n\t      throw new Error('Invalid datatype: ' + datatype);\n    if ((data && data.isMatrix === true) || isArray(data)) {\n\t      // use DenseMatrix implementation\n\t      var matrix = new DenseMatrix(data, datatype);\n\t      // internal structures\n\t      this._data = matrix._data;\n\t      this._size = matrix._size;\n\t      this._datatype = matrix._datatype;\n\t      this._min = null;\n\t      this._max = null;\n\t    }\n\t    else if (data && isArray(data.data) && isArray(data.size)) {\n\t      // initialize fields from JSON representation\n\t      this._data = data.data;\n\t      this._size = data.size;\n\t      this._datatype = data.datatype;\n\t      this._min = typeof data.min !== 'undefined' ? data.min : null;\n\t      this._max = typeof data.max !== 'undefined' ? data.max : null;\n\t    }\n\t    else if (data) {\n\t      // unsupported type\n\t      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n\t    }\n\t    else {\n\t      // nothing provided\n\t      this._data = [];\n\t      this._size = [0];\n\t      this._datatype = datatype;\n\t      this._min = null;\n\t      this._max = null;\n\t    }\n\t  }\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n  /**\n\t   * Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17051,
            "description": "Get a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "",
                    "type": "Array | ImmutableDenseMatrix | *",
                    "optional": true
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17090,
            "description": "Replace a single element in the matrix.",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be left undefined.",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "self",
                "type": "ImmutableDenseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17103,
            "description": "Resize the matrix to the given size. Returns a copy of the matrix when\n`copy=true`, otherwise return the matrix itself (resize in place).",
            "params": [
                {
                    "name": "size",
                    "description": "The new size the matrix should have.",
                    "type": "Number[]"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries.\n                                 If not provided, the matrix elements will\n                                 be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "copy",
                    "description": "Return a resized copy of the matrix",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The resized matrix",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17119,
            "description": "Create a clone of the matrix",
            "return": {
                "description": "clone",
                "type": "ImmutableDenseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17132,
            "description": "Get a JSON representation of the matrix",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17145,
            "description": "Generate a matrix from a JSON object",
            "params": [
                {
                    "name": "json",
                    "description": "An object structured like\n                      `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n                      where mathjs is optional",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "ImmutableDenseMatrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17156,
            "description": "Swap rows i and j in Matrix.",
            "params": [
                {
                    "name": "i",
                    "description": "Matrix row index 1",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "Matrix row index 2",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The matrix reference",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17168,
            "description": "Calculate the minimum value in the set",
            "return": {
                "description": "min",
                "type": "Number | undefined"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17187,
            "description": "Calculate the maximum value in the set",
            "return": {
                "description": "max",
                "type": "Number | undefined"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17215,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17217,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type) {\n\t  \n\t  /**\n\t   * Create an index. An Index can store ranges and sets for multiple dimensions.\n\t   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n\t   *\n\t   * Usage:\n\t   *     var index = new Index(range1, range2, matrix1, array1, ...);\n\t   *\n\t   * Where each parameter can be any of:\n\t   *     A number\n\t   *     A string (containing a name of an object property)\n\t   *     An instance of Range\n\t   *     An Array with the Set values\n\t   *     A Matrix with the Set values\n\t   *\n\t   * The parameters start, end, and step must be integer numbers.\n\t   *\n\t   * @class Index\n\t   * @Constructor Index\n\t   * @param {...*} ranges",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17286,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17303,
            "description": "Create a clone of the index",
            "memberof": "Index",
            "return": {
                "description": "clone",
                "type": "Index"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17315,
            "description": "Create an index from an array with ranges/numbers",
            "memberof": "Index",
            "params": [
                {
                    "name": "ranges",
                    "description": "",
                    "type": "Array.<Array | number>"
                }
            ],
            "return": {
                "description": "index",
                "type": "Index"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17328,
            "description": "Retrieve the size of the index, the number of elements for each dimension.",
            "memberof": "Index",
            "return": {
                "description": "size",
                "type": "Number[]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17344,
            "description": "Get the maximum value for each of the indexes ranges.",
            "memberof": "Index",
            "return": {
                "description": "max",
                "type": "Number[]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17360,
            "description": "Get the minimum value for each of the indexes ranges.",
            "memberof": "Index",
            "return": {
                "description": "min",
                "type": "Number[]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17376,
            "description": "Loop over each of the ranges of the index",
            "memberof": "Index",
            "params": [
                {
                    "name": "callback",
                    "description": "Called for each range with a Range as first\n                             argument, the dimension as second, and the\n                             index object as third.",
                    "type": "Function"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17389,
            "description": "Retrieve the dimension for the given index",
            "memberof": "Index",
            "params": [
                {
                    "name": "dim",
                    "description": "Number of the dimension",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "range",
                "type": "Range | null"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17399,
            "description": "Test whether this index contains an object property",
            "return": {
                "description": "Returns true if the index is an object property",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17407,
            "description": "Returns the object property name when the Index holds a single object property,\nelse returns null",
            "return": {
                "description": "",
                "type": "String | null"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17416,
            "description": "Test whether this index contains only a single value.\n\nThis is the case when the index is created with only scalar values as ranges,\nnot for ranges resolving into a single value.",
            "memberof": "Index",
            "return": {
                "description": "isScalar",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17428,
            "description": "Expand the Index into an array.\nFor example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]",
            "memberof": "Index",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17443,
            "description": "Get the primitive value of the Index, a two dimensional array.\nEquivalent to Index.toArray().",
            "memberof": "Index",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17451,
            "description": "Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'",
            "memberof": "Index",
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17472,
            "description": "Get a JSON representation of the Index",
            "memberof": "Index",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17485,
            "description": "Instantiate an Index from a JSON object",
            "memberof": "Index",
            "params": [
                {
                    "name": "json",
                    "description": "A JSON object structured as:\n                    `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Index"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17504,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17506,
            "description": "'use strict';\nvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a range. A range has a start, step, and end, and contains functions\n\t   * to iterate over the range.\n\t   *\n\t   * A range can be constructed as:\n\t   *     var range = new Range(start, end);\n\t   *     var range = new Range(start, end, step);\n\t   *\n\t   * To get the result of the range:\n\t   *     range.forEach(function (x) {\n\t   *         console.log(x);\n\t   *     });\n\t   *     range.map(function (x) {\n\t   *         return math.sin(x);\n\t   *     });\n\t   *     range.toArray();\n\t   *\n\t   * Example usage:\n\t   *     var c = new Range(2, 6);         // 2:1:5\n\t   *     c.toArray();                     // [2, 3, 4, 5]\n\t   *     var d = new Range(2, -3, -1);    // 2:-1:-2\n\t   *     d.toArray();                     // [2, 1, 0, -1, -2]\n\t   *\n\t   * @class Range\n\t   * @constructor Range\n\t   * @param {number} start  included lower bound\n\t   * @param {number} end    excluded upper bound\n\t   * @param {number} [step] step size, default value is 1",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17571,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17577,
            "description": "Parse a string into a range,\nThe string contains the start, optional step, and end, separated by a colon.\nIf the string does not contain a valid range, null is returned.\nFor example str='0:2:11'.",
            "memberof": "Range",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "range",
                "type": "Range | null"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17613,
            "description": "Create a clone of the range",
            "return": {
                "description": "clone",
                "type": "Range"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17621,
            "description": "Retrieve the size of the range.\nReturns an array containing one number, the number of elements in the range.",
            "memberof": "Range",
            "return": {
                "description": "size",
                "type": "Number[]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17647,
            "description": "Calculate the minimum value in the range",
            "memberof": "Range",
            "return": {
                "description": "min",
                "type": "Number | undefined"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17670,
            "description": "Calculate the maximum value in the range",
            "memberof": "Range",
            "return": {
                "description": "max",
                "type": "Number | undefined"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17694,
            "description": "Execute a callback function for each value in the range.",
            "memberof": "Range",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback method is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Range being traversed.",
                    "type": "Function"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17723,
            "description": "Execute a callback function for each value in the Range, and return the\nresults as an array",
            "memberof": "Range",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback method is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17740,
            "description": "Create an Array with a copy of the Ranges data",
            "memberof": "Range",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17753,
            "description": "Get the primitive value of the Range, a one dimensional array",
            "memberof": "Range",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17763,
            "description": "Get a string representation of the range, with optional formatting options.\nOutput is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'",
            "memberof": "Range",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17783,
            "description": "Get a string representation of the range.",
            "memberof": "Range",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17792,
            "description": "Get a JSON representation of the range",
            "memberof": "Range",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17807,
            "description": "Instantiate a Range from a JSON object",
            "memberof": "Range",
            "params": [
                {
                    "name": "json",
                    "description": "A JSON object structured as:\n                     `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17826,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17828,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create an index. An Index can store ranges having start, step, and end\n\t   * for multiple dimensions.\n\t   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.index(range1, range2, ...)\n\t   *\n\t   * Where each range can be any of:\n\t   *\n\t   * - A number\n\t   * - A string for getting/setting an object property\n\t   * - An instance of `Range`\n\t   * - A one-dimensional Array or a Matrix with numbers\n\t   *\n\t   * Indexes must be zero-based, integer numbers.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var math = math.js\n\t   *\n\t   *    var b = [1, 2, 3, 4, 5];\n\t   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]\n\t   *\n\t   *    var a = math.matrix([[1, 2], [3, 4]]);\n\t   *    a.subset(math.index(0, 1));             // returns 2\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, matrix, number, string, unit\n\t   *\n\t   * @param {...*} ranges   Zero or more ranges or numbers.\n\t   * @return {Index}        Returns the created index",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17896,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17898,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from\n\t   * an `Array`. A Matrix has utility functions to manipulate the data in the\n\t   * matrix, like getting the size and getting or setting values in the matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sparse()               // creates an empty sparse matrix.\n\t   *    math.sparse(data)           // creates a sparse matrix with initial data.\n\t   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var m = math.sparse([[1, 2], [3, 4]]);\n\t   *    m.size();                        // Array [2, 2]\n\t   *    m.resize([3, 2], 5);\n\t   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n\t   *    m.get([1, 0])                    // number 3\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, number, string, unit, matrix\n\t   *\n\t   * @param {Array | Matrix} [data]    A two dimensional array\n\t   *\n\t   * @return {Matrix} The created matrix",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17963,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 17965,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a number or convert a string, boolean, or unit to a number.\n\t   * When value is a matrix, all elements will be converted to number.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.number(value)\n\t   *    math.number(unit, valuelessUnit)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.number(2);                         // returns number 2\n\t   *    math.number('7.2');                     // returns number 7.2\n\t   *    math.number(true);                      // returns number 1\n\t   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]\n\t   *    math.number(math.unit('52cm'), 'm');    // returns 0.52\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, matrix, string, unit\n\t   *\n\t   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n\t   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n\t   * @return {number | Array | Matrix} The created number",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18048,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18050,
            "description": "module.exports = [\n\t  // type\n\t  __webpack_require__(72)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18060,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * A ResultSet contains a list or results\n\t   * @class ResultSet\n\t   * @param {Array} entries\n\t   * @constructor ResultSet",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18079,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18085,
            "description": "Returns the array with results hold by this ResultSet",
            "memberof": "ResultSet",
            "return": {
                "description": "entries",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18094,
            "description": "Returns the stringified results of the ResultSet",
            "memberof": "ResultSet",
            "return": {
                "description": "string",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18103,
            "description": "Get a JSON representation of the ResultSet",
            "memberof": "ResultSet",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18116,
            "description": "Instantiate a ResultSet from a JSON object",
            "memberof": "ResultSet",
            "params": [
                {
                    "name": "json",
                    "description": "A JSON object structured as:\n                      `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "ResultSet"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18135,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18137,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a string or convert any object into a string.\n\t   * Elements of Arrays and Matrices are processed element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.string(value)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.string(4.2);               // returns string '4.2'\n\t   *    math.string(math.complex(3, 2); // returns string '3 + 2i'\n\t   *\n\t   *    var u = math.unit(5, 'km');\n\t   *    math.string(u.to('m'));         // returns string '5000 m'\n\t   *\n\t   *    math.string([true, false]);     // returns ['true', 'false']\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, matrix, number, unit\n\t   *\n\t   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n\t   * @return {string | Array | Matrix} The created string",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18210,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18212,
            "description": "module.exports = [\n\t  // type\n\t  __webpack_require__(75),\n  // construction function\n\t  __webpack_require__(96),\n  // create new units\n\t  __webpack_require__(97),\n  // split units\n\t  __webpack_require__(98),\n  // physical constants\n\t  __webpack_require__(99)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18234,
            "description": "'use strict';\nvar endsWith = __webpack_require__(23).endsWith;\n\tvar clone = __webpack_require__(3).clone;\n\tvar constants = __webpack_require__(76);\nfunction factory (type, config, load, typed, math) {\n\t  var add       = load(__webpack_require__(53));\n\t  var subtract  = load(__webpack_require__(77));\n\t  var multiply  = load(__webpack_require__(80));\n\t  var divide    = load(__webpack_require__(81));\n\t  var pow       = load(__webpack_require__(82));\n\t  var abs       = load(__webpack_require__(86));\n\t  var fix       = load(__webpack_require__(87));\n\t  var equal     = load(__webpack_require__(88));\n\t  var isNumeric = load(__webpack_require__(89));\n\t  var format    = load(__webpack_require__(90));\n\t  var getTypeOf = load(__webpack_require__(91));\n\t  var toNumber  = load(__webpack_require__(70));\n\t  var Complex   = load(__webpack_require__(27));\n  /**\n\t   * A unit can be constructed in the following ways:\n\t   *     var a = new Unit(value, name);\n\t   *     var b = new Unit(null, name);\n\t   *     var c = Unit.parse(str);\n\t   *\n\t   * Example usage:\n\t   *     var a = new Unit(5, 'cm');               // 50 mm\n\t   *     var b = Unit.parse('23 kg');             // 23 kg\n\t   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m\n\t   *     var d = new Unit(9.81, \"m/s^2\");         // 9.81 m/s^2\n\t   *\n\t   * @class Unit\n\t   * @constructor Unit\n\t   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n\t   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18317,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18461,
            "description": "Parse a string into a unit. The value of the unit is parsed as number,\nBigNumber, or Fraction depending on the math.js config setting `number`.\n\nThrows an exception if the provided string does not contain a valid unit or\ncannot be parsed.",
            "memberof": "Unit",
            "params": [
                {
                    "name": "str",
                    "description": "A string like \"5.2 inch\", \"4e2 cm/s^2\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "unit",
                "type": "Unit"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18647,
            "description": "create a copy of this unit",
            "memberof": "Unit",
            "return": {
                "description": "Returns a cloned version of the unit",
                "type": "Unit"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18673,
            "description": "Return whether the unit is derived (such as m/s, or cm^2, but not N)",
            "memberof": "Unit",
            "return": {
                "description": "True if the unit is derived",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18685,
            "description": "Normalize a value, based on its currently set unit(s)",
            "memberof": "Unit",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number | BigNumber | Fraction | boolean"
                }
            ],
            "return": {
                "description": "normalized value",
                "type": "Number | BigNumber | Fraction | boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18726,
            "description": "Denormalize a value, based on its currently set unit(s)",
            "memberof": "Unit",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "prefixValue",
                    "description": "Optional prefix value to be used (ignored if this is a derived unit)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "denormalized value",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18774,
            "description": "Find a unit from a string",
            "memberof": "Unit",
            "params": [
                {
                    "name": "str",
                    "description": "A string like 'cm' or 'inch'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "result  When found, an object with fields unit and\n                                 prefix is returned. Else, null is returned.",
                "type": "Object | null"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18815,
            "description": "Test if the given expression is a unit.\nThe unit can have a prefix but cannot have a value.",
            "memberof": "Unit",
            "params": [
                {
                    "name": "name",
                    "description": "A string to be tested whether it is a value less unit.\n                       The unit can have prefix, like \"cm\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the given string is a unit",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18827,
            "description": "check if this unit has given base unit\nIf this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.",
            "memberof": "Unit",
            "params": [
                {
                    "name": "base",
                    "description": "",
                    "type": "BASE_UNITS | string | undefined"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18853,
            "description": "Check if this unit has a base or bases equal to another base or bases\nFor derived units, the exponent on each base also must match",
            "memberof": "Unit",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "true if equal base",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18870,
            "description": "Check if this unit equals another unit",
            "memberof": "Unit",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "true if both units are equal",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18880,
            "description": "Multiply this unit with another one",
            "memberof": "Unit",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "product of this unit and the other unit",
                "type": "Unit"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18920,
            "description": "Divide this unit by another one",
            "memberof": "Unit",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "result of dividing this unit by the other unit",
                "type": "Unit"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18961,
            "description": "Calculate the power of a unit",
            "memberof": "Unit",
            "params": [
                {
                    "name": "p",
                    "description": "",
                    "type": "Number | Fraction | BigNumber"
                }
            ],
            "return": {
                "description": "The result: this^p",
                "type": "Unit"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 18999,
            "description": "Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "The numeric value of the unit if conditions are met, or the original unit otherwise",
                "type": "Number | Fraction | BigNumber | Unit"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19014,
            "description": "Calculate the absolute value of a unit",
            "memberof": "Unit",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number | Fraction | BigNumber"
                }
            ],
            "return": {
                "description": "The result: |x|, absolute value of x",
                "type": "Unit"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19035,
            "description": "Convert the unit to a specific unit name.",
            "memberof": "Unit",
            "params": [
                {
                    "name": "valuelessUnit",
                    "description": "A unit without value. Can have prefix, like \"cm\"",
                    "type": "String | Unit"
                }
            ],
            "return": {
                "description": "Returns a clone of the unit with a fixed prefix and unit.",
                "type": "Unit"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19077,
            "description": "Return the value of the unit when represented with given valueless unit",
            "memberof": "Unit",
            "params": [
                {
                    "name": "valuelessUnit",
                    "description": "For example 'cm' or 'inch'",
                    "type": "String | Unit"
                }
            ],
            "return": {
                "description": "Returns the unit value as number.",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19088,
            "description": "Return the value of the unit in the original numeric type",
            "memberof": "Unit",
            "params": [
                {
                    "name": "valuelessUnit",
                    "description": "For example 'cm' or 'inch'",
                    "type": "String | Unit"
                }
            ],
            "return": {
                "description": "Returns the unit value",
                "type": "Number | BigNumber | Fraction"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19109,
            "description": "Get a string representation of the unit.",
            "memberof": "Unit",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19118,
            "description": "Get a JSON representation of the unit",
            "memberof": "Unit",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19133,
            "description": "Instantiate a Unit from a JSON object",
            "memberof": "Unit",
            "params": [
                {
                    "name": "json",
                    "description": "A JSON object structured as:\n                      `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Unit"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19146,
            "description": "Returns the string representation of the unit.",
            "memberof": "Unit",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19153,
            "description": "Attempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the \"best\" units for formatting.\nIntended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19228,
            "description": "Get a string representation of the units of this Unit, without the value.",
            "memberof": "Unit",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19293,
            "description": "Get a string representation of the Unit, with optional formatting options.",
            "memberof": "Unit",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19354,
            "description": "Calculate the best prefix using current value.",
            "memberof": "Unit",
            "return": {
                "description": "prefix",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 19409,
            "description": "Returns an array of units whose sum is equal to this unit",
            "memberof": "Unit",
            "params": [
                {
                    "name": "[parts] An array of strings or valueless units. \n\n  Example:\n\n  var u = new Unit(1, 'm');\n  u.splitUnit(['feet', 'inch']);\n    [ 3 feet, 3.3700787401575 inch ]",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of units.",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 20993,
            "description": "Calculate the values for the angle units.\nValue is calculated as number or BigNumber depending on the configuration",
            "params": [
                {
                    "name": "}",
                    "description": "config",
                    "type": "Number: 'number' | 'BigNumber'"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21028,
            "description": "A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\nA user perhaps could issue a command to select a preferred unit system, or use the default (see below).\nAuto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21092,
            "description": "Set a unit system for formatting derived units.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the unit system.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21105,
            "description": "Return the current unit system.",
            "return": {
                "description": "The current unit system.",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21117,
            "description": "Converters to convert from number to an other numeric type like BigNumber\nor Fraction",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21139,
            "description": "Retrieve the right convertor function corresponding with the type\nof provided exampleValue.",
            "params": [
                {
                    "name": "type",
                    "description": "A string 'number', 'BigNumber', or 'Fraction'\n                       In case of an unknown type,",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21198,
            "description": "Wrapper around createUnitSingle.\nExample: \n createUnit({\n   foo: { },\n   bar: {\n     definition: 'kg/foo',\n     aliases: ['ba', 'barr', 'bars'],\n     offset: 200\n   },\n   baz: '4 bar'\n }, \n {\n   override: true;\n });",
            "params": [
                {
                    "name": "obj",
                    "description": "Object map. Each key becomes a unit which is defined by its value.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21246,
            "description": "Create a user-defined unit and register it with the Unit type.\nExample: \n createUnitSingle('knot', '0.514444444 m/s')\n createUnitSingle('acre', new Unit(43560, 'ft^2'))",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the new unit. Must be unique. Example: 'knot'",
                    "type": "String"
                },
                {
                    "name": "definition",
                    "description": "Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.",
                    "type": "String, Unit"
                },
                {
                    "name": "options",
                    "description": "(optional) An object containing any of the following properties:\n    prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n    aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n    offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Unit"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21453,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21455,
            "description": "var memoize = __webpack_require__(45).memoize;\n/**\n\t * Calculate BigNumber e\n\t * @param {function} BigNumber   BigNumber constructor\n\t * @returns {BigNumber} Returns e",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21468,
            "description": "Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2",
            "params": [
                {
                    "name": "BigNumber",
                    "description": "BigNumber constructor",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns phi",
                "type": "BigNumber"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21477,
            "description": "Calculate BigNumber pi.",
            "params": [
                {
                    "name": "BigNumber",
                    "description": "BigNumber constructor",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns pi",
                "type": "BigNumber"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21486,
            "description": "Calculate BigNumber tau, tau = 2 * pi",
            "params": [
                {
                    "name": "BigNumber",
                    "description": "BigNumber constructor",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns tau",
                "type": "BigNumber"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21495,
            "description": "Create a hash for a BigNumber constructor function. The created has is\nthe configured precision",
            "params": [
                {
                    "name": "args",
                    "description": "Supposed to contain a single entry with\n                            a BigNumber constructor",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "precision",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21508,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21510,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var unaryMinus = load(__webpack_require__(78));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  // TODO: split function subtract in two: subtract and subtractScalar\n  /**\n\t   * Subtract two values, `x - y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.subtract(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.subtract(5.3, 2);        // returns number 3.3\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    var b = math.complex(4, 1);\n\t   *    math.subtract(a, b);          // returns Complex -2 + 2i\n\t   *\n\t   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]\n\t   *\n\t   *    var c = math.unit('2.1 km');\n\t   *    var d = math.unit('500m');\n\t   *    math.subtract(c, d);          // returns Unit 1.6 km\n\t   *\n\t   * See also:\n\t   *\n\t   *    add\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n\t   *            Initial value\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n\t   *            Value to subtract from `x`\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t   *            Subtraction of `x` and `y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21713,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21715,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Inverse the sign of a value, apply a unary minus operation.\n\t   *\n\t   * For matrices, the function is evaluated element wise. Boolean values and\n\t   * strings will be converted to a number. For complex numbers, both real and\n\t   * complex value are inverted.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.unaryMinus(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.unaryMinus(3.5);      // returns -3.5\n\t   *    math.unaryMinus(-4.2);     // returns 4.2\n\t   *\n\t   * See also:\n\t   *\n\t   *    add, subtract, unaryPlus\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21789,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21791,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n\t  \n\t  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21971,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 21973,
            "description": "'use strict';\nfunction factory(type, config, load, typed) {\n\t  \n\t  /**\n\t   * Multiply two scalar values, `x * y`.\n\t   * This function is meant for internal use: it is used by the public function\n\t   * `multiply`\n\t   *\n\t   * This function does not support collections (Array or Matrix), and does\n\t   * not validate the number of of inputs.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n\t   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`\n\t   * @private",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22034,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22036,
            "description": "'use strict';\nfunction factory(type, config, load, typed) {\n\t  var multiplyScalar = load(__webpack_require__(80));\n  /**\n\t   * Divide two scalar values, `x / y`.\n\t   * This function is meant for internal use: it is used by the public functions\n\t   * `divide` and `inv`.\n\t   *\n\t   * This function does not support collections (Array or Matrix), and does\n\t   * not validate the number of of inputs.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n\t   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`\n\t   * @private",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22099,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22101,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\t  var eye = load(__webpack_require__(83));\n\t  var multiply = load(__webpack_require__(84));\n\t  var matrix = load(__webpack_require__(52));\n\t  var fraction = load(__webpack_require__(36));\n\t  var number = load(__webpack_require__(70));\n  /**\n\t   * Calculates the power of x to y, `x ^ y`.\n\t   * Matrix exponentiation is supported for square matrices `x`, and positive\n\t   * integer exponents `y`.\n\t   *\n\t   * For cubic roots of negative numbers, the function returns the principal\n\t   * root by default. In order to let the function return the real root,\n\t   * math.js can be configured with `math.config({predictable: true})`.\n\t   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.pow(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.pow(2, 3);               // returns number 8\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    math.pow(a, 2)                // returns Complex -5 + 12i\n\t   *\n\t   *    var b = [[1, 2], [4, 3]];\n\t   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, sqrt, cbrt, nthRoot\n\t   *\n\t   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base\n\t   * @param  {number | BigNumber | Complex} y                   The exponent\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22196,
            "description": "Calculates the power of x to y, x^y, for two numbers.",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "res",
                "type": "Number | Complex"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22233,
            "description": "Calculate the power of a 2d array",
            "params": [
                {
                    "name": "x",
                    "description": "must be a 2 dimensional, square matrix",
                    "type": "Array"
                },
                {
                    "name": "y",
                    "description": "a positive, integer value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22265,
            "description": "Calculate the power of a 2d matrix",
            "params": [
                {
                    "name": "x",
                    "description": "must be a 2 dimensional, square matrix",
                    "type": "Matrix"
                },
                {
                    "name": "y",
                    "description": "a positive, integer value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22289,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22291,
            "description": "'use strict';\nvar array = __webpack_require__(40);\n\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  \n\t  /**\n\t   * Create a 2-dimensional identity matrix with size m x n or n x n.\n\t   * The matrix has ones on the diagonal and zeros elsewhere.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.eye(n)\n\t   *    math.eye(n, format)\n\t   *    math.eye(m, n)\n\t   *    math.eye(m, n, format)\n\t   *    math.eye([m, n])\n\t   *    math.eye([m, n], format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\t   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]\n\t   *\n\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    diag, ones, zeros, size, range\n\t   *\n\t   * @param {...number | Matrix | Array} size   The size for the matrix\n\t   * @param {string} [format]                   The Matrix storage format\n\t   *\n\t   * @return {Matrix | Array | number} A matrix with ones on the diagonal.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22387,
            "description": "Create an identity matrix",
            "params": [
                {
                    "name": "rows",
                    "description": "",
                    "type": "Number | BigNumber"
                },
                {
                    "name": "cols",
                    "description": "",
                    "type": "Number | BigNumber"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22441,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22443,
            "description": "'use strict';\nvar extend = __webpack_require__(3).extend;\n\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var equalScalar = load(__webpack_require__(48));\n  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  var DenseMatrix = type.DenseMatrix;\n\t  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Multiply two or more values, `x * y`.\n\t   * For matrices, the matrix product is calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.multiply(x, y)\n\t   *    math.multiply(x, y, z, ...)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.multiply(4, 5.2);        // returns number 20.8\n\t   *    math.multiply(2, 3, 4);       // returns number 24\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    var b = math.complex(4, 1);\n\t   *    math.multiply(a, b);          // returns Complex 5 + 14i\n\t   *\n\t   *    var c = [[1, 2], [4, 3]];\n\t   *    var d = [[1, 2, 3], [3, -4, 7]];\n\t   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]\n\t   *\n\t   *    var e = math.unit('2.1 km');\n\t   *    math.multiply(3, e);          // returns Unit 6.3 km\n\t   *\n\t   * See also:\n\t   *\n\t   *    divide, prod, cross, dot\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22651,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "Dense Vector   (N)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Dense Vector   (N)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Scalar value",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22697,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "Dense Vector   (M)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Matrix         (MxN)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Dense Vector   (N)",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22714,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "Dense Vector   (M)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Dense Matrix   (MxN)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Dense Vector   (N)",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22774,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "Matrix         (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Dense Vector   (N)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Dense Vector   (M)",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22792,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "Matrix         (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Matrix         (NxC)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Matrix         (MxC)",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22824,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "DenseMatrix  (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Dense Vector (N)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Dense Vector (M)",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22885,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "DenseMatrix    (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "DenseMatrix    (NxC)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "DenseMatrix    (MxC)",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 22953,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "DenseMatrix    (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "SparseMatrix   (NxC)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "SparseMatrix   (MxC)",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23064,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "SparseMatrix    (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Dense Vector (N)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "SparseMatrix    (M, 1)",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23168,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "SparseMatrix      (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "DenseMatrix       (NxC)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "SparseMatrix      (MxC)",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23281,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "SparseMatrix      (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "SparseMatrix      (NxC)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "SparseMatrix      (MxC)",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23417,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23419,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t   * Callback function invoked NZ times (number of nonzero items in S).\n\t   *\n\t   *\n\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0          ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23532,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23534,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the absolute value of a number. For matrices, the function is\n\t   * evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.abs(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.abs(3.5);                // returns number 3.5\n\t   *    math.abs(-4.2);               // returns number 4.2\n\t   *\n\t   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]\n\t   *\n\t   * See also:\n\t   *\n\t   *    sign\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t   *            A number or matrix for which to get the absolute value\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n\t   *            Absolute value of `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23599,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23601,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Round a value towards zero.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.fix(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.fix(3.2);                // returns number 3\n\t   *    math.fix(3.8);                // returns number 3\n\t   *    math.fix(-4.2);               // returns number -4\n\t   *    math.fix(-4.7);               // returns number -4\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.fix(c);                  // returns Complex 3 - 2i\n\t   *\n\t   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ceil, floor, round\n\t   *\n\t   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23670,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23672,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether two values are equal.\n\t   *\n\t   * The function tests whether the relative difference between x and y is\n\t   * smaller than the configured epsilon. The function cannot be used to\n\t   * compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n\t   *\n\t   * Values `null` and `undefined` are compared strictly, thus `null` is only\n\t   * equal to `null` and nothing else, and `undefined` is only equal to\n\t   * `undefined` and nothing else.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.equal(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.equal(2 + 2, 3);         // returns false\n\t   *    math.equal(2 + 2, 4);         // returns true\n\t   *\n\t   *    var a = math.unit('50 cm');\n\t   *    var b = math.unit('5 m');\n\t   *    math.equal(a, b);             // returns true\n\t   *\n\t   *    var c = [2, 5, 1];\n\t   *    var d = [2, 7, 1];\n\t   *\n\t   *    math.equal(c, d);             // returns [true, false, true]\n\t   *    math.deepEqual(c, d);         // returns false\n\t   *\n\t   *    math.equal(0, null);          // returns false\n\t   *\n\t   * See also:\n\t   *\n\t   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual\n\t   *\n\t   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23845,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23847,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is an numeric value.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isNumeric(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isNumeric(2);                     // returns true\n\t   *    math.isNumeric(0);                     // returns true\n\t   *    math.isNumeric(math.bignumber(500));   // returns true\n\t   *    math.isNumeric(math.fraction(4));      // returns true\n\t   *    math.isNumeric(math.complex('2-4i');   // returns false\n\t   *    math.isNumeric('3');                   // returns false\n\t   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isZero, isPositive, isNegative, isInteger\n\t   *\n\t   * @param {*} x       Value to be tested\n\t   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n\t   *                    `Fraction`, or `boolean`. Returns false for other types.\n\t   *                    Throws an error in case of unknown types.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23904,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 23906,
            "description": "'use strict';\nvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Format a value of any type into a string.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.format(value)\n\t   *    math.format(value, options)\n\t   *    math.format(value, precision)\n\t   *    math.format(value, callback)\n\t   *\n\t   * Where:\n\t   *\n\t   *  - `value: *`\n\t   *    The value to be formatted\n\t   *  - `options: Object`\n\t   *    An object with formatting options. Available options:\n\t   *    - `notation: string`\n\t   *      Number notation. Choose from:\n\t   *      - 'fixed'\n\t   *        Always use regular number notation.\n\t   *        For example '123.40' and '14000000'\n\t   *      - 'exponential'\n\t   *        Always use exponential notation.\n\t   *        For example '1.234e+2' and '1.4e+7'\n\t   *      - 'engineering'\n\t   *        Always use engineering notation.\n\t   *        For example '123.4e+0' and '14.0e+6'\n\t   *      - 'auto' (default)\n\t   *        Regular number notation for numbers having an absolute value between\n\t   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\n\t   *        Lower bound is included, upper bound is excluded.\n\t   *        For example '123.4' and '1.4e7'.\n\t   *    - `precision: number`\n\t   *      A number between 0 and 16 to round the digits of the number. In case\n\t   *      of notations 'exponential' and 'auto', `precision` defines the total\n\t   *      number of significant digits returned and is undefined by default.\n\t   *      In case of notation 'fixed', `precision` defines the number of\n\t   *      significant digits after the decimal point, and is 0 by default.\n\t   *    - `exponential: Object`\n\t   *      An object containing two parameters, {number} lower and {number} upper,\n\t   *      used by notation 'auto' to determine when to return exponential\n\t   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only\n\t   *      applicable for notation `auto`.\n\t   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.\n\t   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is\n\t   *      configured, and will output `0.(3)` when 'decimal' is configured.\n\t   * - `callback: function`\n\t   *   A custom formatting function, invoked for all numeric elements in `value`,\n\t   *   for example all elements of a matrix, or the real and imaginary\n\t   *   parts of a complex number. This callback can be used to override the\n\t   *   built-in numeric notation with any type of formatting. Function `callback`\n\t   *   is called with `value` as parameter and must return a string.\n\t   *\n\t   * When `value` is an Object:\n\t   *\n\t   * - When the object contains a property `format` being a function, this function\n\t   *   is invoked as `value.format(options)` and the result is returned.\n\t   * - When the object has its own `toString` method, this method is invoked\n\t   *   and the result is returned.\n\t   * - In other cases the function will loop over all object properties and\n\t   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n\t   *\n\t   * When value is a function:\n\t   *\n\t   * - When the function has a property `syntax`, it returns this\n\t   *   syntax description.\n\t   * - In other cases, a string `'function'` is returned.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.format(6.4);                                        // returns '6.4'\n\t   *    math.format(1240000);                                    // returns '1.24e6'\n\t   *    math.format(1/3);                                        // returns '0.3333333333333333'\n\t   *    math.format(1/3, 3);                                     // returns '0.333'\n\t   *    math.format(21385, 2);                                   // returns '21000'\n\t   *    math.format(12.071, {notation: 'fixed'});                // returns '12'\n\t   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'\n\t   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'\n\t   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'\n\t   *\n\t   *    function formatCurrency(value) {\n\t   *      // return currency notation with two digits:\n\t   *      return '$' + value.toFixed(2);\n\t   *\n\t   *      // you could also use math.format inside the callback:\n\t   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});\n\t   *    }\n\t   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'\n\t   *\n\t   * See also:\n\t   *\n\t   *    print\n\t   *\n\t   * @param {*} value                               Value to be stringified\n\t   * @param {Object | Function | number} [options]  Formatting options\n\t   * @return {string} The formatted value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24024,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24026,
            "description": "'use strict';\nvar types = __webpack_require__(41);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Determine the type of a variable.\n\t   *\n\t   * Function `typeof` recognizes the following types of objects:\n\t   *\n\t   * Object                 | Returns       | Example\n\t   * ---------------------- | ------------- | ------------------------------------------\n\t   * null                   | `'null'`      | `math.typeof(null)`\n\t   * number                 | `'number'`    | `math.typeof(3.5)`\n\t   * boolean                | `'boolean'`   | `math.typeof (true)`\n\t   * string                 | `'string'`    | `math.typeof ('hello world')`\n\t   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`\n\t   * Date                   | `'Date'`      | `math.typeof (new Date())`\n\t   * Function               | `'Function'`  | `math.typeof (function () {})`\n\t   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`\n\t   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`\n\t   * undefined              | `'undefined'` | `math.typeof(undefined)`\n\t   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`\n\t   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`\n\t   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`\n\t   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`\n\t   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`\n\t   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`\n\t   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`\n\t   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`\n\t   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.typeof(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.typeof(3.5);                     // returns 'number'\n\t   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'\n\t   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'\n\t   *    math.typeof('hello world');           // returns 'string'\n\t   *\n\t   * @param {*} x     The variable for which to test the type.\n\t   * @return {string} Returns the name of the type. Primitive types are lower case,\n\t   *                  non-primitive types are upper-camel-case.\n\t   *                  For example 'number', 'string', 'Array', 'Date'.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24107,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24109,
            "description": "/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar formatRegExp = /%[sdj%]/g;\n\texports.format = function(f) {\n\t  if (!isString(f)) {\n\t    var objects = [];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t      objects.push(inspect(arguments[i]));\n\t    }\n\t    return objects.join(' ');\n\t  }\n  var i = 1;\n\t  var args = arguments;\n\t  var len = args.length;\n\t  var str = String(f).replace(formatRegExp, function(x) {\n\t    if (x === '%%') return '%';\n\t    if (i >= len) return x;\n\t    switch (x) {\n\t      case '%s': return String(args[i++]);\n\t      case '%d': return Number(args[i++]);\n\t      case '%j':\n\t        try {\n\t          return JSON.stringify(args[i++]);\n\t        } catch (_) {\n\t          return '[Circular]';\n\t        }\n\t      default:\n\t        return x;\n\t    }\n\t  });\n\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t    if (isNull(x) || !isObject(x)) {\n\t      str += ' ' + x;\n\t    } else {\n\t      str += ' ' + inspect(x);\n\t    }\n\t  }\n\t  return str;\n\t};\n\n// Mark that a method should not be used.\n\t// Returns a modified function which warns once by default.\n\t// If --no-deprecation is set, then it is a no-op.\n\texports.deprecate = function(fn, msg) {\n\t  // Allow for deprecating things in the process of starting up.\n\t  if (isUndefined(global.process)) {\n\t    return function() {\n\t      return exports.deprecate(fn, msg).apply(this, arguments);\n\t    };\n\t  }\n  if (process.noDeprecation === true) {\n\t    return fn;\n\t  }\n  var warned = false;\n\t  function deprecated() {\n\t    if (!warned) {\n\t      if (process.throwDeprecation) {\n\t        throw new Error(msg);\n\t      } else if (process.traceDeprecation) {\n\t        console.trace(msg);\n\t      } else {\n\t        console.error(msg);\n\t      }\n\t      warned = true;\n\t    }\n\t    return fn.apply(this, arguments);\n\t  }\n  return deprecated;\n\t};\n\nvar debugs = {};\n\tvar debugEnviron;\n\texports.debuglog = function(set) {\n\t  if (isUndefined(debugEnviron))\n\t    debugEnviron = process.env.NODE_DEBUG || '';\n\t  set = set.toUpperCase();\n\t  if (!debugs[set]) {\n\t    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n\t      var pid = process.pid;\n\t      debugs[set] = function() {\n\t        var msg = exports.format.apply(exports, arguments);\n\t        console.error('%s %d: %s', set, pid, msg);\n\t      };\n\t    } else {\n\t      debugs[set] = function() {};\n\t    }\n\t  }\n\t  return debugs[set];\n\t};\n\n/**\n\t * Echos the value of a value. Trys to print the value out\n\t * in the best way possible given the different types.\n\t *\n\t * @param {Object} obj The object to print out.\n\t * @param {Object} opts Optional options object that alters the output.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24667,
            "description": "Inherit the prototype methods from one constructor into another.\n\nThe Function.prototype.inherits from lang.js rewritten as a standalone\nfunction (not on Function.prototype). NOTE: If this file is to be loaded\nduring bootstrapping this function needs to be rewritten using some native\nfunctions as prototype setup using normal JavaScript does not work as\nexpected during bootstrapping (see mirror.js in r114903).",
            "params": [
                {
                    "name": "ctor",
                    "description": "Constructor function which needs to inherit the\n    prototype.",
                    "type": "Function"
                },
                {
                    "name": "superCtor",
                    "description": "Constructor function to inherit prototype from.",
                    "type": "Function"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24700,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24702,
            "description": "// shim for using process in browser\nvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\nfunction cleanUpNextTick() {\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\nfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = setTimeout(cleanUpNextTick);\n\t    draining = true;\n    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    clearTimeout(timeout);\n\t}\nprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\nfunction noop() {}\nprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\nprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\nprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24799,
            "description": "module.exports = function isBuffer(arg) {\n\t  return arg && typeof arg === 'object'\n\t    && typeof arg.copy === 'function'\n\t    && typeof arg.fill === 'function'\n\t    && typeof arg.readUInt8 === 'function';\n\t}\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24810,
            "description": "if (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24839,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a unit. Depending on the passed arguments, the function\n\t   * will create and return a new math.type.Unit object.\n\t   * When a matrix is provided, all elements will be converted to units.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.unit(unit : string)\n\t   *     math.unit(value : number, unit : string)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm\n\t   *    var b = math.unit('23 kg');    // returns Unit 23 kg\n\t   *    a.to('m');                     // returns Unit 0.05 m\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n\t   *\n\t   * @param {* | Array | Matrix} args   A number and unit.\n\t   * @return {Unit | Array | Matrix}    The created unit",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24904,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24906,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a user-defined unit and register it with the Unit type.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.createUnit({\n\t   *       baseUnit1: {\n\t   *         aliases: [string, ...]\n\t   *         prefixes: object\n\t   *       },\n\t   *       unit2: {\n\t   *         definition: string,\n\t   *         aliases: [string, ...]\n\t   *         prefixes: object,\n\t   *         offset: number\n\t   *       },\n\t   *       unit3: string    // Shortcut\n\t   *     })\n\t   *\n\t   *     // Another shortcut:\n\t   *     math.createUnit(string, unit : string, [object])\n\t   *\n\t   * Examples: \n\t   *\n\t   *     math.createUnit('foo');\n\t   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']});\n\t   *     math.createUnit('mph', '1 mile/hour');\n\t   *\n\t   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n\t   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n\t   * @param {Object} options   (optional) An object containing any of the following properties:\n\t   *     prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n\t   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n\t   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n\t   *\n\t   * See also:\n\t   *\n\t   *     unit\n\t   *\n\t   * @return {Unit} The new unit",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24995,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 24997,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Split a unit in an array of units whose sum is equal to the original unit.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n\t   *\n\t   * Example:\n\t   *\n\t   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch']);\n\t   *     // [ 3 feet, 3.3700787401575 inch ]\n\t   *\n\t   * See also:\n\t   *\n\t   *     unit\n\t   *\n\t   * @param {Array} [parts] An array of strings or valueless units.\n\t   * @return {Array} An array of units.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25038,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25040,
            "description": "var lazy = __webpack_require__(3).lazy;\n\nfunction factory (type, config, load, typed, math) {\n  // helper function to create a unit with a fixed prefix\n\t  function fixedUnit(str) {\n\t    var unit = type.Unit.parse(str);\n\t    unit.fixPrefix = true;\n\t    return unit;\n\t  }\n  // Source: http://www.wikiwand.com/en/Physical_constant\n  // Universal constants\n\t  lazy(math, 'speedOfLight',         function () {return fixedUnit('299792458 m s^-1')});\n\t  lazy(math, 'gravitationConstant',  function () {return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2')});\n\t  lazy(math, 'planckConstant',       function () {return fixedUnit('6.626069311e-34 J s')});\n\t  lazy(math, 'reducedPlanckConstant',function () {return fixedUnit('1.05457172647e-34 J s')});\n  // Electromagnetic constants\n\t  lazy(math, 'magneticConstant',          function () {return fixedUnit('1.2566370614e-6 N A^-2')});\n\t  lazy(math, 'electricConstant',          function () {return fixedUnit('8.854187817e-12 F m^-1')});\n\t  lazy(math, 'vacuumImpedance',           function () {return fixedUnit('376.730313461 ohm')});\n\t  lazy(math, 'coulomb',                   function () {return fixedUnit('8.9875517873681764e9 N m^2 C^-2')});\n\t  lazy(math, 'elementaryCharge',          function () {return fixedUnit('1.60217656535e-19 C')});\n\t  lazy(math, 'bohrMagneton',              function () {return fixedUnit('9.2740096820e-24 J T^-1')});\n\t  lazy(math, 'conductanceQuantum',        function () {return fixedUnit('7.748091734625e-5 S')});\n\t  lazy(math, 'inverseConductanceQuantum', function () {return fixedUnit('12906.403721742 ohm')});\n\t  lazy(math, 'magneticFluxQuantum',       function () {return fixedUnit('2.06783375846e-15 Wb')});\n\t  lazy(math, 'nuclearMagneton',           function () {return fixedUnit('5.0507835311e-27 J T^-1')});\n\t  lazy(math, 'klitzing',                  function () {return fixedUnit('25812.807443484 ohm')});\n\t  //lazy(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed\n  // Atomic and nuclear constants\n\t  lazy(math, 'bohrRadius',              function () {return fixedUnit('5.291772109217e-11 m')});\n\t  lazy(math, 'classicalElectronRadius', function () {return fixedUnit('2.817940326727e-15 m')});\n\t  lazy(math, 'electronMass',            function () {return fixedUnit('9.1093829140e-31 kg')});\n\t  lazy(math, 'fermiCoupling',           function () {return fixedUnit('1.1663645e-5 GeV^-2')});\n\t  lazy(math, 'fineStructure',           function () {return 7.297352569824e-3});\n\t  lazy(math, 'hartreeEnergy',           function () {return fixedUnit('4.3597443419e-18 J')});\n\t  lazy(math, 'protonMass',              function () {return fixedUnit('1.67262177774e-27 kg')});\n\t  lazy(math, 'deuteronMass',            function () {return fixedUnit('3.3435830926e-27 kg')});\n\t  lazy(math, 'neutronMass',             function () {return fixedUnit('1.6749271613e-27 kg')});\n\t  lazy(math, 'quantumOfCirculation',    function () {return fixedUnit('3.636947552024e-4 m^2 s^-1')});\n\t  lazy(math, 'rydberg',                 function () {return fixedUnit('10973731.56853955 m^-1')});\n\t  lazy(math, 'thomsonCrossSection',     function () {return fixedUnit('6.65245873413e-29 m^2')});\n\t  lazy(math, 'weakMixingAngle',         function () {return 0.222321});\n\t  lazy(math, 'efimovFactor',            function () {return 22.7});\n  // Physico-chemical constants\n\t  lazy(math, 'atomicMass',          function () {return fixedUnit('1.66053892173e-27 kg')});\n\t  lazy(math, 'avogadro',            function () {return fixedUnit('6.0221412927e23 mol^-1')});\n\t  lazy(math, 'boltzmann',           function () {return fixedUnit('1.380648813e-23 J K^-1')});\n\t  lazy(math, 'faraday',             function () {return fixedUnit('96485.336521 C mol^-1')});\n\t  lazy(math, 'firstRadiation',      function () {return fixedUnit('3.7417715317e-16 W m^2')});\n\t  // lazy(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance\n\t  lazy(math, 'loschmidt',           function () {return fixedUnit('2.686780524e25 m^-3')});\n\t  lazy(math, 'gasConstant',         function () {return fixedUnit('8.314462175 J K^-1 mol^-1')});\n\t  lazy(math, 'molarPlanckConstant', function () {return fixedUnit('3.990312717628e-10 J s mol^-1')});\n\t  lazy(math, 'molarVolume',         function () {return fixedUnit('2.241396820e-10 m^3 mol^-1')});\n\t  lazy(math, 'sackurTetrode',       function () {return -1.164870823});\n\t  lazy(math, 'secondRadiation',     function () {return fixedUnit('1.438777013e-2 m K')});\n\t  lazy(math, 'stefanBoltzmann',     function () {return fixedUnit('5.67037321e-8 W m^-2 K^-4')});\n\t  lazy(math, 'wienDisplacement',    function () {return fixedUnit('2.897772126e-3 m K')});\n  // Adopted values\n\t  lazy(math, 'molarMass',         function () {return fixedUnit('1e-3 kg mol^-1')});\n\t  lazy(math, 'molarMassC12',      function () {return fixedUnit('1.2e-2 kg mol^-1')});\n\t  lazy(math, 'gravity',           function () {return fixedUnit('9.80665 m s^-2')});\n\t  // atm is defined in Unit.js\n  // Natural units\n\t  lazy(math, 'planckLength',      function () {return fixedUnit('1.61619997e-35 m')});\n\t  lazy(math, 'planckMass',        function () {return fixedUnit('2.1765113e-8 kg')});\n\t  lazy(math, 'planckTime',        function () {return fixedUnit('5.3910632e-44 s')});\n\t  lazy(math, 'planckCharge',      function () {return fixedUnit('1.87554595641e-18 C')});\n\t  lazy(math, 'planckTemperature', function () {return fixedUnit('1.41683385e+32 K')});\n}\nexports.factory = factory;\n\texports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\n\texports.math = true;   // request access to the math namespace\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25130,
            "description": "'use strict';\nvar object = __webpack_require__(3);\n\tvar bigConstants = __webpack_require__(76);\nfunction factory (type, config, load, typed, math) {\n\t  // listen for changed in the configuration, automatically reload\n\t  // constants when needed\n\t  math.on('config', function (curr, prev) {\n\t    if (curr.number !== prev.number) {\n\t      factory(type, config, load, typed, math);\n\t    }\n\t  });\n  math['true']     = true;\n\t  math['false']    = false;\n\t  math['null']     = null;\n\t  math['uninitialized'] = __webpack_require__(40).UNINITIALIZED;\n  if (config.number === 'BigNumber') {\n\t    math['Infinity'] = new type.BigNumber(Infinity);\n\t    math['NaN']      = new type.BigNumber(NaN);\n    object.lazy(math, 'pi',  function () {return bigConstants.pi(type.BigNumber)});\n\t    object.lazy(math, 'tau', function () {return bigConstants.tau(type.BigNumber)});\n\t    object.lazy(math, 'e',   function () {return bigConstants.e(type.BigNumber)});\n\t    object.lazy(math, 'phi', function () {return bigConstants.phi(type.BigNumber)}); // golden ratio, (1+sqrt(5))/2\n    // uppercase constants (for compatibility with built-in Math)\n\t    object.lazy(math, 'E',       function () {return math.e;});\n\t    object.lazy(math, 'LN2',     function () {return new type.BigNumber(2).ln();});\n\t    object.lazy(math, 'LN10',    function () {return new type.BigNumber(10).ln()});\n\t    object.lazy(math, 'LOG2E',   function () {return new type.BigNumber(1).div(new type.BigNumber(2).ln());});\n\t    object.lazy(math, 'LOG10E',  function () {return new type.BigNumber(1).div(new type.BigNumber(10).ln())});\n\t    object.lazy(math, 'PI',      function () {return math.pi});\n\t    object.lazy(math, 'SQRT1_2', function () {return new type.BigNumber('0.5').sqrt()});\n\t    object.lazy(math, 'SQRT2',   function () {return new type.BigNumber(2).sqrt()});\n\t  }\n\t  else {\n\t    math['Infinity'] = Infinity;\n\t    math['NaN']      = NaN;\n    math.pi  = Math.PI;\n\t    math.tau = Math.PI * 2;\n\t    math.e   = Math.E;\n\t    math.phi = 1.61803398874989484820458683436563811772030917980576286213545; // golden ratio, (1+sqrt(5))/2\n    // uppercase constants (for compatibility with built-in Math)\n\t    math.E           = math.e;\n\t    math.LN2         = Math.LN2;\n\t    math.LN10        = Math.LN10;\n\t    math.LOG2E       = Math.LOG2E;\n\t    math.LOG10E      = Math.LOG10E;\n\t    math.PI          = math.pi;\n\t    math.SQRT1_2     = Math.SQRT1_2;\n\t    math.SQRT2       = Math.SQRT2;\n\t  }\n  // complex i\n\t  math.i = type.Complex.I;\n  // meta information\n\t  math.version = __webpack_require__(101);\n\t}\nexports.factory = factory;\n\texports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\n\texports.math = true;   // request access to the math namespace\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25203,
            "description": "module.exports = '3.8.0';\n\t// Note: This file is automatically generated when building math.js.\n\t// Changes made in this file will be overwritten.\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25212,
            "description": "module.exports = [\n\t  __webpack_require__(103),\n\t  __webpack_require__(280),\n\t  __webpack_require__(309),\n\t  __webpack_require__(311),\n  __webpack_require__(337),\n\t  __webpack_require__(282),\n\t  __webpack_require__(308)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25228,
            "description": "function factory (construction, config, load, typed) {\n\t  var docs = {};\n\n  // construction functions\n\t  docs.bignumber = __webpack_require__(104);\n\t  docs['boolean'] = __webpack_require__(105);\n\t  docs.complex = __webpack_require__(106);\n\t  docs.createUnit = __webpack_require__(107);\n\t  docs.fraction = __webpack_require__(108);\n\t  docs.index = __webpack_require__(109);\n\t  docs.matrix = __webpack_require__(110);\n\t  docs.number = __webpack_require__(111);\n\t  docs.sparse = __webpack_require__(112);\n\t  docs.splitUnit = __webpack_require__(113);\n\t  docs.string = __webpack_require__(114);\n\t  docs.unit = __webpack_require__(115);\n  // constants\n\t  docs.e = __webpack_require__(116);\n\t  docs.E = __webpack_require__(116);\n\t  docs['false'] = __webpack_require__(117);\n\t  docs.i = __webpack_require__(118);\n\t  docs['Infinity'] = __webpack_require__(119);\n\t  docs.LN2 = __webpack_require__(120);\n\t  docs.LN10 = __webpack_require__(121);\n\t  docs.LOG2E = __webpack_require__(122);\n\t  docs.LOG10E = __webpack_require__(123);\n\t  docs.NaN = __webpack_require__(124);\n\t  docs['null'] = __webpack_require__(125);\n\t  docs.pi = __webpack_require__(126);\n\t  docs.PI = __webpack_require__(126);\n\t  docs.phi = __webpack_require__(127);\n\t  docs.SQRT1_2 = __webpack_require__(128);\n\t  docs.SQRT2 = __webpack_require__(129);\n\t  docs.tau = __webpack_require__(130);\n\t  docs['true'] = __webpack_require__(131);\n\t  docs.version = __webpack_require__(132);\n  // physical constants\n\t  // TODO: more detailed docs for physical constants\n\t  docs.speedOfLight = {description: 'Speed of light in vacuum', examples: ['speedOfLight']};\n\t  docs.gravitationConstant = {description: 'Newtonian constant of gravitation', examples: ['gravitationConstant']};\n\t  docs.planckConstant = {description: 'Planck constant', examples: ['planckConstant']};\n\t  docs.reducedPlanckConstant = {description: 'Reduced Planck constant', examples: ['reducedPlanckConstant']};\n  docs.magneticConstant = {description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant']};\n\t  docs.electricConstant = {description: 'Electric constant (vacuum permeability)', examples: ['electricConstant']};\n\t  docs.vacuumImpedance = {description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance']};\n\t  docs.coulomb = {description: 'Coulomb\\'s constant', examples: ['coulomb']};\n\t  docs.elementaryCharge = {description: 'Elementary charge', examples: ['elementaryCharge']};\n\t  docs.bohrMagneton = {description: 'Borh magneton', examples: ['bohrMagneton']};\n\t  docs.conductanceQuantum = {description: 'Conductance quantum', examples: ['conductanceQuantum']};\n\t  docs.inverseConductanceQuantum = {description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']};\n\t  //docs.josephson = {description: 'Josephson constant', examples: ['josephson']};\n\t  docs.magneticFluxQuantum = {description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum']};\n\t  docs.nuclearMagneton = {description: 'Nuclear magneton', examples: ['nuclearMagneton']};\n\t  docs.klitzing = {description: 'Von Klitzing constant', examples: ['klitzing']};\n  docs.bohrRadius = {description: 'Borh radius', examples: ['bohrRadius']};\n\t  docs.classicalElectronRadius = {description: 'Classical electron radius', examples: ['classicalElectronRadius']};\n\t  docs.electronMass = {description: 'Electron mass', examples: ['electronMass']};\n\t  docs.fermiCoupling = {description: 'Fermi coupling constant', examples: ['fermiCoupling']};\n\t  docs.fineStructure = {description: 'Fine-structure constant', examples: ['fineStructure']};\n\t  docs.hartreeEnergy = {description: 'Hartree energy', examples: ['hartreeEnergy']};\n\t  docs.protonMass = {description: 'Proton mass', examples: ['protonMass']};\n\t  docs.deuteronMass = {description: 'Deuteron Mass', examples: ['deuteronMass']};\n\t  docs.neutronMass = {description: 'Neutron mass', examples: ['neutronMass']};\n\t  docs.quantumOfCirculation = {description: 'Quantum of circulation', examples: ['quantumOfCirculation']};\n\t  docs.rydberg = {description: 'Rydberg constant', examples: ['rydberg']};\n\t  docs.thomsonCrossSection = {description: 'Thomson cross section', examples: ['thomsonCrossSection']};\n\t  docs.weakMixingAngle = {description: 'Weak mixing angle', examples: ['weakMixingAngle']};\n\t  docs.efimovFactor = {description: 'Efimov factor', examples: ['efimovFactor']};\n  docs.atomicMass = {description: 'Atomic mass constant', examples: ['atomicMass']};\n\t  docs.avogadro = {description: 'Avogadro\\'s number', examples: ['avogadro']};\n\t  docs.boltzmann = {description: 'Boltzmann constant', examples: ['boltzmann']};\n\t  docs.faraday = {description: 'Faraday constant', examples: ['faraday']};\n\t  docs.firstRadiation = {description: 'First radiation constant', examples: ['firstRadiation']};\n\t  docs.loschmidt = {description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt']};\n\t  docs.gasConstant = {description: 'Gas constant', examples: ['gasConstant']};\n\t  docs.molarPlanckConstant = {description: 'Molar Planck constant', examples: ['molarPlanckConstant']};\n\t  docs.molarVolume = {description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume']};\n\t  docs.sackurTetrode = {description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode']};\n\t  docs.secondRadiation = {description: 'Second radiation constant', examples: ['secondRadiation']};\n\t  docs.stefanBoltzmann = {description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann']};\n\t  docs.wienDisplacement = {description: 'Wien displacement law constant', examples: ['wienDisplacement']};\n\t  //docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};\n  docs.molarMass = {description: 'Molar mass constant', examples: ['molarMass']};\n\t  docs.molarMassC12 = {description: 'Molar mass constant of carbon-12', examples: ['molarMassC12']};\n\t  docs.gravity = {description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity']};\n  docs.planckLength = {description: 'Planck length', examples: ['planckLength']};\n\t  docs.planckMass = {description: 'Planck mass', examples: ['planckMass']};\n\t  docs.planckTime = {description: 'Planck time', examples: ['planckTime']};\n\t  docs.planckCharge = {description: 'Planck charge', examples: ['planckCharge']};\n\t  docs.planckTemperature = {description: 'Planck temperature', examples: ['planckTemperature']};\n  // functions - algebra\n\t  docs.lsolve = __webpack_require__(133);\n\t  docs.lup = __webpack_require__(134);\n\t  docs.lusolve = __webpack_require__(135);\n\t  docs.slu = __webpack_require__(136);\n\t  docs.usolve = __webpack_require__(137);\n  // functions - arithmetic\n\t  docs.abs = __webpack_require__(138);\n\t  docs.add = __webpack_require__(139);\n\t  docs.cbrt = __webpack_require__(140);\n\t  docs.ceil = __webpack_require__(141);\n\t  docs.cube = __webpack_require__(142);\n\t  docs.divide = __webpack_require__(143);\n\t  docs.dotDivide = __webpack_require__(144);\n\t  docs.dotMultiply = __webpack_require__(145);\n\t  docs.dotPow = __webpack_require__(146);\n\t  docs.exp = __webpack_require__(147);\n\t  docs.fix = __webpack_require__(148);\n\t  docs.floor = __webpack_require__(149);\n\t  docs.gcd = __webpack_require__(150);\n\t  docs.hypot = __webpack_require__(151);\n\t  docs.lcm = __webpack_require__(152);\n\t  docs.log = __webpack_require__(153);\n\t  docs.log10 = __webpack_require__(154);\n\t  docs.mod = __webpack_require__(155);\n\t  docs.multiply = __webpack_require__(156);\n\t  docs.norm = __webpack_require__(157);\n\t  docs.nthRoot = __webpack_require__(158);\n\t  docs.pow = __webpack_require__(159);\n\t  docs.round = __webpack_require__(160);\n\t  docs.sign = __webpack_require__(161);\n\t  docs.sqrt = __webpack_require__(162);\n\t  docs.square = __webpack_require__(163);\n\t  docs.subtract = __webpack_require__(164);\n\t  docs.unaryMinus = __webpack_require__(165);\n\t  docs.unaryPlus = __webpack_require__(166);\n\t  docs.xgcd = __webpack_require__(167);\n  // functions - bitwise\n\t  docs.bitAnd = __webpack_require__(168);\n\t  docs.bitNot = __webpack_require__(169);\n\t  docs.bitOr = __webpack_require__(170);\n\t  docs.bitXor = __webpack_require__(171);\n\t  docs.leftShift = __webpack_require__(172);\n\t  docs.rightArithShift = __webpack_require__(173);\n\t  docs.rightLogShift = __webpack_require__(174);\n  // functions - combinatorics\n\t  docs.bellNumbers = __webpack_require__(175);\n\t  docs.catalan = __webpack_require__(176);\n\t  docs.composition = __webpack_require__(177);\n\t  docs.stirlingS2 = __webpack_require__(178);\n  // functions - core\n\t  docs['config'] =  __webpack_require__(179);\n\t  docs['import'] =  __webpack_require__(180);\n\t  docs['typed'] =  __webpack_require__(181);\n  // functions - complex\n\t  docs.arg = __webpack_require__(182);\n\t  docs.conj = __webpack_require__(183);\n\t  docs.re = __webpack_require__(184);\n\t  docs.im = __webpack_require__(185);\n  // functions - expression\n\t  docs['eval'] =  __webpack_require__(186);\n\t  docs.help =  __webpack_require__(187);\n  // functions - geometry\n\t  docs.distance = __webpack_require__(188);\n\t  docs.intersect = __webpack_require__(189);\n  // functions - logical\n\t  docs['and'] = __webpack_require__(190);\n\t  docs['not'] = __webpack_require__(191);\n\t  docs['or'] = __webpack_require__(192);\n\t  docs['xor'] = __webpack_require__(193);\n  // functions - matrix\n\t  docs['concat'] = __webpack_require__(194);\n\t  docs.cross = __webpack_require__(195);\n\t  docs.det = __webpack_require__(196);\n\t  docs.diag = __webpack_require__(197);\n\t  docs.dot = __webpack_require__(198);\n\t  docs.eye = __webpack_require__(199);\n\t  docs.filter =  __webpack_require__(200);\n\t  docs.flatten = __webpack_require__(201);\n\t  docs.forEach =  __webpack_require__(202);\n\t  docs.inv = __webpack_require__(203);\n\t  docs.map =  __webpack_require__(204);\n\t  docs.ones = __webpack_require__(205);\n\t  docs.partitionSelect =  __webpack_require__(206);\n\t  docs.range = __webpack_require__(207);\n\t  docs.resize = __webpack_require__(208);\n\t  docs.size = __webpack_require__(209);\n\t  docs.sort =  __webpack_require__(210);\n\t  docs.squeeze = __webpack_require__(211);\n\t  docs.subset = __webpack_require__(212);\n\t  docs.trace = __webpack_require__(213);\n\t  docs.transpose = __webpack_require__(214);\n\t  docs.zeros = __webpack_require__(215);\n  // functions - probability\n\t  docs.combinations = __webpack_require__(216);\n\t  //docs.distribution = require('./function/probability/distribution');\n\t  docs.factorial = __webpack_require__(217);\n\t  docs.gamma = __webpack_require__(218);\n\t  docs.kldivergence = __webpack_require__(219);\n\t  docs.multinomial = __webpack_require__(220);\n\t  docs.permutations = __webpack_require__(221);\n\t  docs.pickRandom = __webpack_require__(222);\n\t  docs.random = __webpack_require__(223);\n\t  docs.randomInt = __webpack_require__(224);\n  // functions - relational\n\t  docs.compare = __webpack_require__(225);\n\t  docs.deepEqual = __webpack_require__(226);\n\t  docs['equal'] = __webpack_require__(227);\n\t  docs.larger = __webpack_require__(228);\n\t  docs.largerEq = __webpack_require__(229);\n\t  docs.smaller = __webpack_require__(230);\n\t  docs.smallerEq = __webpack_require__(231);\n\t  docs.unequal = __webpack_require__(232);\n  // functions - special\n\t  docs.erf = __webpack_require__(233);\n  // functions - statistics\n\t  docs.max = __webpack_require__(234);\n\t  docs.mean = __webpack_require__(235);\n\t  docs.median = __webpack_require__(236);\n\t  docs.min = __webpack_require__(237);\n\t  docs.mode = __webpack_require__(238);\n\t  docs.prod = __webpack_require__(239);\n\t  docs.quantileSeq = __webpack_require__(240);\n\t  docs.std = __webpack_require__(241);\n\t  docs.sum = __webpack_require__(242);\n\t  docs['var'] = __webpack_require__(243);\n  // functions - trigonometry\n\t  docs.acos = __webpack_require__(244);\n\t  docs.acosh = __webpack_require__(245);\n\t  docs.acot = __webpack_require__(246);\n\t  docs.acoth = __webpack_require__(247);\n\t  docs.acsc = __webpack_require__(248);\n\t  docs.acsch = __webpack_require__(249);\n\t  docs.asec = __webpack_require__(250);\n\t  docs.asech = __webpack_require__(251);\n\t  docs.asin = __webpack_require__(252);\n\t  docs.asinh = __webpack_require__(253);\n\t  docs.atan = __webpack_require__(254);\n\t  docs.atanh = __webpack_require__(255);\n\t  docs.atan2 = __webpack_require__(256);\n\t  docs.cos = __webpack_require__(257);\n\t  docs.cosh = __webpack_require__(258);\n\t  docs.cot = __webpack_require__(259);\n\t  docs.coth = __webpack_require__(260);\n\t  docs.csc = __webpack_require__(261);\n\t  docs.csch = __webpack_require__(262);\n\t  docs.sec = __webpack_require__(263);\n\t  docs.sech = __webpack_require__(264);\n\t  docs.sin = __webpack_require__(265);\n\t  docs.sinh = __webpack_require__(266);\n\t  docs.tan = __webpack_require__(267);\n\t  docs.tanh = __webpack_require__(268);\n  // functions - units\n\t  docs.to = __webpack_require__(269);\n  // functions - utils\n\t  docs.clone = __webpack_require__(270);\n\t  docs.format = __webpack_require__(271);\n\t  docs.isNaN = __webpack_require__(272);\n\t  docs.isInteger = __webpack_require__(273);\n\t  docs.isNegative = __webpack_require__(274);\n\t  docs.isNumeric = __webpack_require__(275);\n\t  docs.isPositive = __webpack_require__(276);\n\t  docs.isPrime = __webpack_require__(277);\n\t  docs.isZero = __webpack_require__(278);\n\t  // docs.print = require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.\n\t  docs['typeof'] =  __webpack_require__(279);\n  return docs;\n\t}\nexports.name = 'docs';\n\texports.path = 'expression';\n\texports.factory = factory;\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25522,
            "description": "module.exports = {\n\t  'name': 'bignumber',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'bignumber(x)'\n\t  ],\n\t  'description':\n\t      'Create a big number from a number or string.',\n\t  'examples': [\n\t    '0.1 + 0.2',\n\t    'bignumber(0.1) + bignumber(0.2)',\n\t    'bignumber(\"7.2\")',\n\t    'bignumber(\"7.2e500\")',\n\t    'bignumber([0.1, 0.2, 0.3])'\n\t  ],\n\t  'seealso': [\n\t    'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25547,
            "description": "module.exports = {\n\t  'name': 'boolean',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'x',\n\t    'boolean(x)'\n\t  ],\n\t  'description':\n\t      'Convert a string or number into a boolean.',\n\t  'examples': [\n\t    'boolean(0)',\n\t    'boolean(1)',\n\t    'boolean(3)',\n\t    'boolean(\"true\")',\n\t    'boolean(\"false\")',\n\t    'boolean([1, 0, 1, 1])'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25574,
            "description": "module.exports = {\n\t  'name': 'complex',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'complex()',\n\t    'complex(re, im)',\n\t    'complex(string)'\n\t  ],\n\t  'description':\n\t      'Create a complex number.',\n\t  'examples': [\n\t    'complex()',\n\t    'complex(2, 3)',\n\t    'complex(\"7 - 2i\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25599,
            "description": "module.exports = {\n\t  'name': 'createUnit',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'createUnit(definitions)',\n\t    'createUnit(name, definition)'\n\t  ],\n\t  'description':\n\t      'Create a user-defined unit and register it with the Unit type.',\n\t  'examples': [\n\t    'createUnit(\"foo\")',\n\t    'createUnit(\"knot\", {definition: \"0.514444444 m/s\", aliases: [\"knots\", \"kt\", \"kts\"]})',\n\t    'createUnit(\"mph\", \"1 mile/hour\")'\n\t  ],\n\t  'seealso': [\n\t    'unit', 'splitUnit'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25623,
            "description": "module.exports = {\n\t  'name': 'fraction',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'fraction(num)',\n\t    'fraction(num,den)'\n\t  ],\n\t  'description':\n\t    'Create a fraction from a number or from a numerator and denominator.',\n\t  'examples': [\n\t    'fraction(0.125)',\n\t    'fraction(1, 3) + fraction(2, 5)'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25646,
            "description": "module.exports = {\n\t  'name': 'index',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    '[start]',\n\t    '[start:end]',\n\t    '[start:step:end]',\n\t    '[start1, start 2, ...]',\n\t    '[start1:end1, start2:end2, ...]',\n\t    '[start1:step1:end1, start2:step2:end2, ...]'\n\t  ],\n\t  'description':\n\t      'Create an index to get or replace a subset of a matrix',\n\t  'examples': [\n\t    '[]',\n\t    '[1, 2, 3]',\n\t    'A = [1, 2, 3; 4, 5, 6]',\n\t    'A[1, :]',\n\t    'A[1, 2] = 50',\n\t    'A[0:2, 0:2] = ones(2, 2)'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25677,
            "description": "module.exports = {\n\t  'name': 'matrix',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    '[]',\n\t    '[a1, b1, ...; a2, b2, ...]',\n\t    'matrix()',\n\t    'matrix(\"dense\")',\n\t    'matrix([...])'\n\t  ],\n\t  'description':\n\t      'Create a matrix.',\n\t  'examples': [\n\t    '[]',\n\t    '[1, 2, 3]',\n\t    '[1, 2, 3; 4, 5, 6]',\n\t    'matrix()',\n\t    'matrix([3, 4])',\n\t    'matrix([3, 4; 5, 6], \"sparse\")',\n\t    'matrix([3, 4; 5, 6], \"sparse\", \"number\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25708,
            "description": "module.exports = {\n\t  'name': 'number',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'x',\n\t    'number(x)'\n\t  ],\n\t  'description':\n\t      'Create a number or convert a string or boolean into a number.',\n\t  'examples': [\n\t    '2',\n\t    '2e3',\n\t    '4.05',\n\t    'number(2)',\n\t    'number(\"7.2\")',\n\t    'number(true)',\n\t    'number([true, false, true, true])',\n\t    'number(\"52cm\", \"m\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25737,
            "description": "module.exports = {\n\t  'name': 'sparse',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'sparse()',\n\t    'sparse([a1, b1, ...; a1, b2, ...])',\n\t    'sparse([a1, b1, ...; a1, b2, ...], \"number\")'\n\t  ],\n\t  'description':\n\t  'Create a sparse matrix.',\n\t  'examples': [\n\t    'sparse()',\n\t    'sparse([3, 4; 5, 6])',\n\t    'sparse([3, 0; 5, 0], \"number\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25762,
            "description": "module.exports = {\n\t  'name': 'splitUnit',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'splitUnit(unit: Unit, parts: Unit[])'\n\t  ],\n\t  'description':\n\t      'Split a unit in an array of units whose sum is equal to the original unit.',\n\t  'examples': [\n\t    'splitUnit(1 m, [\"feet\", \"inch\"])'\n\t  ],\n\t  'seealso': [\n\t    'unit', 'createUnit'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25783,
            "description": "module.exports = {\n\t  'name': 'string',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    '\"text\"',\n\t    'string(x)'\n\t  ],\n\t  'description':\n\t      'Create a string or convert a value to a string',\n\t  'examples': [\n\t    '\"Hello World!\"',\n\t    'string(4.2)',\n\t    'string(3 + 2i)'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25807,
            "description": "module.exports = {\n\t  'name': 'unit',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'value unit',\n\t    'unit(value, unit)',\n\t    'unit(string)'\n\t  ],\n\t  'description':\n\t      'Create a unit.',\n\t  'examples': [\n\t    '5.5 mm',\n\t    '3 inch',\n\t    'unit(7.1, \"kilogram\")',\n\t    'unit(\"23 deg\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25833,
            "description": "module.exports = {\n\t  'name': 'e',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'e'\n\t  ],\n\t  'description': 'Euler\\'s number, the base of the natural logarithm. Approximately equal to 2.71828',\n\t  'examples': [\n\t    'e',\n\t    'e ^ 2',\n\t    'exp(2)',\n\t    'log(e)'\n\t  ],\n\t  'seealso': ['exp']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25854,
            "description": "module.exports = {\n\t  'name': 'false',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'false'\n\t  ],\n\t  'description': 'Boolean value false',\n\t  'examples': [\n\t    'false'\n\t  ],\n\t  'seealso': ['true']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25872,
            "description": "module.exports = {\n\t  'name': 'i',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'i'\n\t  ],\n\t  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',\n\t  'examples': [\n\t    'i',\n\t    'i * i',\n\t    'sqrt(-1)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25892,
            "description": "module.exports = {\n\t  'name': 'Infinity',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'Infinity'\n\t  ],\n\t  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',\n\t  'examples': [\n\t    'Infinity',\n\t    '1 / 0'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25911,
            "description": "module.exports = {\n\t  'name': 'LN2',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LN2'\n\t  ],\n\t  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',\n\t  'examples': [\n\t    'LN2',\n\t    'log(2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25930,
            "description": "module.exports = {\n\t  'name': 'LN10',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LN10'\n\t  ],\n\t  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',\n\t  'examples': [\n\t    'LN10',\n\t    'log(10)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25949,
            "description": "module.exports = {\n\t  'name': 'LOG2E',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LOG2E'\n\t  ],\n\t  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',\n\t  'examples': [\n\t    'LOG2E',\n\t    'log(e, 2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25968,
            "description": "module.exports = {\n\t  'name': 'LOG10E',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LOG10E'\n\t  ],\n\t  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',\n\t  'examples': [\n\t    'LOG10E',\n\t    'log(e, 10)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 25987,
            "description": "module.exports = {\n\t  'name': 'NaN',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'NaN'\n\t  ],\n\t  'description': 'Not a number',\n\t  'examples': [\n\t    'NaN',\n\t    '0 / 0'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26006,
            "description": "module.exports = {\n\t  'name': 'null',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'null'\n\t  ],\n\t  'description': 'Value null',\n\t  'examples': [\n\t    'null'\n\t  ],\n\t  'seealso': ['true', 'false']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26024,
            "description": "module.exports = {\n\t  'name': 'pi',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'pi'\n\t  ],\n\t  'description': 'The number pi is a mathematical constant that is the ratio of a circle\\'s circumference to its diameter, and is approximately equal to 3.14159',\n\t  'examples': [\n\t    'pi',\n\t    'sin(pi/2)'\n\t  ],\n\t  'seealso': ['tau']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26043,
            "description": "module.exports = {\n\t  'name': 'phi',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'phi'\n\t  ],\n\t  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',\n\t  'examples': [\n\t    'tau'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26061,
            "description": "module.exports = {\n\t  'name': 'SQRT1_2',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'SQRT1_2'\n\t  ],\n\t  'description': 'Returns the square root of 1/2, approximately equal to 0.707',\n\t  'examples': [\n\t    'SQRT1_2',\n\t    'sqrt(1/2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26080,
            "description": "module.exports = {\n\t  'name': 'SQRT2',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'SQRT2'\n\t  ],\n\t  'description': 'Returns the square root of 2, approximately equal to 1.414',\n\t  'examples': [\n\t    'SQRT2',\n\t    'sqrt(2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26099,
            "description": "module.exports = {\n\t  'name': 'tau',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'tau'\n\t  ],\n\t  'description': 'Tau is the ratio constant of a circle\\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',\n\t  'examples': [\n\t    'tau',\n\t    '2 * pi'\n\t  ],\n\t  'seealso': ['pi']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26118,
            "description": "module.exports = {\n\t  'name': 'true',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'true'\n\t  ],\n\t  'description': 'Boolean value true',\n\t  'examples': [\n\t    'true'\n\t  ],\n\t  'seealso': ['false']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26136,
            "description": "module.exports = {\n\t  'name': 'version',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'version'\n\t  ],\n\t  'description': 'A string with the version number of math.js',\n\t  'examples': [\n\t    'version'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26154,
            "description": "module.exports = {\n\t  'name': 'lsolve',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'x=lsolve(L, b)'\n\t  ],\n\t  'description':\n\t  'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',\n\t  'examples': [\n\t    'a = [-2, 3; 2, 1]',\n\t    'b = [11, 9]',\n\t    'x = lsolve(a, b)'\n\t  ],\n\t  'seealso': [\n\t    'lup', 'lusolve', 'usolve', 'matrix', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26177,
            "description": "module.exports = {\n\t  'name': 'lup',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'lup(m)'\n\t  ],\n\t  'description':\n\t  'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',\n\t  'examples': [\n\t    'lup([[2, 1], [1, 4]])',\n\t    'lup(matrix([[2, 1], [1, 4]]))',\n\t    'lup(sparse([[2, 1], [1, 4]]))'\n\t  ],\n\t  'seealso': [\n\t    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26200,
            "description": "module.exports = {\n\t  'name': 'lusolve',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'x=lusolve(A, b)',\n\t    'x=lusolve(lu, b)'\n\t  ],\n\t  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',\n\t  'examples': [\n\t    'a = [-2, 3; 2, 1]',\n\t    'b = [11, 9]',\n\t    'x = lusolve(a, b)'\n\t  ],\n\t  'seealso': [\n\t    'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26223,
            "description": "module.exports = {\n\t  'name': 'slu',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'slu(A, order, threshold)'\n\t  ],\n\t  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',\n\t  'examples': [\n\t    'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'\n\t  ],\n\t  'seealso': [\n\t    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26243,
            "description": "module.exports = {\n\t  'name': 'usolve',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'x=usolve(U, b)'\n\t  ],\n\t  'description':\n\t  'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',\n\t  'examples': [\n\t    'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'\n\t  ],\n\t  'seealso': [\n\t    'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26264,
            "description": "module.exports = {\n\t  'name': 'abs',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'abs(x)'\n\t  ],\n\t  'description': 'Compute the absolute value.',\n\t  'examples': [\n\t    'abs(3.5)',\n\t    'abs(-4.2)'\n\t  ],\n\t  'seealso': ['sign']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26283,
            "description": "module.exports = {\n\t  'name': 'add',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x + y',\n\t    'add(x, y)'\n\t  ],\n\t  'description': 'Add two values.',\n\t  'examples': [\n\t    'a = 2.1 + 3.6',\n\t    'a - 3.6',\n\t    '3 + 2i',\n\t    '3 cm + 2 inch',\n\t    '\"2.3\" + \"4\"'\n\t  ],\n\t  'seealso': [\n\t    'subtract'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26308,
            "description": "module.exports = {\n\t  'name': 'cbrt',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'cbrt(x)',\n\t    'cbrt(x, allRoots)'\n\t  ],\n\t  'description':\n\t      'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',\n\t  'examples': [\n\t    'cbrt(64)',\n\t    'cube(4)',\n\t    'cbrt(-8)',\n\t    'cbrt(2 + 3i)',\n\t    'cbrt(8i)',\n\t    'cbrt(8i, true)',\n\t    'cbrt(27 m^3)'\n\t  ],\n\t  'seealso': [\n\t    'square',\n\t    'sqrt',\n\t    'cube',\n\t    'multiply'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26339,
            "description": "module.exports = {\n\t  'name': 'ceil',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'ceil(x)'\n\t  ],\n\t  'description':\n\t      'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',\n\t  'examples': [\n\t    'ceil(3.2)',\n\t    'ceil(3.8)',\n\t    'ceil(-4.2)'\n\t  ],\n\t  'seealso': ['floor', 'fix', 'round']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26360,
            "description": "module.exports = {\n\t  'name': 'cube',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'cube(x)'\n\t  ],\n\t  'description': 'Compute the cube of a value. The cube of x is x * x * x.',\n\t  'examples': [\n\t    'cube(2)',\n\t    '2^3',\n\t    '2 * 2 * 2'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'square',\n\t    'pow'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26384,
            "description": "module.exports = {\n\t  'name': 'divide',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x / y',\n\t    'divide(x, y)'\n\t  ],\n\t  'description': 'Divide two values.',\n\t  'examples': [\n\t    'a = 2 / 3',\n\t    'a * 3',\n\t    '4.5 / 2',\n\t    '3 + 4 / 2',\n\t    '(3 + 4) / 2',\n\t    '18 km / 4.5'\n\t  ],\n\t  'seealso': [\n\t    'multiply'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26410,
            "description": "module.exports = {\n\t  'name': 'dotDivide',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x ./ y',\n\t    'dotDivide(x, y)'\n\t  ],\n\t  'description': 'Divide two values element wise.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'b = [2, 1, 1; 3, 2, 5]',\n\t    'a ./ b'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'dotMultiply',\n\t    'divide'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26435,
            "description": "module.exports = {\n\t  'name': 'dotMultiply',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x .* y',\n\t    'dotMultiply(x, y)'\n\t  ],\n\t  'description': 'Multiply two values element wise.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'b = [2, 1, 1; 3, 2, 5]',\n\t    'a .* b'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'divide',\n\t    'dotDivide'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26460,
            "description": "module.exports = {\n\t  'name': 'dotpow',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x .^ y',\n\t    'dotpow(x, y)'\n\t  ],\n\t  'description':\n\t      'Calculates the power of x to y element wise.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'a .^ 2'\n\t  ],\n\t  'seealso': [\n\t    'pow'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26483,
            "description": "module.exports = {\n\t  'name': 'exp',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'exp(x)'\n\t  ],\n\t  'description': 'Calculate the exponent of a value.',\n\t  'examples': [\n\t    'exp(1.3)',\n\t    'e ^ 1.3',\n\t    'log(exp(1.3))',\n\t    'x = 2.4',\n\t    '(exp(i*x) == cos(x) + i*sin(x))   # Euler\\'s formula'\n\t  ],\n\t  'seealso': [\n\t    'pow',\n\t    'log'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26508,
            "description": "module.exports = {\n\t  'name': 'fix',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'fix(x)'\n\t  ],\n\t  'description':\n\t      'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',\n\t  'examples': [\n\t    'fix(3.2)',\n\t    'fix(3.8)',\n\t    'fix(-4.2)',\n\t    'fix(-4.8)'\n\t  ],\n\t  'seealso': ['ceil', 'floor', 'round']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26530,
            "description": "module.exports = {\n\t  'name': 'floor',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'floor(x)'\n\t  ],\n\t  'description':\n\t      'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',\n\t  'examples': [\n\t    'floor(3.2)',\n\t    'floor(3.8)',\n\t    'floor(-4.2)'\n\t  ],\n\t  'seealso': ['ceil', 'fix', 'round']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26551,
            "description": "module.exports = {\n\t  'name': 'gcd',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'gcd(a, b)',\n\t    'gcd(a, b, c, ...)'\n\t  ],\n\t  'description': 'Compute the greatest common divisor.',\n\t  'examples': [\n\t    'gcd(8, 12)',\n\t    'gcd(-4, 6)',\n\t    'gcd(25, 15, -10)'\n\t  ],\n\t  'seealso': [ 'lcm', 'xgcd' ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26572,
            "description": "module.exports = {\n\t  'name': 'hypot',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'hypot(a, b, c, ...)',\n\t    'hypot([a, b, c, ...])'\n\t  ],\n\t  'description': 'Calculate the hypotenusa of a list with values. ',\n\t  'examples': [\n\t    'hypot(3, 4)',\n\t    'sqrt(3^2 + 4^2)',\n\t    'hypot(-2)',\n\t    'hypot([3, 4, 5])'\n\t  ],\n\t  'seealso': [ 'abs', 'norm' ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26594,
            "description": "module.exports = {\n\t  'name': 'lcm',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'lcm(x, y)'\n\t  ],\n\t  'description': 'Compute the least common multiple.',\n\t  'examples': [\n\t    'lcm(4, 6)',\n\t    'lcm(6, 21)',\n\t    'lcm(6, 21, 5)'\n\t  ],\n\t  'seealso': [ 'gcd' ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26614,
            "description": "module.exports = {\n\t  'name': 'log',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'log(x)',\n\t    'log(x, base)'\n\t  ],\n\t  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',\n\t  'examples': [\n\t    'log(3.5)',\n\t    'a = log(2.4)',\n\t    'exp(a)',\n\t    '10 ^ 4',\n\t    'log(10000, 10)',\n\t    'log(10000) / log(10)',\n\t    'b = log(1024, 2)',\n\t    '2 ^ b'\n\t  ],\n\t  'seealso': [\n\t    'exp',\n\t    'log10'\n\t  ]\n\t};\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26642,
            "description": "module.exports = {\n\t  'name': 'log10',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'log10(x)'\n\t  ],\n\t  'description': 'Compute the 10-base logarithm of a value.',\n\t  'examples': [\n\t    'log10(0.00001)',\n\t    'log10(10000)',\n\t    '10 ^ 4',\n\t    'log(10000) / log(10)',\n\t    'log(10000, 10)'\n\t  ],\n\t  'seealso': [\n\t    'exp',\n\t    'log'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26667,
            "description": "module.exports = {\n\t  'name': 'mod',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x % y',\n\t    'x mod y',\n\t    'mod(x, y)'\n\t  ],\n\t  'description':\n\t      'Calculates the modulus, the remainder of an integer division.',\n\t  'examples': [\n\t    '7 % 3',\n\t    '11 % 2',\n\t    '10 mod 4',\n\t    'function isOdd(x) = x % 2',\n\t    'isOdd(2)',\n\t    'isOdd(3)'\n\t  ],\n\t  'seealso': ['divide']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26693,
            "description": "module.exports = {\n\t  'name': 'multiply',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x * y',\n\t    'multiply(x, y)'\n\t  ],\n\t  'description': 'multiply two values.',\n\t  'examples': [\n\t    'a = 2.1 * 3.4',\n\t    'a / 3.4',\n\t    '2 * 3 + 4',\n\t    '2 * (3 + 4)',\n\t    '3 * 2.1 km'\n\t  ],\n\t  'seealso': [\n\t    'divide'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26718,
            "description": "module.exports = {\n\t  'name': 'norm',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'norm(x)',\n\t    'norm(x, p)'\n\t  ],\n\t  'description': 'Calculate the norm of a number, vector or matrix.',\n\t  'examples': [\n\t    'abs(-3.5)',\n\t    'norm(-3.5)',\n\t    'norm(3 - 4i))',\n\t    'norm([1, 2, -3], Infinity)',\n\t    'norm([1, 2, -3], -Infinity)',\n\t    'norm([3, 4], 2)',\n\t    'norm([[1, 2], [3, 4]], 1)',\n\t    'norm([[1, 2], [3, 4]], \\'inf\\')',\n\t    'norm([[1, 2], [3, 4]], \\'fro\\')'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26744,
            "description": "module.exports = {\n\t  'name': 'nthRoot',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'nthRoot(a)',\n\t    'nthRoot(a, root)'\n\t  ],\n\t  'description': 'Calculate the nth root of a value. ' +\n\t      'The principal nth root of a positive real number A, ' +\n\t      'is the positive real solution of the equation \"x^root = A\".',\n\t  'examples': [\n\t    '4 ^ 3',\n\t    'nthRoot(64, 3)',\n\t    'nthRoot(9, 2)',\n\t    'sqrt(9)'\n\t  ],\n\t  'seealso': [\n\t    'sqrt',\n\t    'pow'\n\t  ]\n\t};\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26770,
            "description": "module.exports = {\n\t  'name': 'pow',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x ^ y',\n\t    'pow(x, y)'\n\t  ],\n\t  'description':\n\t      'Calculates the power of x to y, x^y.',\n\t  'examples': [\n\t    '2^3 = 8',\n\t    '2*2*2',\n\t    '1 + e ^ (pi * i)'\n\t  ],\n\t  'seealso': [ 'multiply' ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26792,
            "description": "module.exports = {\n\t  'name': 'round',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'round(x)',\n\t    'round(x, n)'\n\t  ],\n\t  'description':\n\t      'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',\n\t  'examples': [\n\t    'round(3.2)',\n\t    'round(3.8)',\n\t    'round(-4.2)',\n\t    'round(-4.8)',\n\t    'round(pi, 3)',\n\t    'round(123.45678, 2)'\n\t  ],\n\t  'seealso': ['ceil', 'floor', 'fix']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26817,
            "description": "module.exports = {\n\t  'name': 'sign',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'sign(x)'\n\t  ],\n\t  'description':\n\t      'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',\n\t  'examples': [\n\t    'sign(3.5)',\n\t    'sign(-4.2)',\n\t    'sign(0)'\n\t  ],\n\t  'seealso': [\n\t    'abs'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26840,
            "description": "module.exports = {\n\t  'name': 'sqrt',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'sqrt(x)'\n\t  ],\n\t  'description':\n\t      'Compute the square root value. If x = y * y, then y is the square root of x.',\n\t  'examples': [\n\t    'sqrt(25)',\n\t    '5 * 5',\n\t    'sqrt(-1)'\n\t  ],\n\t  'seealso': [\n\t    'square',\n\t    'multiply'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26864,
            "description": "module.exports = {\n\t  'name': 'square',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'square(x)'\n\t  ],\n\t  'description':\n\t      'Compute the square of a value. The square of x is x * x.',\n\t  'examples': [\n\t    'square(3)',\n\t    'sqrt(9)',\n\t    '3^2',\n\t    '3 * 3'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'pow',\n\t    'sqrt',\n\t    'cube'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26891,
            "description": "module.exports = {\n\t  'name': 'subtract',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x - y',\n\t    'subtract(x, y)'\n\t  ],\n\t  'description': 'subtract two values.',\n\t  'examples': [\n\t    'a = 5.3 - 2',\n\t    'a + 2',\n\t    '2/3 - 1/6',\n\t    '2 * 3 - 3',\n\t    '2.1 km - 500m'\n\t  ],\n\t  'seealso': [\n\t    'add'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26916,
            "description": "module.exports = {\n\t  'name': 'unaryMinus',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    '-x',\n\t    'unaryMinus(x)'\n\t  ],\n\t  'description':\n\t      'Inverse the sign of a value. Converts booleans and strings to numbers.',\n\t  'examples': [\n\t    '-4.5',\n\t    '-(-5.6)',\n\t    '-\"22\"'\n\t  ],\n\t  'seealso': [\n\t    'add', 'subtract', 'unaryPlus'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26940,
            "description": "module.exports = {\n\t  'name': 'unaryPlus',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    '+x',\n\t    'unaryPlus(x)'\n\t  ],\n\t  'description':\n\t      'Converts booleans and strings to numbers.',\n\t  'examples': [\n\t    '+true',\n\t    '+\"2\"'\n\t  ],\n\t  'seealso': [\n\t    'add', 'subtract', 'unaryMinus'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26963,
            "description": "module.exports = {\n\t  'name': 'xgcd',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'xgcd(a, b)'\n\t  ],\n\t  'description': 'Calculate the extended greatest common divisor for two values',\n\t  'examples': [\n\t    'xgcd(8, 12)',\n\t    'gcd(8, 12)',\n\t    'xgcd(36163, 21199)'\n\t  ],\n\t  'seealso': [ 'gcd', 'lcm' ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 26983,
            "description": "module.exports = {\n\t  'name': 'bitAnd',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x & y',\n\t    'bitAnd(x, y)'\n\t  ],\n\t  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',\n\t  'examples': [\n\t    '5 & 3',\n\t    'bitAnd(53, 131)',\n\t    '[1, 12, 31] & 42'\n\t  ],\n\t  'seealso': [\n\t    'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27006,
            "description": "module.exports = {\n\t  'name': 'bitNot',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    '~x',\n\t    'bitNot(x)'\n\t  ],\n\t  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',\n\t  'examples': [\n\t    '~1',\n\t    '~2',\n\t    'bitNot([2, -3, 4])'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27029,
            "description": "module.exports = {\n\t  'name': 'bitOr',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x | y',\n\t    'bitOr(x, y)'\n\t  ],\n\t  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',\n\t  'examples': [\n\t    '5 | 3',\n\t    'bitOr([1, 2, 3], 4)'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27051,
            "description": "module.exports = {\n\t  'name': 'bitXor',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'bitXor(x, y)'\n\t  ],\n\t  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',\n\t  'examples': [\n\t    'bitOr(1, 2)',\n\t    'bitXor([2, 3, 4], 4)'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27072,
            "description": "module.exports = {\n\t  'name': 'leftShift',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x << y',\n\t    'leftShift(x, y)'\n\t  ],\n\t  'description': 'Bitwise left logical shift of a value x by y number of bits.',\n\t  'examples': [\n\t    '4 << 1',\n\t    '8 >> 1'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27094,
            "description": "module.exports = {\n\t  'name': 'rightArithShift',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x >> y',\n\t    'leftShift(x, y)'\n\t  ],\n\t  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',\n\t  'examples': [\n\t    '8 >> 1',\n\t    '4 << 1',\n\t    '-12 >> 2'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27117,
            "description": "module.exports = {\n\t  'name': 'rightLogShift',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x >> y',\n\t    'leftShift(x, y)'\n\t  ],\n\t  'description': 'Bitwise right logical shift of a value x by y number of bits.',\n\t  'examples': [\n\t    '8 >>> 1',\n\t    '4 << 1',\n\t    '-12 >>> 2'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27140,
            "description": "module.exports = {\n\t  'name': 'bellNumbers',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'bellNumbers(n)'\n\t  ],\n\t  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',\n\t  'examples': [\n\t    'bellNumbers(3)',\n\t    'bellNumbers(8)'\n\t  ],\n\t  'seealso': ['stirlingS2']\n\t};\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27158,
            "description": "module.exports = {\n\t  'name': 'catalan',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'catalan(n)'\n\t  ],\n\t  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',\n\t  'examples': [\n\t    'catalan(3)',\n\t    'catalan(8)'\n\t  ],\n\t  'seealso': ['bellNumbers']\n\t};\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27176,
            "description": "module.exports = {\n\t  'name': 'composition',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'composition(n, k)'\n\t  ],\n\t  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',\n\t  'examples': [\n\t    'composition(5, 3)'\n\t  ],\n\t  'seealso': ['combinations']\n\t};\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27193,
            "description": "module.exports = {\n\t  'name': 'stirlingS2',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'stirlingS2(n, k)'\n\t  ],\n\t  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',\n\t  'examples': [\n\t    'stirlingS2(5, 3)'\n\t  ],\n\t  'seealso': ['bellNumbers']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27211,
            "description": "module.exports = {\n\t  'name': 'config',\n\t  'category': 'Core',\n\t  'syntax': [\n\t    'config()',\n\t    'config(options)'\n\t  ],\n\t  'description': 'Get configuration or change configuration.',\n\t  'examples': [\n\t    'config()',\n\t    '1/3 + 1/4',\n\t    'config({number: \"Fraction\"})',\n\t    '1/3 + 1/4'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27233,
            "description": "module.exports = {\n\t  'name': 'import',\n\t  'category': 'Core',\n\t  'syntax': [\n\t    'import(functions)',\n\t    'import(functions, options)'\n\t  ],\n\t  'description': 'Import functions or constants from an object.',\n\t  'examples': [\n\t    'import({myFn: f(x)=x^2, myConstant: 32 })',\n\t    'myFn(2)',\n\t    'myConstant'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27254,
            "description": "module.exports = {\n\t  'name': 'typed',\n\t  'category': 'Core',\n\t  'syntax': [\n\t    'typed(signatures)',\n\t    'typed(name, signatures)'\n\t  ],\n\t  'description': 'Create a typed function.',\n\t  'examples': [\n\t    'double = typed({ \"number, number\": f(x)=x+x })',\n\t    'double(2)',\n\t    'double(\"hello\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27275,
            "description": "module.exports = {\n\t  'name': 'arg',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    'arg(x)'\n\t  ],\n\t  'description':\n\t      'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',\n\t  'examples': [\n\t    'arg(2 + 2i)',\n\t    'atan2(3, 2)',\n\t    'arg(2 + 3i)'\n\t  ],\n\t  'seealso': [\n\t    're',\n\t    'im',\n\t    'conj',\n\t    'abs'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27301,
            "description": "module.exports = {\n\t  'name': 'conj',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    'conj(x)'\n\t  ],\n\t  'description':\n\t      'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',\n\t  'examples': [\n\t    'conj(2 + 3i)',\n\t    'conj(2 - 3i)',\n\t    'conj(-5.2i)'\n\t  ],\n\t  'seealso': [\n\t    're',\n\t    'im',\n\t    'abs',\n\t    'arg'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27327,
            "description": "module.exports = {\n\t  'name': 're',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    're(x)'\n\t  ],\n\t  'description': 'Get the real part of a complex number.',\n\t  'examples': [\n\t    're(2 + 3i)',\n\t    'im(2 + 3i)',\n\t    're(-5.2i)',\n\t    're(2.4)'\n\t  ],\n\t  'seealso': [\n\t    'im',\n\t    'conj',\n\t    'abs',\n\t    'arg'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27353,
            "description": "module.exports = {\n\t  'name': 'im',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    'im(x)'\n\t  ],\n\t  'description': 'Get the imaginary part of a complex number.',\n\t  'examples': [\n\t    'im(2 + 3i)',\n\t    're(2 + 3i)',\n\t    'im(-5.2i)',\n\t    'im(2.4)'\n\t  ],\n\t  'seealso': [\n\t    're',\n\t    'conj',\n\t    'abs',\n\t    'arg'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27379,
            "description": "module.exports = {\n\t  'name': 'eval',\n\t  'category': 'Expression',\n\t  'syntax': [\n\t    'eval(expression)',\n\t    'eval([expr1, expr2, expr3, ...])'\n\t  ],\n\t  'description': 'Evaluate an expression or an array with expressions.',\n\t  'examples': [\n\t    'eval(\"2 + 3\")',\n\t    'eval(\"sqrt(\" + 4 + \")\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27399,
            "description": "module.exports = {\n\t  'name': 'help',\n\t  'category': 'Expression',\n\t  'syntax': [\n\t    'help(object)',\n\t    'help(string)'\n\t  ],\n\t  'description': 'Display documentation on a function or data type.',\n\t  'examples': [\n\t    'help(sqrt)',\n\t    'help(\"complex\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27419,
            "description": "module.exports = {\n\t  'name': 'distance',\n\t  'category': 'Geometry',\n\t  'syntax': [\n\t    'distance([x1, y1], [x2, y2])',\n\t    'distance([[x1, y1], [x2, y2])'\n\t  ],\n\t  'description': 'Calculates the Euclidean distance between two points.',\n\t  'examples': [\n\t    'distance([0,0], [4,4])',\n\t    'distance([[0,0], [4,4]])'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27439,
            "description": "module.exports = {\n\t  'name': 'intersect',\n\t  'category': 'Geometry',\n\t  'syntax': [\n\t    'intersect(expr1, expr2, expr3, expr4)',\n\t    'intersect(expr1, expr2, expr3)'\n\t  ],\n\t  'description': 'Computes the intersection point of lines and/or planes.',\n\t  'examples': [\n\t    'intersect([0, 0], [10, 10], [10, 0], [0, 10])',\n\t    'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27459,
            "description": "module.exports = {\n\t  'name': 'and',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'x and y',\n\t    'and(x, y)'\n\t  ],\n\t  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',\n\t  'examples': [\n\t    'true and false',\n\t    'true and true',\n\t    '2 and 4'\n\t  ],\n\t  'seealso': [\n\t    'not', 'or', 'xor'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27482,
            "description": "module.exports = {\n\t  'name': 'not',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'not x',\n\t    'not(x)'\n\t  ],\n\t  'description': 'Logical not. Flips the boolean value of given argument.',\n\t  'examples': [\n\t    'not true',\n\t    'not false',\n\t    'not 2',\n\t    'not 0'\n\t  ],\n\t  'seealso': [\n\t    'and', 'or', 'xor'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27506,
            "description": "module.exports = {\n\t  'name': 'or',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'x or y',\n\t    'or(x, y)'\n\t  ],\n\t  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',\n\t  'examples': [\n\t    'true or false',\n\t    'false or false',\n\t    '0 or 4'\n\t  ],\n\t  'seealso': [\n\t    'not', 'and', 'xor'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27529,
            "description": "module.exports = {\n\t  'name': 'xor',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'x or y',\n\t    'or(x, y)'\n\t  ],\n\t  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',\n\t  'examples': [\n\t    'true xor false',\n\t    'false xor false',\n\t    'true xor true',\n\t    '0 or 4'\n\t  ],\n\t  'seealso': [\n\t    'not', 'and', 'or'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27553,
            "description": "module.exports = {\n\t  'name': 'concat',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'concat(A, B, C, ...)',\n\t    'concat(A, B, C, ..., dim)'\n\t  ],\n\t  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',\n\t  'examples': [\n\t    'A = [1, 2; 5, 6]',\n\t    'B = [3, 4; 7, 8]',\n\t    'concat(A, B)',\n\t    'concat(A, B, 1)',\n\t    'concat(A, B, 2)'\n\t  ],\n\t  'seealso': [\n\t    'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27578,
            "description": "module.exports = {\n\t  'name': 'cross',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'cross(A, B)'\n\t  ],\n\t  'description': 'Calculate the cross product for two vectors in three dimensional space.',\n\t  'examples': [\n\t    'cross([1, 1, 0],  [0, 1, 1])',\n\t    'cross([3, -3, 1], [4, 9, 2])',\n\t    'cross([2, 3, 4],  [5, 6, 7])'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'dot'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27601,
            "description": "module.exports = {\n\t  'name': 'det',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'det(x)'\n\t  ],\n\t  'description': 'Calculate the determinant of a matrix',\n\t  'examples': [\n\t    'det([1, 2; 3, 4])',\n\t    'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27622,
            "description": "module.exports = {\n\t  'name': 'diag',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'diag(x)',\n\t    'diag(x, k)'\n\t  ],\n\t  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',\n\t  'examples': [\n\t    'diag(1:3)',\n\t    'diag(1:3, 1)',\n\t    'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',\n\t    'diag(a)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27646,
            "description": "module.exports = {\n\t  'name': 'dot',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'dot(A, B)'\n\t  ],\n\t  'description': 'Calculate the dot product of two vectors. ' +\n\t      'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +\n\t      'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',\n\t  'examples': [\n\t    'dot([2, 4, 1], [2, 2, 3])',\n\t    '[2, 4, 1] * [2, 2, 3]'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'cross'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27670,
            "description": "module.exports = {\n\t  'name': 'eye',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'eye(n)',\n\t    'eye(m, n)',\n\t    'eye([m, n])',\n\t    'eye'\n\t  ],\n\t  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',\n\t  'examples': [\n\t    'eye(3)',\n\t    'eye(3, 5)',\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'eye(size(a))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27696,
            "description": "module.exports = {\n\t  'name': 'filter',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'filter(x, test)'\n\t  ],\n\t  'description': 'Filter items in a matrix.',\n\t  'examples': [\n\t    'isPositive(x) = x > 0',\n\t    'filter([6, -2, -1, 4, 3], isPositive)',\n\t    'filter([6, -2, 0, 1, 0], x != 0)'\n\t  ],\n\t  'seealso': ['sort', 'map', 'forEach']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27716,
            "description": "module.exports = {\n\t  'name': 'flatten',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'flatten(x)'\n\t  ],\n\t  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'size(a)',\n\t    'b = flatten(a)',\n\t    'size(b)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'resize', 'size', 'squeeze'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27739,
            "description": "module.exports = {\n\t  'name': 'forEach',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'forEach(x, callback)'\n\t  ],\n\t  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',\n\t  'examples': [\n\t    'forEach([1, 2, 3], function(val) { console.log(val) })'\n\t  ],\n\t  'seealso': ['map', 'sort', 'filter']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27757,
            "description": "module.exports = {\n\t  'name': 'inv',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'inv(x)'\n\t  ],\n\t  'description': 'Calculate the inverse of a matrix',\n\t  'examples': [\n\t    'inv([1, 2; 3, 4])',\n\t    'inv(4)',\n\t    '1 / 4'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27779,
            "description": "module.exports = {\n\t  'name': 'map',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'map(x, callback)'\n\t  ],\n\t  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',\n\t  'examples': [\n\t    'map([1, 2, 3], function(val) { return value * value })'\n\t  ],\n\t  'seealso': ['filter', 'forEach']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27797,
            "description": "module.exports = {\n\t  'name': 'ones',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'ones(m)',\n\t    'ones(m, n)',\n\t    'ones(m, n, p, ...)',\n\t    'ones([m])',\n\t    'ones([m, n])',\n\t    'ones([m, n, p, ...])',\n\t    'ones'\n\t  ],\n\t  'description': 'Create a matrix containing ones.',\n\t  'examples': [\n\t    'ones(3)',\n\t    'ones(3, 5)',\n\t    'ones([2,3]) * 4.5',\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'ones(size(a))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27827,
            "description": "module.exports = {\n\t  'name': 'partitionSelect',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'partitionSelect(x, k)',\n\t    'partitionSelect(x, k, compare)'\n\t  ],\n\t  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',\n\t  'examples': [\n\t    'partitionSelect([5, 10, 1], 2)',\n\t    'partitionSelect([\"C\", \"B\", \"A\", \"D\"], 1)'\n\t  ],\n\t  'seealso': ['sort']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27847,
            "description": "module.exports = {\n\t  'name': 'range',\n\t  'category': 'Type',\n\t  'syntax': [\n\t    'start:end',\n\t    'start:step:end',\n\t    'range(start, end)',\n\t    'range(start, end, step)',\n\t    'range(string)'\n\t  ],\n\t  'description':\n\t      'Create a range. Lower bound of the range is included, upper bound is excluded.',\n\t  'examples': [\n\t    '1:5',\n\t    '3:-1:-3',\n\t    'range(3, 7)',\n\t    'range(0, 12, 2)',\n\t    'range(\"4:10\")',\n\t    'a = [1, 2, 3, 4; 5, 6, 7, 8]',\n\t    'a[1:2, 1:2]'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27878,
            "description": "module.exports = {\n\t  'name': 'resize',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'resize(x, size)',\n\t    'resize(x, size, defaultValue)'\n\t  ],\n\t  'description': 'Resize a matrix.',\n\t  'examples': [\n\t    'resize([1,2,3,4,5], [3])',\n\t    'resize([1,2,3], [5])',\n\t    'resize([1,2,3], [5], -1)',\n\t    'resize(2, [2, 3])',\n\t    'resize(\"hello\", [8], \"!\")'\n\t  ],\n\t  'seealso': [\n\t    'size', 'subset', 'squeeze'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27903,
            "description": "module.exports = {\n\t  'name': 'size',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'size(x)'\n\t  ],\n\t  'description': 'Calculate the size of a matrix.',\n\t  'examples': [\n\t    'size(2.3)',\n\t    'size(\"hello world\")',\n\t    'a = [1, 2; 3, 4; 5, 6]',\n\t    'size(a)',\n\t    'size(1:6)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27927,
            "description": "module.exports = {\n\t  'name': 'sort',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'sort(x)',\n\t    'sort(x, compare)'\n\t  ],\n\t  'description': 'Sort the items in a matrix. Compare can be a string \"asc\" or \"desc\", or a custom sort function.',\n\t  'examples': [\n\t    'sort([5, 10, 1])',\n\t    'sort([\"C\", \"B\", \"A\", \"D\"])',\n\t    'sortByLength(a, b) = size(a)[1] - size(b)[1]',\n\t    'sort([\"Langdon\", \"Tom\", \"Sara\"], sortByLength)'\n\t  ],\n\t  'seealso': ['map', 'filter', 'forEach']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27949,
            "description": "module.exports = {\n\t  'name': 'squeeze',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'squeeze(x)'\n\t  ],\n\t  'description': 'Remove inner and outer singleton dimensions from a matrix.',\n\t  'examples': [\n\t    'a = zeros(3,2,1)',\n\t    'size(squeeze(a))',\n\t    'b = zeros(1,1,3)',\n\t    'size(squeeze(b))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 27972,
            "description": "module.exports = {\n\t  'name': 'subset',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'value(index)',\n\t    'value(index) = replacement',\n\t    'subset(value, [index])',\n\t    'subset(value, [index], replacement)'\n\t  ],\n\t  'description': 'Get or set a subset of a matrix or string. ' +\n\t      'Indexes are one-based. ' +\n\t      'Both the ranges lower-bound and upper-bound are included.',\n\t  'examples': [\n\t    'd = [1, 2; 3, 4]',\n\t    'e = []',\n\t    'e[1, 1:2] = [5, 6]',\n\t    'e[2, :] = [7, 8]',\n\t    'f = d * e',\n\t    'f[2, 1]',\n\t    'f[:, 1]'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28003,
            "description": "module.exports = {\n\t  'name': 'trace',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'trace(A)'\n\t  ],\n\t  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',\n\t  'examples': [\n\t    'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',\n\t    'trace(A)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28024,
            "description": "module.exports = {\n\t  'name': 'transpose',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'x\\'',\n\t    'transpose(x)'\n\t  ],\n\t  'description': 'Transpose a matrix',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'a\\'',\n\t    'transpose(a)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28047,
            "description": "module.exports = {\n\t  'name': 'zeros',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'zeros(m)',\n\t    'zeros(m, n)',\n\t    'zeros(m, n, p, ...)',\n\t    'zeros([m])',\n\t    'zeros([m, n])',\n\t    'zeros([m, n, p, ...])',\n\t    'zeros'\n\t  ],\n\t  'description': 'Create a matrix containing zeros.',\n\t  'examples': [\n\t    'zeros(3)',\n\t    'zeros(3, 5)',\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'zeros(size(a))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28076,
            "description": "module.exports = {\n\t  'name': 'combinations',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'combinations(n, k)'\n\t  ],\n\t  'description': 'Compute the number of combinations of n items taken k at a time',\n\t  'examples': [\n\t    'combinations(7, 5)'\n\t  ],\n\t  'seealso': ['permutations', 'factorial']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28094,
            "description": "module.exports = {\n\t  'name': 'factorial',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'kldivergence(x, y)'\n\t  ],\n\t  'description': 'Compute the factorial of a value',\n\t  'examples': [\n\t    '5!',\n\t    '5 * 4 * 3 * 2 * 1',\n\t    '3!'\n\t  ],\n\t  'seealso': ['combinations', 'permutations', 'gamma']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28114,
            "description": "module.exports = {\n\t  'name': 'gamma',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'gamma(n)'\n\t  ],\n\t  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',\n\t  'examples': [\n\t    'gamma(4)',\n\t    '3!',\n\t    'gamma(1/2)',\n\t    'sqrt(pi)'\n\t  ],\n\t  'seealso': ['factorial']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28135,
            "description": "module.exports = {\n\t  'name': 'kldivergence',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'n!',\n\t    'factorial(n)'\n\t  ],\n\t  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',\n\t  'examples': [\n\t    'math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28154,
            "description": "module.exports = {\n\t  'name': 'multinomial',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'multinomial(A)'\n\t  ],\n\t  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',\n\t  'examples': [\n\t    'multinomial([1, 2, 1])'\n\t  ],\n\t  'seealso': ['combinations', 'factorial']\n\t};\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28171,
            "description": "module.exports = {\n\t  'name': 'permutations',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'permutations(n)',\n\t    'permutations(n, k)'\n\t  ],\n\t  'description': 'Compute the number of permutations of n items taken k at a time',\n\t  'examples': [\n\t    'permutations(5)',\n\t    'permutations(5, 3)'\n\t  ],\n\t  'seealso': ['combinations', 'factorial']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28191,
            "description": "module.exports = {\n\t  'name': 'pickRandom',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'pickRandom(array)',\n\t    'pickRandom(array, number)',\n\t    'pickRandom(array, weights)',\n\t    'pickRandom(array, number, weights)',\n\t    'pickRandom(array, weights, number)'\n\t  ],\n\t  'description':\n\t      'Pick a random entry from a given array.',\n\t  'examples': [\n\t    'pickRandom(0:10)',\n\t    'pickRandom([1, 3, 1, 6])',\n\t    'pickRandom([1, 3, 1, 6], 2)',\n\t    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])',\n\t    'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])',\n\t    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'\n\t  ],\n\t  'seealso': ['random', 'randomInt']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28219,
            "description": "module.exports = {\n\t  'name': 'random',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'random()',\n\t    'random(max)',\n\t    'random(min, max)',\n\t    'random(size)',\n\t    'random(size, max)',\n\t    'random(size, min, max)'\n\t  ],\n\t  'description':\n\t      'Return a random number.',\n\t  'examples': [\n\t    'random()',\n\t    'random(10, 20)',\n\t    'random([2, 3])'\n\t  ],\n\t  'seealso': ['pickRandom', 'randomInt']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28245,
            "description": "module.exports = {\n\t  'name': 'randInt',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'randInt(max)',\n\t    'randInt(min, max)',\n\t    'randInt(size)',\n\t    'randInt(size, max)',\n\t    'randInt(size, min, max)'\n\t  ],\n\t  'description':\n\t      'Return a random integer number',\n\t  'examples': [\n\t    'randInt(10, 20)',\n\t    'randInt([2, 3], 10)'\n\t  ],\n\t  'seealso': ['pickRandom', 'random']\n\t};\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28268,
            "description": "module.exports = {\n\t  'name': 'compare',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'compare(x, y)'\n\t  ],\n\t  'description':\n\t      'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',\n\t  'examples': [\n\t    'compare(2, 3)',\n\t    'compare(3, 2)',\n\t    'compare(2, 2)',\n\t    'compare(5cm, 40mm)',\n\t    'compare(2, [1, 2, 3])'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28293,
            "description": "module.exports = {\n\t  'name': 'deepEqual',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'deepEqual(x, y)'\n\t  ],\n\t  'description':\n\t      'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',\n\t  'examples': [\n\t    '[1,3,4] == [1,3,4]',\n\t    '[1,3,4] == [1,3]'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28315,
            "description": "module.exports = {\n\t  'name': 'equal',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x == y',\n\t    'equal(x, y)'\n\t  ],\n\t  'description':\n\t      'Check equality of two values. Returns true if the values are equal, and false if not.',\n\t  'examples': [\n\t    '2+2 == 3',\n\t    '2+2 == 4',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    'a == b',\n\t    '50cm == 0.5m'\n\t  ],\n\t  'seealso': [\n\t    'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28342,
            "description": "module.exports = {\n\t  'name': 'larger',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x > y',\n\t    'larger(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',\n\t  'examples': [\n\t    '2 > 3',\n\t    '5 > 2*2',\n\t    'a = 3.3',\n\t    'b = 6-2.8',\n\t    '(a > b)',\n\t    '(b < a)',\n\t    '5 cm > 2 inch'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28370,
            "description": "module.exports = {\n\t  'name': 'largerEq',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x >= y',\n\t    'largerEq(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',\n\t  'examples': [\n\t    '2 > 1+1',\n\t    '2 >= 1+1',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    '(a > b)'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28396,
            "description": "module.exports = {\n\t  'name': 'smaller',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x < y',\n\t    'smaller(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',\n\t  'examples': [\n\t    '2 < 3',\n\t    '5 < 2*2',\n\t    'a = 3.3',\n\t    'b = 6-2.8',\n\t    '(a < b)',\n\t    '5 cm < 2 inch'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28423,
            "description": "module.exports = {\n\t  'name': 'smallerEq',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x <= y',\n\t    'smallerEq(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',\n\t  'examples': [\n\t    '2 < 1+1',\n\t    '2 <= 1+1',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    '(a < b)'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28449,
            "description": "module.exports = {\n\t  'name': 'unequal',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x != y',\n\t    'unequal(x, y)'\n\t  ],\n\t  'description':\n\t      'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',\n\t  'examples': [\n\t    '2+2 != 3',\n\t    '2+2 != 4',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    'a != b',\n\t    '50cm != 0.5m',\n\t    '5 cm != 2 inch'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28477,
            "description": "module.exports = {\n\t  'name': 'erf',\n\t  'category': 'Special',\n\t  'syntax': [\n\t    'erf(x)'\n\t  ],\n\t  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',\n\t  'examples': [\n\t    'erf(0.2)',\n\t    'erf(-0.5)',\n\t    'erf(4)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28497,
            "description": "module.exports = {\n\t  'name': 'max',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'max(a, b, c, ...)',\n\t    'max(A)',\n\t    'max(A, dim)'\n\t  ],\n\t  'description': 'Compute the maximum value of a list of values.',\n\t  'examples': [\n\t    'max(2, 3, 4, 1)',\n\t    'max([2, 3, 4, 1])',\n\t    'max([2, 5; 4, 3])',\n\t    'max([2, 5; 4, 3], 1)',\n\t    'max([2, 5; 4, 3], 2)',\n\t    'max(2.7, 7.1, -4.5, 2.0, 4.1)',\n\t    'min(2.7, 7.1, -4.5, 2.0, 4.1)'\n\t  ],\n\t  'seealso': [\n\t    'mean',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28531,
            "description": "module.exports = {\n\t  'name': 'mean',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'mean(a, b, c, ...)',\n\t    'mean(A)',\n\t    'mean(A, dim)'\n\t  ],\n\t  'description': 'Compute the arithmetic mean of a list of values.',\n\t  'examples': [\n\t    'mean(2, 3, 4, 1)',\n\t    'mean([2, 3, 4, 1])',\n\t    'mean([2, 5; 4, 3])',\n\t    'mean([2, 5; 4, 3], 1)',\n\t    'mean([2, 5; 4, 3], 2)',\n\t    'mean([1.0, 2.7, 3.2, 4.0])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28564,
            "description": "module.exports = {\n\t  'name': 'median',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'median(a, b, c, ...)',\n\t    'median(A)'\n\t  ],\n\t  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',\n\t  'examples': [\n\t    'median(5, 2, 7)',\n\t    'median([3, -1, 5, 7])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28592,
            "description": "module.exports = {\n\t  'name': 'min',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'min(a, b, c, ...)',\n\t    'min(A)',\n\t    'min(A, dim)'\n\t  ],\n\t  'description': 'Compute the minimum value of a list of values.',\n\t  'examples': [\n\t    'min(2, 3, 4, 1)',\n\t    'min([2, 3, 4, 1])',\n\t    'min([2, 5; 4, 3])',\n\t    'min([2, 5; 4, 3], 1)',\n\t    'min([2, 5; 4, 3], 2)',\n\t    'min(2.7, 7.1, -4.5, 2.0, 4.1)',\n\t    'max(2.7, 7.1, -4.5, 2.0, 4.1)'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'median',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28626,
            "description": "module.exports = {\n\t  'name': 'mode',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'mode(a, b, c, ...)',\n\t    'mode(A)',\n\t    'mode(A, a, b, B, c, ...)'\n\t  ],\n\t  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',\n\t  'examples': [\n\t    'mode(5, 2, 7)',\n\t    'mode([3, -1, 5, 7])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28656,
            "description": "module.exports = {\n\t  'name': 'prod',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'prod(a, b, c, ...)',\n\t    'prod(A)'\n\t  ],\n\t  'description': 'Compute the product of all values.',\n\t  'examples': [\n\t    'prod(2, 3, 4)',\n\t    'prod([2, 3, 4])',\n\t    'prod([2, 5; 4, 3])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'min',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28686,
            "description": "module.exports = {\n\t  'name': 'quantileSeq',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'quantileSeq(A, prob[, sorted])',\n\t    'quantileSeq(A, [prob1, prob2, ...][, sorted])',\n\t    'quantileSeq(A, N[, sorted])'\n\t  ],\n\t  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \\n\\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',\n\t  'examples': [\n\t    'quantileSeq([3, -1, 5, 7], 0.5)',\n\t    'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',\n\t    'quantileSeq([3, -1, 5, 7], 2)',\n\t    'quantileSeq([-1, 3, 5, 7], 0.5, true)'\n\t  ],\n\t  'seealso': [\n\t    'mean',\n\t    'median',\n\t    'min',\n\t    'max',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28717,
            "description": "module.exports = {\n\t  'name': 'std',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'std(a, b, c, ...)',\n\t    'std(A)',\n\t    'std(A, normalization)'\n\t  ],\n\t  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n\t  'examples': [\n\t    'std(2, 4, 6)',\n\t    'std([2, 4, 6, 8])',\n\t    'std([2, 4, 6, 8], \"uncorrected\")',\n\t    'std([2, 4, 6, 8], \"biased\")',\n\t    'std([1, 2, 3; 4, 5, 6])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28750,
            "description": "module.exports = {\n\t  'name': 'sum',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'sum(a, b, c, ...)',\n\t    'sum(A)'\n\t  ],\n\t  'description': 'Compute the sum of all values.',\n\t  'examples': [\n\t    'sum(2, 3, 4, 1)',\n\t    'sum([2, 3, 4, 1])',\n\t    'sum([2, 5; 4, 3])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28780,
            "description": "module.exports = {\n\t  'name': 'var',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'var(a, b, c, ...)',\n\t    'var(A)',\n\t    'var(A, normalization)'\n\t  ],\n\t  'description': 'Compute the variance of all values. Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n\t  'examples': [\n\t    'var(2, 4, 6)',\n\t    'var([2, 4, 6, 8])',\n\t    'var([2, 4, 6, 8], \"uncorrected\")',\n\t    'var([2, 4, 6, 8], \"biased\")',\n\t    'var([1, 2, 3; 4, 5, 6])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28813,
            "description": "module.exports = {\n\t  'name': 'acos',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acos(x)'\n\t  ],\n\t  'description': 'Compute the inverse cosine of a value in radians.',\n\t  'examples': [\n\t    'acos(0.5)',\n\t    'acos(cos(2.3))'\n\t  ],\n\t  'seealso': [\n\t    'cos',\n\t    'atan',\n\t    'asin'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28836,
            "description": "module.exports = {\n\t  'name': 'acosh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acosh(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',\n\t  'examples': [\n\t    'acosh(1.5)'\n\t  ],\n\t  'seealso': [\n\t    'cosh',\n\t    'asinh',\n\t    'atanh'\n\t  ]\n\t};\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28857,
            "description": "module.exports = {\n\t  'name': 'acot',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acot(x)'\n\t  ],\n\t  'description': 'Calculate the inverse cotangent of a value.',\n\t  'examples': [\n\t    'acot(0.5)',\n\t    'acot(cot(0.5))',\n\t    'acot(2)'\n\t  ],\n\t  'seealso': [\n\t    'cot',\n\t    'atan'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28880,
            "description": "module.exports = {\n\t  'name': 'acoth',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acoth(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',\n\t  'examples': [\n\t    'acoth(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acsch',\n\t    'asech'\n\t  ]\n\t};\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28900,
            "description": "module.exports = {\n\t  'name': 'acsc',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acsc(x)'\n\t  ],\n\t  'description': 'Calculate the inverse cotangent of a value.',\n\t  'examples': [\n\t    'acsc(0.5)',\n\t    'acsc(csc(0.5))',\n\t    'acsc(2)'\n\t  ],\n\t  'seealso': [\n\t    'csc',\n\t    'asin',\n\t    'asec'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28924,
            "description": "module.exports = {\n\t  'name': 'acsch',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acsch(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',\n\t  'examples': [\n\t    'acsch(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'asech',\n\t    'acoth'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28945,
            "description": "module.exports = {\n\t  'name': 'asec',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asec(x)'\n\t  ],\n\t  'description': 'Calculate the inverse secant of a value.',\n\t  'examples': [\n\t    'asec(0.5)',\n\t    'asec(sec(0.5))',\n\t    'asec(2)'\n\t  ],\n\t  'seealso': [\n\t    'acos',\n\t    'acot',\n\t    'acsc'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28969,
            "description": "module.exports = {\n\t  'name': 'asech',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asech(x)'\n\t  ],\n\t  'description': 'Calculate the inverse secant of a value.',\n\t  'examples': [\n\t    'asech(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acsch',\n\t    'acoth'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 28990,
            "description": "module.exports = {\n\t  'name': 'asin',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asin(x)'\n\t  ],\n\t  'description': 'Compute the inverse sine of a value in radians.',\n\t  'examples': [\n\t    'asin(0.5)',\n\t    'asin(sin(2.3))'\n\t  ],\n\t  'seealso': [\n\t    'sin',\n\t    'acos',\n\t    'atan'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29013,
            "description": "module.exports = {\n\t  'name': 'asinh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asinh(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',\n\t  'examples': [\n\t    'asinh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acosh',\n\t    'atanh'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29034,
            "description": "module.exports = {\n\t  'name': 'atan',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'atan(x)'\n\t  ],\n\t  'description': 'Compute the inverse tangent of a value in radians.',\n\t  'examples': [\n\t    'atan(0.5)',\n\t    'atan(tan(2.3))'\n\t  ],\n\t  'seealso': [\n\t    'tan',\n\t    'acos',\n\t    'asin'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29057,
            "description": "module.exports = {\n\t  'name': 'atanh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'atanh(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',\n\t  'examples': [\n\t    'atanh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acosh',\n\t    'asinh'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29078,
            "description": "module.exports = {\n\t  'name': 'atan2',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'atan2(y, x)'\n\t  ],\n\t  'description':\n\t      'Computes the principal value of the arc tangent of y/x in radians.',\n\t  'examples': [\n\t    'atan2(2, 2) / pi',\n\t    'angle = 60 deg in rad',\n\t    'x = cos(angle)',\n\t    'y = sin(angle)',\n\t    'atan2(y, x)'\n\t  ],\n\t  'seealso': [\n\t    'sin',\n\t    'cos',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29105,
            "description": "module.exports = {\n\t  'name': 'cos',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'cos(x)'\n\t  ],\n\t  'description': 'Compute the cosine of x in radians.',\n\t  'examples': [\n\t    'cos(2)',\n\t    'cos(pi / 4) ^ 2',\n\t    'cos(180 deg)',\n\t    'cos(60 deg)',\n\t    'sin(0.2)^2 + cos(0.2)^2'\n\t  ],\n\t  'seealso': [\n\t    'acos',\n\t    'sin',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29131,
            "description": "module.exports = {\n\t  'name': 'cosh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'cosh(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic cosine of x in radians.',\n\t  'examples': [\n\t    'cosh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'sinh',\n\t    'tanh',\n\t    'coth'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29153,
            "description": "module.exports = {\n\t  'name': 'cot',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'cot(x)'\n\t  ],\n\t  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',\n\t  'examples': [\n\t    'cot(2)',\n\t    '1 / tan(2)'\n\t  ],\n\t  'seealso': [\n\t    'sec',\n\t    'csc',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29176,
            "description": "module.exports = {\n\t  'name': 'coth',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'coth(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic cotangent of x in radians.',\n\t  'examples': [\n\t    'coth(2)',\n\t    '1 / tanh(2)'\n\t  ],\n\t  'seealso': [\n\t    'sech',\n\t    'csch',\n\t    'tanh'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29199,
            "description": "module.exports = {\n\t  'name': 'csc',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'csc(x)'\n\t  ],\n\t  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',\n\t  'examples': [\n\t    'csc(2)',\n\t    '1 / sin(2)'\n\t  ],\n\t  'seealso': [\n\t    'sec',\n\t    'cot',\n\t    'sin'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29222,
            "description": "module.exports = {\n\t  'name': 'csch',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'csch(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',\n\t  'examples': [\n\t    'csch(2)',\n\t    '1 / sinh(2)'\n\t  ],\n\t  'seealso': [\n\t    'sech',\n\t    'coth',\n\t    'sinh'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29245,
            "description": "module.exports = {\n\t  'name': 'sec',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'sec(x)'\n\t  ],\n\t  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',\n\t  'examples': [\n\t    'sec(2)',\n\t    '1 / cos(2)'\n\t  ],\n\t  'seealso': [\n\t    'cot',\n\t    'csc',\n\t    'cos'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29268,
            "description": "module.exports = {\n\t  'name': 'sech',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'sech(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',\n\t  'examples': [\n\t    'sech(2)',\n\t    '1 / cosh(2)'\n\t  ],\n\t  'seealso': [\n\t    'coth',\n\t    'csch',\n\t    'cosh'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29291,
            "description": "module.exports = {\n\t  'name': 'sin',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'sin(x)'\n\t  ],\n\t  'description': 'Compute the sine of x in radians.',\n\t  'examples': [\n\t    'sin(2)',\n\t    'sin(pi / 4) ^ 2',\n\t    'sin(90 deg)',\n\t    'sin(30 deg)',\n\t    'sin(0.2)^2 + cos(0.2)^2'\n\t  ],\n\t  'seealso': [\n\t    'asin',\n\t    'cos',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29317,
            "description": "module.exports = {\n\t  'name': 'sinh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'sinh(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic sine of x in radians.',\n\t  'examples': [\n\t    'sinh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'cosh',\n\t    'tanh'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29338,
            "description": "module.exports = {\n\t  'name': 'tan',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'tan(x)'\n\t  ],\n\t  'description': 'Compute the tangent of x in radians.',\n\t  'examples': [\n\t    'tan(0.5)',\n\t    'sin(0.5) / cos(0.5)',\n\t    'tan(pi / 4)',\n\t    'tan(45 deg)'\n\t  ],\n\t  'seealso': [\n\t    'atan',\n\t    'sin',\n\t    'cos'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29363,
            "description": "module.exports = {\n\t  'name': 'tanh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'tanh(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic tangent of x in radians.',\n\t  'examples': [\n\t    'tanh(0.5)',\n\t    'sinh(0.5) / cosh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'sinh',\n\t    'cosh'\n\t  ]\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29385,
            "description": "module.exports = {\n\t  'name': 'to',\n\t  'category': 'Units',\n\t  'syntax': [\n\t    'x to unit',\n\t    'to(x, unit)'\n\t  ],\n\t  'description': 'Change the unit of a value.',\n\t  'examples': [\n\t    '5 inch to cm',\n\t    '3.2kg to g',\n\t    '16 bytes in bits'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29406,
            "description": "module.exports = {\n\t  'name': 'clone',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'clone(x)'\n\t  ],\n\t  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',\n\t  'examples': [\n\t    'clone(3.5)',\n\t    'clone(2 - 4i)',\n\t    'clone(45 deg)',\n\t    'clone([1, 2; 3, 4])',\n\t    'clone(\"hello world\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29428,
            "description": "module.exports = {\n\t  'name': 'format',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'format(value)',\n\t    'format(value, precision)'\n\t  ],\n\t  'description': 'Format a value of any type as string.',\n\t  'examples': [\n\t    'format(2.3)',\n\t    'format(3 - 4i)',\n\t    'format([])',\n\t    'format(pi, 3)'\n\t  ],\n\t  'seealso': ['print']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29450,
            "description": "module.exports = {\n\t  'name': 'isNaN',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isNaN(x)'\n\t  ],\n\t  'description': 'Test whether a value is NaN (not a number)',\n\t  'examples': [\n\t    'isNaN(2)',\n\t    'isNaN(0 / 0)',\n\t    'isNaN(NaN)',\n\t    'isNaN(Infinity)'\n\t  ],\n\t  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29471,
            "description": "module.exports = {\n\t  'name': 'isInteger',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isInteger(x)'\n\t  ],\n\t  'description': 'Test whether a value is an integer number.',\n\t  'examples': [\n\t    'isInteger(2)',\n\t    'isInteger(3.5)',\n\t    'isInteger([3, 0.5, -2])'\n\t  ],\n\t  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29491,
            "description": "module.exports = {\n\t  'name': 'isNegative',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isNegative(x)'\n\t  ],\n\t  'description': 'Test whether a value is negative: smaller than zero.',\n\t  'examples': [\n\t    'isNegative(2)',\n\t    'isNegative(0)',\n\t    'isNegative(-4)',\n\t    'isNegative([3, 0.5, -2])'\n\t  ],\n\t  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29512,
            "description": "module.exports = {\n\t  'name': 'isNumeric',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isNumeric(x)'\n\t  ],\n\t  'description': 'Test whether a value is a numeric value. ' +\n\t    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',\n\t  'examples': [\n\t    'isNumeric(2)',\n\t    'isNumeric(0)',\n\t    'isNumeric(bignumber(500))',\n\t    'isNumeric(fraction(0.125))',\n\t    'isNumeric(\"3\")',\n\t    'isNumeric(2 + 3i)',\n\t    'isNumeric([2.3, \"foo\", false])'\n\t  ],\n\t  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29537,
            "description": "module.exports = {\n\t  'name': 'isPositive',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isPositive(x)'\n\t  ],\n\t  'description': 'Test whether a value is positive: larger than zero.',\n\t  'examples': [\n\t    'isPositive(2)',\n\t    'isPositive(0)',\n\t    'isPositive(-4)',\n\t    'isPositive([3, 0.5, -2])'\n\t  ],\n\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29558,
            "description": "module.exports = {\n\t  'name': 'isPrime',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isPrime(x)'\n\t  ],\n\t  'description': 'Test whether a value is prime: has no divisors other than itself and one.',\n\t  'examples': [\n\t    'isPrime(3)',\n\t    'isPrime(-2)',\n\t    'isPrime([2, 17, 100])'\n\t  ],\n\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n\t};\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29577,
            "description": "module.exports = {\n\t  'name': 'isZero',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isZero(x)'\n\t  ],\n\t  'description': 'Test whether a value is zero.',\n\t  'examples': [\n\t    'isZero(2)',\n\t    'isZero(0)',\n\t    'isZero(-4)',\n\t    'isZero([3, 0, -2, 0])'\n\t  ],\n\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29598,
            "description": "module.exports = {\n\t  'name': 'typeof',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'typeof(x)'\n\t  ],\n\t  'description': 'Get the type of a variable.',\n\t  'examples': [\n\t    'typeof(3.5)',\n\t    'typeof(2 - 4i)',\n\t    'typeof(45 deg)',\n\t    'typeof(\"hello world\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29619,
            "description": "module.exports = [\n\t  __webpack_require__(281),\n\t  __webpack_require__(304),\n\t  __webpack_require__(305),\n\t  __webpack_require__(306),\n\t  __webpack_require__(307)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29632,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var parse = load(__webpack_require__(282));\n  /**\n\t   * Parse and compile an expression.\n\t   * Returns a an object with a function `eval([scope])` to evaluate the\n\t   * compiled expression.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.compile(expr)                       // returns one node\n\t   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var code = math.compile('sqrt(3^2 + 4^2)');\n\t   *     code.eval(); // 5\n\t   *\n\t   *     var scope = {a: 3, b: 4}\n\t   *     var code = math.compile('a * b'); // 12\n\t   *     code.eval(scope); // 12\n\t   *     scope.a = 5;\n\t   *     code.eval(scope); // 20\n\t   *\n\t   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);\n\t   *     nodes[2].eval(); // 12\n\t   *\n\t   * See also:\n\t   *\n\t   *    parse, eval\n\t   *\n\t   * @param {string | string[] | Array | Matrix} expr\n\t   *            The expression to be compiled\n\t   * @return {{eval: Function} | Array.<{eval: Function}>} code\n\t   *            An object with the compiled expression\n\t   * @throws {Error}",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29692,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29694,
            "description": "'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\tvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var AccessorNode            = load(__webpack_require__(283));\n\t  var ArrayNode               = load(__webpack_require__(289));\n\t  var AssignmentNode          = load(__webpack_require__(290));\n\t  var BlockNode               = load(__webpack_require__(293));\n\t  var ConditionalNode         = load(__webpack_require__(294));\n\t  var ConstantNode            = load(__webpack_require__(295));\n\t  var FunctionAssignmentNode  = load(__webpack_require__(296));\n\t  var IndexNode               = load(__webpack_require__(297));\n\t  var ObjectNode              = load(__webpack_require__(300));\n\t  var OperatorNode            = load(__webpack_require__(301));\n\t  var ParenthesisNode         = load(__webpack_require__(303));\n\t  var FunctionNode            = load(__webpack_require__(302));\n\t  var RangeNode               = load(__webpack_require__(298));\n\t  var SymbolNode              = load(__webpack_require__(299));\n\n  /**\n\t   * Parse an expression. Returns a node tree, which can be evaluated by\n\t   * invoking node.eval();\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     parse(expr)\n\t   *     parse(expr, options)\n\t   *     parse([expr1, expr2, expr3, ...])\n\t   *     parse([expr1, expr2, expr3, ...], options)\n\t   *\n\t   * Example:\n\t   *\n\t   *     var node = parse('sqrt(3^2 + 4^2)');\n\t   *     node.compile(math).eval(); // 5\n\t   *\n\t   *     var scope = {a:3, b:4}\n\t   *     var node = parse('a * b'); // 12\n\t   *     var code = node.compile(math);\n\t   *     code.eval(scope); // 12\n\t   *     scope.a = 5;\n\t   *     code.eval(scope); // 20\n\t   *\n\t   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n\t   *     nodes[2].compile(math).eval(); // 12\n\t   *\n\t   * @param {string | string[] | Matrix} expr\n\t   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n\t   *                                                   - `nodes` a set of custom nodes\n\t   * @return {Node | Node[]} node\n\t   * @throws {Error}",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29851,
            "description": "Get the first character from the expression.\nThe character is stored into the char c. If the end of the expression is\nreached, the function puts an empty string in c.",
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29864,
            "description": "Get the next character from the expression.\nThe character is stored into the char c. If the end of the expression is\nreached, the function puts an empty string in c.",
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29875,
            "description": "Preview the previous character from the expression.",
            "return": {
                "description": "cNext",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29884,
            "description": "Preview the next character from the expression.",
            "return": {
                "description": "cNext",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29893,
            "description": "Preview the second next character from the expression.",
            "return": {
                "description": "cNext",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 29902,
            "description": "Get next token in the current string expr.\nThe token and token type are available as token and token_type",
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30060,
            "description": "Get next token and skip newline tokens",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30070,
            "description": "Open parameters.\nNew line characters will be ignored until closeParams() is called",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30078,
            "description": "Close parameters.\nNew line characters will no longer be ignored",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30086,
            "description": "Checks whether the current character `c` is a valid alpha character:\n\n- A latin letter (upper or lower case) Ascii: a-z, A-Z\n- An underscore                         Ascii: _\n- A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n- A greek letter                       Unicode: \\u0370 - \\u03FF\n- A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n\nThe previous and next characters are needed to determine whether\nthis character is part of a unicode surrogate pair.",
            "params": [
                {
                    "name": "c",
                    "description": "Current character in the expression",
                    "type": "String"
                },
                {
                    "name": "cPrev",
                    "description": "Previous character",
                    "type": "String"
                },
                {
                    "name": "cNext",
                    "description": "Next character",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30109,
            "description": "Test whether a character is a valid latin, greek, or letter-like character",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30118,
            "description": "Test whether two given 16 bit characters form a surrogate pair of a\nunicode math symbol.\n\nhttp://unicode-table.com/en/\nhttp://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n\nNote: In ES6 will be unicode aware:\nhttp://stackoverflow.com/questions/280712/javascript-unicode-regexes\nhttps://mathiasbynens.be/notes/es6-unicode-regex",
            "params": [
                {
                    "name": "high",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "low",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30139,
            "description": "Check whether given character c is a white space character: space, tab, or enter",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "nestingLevel",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30150,
            "description": "Test whether the character c is a decimal mark (dot).\nThis is the case when it's not the start of a delimiter '.*', './', or '.^'",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cNext",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30161,
            "description": "checks if the given char c is a digit or dot",
            "params": [
                {
                    "name": "c",
                    "description": "a string with one character",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30170,
            "description": "checks if the given char c is a digit",
            "params": [
                {
                    "name": "c",
                    "description": "a string with one character",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30179,
            "description": "Start of the parse levels below, in order of precedence",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30209,
            "description": "Parse a block with expressions. Expressions can be separated by a newline\ncharacter '\\n', or by a semicolon ';'. In case of a semicolon, no output\nof the preceding line is returned.",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30264,
            "description": "Assignment of a function or variable,\n- can be a variable like 'a=2.3'\n- or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n- defining a function like 'f(x) = x^2'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30319,
            "description": "conditional operation\n\n    condition ? truePart : falsePart\n\nNote: conditional operator is right-associative",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30358,
            "description": "logical or, 'x or y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30374,
            "description": "logical exclusive or, 'x xor y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30390,
            "description": "logical and, 'x and y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30406,
            "description": "bitwise or, 'x | y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30422,
            "description": "bitwise exclusive or (xor), 'x ^| y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30438,
            "description": "bitwise and, 'x & y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30454,
            "description": "relational operators",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30484,
            "description": "Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30512,
            "description": "conversion operators 'to' and 'in'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30547,
            "description": "parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30595,
            "description": "add or subtract",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30621,
            "description": "multiply, divide, modulus",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30674,
            "description": "Unary plus and minus, and logical and bitwise not",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30700,
            "description": "power\nNote: power operator is right associative",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30723,
            "description": "Left hand operators: factorial x!, transpose x'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30752,
            "description": "Parse a custom node handler. A node handler can be used to process\nnodes in a custom way, for example for handling a plot.\n\nA handler must be passed as second argument of the parse function.\n- must extend math.expression.node.Node\n- must contain a function _compile(defs: Object) : string\n- must contain a function find(filter: Object) : Node[]\n- must contain a function toString() : string\n- the constructor is called with a single argument containing all parameters\n\nFor example:\n\n    nodes = {\n      'plot': PlotHandler\n    };\n\nThe constructor of the handler is called as:\n\n    node = new PlotHandler(params);\n\nThe handler will be invoked when evaluating an expression like:\n\n    node = math.parse('plot(sin(x), x)', nodes);",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30820,
            "description": "parse symbols: functions, variables, constants, units",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30843,
            "description": "parse accessors:\n- function invocation in round brackets (...), for example sqrt(2)\n- index enclosed in square brackets [...], for example A[2,3]\n- dot notation for properties, like foo.bar",
            "params": [
                {
                    "name": "node",
                    "description": "Node on which to apply the parameters. If there\n                      are no parameters in the expression, the node\n                      itself is returned",
                    "type": "Node"
                },
                {
                    "name": "[types]  Filter the types of notations\n                           can be ['(', '[', '.']",
                    "description": "",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30935,
            "description": "parse a string.\nA string is enclosed by double quotes",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30959,
            "description": "Parse a string surrounded by double quotes \"...\"",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 30986,
            "description": "parse the matrix",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31057,
            "description": "Parse a single comma-separated row from a matrix, like 'a, b, c'",
            "return": {
                "description": "node",
                "type": "ArrayNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31076,
            "description": "parse an object, enclosed in angle brackets{...}, for example {value: 2}",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31130,
            "description": "parse a number",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31149,
            "description": "parentheses",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31179,
            "description": "Evaluated when the expression is not yet ended but expected to end",
            "return": {
                "description": "res",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31193,
            "description": "Shortcut for getting the current row value (one based)\nReturns the line of the currently handled expression",
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31204,
            "description": "Shortcut for getting the current col value (one based)\nReturns the column (position) where the last token starts",
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31213,
            "description": "Create an error",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "instantiated error",
                "type": "SyntaxError"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31227,
            "description": "Create an error",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "instantiated error",
                "type": "Error"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31249,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31251,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n\t  var access = load(__webpack_require__(286));\n  /**\n\t   * @constructor AccessorNode\n\t   * @extends {Node}\n\t   * Access an object property or get a matrix subset\n\t   *\n\t   * @param {Node} object                 The object from which to retrieve\n\t   *                                      a property or subset.\n\t   * @param {IndexNode} index             IndexNode containing ranges",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31307,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31341,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31350,
            "description": "Create a new AccessorNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "AccessorNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31363,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "AccessorNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31371,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31385,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31399,
            "description": "Are parenthesis needed?",
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31418,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31420,
            "description": "'use strict';\nvar keywords = __webpack_require__(285);\n\tvar extend = __webpack_require__(3).extend;\n\tvar deepEqual= __webpack_require__(3).deepEqual;\nfunction factory (type, config, load, typed, math) {\n\t  /**\n\t   * Node",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31438,
            "description": "Evaluate the node",
            "params": [
                {
                    "name": "scope",
                    "description": "Scope to read/write variables",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the result",
                "type": "*"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31453,
            "description": "Compile the node to javascript code",
            "return": {
                "description": "} expr  Returns an object with a function 'eval',\n                                 which can be invoked as expr.eval([scope]),\n                                 where scope is an optional object with\n                                 variables.",
                "type": "Eval: function"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31496,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         and constants globally available inside the closure\n                         of the compiled expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31513,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31522,
            "description": "Create a new Node having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "OperatorNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31533,
            "description": "Validate whether an object is a Node, for use with map",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "Returns the input if it's a node, else throws an Error",
                "type": "Node"
            },
            "access": "protected",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31547,
            "description": "Recursively traverse all nodes in a node tree. Executes given callback for\nthis node and each of its child nodes.",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback called for every node in the node tree.",
                    "type": "Function(node: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31568,
            "description": "Recursively transform a node tree via a transform function.\n\nFor example, to replace all nodes of type SymbolNode having name 'x' with a\nConstantNode with value 2:\n\n    var res = Node.transform(function (node, path, parent) {\n      if (node && node.isSymbolNode) && (node.name == 'x')) {\n        return new ConstantNode(2);\n      }\n      else {\n        return node;\n      }\n    });",
            "params": [
                {
                    "name": "callback",
                    "description": "A mapping function accepting a node, and returning\n         a replacement for the node or the original node.\n         Signature: callback(node: Node, index: string, parent: Node) : Node",
                    "type": "Function(node: Node, path: string, parent: Node) : Node"
                }
            ],
            "return": {
                "description": "Returns the original node or its replacement",
                "type": "Node"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31602,
            "description": "Find any node in the node tree matching given filter function. For example, to\nfind all nodes of type SymbolNode having name 'x':\n\n    var results = Node.filter(function (node) {\n      return (node && node.isSymbolNode) && (node.name == 'x');\n    });",
            "params": [
                {
                    "name": "callback",
                    "description": "A test function returning true when a node matches, and false\n           otherwise. Function signature:\n           callback(node: Node, index: string, parent: Node) : boolean",
                    "type": "Function(node: Node, path: string, parent: Node) : Node"
                }
            ],
            "return": {
                "description": "nodes       An array with nodes matching given filter criteria",
                "type": "Node[]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31638,
            "description": "Create a shallow clone of this node",
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31647,
            "description": "Create a deep clone of this node",
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31657,
            "description": "Deep compare this node with another node.",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "Returns true when both nodes are of the same type and\n                  contain the same values (as do their childs)",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31669,
            "description": "Get string representation. (wrapper function)\n\nThis function can get an object of the following form:\n{\n   handler: //This can be a callback function of the form\n            // \"function callback(node, options)\"or\n            // a map that maps function names (used in FunctionNodes)\n            // to callbacks\n   parenthesis: \"keep\" //the parenthesis option (This is optional)\n}",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31706,
            "description": "Internal function to generate the string output.\nThis has to be implemented by every Node",
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31717,
            "description": "Get LaTeX representation. (wrapper function)\n\nThis function can get an object of the following form:\n{\n   handler: //This can be a callback function of the form\n            // \"function callback(node, options)\"or\n            // a map that maps function names (used in FunctionNodes)\n            // to callbacks\n   parenthesis: \"keep\" //the parenthesis option (This is optional)\n}",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31754,
            "description": "Internal function to generate the LaTeX output.\nThis has to be implemented by every Node",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31766,
            "description": "Get identifier.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31774,
            "description": "Get the content of the current Node.",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31782,
            "description": "Validate the symbol names of a scope.\nThrows an error when the scope contains an illegal symbol.",
            "params": [
                {
                    "name": "scope",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31806,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31808,
            "description": "'use strict';\n// Reserved keywords not allowed to use in the parser\n\tmodule.exports = {\n\t  end: true\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31820,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\nfunction factory (type, config, load, typed) {\n\t  var subset = load(__webpack_require__(288));\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Retrieve part of an object:\n\t   *\n\t   * - Retrieve a property from an object\n\t   * - Retrieve a part of a string\n\t   * - Retrieve a matrix subset\n\t   *\n\t   * @param {Object | Array | Matrix | string} object\n\t   * @param {Index} index\n\t   * @return {Object | Array | Matrix | string} Returns the subset",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31872,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31874,
            "description": "var IndexError = __webpack_require__(43);\n/**\n\t * Transform zero-based indices to one-based indices in errors\n\t * @param {Error} err\n\t * @returns {Error} Returns the transformed error",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31895,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31897,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar validateIndex = __webpack_require__(40).validateIndex;\n\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Get or set a subset of a matrix or string.\n\t   *\n\t   * Syntax:\n\t   *     math.subset(value, index)                                // retrieve a subset\n\t   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n\t   *\n\t   * Examples:\n\t   *\n\t   *     // get a subset\n\t   *     var d = [[1, 2], [3, 4]];\n\t   *     math.subset(d, math.index(1, 0));        // returns 3\n\t   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]\n\t   *\n\t   *     // replace a subset\n\t   *     var e = [];\n\t   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]\n\t   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]\n\t   *\n\t   * See also:\n\t   *\n\t   *     size, resize, squeeze, index\n\t   *\n\t   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n\t   * @param {Index} index                     An index containing ranges for each\n\t   *                                          dimension\n\t   * @param {*} [replacement]                 An array, matrix, or scalar.\n\t   *                                          If provided, the subset is replaced with replacement.\n\t   *                                          If not provided, the subset is returned\n\t   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n\t   *                                          the matrix is resized. If not provided,\n\t   *                                          math.matrix elements will be left undefined.\n\t   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 31988,
            "description": "Retrieve a subset of a string",
            "params": [
                {
                    "name": "str",
                    "description": "string from which to get a substring",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "An index containing ranges for each dimension",
                    "type": "Index"
                }
            ],
            "return": {
                "description": "substring",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32019,
            "description": "Replace a substring in a string",
            "params": [
                {
                    "name": "str",
                    "description": "string to be replaced",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "An index containing ranges for each dimension",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "Replacement string",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value to be uses when resizing\n                               the string. is ' ' by default",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "result",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32081,
            "description": "Retrieve a property from an object",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                }
            ],
            "return": {
                "description": "Returns the value of the property",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32101,
            "description": "Set a property on an object",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns the updated object",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32130,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32132,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * @constructor ArrayNode\n\t   * @extends {Node}\n\t   * Holds an 1-dimensional array with items\n\t   * @param {Node[]} [items]   1 dimensional array with items",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32171,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32194,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32205,
            "description": "Create a new ArrayNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "ArrayNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32219,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "ArrayNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32227,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32240,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32273,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32275,
            "description": "'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n\t  var ArrayNode = load(__webpack_require__(289));\n\t  var matrix = load(__webpack_require__(52));\n\t  var assign = load(__webpack_require__(291));\n\t  var access = load(__webpack_require__(286));\n  var keywords = __webpack_require__(285);\n\t  var operators = __webpack_require__(292);\n  /**\n\t   * @constructor AssignmentNode\n\t   * @extends {Node}\n\t   *\n\t   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n\t   * replace a subset of a matrix like `A[2,2]=42`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     new AssignmentNode(symbol, value)\n\t   *     new AssignmentNode(object, index, value)\n\t   *\n\t   * Usage:\n\t   *\n\t   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2\n\t   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n\t   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n\t   *\n\t   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n\t   * @param {IndexNode} [index=null]            Index, property name or matrix\n\t   *                                            index. Optional. If not provided\n\t   *                                            and `object` is a SymbolNode,\n\t   *                                            the property is assigned to the\n\t   *                                            global scope.\n\t   * @param {Node} value                        The value to be assigned",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32364,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32449,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32461,
            "description": "Create a new AssignmentNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "AssignmentNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32477,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "AssignmentNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32502,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32518,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32542,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32544,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\nfunction factory (type, config, load, typed) {\n\t  var subset = load(__webpack_require__(288));\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Replace part of an object:\n\t   *\n\t   * - Assign a property to an object\n\t   * - Replace a part of a string\n\t   * - Replace a matrix subset\n\t   *\n\t   * @param {Object | Array | Matrix | string} object\n\t   * @param {Index} index\n\t   * @param {*} value\n\t   * @return {Object | Array | Matrix | string} Returns the original object\n\t   *                                            except in case of a string",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32599,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32601,
            "description": "'use strict'\n//list of identifiers of nodes in order of their precedence\n\t//also contains information about left/right associativity\n\t//and which other operator the operator is associative with\n\t//Example:\n\t// addition is associative with addition and subtraction, because:\n\t// (a+b)+c=a+(b+c)\n\t// (a+b)-c=a+(b-c)\n\t//\n\t// postfix operators are left associative, prefix operators \n\t// are right associative\n\t//\n\t//It's also possible to set the following properties:\n\t// latexParens: if set to false, this node doesn't need to be enclosed\n\t//              in parentheses when using LaTeX\n\t// latexLeftParens: if set to false, this !OperatorNode's! \n\t//                  left argument doesn't need to be enclosed\n\t//                  in parentheses\n\t// latexRightParens: the same for the right argument\n\tvar properties = [\n\t  { //assignment\n\t    'AssignmentNode': {},\n\t    'FunctionAssignmentNode': {}\n\t  },\n\t  { //conditional expression\n\t    'ConditionalNode': {\n\t      latexLeftParens: false,\n\t      latexRightParens: false,\n\t      latexParens: false\n\t      //conditionals don't need parentheses in LaTeX because\n\t      //they are 2 dimensional\n\t    }\n\t  },\n\t  { //logical or\n\t    'OperatorNode:or': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n  },\n\t  { //logical xor\n\t    'OperatorNode:xor': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //logical and\n\t    'OperatorNode:and': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitwise or\n\t    'OperatorNode:bitOr': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitwise xor\n\t    'OperatorNode:bitXor': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitwise and\n\t    'OperatorNode:bitAnd': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //relational operators\n\t    'OperatorNode:equal': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:unequal': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:smaller': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:larger': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:smallerEq': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:largerEq': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitshift operators\n\t    'OperatorNode:leftShift': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:rightArithShift': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:rightLogShift': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //unit conversion\n\t    'OperatorNode:to': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //range\n\t    'RangeNode': {}\n\t  },\n\t  { //addition, subtraction\n\t    'OperatorNode:add': {\n\t      associativity: 'left',\n\t      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']\n\t    },\n\t    'OperatorNode:subtract': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //multiply, divide, modulus\n\t    'OperatorNode:multiply': {\n\t      associativity: 'left',\n\t      associativeWith: [\n\t        'OperatorNode:multiply',\n\t        'OperatorNode:divide',\n\t        'Operator:dotMultiply',\n\t        'Operator:dotDivide'\n\t      ]\n\t    },\n\t    'OperatorNode:divide': {\n\t      associativity: 'left',\n\t      associativeWith: [],\n\t      latexLeftParens: false,\n\t      latexRightParens: false,\n\t      latexParens: false\n\t      //fractions don't require parentheses because\n\t      //they're 2 dimensional, so parens aren't needed\n\t      //in LaTeX\n\t    },\n\t    'OperatorNode:dotMultiply': {\n\t      associativity: 'left',\n\t      associativeWith: [\n\t        'OperatorNode:multiply',\n\t        'OperatorNode:divide',\n\t        'OperatorNode:dotMultiply',\n\t        'OperatorNode:doDivide'\n\t      ]\n\t    },\n\t    'OperatorNode:dotDivide': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:mod': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //unary prefix operators\n\t    'OperatorNode:unaryPlus': {\n\t      associativity: 'right'\n\t    },\n\t    'OperatorNode:unaryMinus': {\n\t      associativity: 'right'\n\t    },\n\t    'OperatorNode:bitNot': {\n\t      associativity: 'right'\n\t    },\n\t    'OperatorNode:not': {\n\t      associativity: 'right'\n\t    }\n\t  },\n\t  { //exponentiation\n\t    'OperatorNode:pow': {\n\t      associativity: 'right',\n\t      associativeWith: [],\n\t      latexRightParens: false\n\t      //the exponent doesn't need parentheses in\n\t      //LaTeX because it's 2 dimensional\n\t      //(it's on top)\n\t    },\n\t    'OperatorNode:dotPow': {\n\t      associativity: 'right',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //factorial\n\t    'OperatorNode:factorial': {\n\t      associativity: 'left'\n\t    }\n\t  },\n\t  { //matrix transpose\n\t    'OperatorNode:transpose': {\n\t      associativity: 'left'\n\t    }\n\t  }\n\t];\n/**\n\t * Get the precedence of a Node.\n\t * Higher number for higher precedence, starting with 0.\n\t * Returns null if the precedence is undefined.\n\t *\n\t * @param {Node}\n\t * @param {string} parenthesis\n\t * @return {number|null}",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32835,
            "description": "Get the associativity of an operator (left or right).\nReturns a string containing 'left' or 'right' or null if\nthe associativity is not defined.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "parenthesis",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String|null"
            },
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32875,
            "description": "Check if an operator is associative with another operator.\nReturns either true or false or null if not defined.",
            "params": [
                {
                    "name": "nodeA",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "nodeB",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "parenthesis",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool|null"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32921,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32923,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n\t  var ResultSet = load(__webpack_require__(72));\n  /**\n\t   * @constructor BlockNode\n\t   * @extends {Node}\n\t   * Holds a set with blocks\n\t   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n\t   *            An array with blocks, where a block is constructed as an Object\n\t   *            with properties block, which is a Node, and visible, which is\n\t   *            a boolean. The property visible is optional and is true by default",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32967,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 32998,
            "description": "Execute a callback for each of the child blocks of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33008,
            "description": "Create a new BlockNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "BlockNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33027,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "BlockNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33042,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33054,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33073,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33075,
            "description": "'use strict';\nvar latex = __webpack_require__(32);\n\tvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n\t   *\n\t   * @param {Node} condition   Condition, must result in a boolean\n\t   * @param {Node} trueExpr    Expression evaluated when condition is true\n\t   * @param {Node} falseExpr   Expression evaluated when condition is true\n\t   *\n\t   * @constructor ConditionalNode\n\t   * @extends {Node}",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33114,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33127,
            "description": "Test whether a condition is met",
            "params": [
                {
                    "name": "condition",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "true if condition is true or non-zero, else false",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33167,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33177,
            "description": "Create a new ConditionalNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "ConditionalNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33191,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "ConditionalNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33199,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33238,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33259,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33261,
            "description": "'use strict';\nvar getType = __webpack_require__(41).type;\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * A ConstantNode holds a constant value like a number or string. A ConstantNode\n\t   * stores a stringified version of the value and uses this to compile to\n\t   * JavaScript.\n\t   *\n\t   * In case of a stringified number as input, this may be compiled to a BigNumber\n\t   * when the math instance is configured for BigNumbers.\n\t   *\n\t   * Usage:\n\t   *\n\t   *     // stringified values with type\n\t   *     new ConstantNode('2.3', 'number');\n\t   *     new ConstantNode('true', 'boolean');\n\t   *     new ConstantNode('hello', 'string');\n\t   *\n\t   *     // non-stringified values, type will be automatically detected\n\t   *     new ConstantNode(2.3);\n\t   *     new ConstantNode('hello');\n\t   *\n\t   * @param {string | number | boolean | null | undefined} value\n\t   *                            When valueType is provided, value must contain\n\t   *                            an uninterpreted string representing the value.\n\t   *                            When valueType is undefined, value can be a\n\t   *                            number, string, boolean, null, or undefined, and\n\t   *                            the type will be determined automatically.\n\t   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',\n\t   *                              'boolean', 'undefined', 'null'\n\t   * @constructor ConstantNode\n\t   * @extends {Node}",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33341,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33389,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33398,
            "description": "Create a new ConstantNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node) : Node"
                }
            ],
            "return": {
                "description": "Returns a clone of the node",
                "type": "ConstantNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33408,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "ConstantNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33416,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33431,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33464,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33466,
            "description": "'use strict';\nvar keywords = __webpack_require__(285);\n\tvar latex = __webpack_require__(32);\n\tvar operators = __webpack_require__(292);\nfunction isString (x) {\n\t  return typeof x === 'string';\n\t}\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * @constructor FunctionAssignmentNode\n\t   * @extends {Node}\n\t   * Function assignment\n\t   *\n\t   * @param {string} name           Function name\n\t   * @param {string[] | Array.<{name: string, type: string}>} params\n\t   *                                Array with function parameter names, or an\n\t   *                                array with objects containing the name\n\t   *                                and type of the parameter\n\t   * @param {Node} expr             The function expression",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33520,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33556,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33564,
            "description": "Create a new FunctionAssignmentNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "FunctionAssignmentNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33576,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "FunctionAssignmentNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33584,
            "description": "Is parenthesis needed?",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "parenthesis",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33598,
            "description": "get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33613,
            "description": "get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33636,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33638,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n\t  var RangeNode = load(__webpack_require__(298));\n\t  var SymbolNode = load(__webpack_require__(299));\n  var Range = load(__webpack_require__(67));\n  var isArray = Array.isArray;\n  /**\n\t   * @constructor IndexNode\n\t   * @extends Node\n\t   *\n\t   * Describes a subset of a matrix or an object property.\n\t   * Cannot be used on its own, needs to be used within an AccessorNode or\n\t   * AssignmentNode.\n\t   *\n\t   * @param {Node[]} dimensions\n\t   * @param {boolean} [dotNotation=false]  Optional property describing whether\n\t   *                                       this index was written using dot\n\t   *                                       notation like `a.b`, or using bracket\n\t   *                                       notation like `a[\"b\"]` (default).\n\t   *                                       Used to stringify an IndexNode.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33696,
            "description": "Compile all range nodes\n\nWhen some of the dimensions has `end` defined, the IndexNode requires\na variable `size` to be defined in the current closure, and must contain\nthe size of the matrix that's being handled. To check whether the `size`\nvariable is needed, call IndexNode.needsSize().",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                               or constants globally available for the\n                               compiled expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                               the name of the argument, and the value is `true`.\n                               The object may not be mutated, but must be\n                               extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "code",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33774,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33784,
            "description": "Create a new IndexNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "IndexNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33799,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "IndexNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33807,
            "description": "Test whether this IndexNode contains a single property name",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33817,
            "description": "Returns the property name if IndexNode contains a property.\nIf not, returns null.",
            "return": {
                "description": "",
                "type": "String | null"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33826,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33838,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33853,
            "description": "Test whether this IndexNode needs the object size, size of the Matrix",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33872,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33874,
            "description": "'use strict';\nvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * @constructor RangeNode\n\t   * @extends {Node}\n\t   * create a range\n\t   * @param {Node} start  included lower-bound\n\t   * @param {Node} end    included upper-bound\n\t   * @param {Node} [step] optional step",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33913,
            "description": "Check whether the RangeNode needs the `end` symbol to be defined.\nThis end is the size of the Matrix in current dimension.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33927,
            "description": "Compile the node to javascript code\n\nWhen the range has a symbol `end` defined, the RangeNode requires\na variable `end` to be defined in the current closure, which must contain\nthe length of the of the matrix that's being handled in the range's\ndimension. To check whether the `end` variable is needed, call\nRangeNode.needsEnd().",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33954,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33966,
            "description": "Create a new RangeNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "RangeNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33980,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "RangeNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 33988,
            "description": "Calculate the necessary parentheses",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "parenthesis",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "parentheses",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34016,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34051,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34090,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34092,
            "description": "'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed, math) {\n\t  var Node = load(__webpack_require__(284));\n  var Unit = load(__webpack_require__(75));\n  /**\n\t   * @constructor SymbolNode\n\t   * @extends {Node}\n\t   * A symbol node can hold and resolve a symbol\n\t   * @param {string} name\n\t   * @extends {Node}",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34127,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34162,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34170,
            "description": "Create a new SymbolNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node) : Node"
                }
            ],
            "return": {
                "description": "Returns a clone of the node",
                "type": "SymbolNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34180,
            "description": "Throws an error 'Undefined symbol {name}'",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34188,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "SymbolNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34196,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34206,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34235,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34237,
            "description": "'use strict';\nvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * @constructor ObjectNode\n\t   * @extends {Node}\n\t   * Holds an object with keys/values\n\t   * @param {Object.<string, Node>} [properties]   array with key/value pairs",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34275,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "code",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34297,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34309,
            "description": "Create a new ObjectNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "ObjectNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34325,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "ObjectNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34339,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34355,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34378,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34380,
            "description": "'use strict';\nvar latex = __webpack_require__(32);\n\tvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed, math) {\n\t  var Node         = load(__webpack_require__(284));\n\t  var ConstantNode = load(__webpack_require__(295));\n\t  var SymbolNode   = load(__webpack_require__(299));\n\t  var FunctionNode = load(__webpack_require__(302));\n  /**\n\t   * @constructor OperatorNode\n\t   * @extends {Node}\n\t   * An operator with two arguments, like 2+3\n\t   *\n\t   * @param {string} op           Operator name, for example '+'\n\t   * @param {string} fn           Function name, for example 'add'\n\t   * @param {Node[]} args         Operator arguments\n\t   * @param {boolean} [implicit]  Is this an implicit multiplication?",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34432,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34456,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34466,
            "description": "Create a new OperatorNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "OperatorNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34480,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "OperatorNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34488,
            "description": "Calculate which parentheses are necessary. Gets an OperatorNode\n(which is the root of the tree) and an Array of Nodes\n(this.args) and returns an array where 'true' means that an argument\nhas to be enclosed in parentheses whereas 'false' means the opposite.",
            "params": [
                {
                    "name": "root",
                    "description": "",
                    "type": "OperatorNode"
                },
                {
                    "name": "parenthesis",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Node[]"
                },
                {
                    "name": "latex",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean[]"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34672,
            "description": "Get string representation.",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34736,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34831,
            "description": "Get identifier.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34848,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34850,
            "description": "'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed, math) {\n\t  var Node = load(__webpack_require__(284));\n\t  var SymbolNode = load(__webpack_require__(299));\n  /**\n\t   * @constructor FunctionNode\n\t   * @extends {./Node}\n\t   * invoke a list with arguments on a node\n\t   * @param {./Node} fn       Node resolving with a function on which to invoke\n\t   *                          the arguments, typically a SymboNode or AccessorNode\n\t   * @param {./Node[]} args",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34912,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34979,
            "description": "Get a unique name for a arguments to store in defs",
            "params": [
                {
                    "name": "defs",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A string like 'args1', 'args2', ...",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 34998,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35008,
            "description": "Create a new FunctionNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "FunctionNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35023,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "FunctionNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35035,
            "description": "Get string representation. (wrapper function)\nThis overrides parts of Node's toString function.\nIf callback is an object containing callbacks, it\ncalls the correct callback for the current node,\notherwise it falls back to calling Node's toString\nfunction.",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35063,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35154,
            "description": "Get LaTeX representation. (wrapper function)\nThis overrides parts of Node's toTex function.\nIf callback is an object containing callbacks, it\ncalls the correct callback for the current node,\notherwise it falls back to calling Node's toTex\nfunction.",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35180,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35223,
            "description": "Get identifier.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35240,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35242,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * @constructor ParenthesisNode\n\t   * @extends {Node}\n\t   * A parenthesis node describes manual parenthesis from the user input\n\t   * @param {Node} content\n\t   * @extends {Node}",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35275,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35291,
            "description": "Get the content of the current Node.",
            "return": {
                "description": "content",
                "type": "Node"
            },
            "override": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35300,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35308,
            "description": "Create a new ParenthesisNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node) : Node"
                }
            ],
            "return": {
                "description": "Returns a clone of the node",
                "type": "ParenthesisNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35319,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "ParenthesisNode"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35327,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35340,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35361,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35363,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var parse = load(__webpack_require__(282));\n  /**\n\t   * Evaluate an expression.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.eval(expr)\n\t   *     math.eval(expr, scope)\n\t   *     math.eval([expr1, expr2, expr3, ...])\n\t   *     math.eval([expr1, expr2, expr3, ...], scope)\n\t   *\n\t   * Example:\n\t   *\n\t   *     math.eval('(2+3)/4');                // 1.25\n\t   *     math.eval('sqrt(3^2 + 4^2)');        // 5\n\t   *     math.eval('sqrt(-4)');               // 2i\n\t   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]\n\t   *\n\t   *     var scope = {a:3, b:4};\n\t   *     math.eval('a * b', scope);           // 12\n\t   *\n\t   * See also:\n\t   *\n\t   *    parse, compile\n\t   *\n\t   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n\t   * @param {Object} [scope]                    Scope to read/write variables\n\t   * @return {*} The result of the expression\n\t   * @throws {Error}",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35429,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35431,
            "description": "'use strict';\nfunction factory (type, config, load, typed, math) {\n\t  var docs = load(__webpack_require__(103));\n  /**\n\t   * Retrieve help on a function or data type.\n\t   * Help files are retrieved from the documentation in math.expression.docs.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.help(search)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    console.log(math.help('sin').toString());\n\t   *    console.log(math.help(math.add).toString());\n\t   *    console.log(math.help(math.add).toJSON());\n\t   *\n\t   * @param {Function | string | Object} search   A function or function name\n\t   *                                              for which to get help\n\t   * @return {Help} A help object",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35499,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35501,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var parse = load(__webpack_require__(282));\n  /**\n\t   * Parse an expression. Returns a node tree, which can be evaluated by\n\t   * invoking node.eval();\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.parse(expr)\n\t   *     math.parse(expr, options)\n\t   *     math.parse([expr1, expr2, expr3, ...])\n\t   *     math.parse([expr1, expr2, expr3, ...], options)\n\t   *\n\t   * Example:\n\t   *\n\t   *     var node = math.parse('sqrt(3^2 + 4^2)');\n\t   *     node.compile().eval(); // 5\n\t   *\n\t   *     var scope = {a:3, b:4}\n\t   *     var node = math.parse('a * b'); // 12\n\t   *     var code = node.compile();\n\t   *     code.eval(scope); // 12\n\t   *     scope.a = 5;\n\t   *     code.eval(scope); // 20\n\t   *\n\t   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n\t   *     nodes[2].compile().eval(); // 12\n\t   *\n\t   * See also:\n\t   *\n\t   *     eval, compile\n\t   *\n\t   * @param {string | string[] | Matrix} expr          Expression to be parsed\n\t   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n\t   *                                                   - `nodes` a set of custom nodes\n\t   * @return {Node | Node[]} node\n\t   * @throws {Error}",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35554,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35556,
            "description": "'use strict';\nfunction factory (type, config, load, typed, math) {\n\t  var Parser = load(__webpack_require__(308));\n  /**\n\t   * Create a parser. The function creates a new `math.expression.Parser` object.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.parser()\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var parser = new math.parser();\n\t   *\n\t   *     // evaluate expressions\n\t   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5\n\t   *     var b = parser.eval('sqrt(-4)');        // 2i\n\t   *     var c = parser.eval('2 inch in cm');    // 5.08 cm\n\t   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476\n\t   *\n\t   *     // define variables and functions\n\t   *     parser.eval('x = 7 / 2');               // 3.5\n\t   *     parser.eval('x + 3');                   // 6.5\n\t   *     parser.eval('function f(x, y) = x^y');  // f(x, y)\n\t   *     parser.eval('f(2, 3)');                 // 8\n\t   *\n\t   *     // get and set variables and functions\n\t   *     var x = parser.get('x');                // 7\n\t   *     var f = parser.get('f');                // function\n\t   *     var g = f(3, 2);                        // 9\n\t   *     parser.set('h', 500);\n\t   *     var i = parser.eval('h / 2');           // 250\n\t   *     parser.set('hello', function (name) {\n\t   *       return 'hello, ' + name + '!';\n\t   *     });\n\t   *     parser.eval('hello(\"user\")');           // \"hello, user!\"\n\t   *\n\t   *     // clear defined functions and variables\n\t   *     parser.clear();\n\t   *\n\t   * See also:\n\t   *\n\t   *    eval, compile, parse\n\t   *\n\t   * @return {Parser} Parser",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35618,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35620,
            "description": "'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed, math) {\n\t  var _parse = load(__webpack_require__(282));\n  /**\n\t   * @constructor Parser\n\t   * Parser contains methods to evaluate or parse expressions, and has a number\n\t   * of convenience methods to get, set, and remove variables from memory. Parser\n\t   * keeps a scope containing variables in memory, which is used for all\n\t   * evaluations.\n\t   *\n\t   * Methods:\n\t   *    var result = parser.eval(expr);    // evaluate an expression\n\t   *    var value = parser.get(name);      // retrieve a variable from the parser\n\t   *    var values = parser.getAll();      // retrieve all defined variables\n\t   *    parser.set(name, value);           // set a variable in the parser\n\t   *    parser.remove(name);               // clear a variable from the\n\t   *                                       // parsers scope\n\t   *    parser.clear();                    // clear the parsers scope\n\t   *\n\t   * Example usage:\n\t   *    var parser = new Parser();\n\t   *    // Note: there is a convenience method which can be used instead:\n\t   *    // var parser = new math.parser();\n\t   *\n\t   *    // evaluate expressions\n\t   *    parser.eval('sqrt(3^2 + 4^2)');         // 5\n\t   *    parser.eval('sqrt(-4)');                // 2i\n\t   *    parser.eval('2 inch in cm');            // 5.08 cm\n\t   *    parser.eval('cos(45 deg)');             // 0.7071067811865476\n\t   *\n\t   *    // define variables and functions\n\t   *    parser.eval('x = 7 / 2');               // 3.5\n\t   *    parser.eval('x + 3');                   // 6.5\n\t   *    parser.eval('function f(x, y) = x^y');  // f(x, y)\n\t   *    parser.eval('f(2, 3)');                 // 8\n\t   *\n\t   *    // get and set variables and functions\n\t   *    var x = parser.get('x');                // 7\n\t   *    var f = parser.get('f');                // function\n\t   *    var g = f(3, 2);                        // 9\n\t   *    parser.set('h', 500);\n\t   *    var i = parser.eval('h / 2');           // 250\n\t   *    parser.set('hello', function (name) {\n\t   *        return 'hello, ' + name + '!';\n\t   *    });\n\t   *    parser.eval('hello(\"user\")');           // \"hello, user!\"\n\t   *\n\t   *    // clear defined functions and variables\n\t   *    parser.clear();\n\t   *",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35685,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35691,
            "description": "Parse an expression and return the parsed function node.\nThe node tree can be compiled via `code = node.compile(math)`,\nand the compiled code can be executed as `code.eval([scope])`",
            "params": [
                {
                    "name": "expr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "Node"
            },
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35703,
            "description": "Parse and compile an expression, return the compiled javascript code.\nThe node can be evaluated via code.eval([scope])",
            "params": [
                {
                    "name": "expr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "} code",
                "type": "Eval: function"
            },
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35714,
            "description": "Parse and evaluate the given expression",
            "params": [
                {
                    "name": "expr",
                    "description": "A string containing an expression, for example \"2+3\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "result     The result, or undefined when the expression was empty",
                "type": "*"
            },
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35727,
            "description": "Get a variable (a function or variable) by name from the parsers scope.\nReturns undefined when not found",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value",
                "type": "* | undefined"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35738,
            "description": "Get a map with all defined variables",
            "return": {
                "description": "values",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35746,
            "description": "Set a symbol (a function or variable) by name from the parsers scope.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "* | undefined"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35756,
            "description": "Remove a variable from the parsers scope",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35765,
            "description": "Clear the scope with variables and functions",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35785,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35787,
            "description": "module.exports = [\n\t  __webpack_require__(283),\n\t  __webpack_require__(289),\n\t  __webpack_require__(290),\n\t  __webpack_require__(293),\n\t  __webpack_require__(294),\n\t  __webpack_require__(295),\n\t  __webpack_require__(297),\n\t  __webpack_require__(296),\n\t  __webpack_require__(302),\n\t  __webpack_require__(284),\n\t  __webpack_require__(300),\n\t  __webpack_require__(301),\n\t  __webpack_require__(303),\n\t  __webpack_require__(298),\n\t  __webpack_require__(299),\n\t  __webpack_require__(310)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35811,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * @constructor UpdateNode",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35832,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35834,
            "description": "module.exports = [\n\t  __webpack_require__(312),\n\t  __webpack_require__(314),\n\t  __webpack_require__(316),\n\t  __webpack_require__(318),\n\t  __webpack_require__(319),\n\t  __webpack_require__(321),\n\t  __webpack_require__(327),\n\t  __webpack_require__(332),\n\t  __webpack_require__(334),\n\t  __webpack_require__(336)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35852,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n/**\n\t * Attach a transform function to math.range\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function concat\n\t * from one-based to zero based",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35896,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 35898,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar array = __webpack_require__(40);\n\tvar IndexError = __webpack_require__(43);\n\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Concatenate two or more matrices.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.concat(A, B, C, ...)\n\t   *     math.concat(A, B, C, ..., dim)\n\t   *\n\t   * Where:\n\t   *\n\t   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n\t   *   By default the last dimension of the matrices.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var A = [[1, 2], [5, 6]];\n\t   *    var B = [[3, 4], [7, 8]];\n\t   *\n\t   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n\t   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n\t   *    math.concat('hello', ' ', 'world'); // returns 'hello world'\n\t   *\n\t   * See also:\n\t   *\n\t   *    size, squeeze, subset, transpose\n\t   *\n\t   * @param {... Array | Matrix} args     Two or more matrices\n\t   * @return {Array | Matrix} Concatenated matrix",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36013,
            "description": "Recursively concatenate two matrices.\nThe contents of the matrices is not cloned.",
            "params": [
                {
                    "name": "a",
                    "description": "Multi dimensional array",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "Multi dimensional array",
                    "type": "Array"
                },
                {
                    "name": "concatDim",
                    "description": "The dimension on which to concatenate (zero-based)",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "The current dim (zero-based)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "c            The concatenated matrix",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36046,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36048,
            "description": "'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t * Attach a transform function to math.filter\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform adds support for equations as test function for math.filter,\n\t * so you can do something like 'filter([3, -2, 5], x > 0)'.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36118,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36120,
            "description": "'use strict';\nvar size = __webpack_require__(40).size;\n\tvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  \n\t  /**\n\t   * Filter the items in an array or one dimensional matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.filter(x, test)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    function isPositive (x) {\n\t   *      return x > 0;\n\t   *    }\n\t   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]\n\t   *\n\t   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/); // returns [\"23\", \"100\", \"55\"]\n\t   *\n\t   * See also:\n\t   *\n\t   *    forEach, map, sort\n\t   *\n\t   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n\t   * @param {Function | RegExp} test\n\t   *        A function or regular expression to test items.\n\t   *        All entries for which `test` returns true are returned.\n\t   *        When `test` is a function, it is invoked with three parameters:\n\t   *        the value of the element, the index of the element, and the\n\t   *        matrix/array being traversed. The function must return a boolean.\n\t   * @return {Matrix | Array} Returns the filtered matrix.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36178,
            "description": "Filter values in a callback given a callback function",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the filtered array",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36207,
            "description": "Filter values in a callback given a regular expression",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the filtered array",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36228,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36230,
            "description": "'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t * Attach a transform function to math.forEach\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a one-based index instead of a zero-based index",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36280,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36282,
            "description": "'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Iterate over all elements of a matrix/array, and executes the given callback function.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.forEach(x, callback)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.forEach([1, 2, 3], function(value) {\n\t   *      console.log(value);\n\t   *    });\n\t   *    // outputs 1, 2, 3\n\t   *\n\t   * See also:\n\t   *\n\t   *    filter, map, sort\n\t   *\n\t   * @param {Matrix | Array} x    The matrix to iterate on.\n\t   * @param {Function} callback   The callback function is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the Matrix/array being traversed.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36325,
            "description": "forEach for a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36362,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36364,
            "description": "'use strict';\n/**\n\t * Attach a transform function to math.index\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a one-based index instead of a zero-based index",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36419,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36421,
            "description": "'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t * Attach a transform function to math.map\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a one-based index instead of a zero-based index",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36448,
            "description": "Map for a multi dimensional array. One-based indexes",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "orig",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36489,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36491,
            "description": "'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a new matrix or array with the results of the callback function executed on\n\t   * each entry of the matrix/array.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.map(x, callback)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.map([1, 2, 3], function(value) {\n\t   *      return value * value;\n\t   *    });  // returns [1, 4, 9]\n\t   *\n\t   * See also:\n\t   *\n\t   *    filter, forEach, sort\n\t   *\n\t   * @param {Matrix | Array} x    The matrix to iterate on.\n\t   * @param {Function} callback   The callback method is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the matrix being traversed.\n\t   * @return {Matrix | array}     Transformed map of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36535,
            "description": "Map for a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36574,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36576,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\tvar isCollection = __webpack_require__(322);\n/**\n\t * Attach a transform function to math.max\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function max\n\t * from one-based to zero based",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36621,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36623,
            "description": "'use strict';\n/**\n\t * Test whether a value is a collection: an Array or Matrix\n\t * @param {*} x\n\t * @returns {boolean} isCollection",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36637,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36639,
            "description": "'use strict';\nvar deepForEach = __webpack_require__(324);\n\tvar reduce = __webpack_require__(325);\n\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t  var larger = load(__webpack_require__(64));\n  /**\n\t   * Compute the maximum value of a matrix or a  list with values.\n\t   * In case of a multi dimensional array, the maximum of the flattened array\n\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.max(a, b, c, ...)\n\t   *     math.max(A)\n\t   *     math.max(A, dim)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.max(2, 1, 4, 3);                  // returns 4\n\t   *     math.max([2, 1, 4, 3]);                // returns 4\n\t   *\n\t   *     // maximum over a specified dimension (zero-based)\n\t   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]\n\t   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]\n\t   *\n\t   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n\t   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, min, prod, std, sum, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The maximum value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36704,
            "description": "Return the largest of two values",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns x when x is largest, or y when y is largest",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36715,
            "description": "Recursively calculate the maximum value in an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "max",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36742,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36744,
            "description": "'use strict';\n/**\n\t * Recursively loop over all elements in a given multi dimensional array\n\t * and invoke the callback on each of the elements.\n\t * @param {Array | Matrix} array\n\t * @param {Function} callback     The callback method is invoked with one\n\t *                                parameter: the current element in the array",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36773,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36775,
            "description": "'use strict';\nvar arraySize = __webpack_require__(40).size;\n\tvar IndexError = __webpack_require__(43);\n/**\n\t * Reduce a given matrix or array to a new matrix or\n\t * array with one less dimension, applying the given\n\t * callback in the selected dimension.\n\t * @param {Array | Matrix} mat\n\t * @param {number} dim\n\t * @param {Function} callback\n\t * @return {Array | Matrix} res",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36805,
            "description": "Recursively reduce a matrix",
            "params": [
                {
                    "name": "mat",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dim",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "ret",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36840,
            "description": "Transpose a matrix",
            "params": [
                {
                    "name": "mat",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "ret",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36862,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36864,
            "description": "'use strict';\nvar isCollection = __webpack_require__(322);\n/**\n\t * Test whether an array contains collections\n\t * @param {Array} array\n\t * @returns {boolean} Returns true when the array contains one or multiple\n\t *                    collections (Arrays or Matrices). Returns false otherwise.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36886,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36888,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\tvar isCollection = __webpack_require__(322);\n/**\n\t * Attach a transform function to math.mean\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function mean\n\t * from one-based to zero based",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36933,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36935,
            "description": "'use strict';\nvar size = __webpack_require__(40).size;\n\tvar deepForEach = __webpack_require__(324);\n\tvar reduce = __webpack_require__(325);\n\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var divide = load(__webpack_require__(329));\n  /**\n\t   * Compute the mean value of matrix or a list with values.\n\t   * In case of a multi dimensional array, the mean of the flattened array\n\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.mean(a, b, c, ...)\n\t   *     math.mean(A)\n\t   *     math.mean(A, dim)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.mean(2, 1, 4, 3);                     // returns 2.5\n\t   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725\n\t   *\n\t   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]\n\t   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]\n\t   *\n\t   * See also:\n\t   *\n\t   *     median, min, max, sum, prod, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The mean of all values",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 36996,
            "description": "Calculate the mean value in an n-dimensional array, returning a\nn-1 dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dim",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "mean",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37010,
            "description": "Recursively calculate the mean value in an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "mean",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37037,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37039,
            "description": "'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed) {\n  var divideScalar = load(__webpack_require__(81));\n\t  var multiply     = load(__webpack_require__(84));\n\t  var inv          = load(__webpack_require__(330));\n\t  var matrix       = load(__webpack_require__(52));\n  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Divide two values, `x / y`.\n\t   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.divide(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.divide(2, 3);            // returns number 0.6666666666666666\n\t   *\n\t   *    var a = math.complex(5, 14);\n\t   *    var b = math.complex(4, 1);\n\t   *    math.divide(a, b);            // returns Complex 2 + 3i\n\t   *\n\t   *    var c = [[7, -6], [13, -4]];\n\t   *    var d = [[1, 2], [4, 3]];\n\t   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]\n\t   *\n\t   *    var e = math.unit('18 km');\n\t   *    math.divide(e, 4.5);          // returns Unit 4 km\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37132,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37134,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nfunction factory (type, config, load, typed) {\n\t  var matrix       = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var addScalar    = load(__webpack_require__(53));\n\t  var multiply     = load(__webpack_require__(84));\n\t  var unaryMinus   = load(__webpack_require__(78));\n\t  var det          = load(__webpack_require__(331));\n\t  var eye          = load(__webpack_require__(83));\n  /**\n\t   * Calculate the inverse of a square matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.inv(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]\n\t   *     math.inv(4);                 // returns 0.25\n\t   *     1 / 4;                       // returns 0.25\n\t   *\n\t   * See also:\n\t   *\n\t   *     det, transpose\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n\t   * @return {number | Complex | Array | Matrix} The inverse of `x`.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37226,
            "description": "Calculate the inverse of a square matrix",
            "params": [
                {
                    "name": "mat",
                    "description": "A square matrix",
                    "type": "Array[]"
                },
                {
                    "name": "rows",
                    "description": "Number of rows",
                    "type": "Number"
                },
                {
                    "name": "cols",
                    "description": "Number of columns, must equal rows",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "inv    Inverse matrix",
                "type": "Array[]"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37345,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37347,
            "description": "'use strict';\nvar util = __webpack_require__(39);\n\tvar object = util.object;\n\tvar string = util.string;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var add = load(__webpack_require__(51));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(84));\n\t  var unaryMinus = load(__webpack_require__(78));\n  /**\n\t   * Calculate the determinant of a matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.det(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.det([[1, 2], [3, 4]]); // returns -2\n\t   *\n\t   *    var A = [\n\t   *      [-2, 2, 3],\n\t   *      [-1, 1, 3],\n\t   *      [2, 0, -1]\n\t   *    ]\n\t   *    math.det(A); // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    inv\n\t   *\n\t   * @param {Array | Matrix} x  A matrix\n\t   * @return {number} The determinant of `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37445,
            "description": "Calculate the determinant of a matrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "A square, two dimensional matrix",
                    "type": "Array[]"
                },
                {
                    "name": "rows",
                    "description": "Number of rows of the matrix (zero-based)",
                    "type": "Number"
                },
                {
                    "name": "cols",
                    "description": "Number of columns of the matrix (zero-based)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "det",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37519,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37521,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\tvar isCollection = __webpack_require__(322);\n/**\n\t * Attach a transform function to math.min\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function min\n\t * from one-based to zero based",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37566,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37568,
            "description": "'use strict';\nvar deepForEach = __webpack_require__(324);\n\tvar reduce = __webpack_require__(325);\n\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t  var smaller = load(__webpack_require__(60));\n\t  \n\t  /**\n\t   * Compute the maximum value of a matrix or a  list of values.\n\t   * In case of a multi dimensional array, the maximum of the flattened array\n\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.min(a, b, c, ...)\n\t   *     math.min(A)\n\t   *     math.min(A, dim)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.min(2, 1, 4, 3);                  // returns 1\n\t   *     math.min([2, 1, 4, 3]);                // returns 1\n\t   *\n\t   *     // maximum over a specified dimension (zero-based)\n\t   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]\n\t   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]\n\t   *\n\t   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n\t   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, max, prod, std, sum, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The minimum value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37633,
            "description": "Return the smallest of two values",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns x when x is smallest, or y when y is smallest",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37644,
            "description": "Recursively calculate the minimum value in an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "min",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37671,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37673,
            "description": "'use strict';\n/**\n\t * Attach a transform function to math.range\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a range which includes the end value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37705,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37707,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  var ZERO = new type.BigNumber(0);\n\t  var ONE = new type.BigNumber(1);\n  /**\n\t   * Create an array from a range.\n\t   * By default, the range end is excluded. This can be customized by providing\n\t   * an extra parameter `includeEnd`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.range(str [, includeEnd])               // Create a range from a string,\n\t   *                                                  // where the string contains the\n\t   *                                                  // start, optional step, and end,\n\t   *                                                  // separated by a colon.\n\t   *     math.range(start, end [, includeEnd])        // Create a range with start and\n\t   *                                                  // end and a step size of 1.\n\t   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n\t   *                                                  // and end.\n\t   *\n\t   * Where:\n\t   *\n\t   * - `str: string`\n\t   *   A string 'start:end' or 'start:step:end'\n\t   * - `start: {number | BigNumber}`\n\t   *   Start of the range\n\t   * - `end: number | BigNumber`\n\t   *   End of the range, excluded by default, included when parameter includeEnd=true\n\t   * - `step: number | BigNumber`\n\t   *   Step size. Default value is 1.\n\t   * - `includeEnd: boolean`\n\t   *   Option to specify whether to include the end or not. False by default.\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.range(2, 6);        // [2, 3, 4, 5]\n\t   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]\n\t   *     math.range('2:1:6');     // [2, 3, 4, 5]\n\t   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]\n\t   *\n\t   * See also:\n\t   *\n\t   *     ones, zeros, size, subset\n\t   *\n\t   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n\t   * @return {Array | Matrix} range",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37831,
            "description": "Create a range with numbers. End is excluded",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "step",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "range",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37858,
            "description": "Create a range with numbers. End is included",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "step",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "range",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37885,
            "description": "Create a range with big numbers. End is excluded",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "step",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "range",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37912,
            "description": "Create a range with big numbers. End is included",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "step",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "range",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37939,
            "description": "Parse a string into a range,\nThe string contains the start, optional step, and end, separated by a colon.\nIf the string does not contain a valid range, null is returned.\nFor example str='0:2:11'.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "| null} range Object containing properties start, end, step",
                "type": "Start: number, end: number, step: number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37990,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 37992,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n/**\n\t * Attach a transform function to math.subset\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a range which includes the end value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38024,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38026,
            "description": "'use strict';\nvar object = __webpack_require__(3);\n\tvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t  var parser = load(__webpack_require__(307))();\n  /**\n\t   * Documentation object\n\t   * @param {Object} doc  Object containing properties:\n\t   *                      {string} name\n\t   *                      {string} category\n\t   *                      {string} description\n\t   *                      {string[]} syntax\n\t   *                      {string[]} examples\n\t   *                      {string[]} seealso\n\t   * @constructor",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38057,
            "description": "Attach type information",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38063,
            "description": "Generate a string representation of the Help object",
            "return": {
                "description": "Returns a string",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38110,
            "description": "Export the help object to JSON",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38119,
            "description": "Instantiate a Help object from a JSON object",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new Help object",
                "type": "Help"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38134,
            "description": "Returns a string representation of the Help object",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38147,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38149,
            "description": "module.exports = [\n\t  __webpack_require__(339),\n\t  __webpack_require__(366),\n\t  __webpack_require__(397),\n\t  __webpack_require__(413),\n\t  __webpack_require__(422),\n\t  __webpack_require__(427),\n\t  __webpack_require__(430),\n\t  __webpack_require__(436),\n\t  __webpack_require__(448),\n\t  __webpack_require__(457),\n\t  __webpack_require__(461),\n\t  __webpack_require__(463),\n\t  __webpack_require__(470),\n\t  __webpack_require__(472),\n\t  __webpack_require__(498),\n\t  __webpack_require__(500)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38173,
            "description": "module.exports = [\n\t  // decomposition\n\t  __webpack_require__(340),\n\t  __webpack_require__(341),\n  // solver\n\t  __webpack_require__(361),\n\t  __webpack_require__(363),\n\t  __webpack_require__(365)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38189,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nvar object = util.object;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var abs = load(__webpack_require__(86));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var subtract = load(__webpack_require__(77));\n\t  var larger = load(__webpack_require__(64));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var unaryMinus = load(__webpack_require__(78));\n\t  \n\t  var SparseMatrix = type.SparseMatrix;\n\t  var DenseMatrix = type.DenseMatrix;\n\t  var Spa = type.Spa;\n\t  \n\t  /**\n\t   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n\t   * row permutation vector `p` where `A[p,:] = L * U`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lup(A);\n\t   *\n\t   * Example:\n\t   *\n\t   *    var m = [[2, 1], [1, 4]];\n\t   *    var r = math.lup();\n\t   *    // r = {\n\t   *    //   L: [[1, 0], [0.5, 1]],\n\t   *    //   U: [[2, 1], [0, 3.5]],\n\t   *    //   P: [0, 1]\n\t   *    // }\n\t   *\n\t   * See also:\n\t   *\n\t   *    slu, lsolve, lusolve, usolve\n\t   *\n\t   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n\t   *\n\t   * @return {Array<Matrix>}      The lower triangular matrix, the upper triangular matrix and the permutation matrix.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38580,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38582,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nvar number = util.number,\n\t    \n\t    isInteger = number.isInteger;\nfunction factory (type, config, load, typed) {\n  var cs_sqr = load(__webpack_require__(342));\n\t  var cs_lu = load(__webpack_require__(353));\n  /**\n\t   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where\n\t   *\n\t   * `P * A * Q = L * U`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.slu(A, order, threshold);\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, lsolve, usolve, lusolve\n\t   *\n\t   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.\n\t   * @param {Number}       order          The Symbolic Ordering and Analysis order:\n\t   *                                       0 - Natural ordering, no permutation vector q is returned\n\t   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'\n\t   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. \n\t   *                                           This is appropriatefor LU factorization of unsymmetric matrices.\n\t   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.\n\t   *                                           A dense row is a row with more than 10*sqr(columns) entries.\n\t   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)\n\t   *\n\t   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38658,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38660,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_amd = load(__webpack_require__(343));\n\t  var cs_permute = load(__webpack_require__(348));\n\t  var cs_etree = load(__webpack_require__(349));\n\t  var cs_post = load(__webpack_require__(350));\n\t  var cs_counts = load(__webpack_require__(351));\n  /**\n\t   * Symbolic ordering and analysis for QR and LU decompositions.\n\t   *\n\t   * @param {Number}  order           The ordering strategy (see cs_amd for more details)\n\t   * @param {Matrix}  a               The A matrix\n\t   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or\n\t   *                                  symbolic ordering and analysis for LU decomposition (false)\n\t   *\n\t   * @return {Object}                 The Symbolic ordering and analysis for matrix A\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38725,
            "description": "Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38827,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 38829,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n\t  var cs_fkeep = load(__webpack_require__(345));\n\t  var cs_tdfs = load(__webpack_require__(346));\n\t  \n\t  var add       = load(__webpack_require__(51));\n\t  var multiply  = load(__webpack_require__(84));\n\t  var transpose = load(__webpack_require__(347));\n  /**\n\t   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used \n\t   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n\t   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n\t   * of a right looking sparse Cholesky factorization.\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   *\n\t   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n\t   * @param {Matrix} m        Sparse Matrix\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39237,
            "description": "Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\nvector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n\nOrder: 0\n  A natural ordering P=null matrix is returned.\n\nOrder: 1\n  Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n  P = M + M'\n\nOrder: 2\n  Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n  P = M' * M\n\nOrder: 3\n  This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n  P = M' * M",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39298,
            "description": "Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n\n - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39340,
            "description": "Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with \ndegree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\noutput permutation p.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39406,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39408,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t   * This function \"flips\" its input about the integer -1.\n\t   *\n\t   * @param {Number}  i               The value to flip\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39434,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39436,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\n\t   *\n\t   * @param {Matrix}   a              The sparse matrix\n\t   * @param {function} callback       The callback function, function will be invoked with the following args:\n\t   *                                    - The entry row\n\t   *                                    - The entry column\n\t   *                                    - The entry value\n\t   *                                    - The state parameter\n\t   * @param {any}      other          The state\n\t   *\n\t   * @return                          The number of nonzero elements in the matrix\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39505,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39507,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t   * Depth-first search and postorder of a tree rooted at node j\n\t   *\n\t   * @param {Number}  j               The tree node\n\t   * @param {Number}  k               \n\t   * @param {Array}   w               The workspace array\n\t   * @param {Number}  head            The index offset within the workspace for the head array\n\t   * @param {Number}  next            The index offset within the workspace for the next array\n\t   * @param {Array}   post            The post ordering array\n\t   * @param {Number}  stack           The index offset within the workspace for the stack array\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39563,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39565,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var DenseMatrix = type.DenseMatrix,\n\t      SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Transpose a matrix. All values of the matrix are reflected over its\n\t   * main diagonal. Only applicable to two dimensional matrices containing\n\t   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n\t   * vectors and scalars return the input unchanged.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.transpose(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var A = [[1, 2, 3], [4, 5, 6]];\n\t   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]\n\t   *\n\t   * See also:\n\t   *\n\t   *     diag, inv, subset, squeeze\n\t   *\n\t   * @param {Array | Matrix} x  Matrix to be transposed\n\t   * @return {Array | Matrix}   The transposed matrix",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39747,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39749,
            "description": "'use strict';\nfunction factory (type) {\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Permutes a sparse matrix C = P * A * Q\n\t   *\n\t   * @param {Matrix}  a               The Matrix A\n\t   * @param {Array}   pinv            The row permutation vector\n\t   * @param {Array}   q               The column permutation vector\n\t   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n\t   *\n\t   * @return {Matrix}                 C = P * A * Q, null on error\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39824,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39826,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t   * Computes the elimination tree of Matrix A (using triu(A)) or the \n\t   * elimination tree of A'A without forming A'A.\n\t   *\n\t   * @param {Matrix}  a               The A Matrix\n\t   * @param {boolean} ata             A value of true the function computes the etree of A'A\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39906,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39908,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_tdfs = load(__webpack_require__(346));\n  /**\n\t   * Post order a tree of forest\n\t   *\n\t   * @param {Array}   parent          The tree or forest\n\t   * @param {Number}  n               Number of columns\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39971,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 39973,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var transpose = load(__webpack_require__(347));\n\t  \n\t  var cs_leaf = load(__webpack_require__(352));\n  /**\n\t   * Computes the column counts using the upper triangular part of A.\n\t   * It transposes A internally, none of the input parameters are modified.\n\t   *\n\t   * @param {Matrix} a           The sparse matrix A\n\t   *\n\t   * @param {Matrix} ata         Count the columns of A'A instead\n\t   *\n\t   * @return                     An array of size n of the column counts or null on error\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40098,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40100,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t   * This function determines if j is a leaf of the ith row subtree.\n\t   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)\n\t   *\n\t   * @param {Number}  i               The ith row subtree\n\t   * @param {Number}  j               The node to test\n\t   * @param {Array}   w               The workspace array\n\t   * @param {Number}  first           The index offset within the workspace for the first array\n\t   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array\n\t   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array\n\t   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array\n\t   *\n\t   * @return {Object}\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40170,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40172,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var abs = load(__webpack_require__(86));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiply = load(__webpack_require__(84));\n\t  \n\t  var larger = load(__webpack_require__(64));\n\t  var largerEq = load(__webpack_require__(354));\n\t  \n\t  var cs_spsolve = load(__webpack_require__(355));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n\t   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L \n\t   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n\t   * L * U = A(p, q), where p is the inverse of pinv.\n\t   *\n\t   * @param {Matrix}  m               The A Matrix to factorize\n\t   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing \n\t   *                                  column ordering q\n\t   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n\t   *\n\t   * @return {Number}                 The numeric LU factorization of A or null\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40354,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40356,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether value x is larger or equal to y.\n\t   *\n\t   * The function returns true when x is larger than y or the relative\n\t   * difference between x and y is smaller than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.largerEq(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.larger(2, 1 + 1);         // returns false\n\t   *    math.largerEq(2, 1 + 1);       // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, smallerEq, larger, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40535,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40537,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var divideScalar = load(__webpack_require__(81));\n\t  var multiply = load(__webpack_require__(84));\n\t  var subtract = load(__webpack_require__(77));\n  var cs_reach = load(__webpack_require__(356));\n  /**\n\t   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the\n\t   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the\n\t   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U \n\t   * is upper triangular with the diagonal entry as the last entry in each column.\n\t   *\n\t   * @param {Matrix}  g               The G matrix\n\t   * @param {Matrix}  b               The B matrix\n\t   * @param {Number}  k               The kth column in B\n\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t   * @param {Array}   x               The soluton to the linear system G * x = b\n\t   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n\t   * @param {boolean} lo              The lower (true) upper triangular (false) flag\n\t   *\n\t   * @return {Number}                 The index for the nonzero pattern\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40627,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40629,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_dfs = load(__webpack_require__(357));\n\t  var cs_marked = load(__webpack_require__(358));\n\t  var cs_mark = load(__webpack_require__(359));\n  /**\n\t   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 \n\t   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\n\t   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\n\t   *\n\t   * @param {Matrix}  g               The G matrix\n\t   * @param {Matrix}  b               The B matrix\n\t   * @param {Number}  k               The kth column in B\n\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t   * @param {Array}   pinv            The inverse row permutation vector\n\t   *\n\t   * @return {Number}                 The index for the nonzero pattern\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40694,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40696,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_marked = load(__webpack_require__(358));\n\t  var cs_mark   = load(__webpack_require__(359));\n\t  var cs_unflip = load(__webpack_require__(360));\n  /**\n\t   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting\n\t   * at nodes in B (see cs_reach()).\n\t   *\n\t   * @param {Number}  j               The starting node for the DFS algorithm\n\t   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored\n\t   * @param {Number}  top             Start index in stack xi[top..n-1]\n\t   * @param {Number}  k               The kth column in B\n\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n\t   *\n\t   * @return {Number}                 New value of top\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40785,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40787,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t   * Checks if the node at w[j] is marked\n\t   *\n\t   * @param {Array}   w               The array\n\t   * @param {Number}  j               The array index\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40814,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40816,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n  /**\n\t   * Marks the node at w[j]\n\t   *\n\t   * @param {Array}   w               The array\n\t   * @param {Number}  j               The array index\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40845,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40847,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n\t  \n\t  /**\n\t   * Flips the value if it is negative of returns the same value otherwise.\n\t   *\n\t   * @param {Number}  i               The value to flip\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40875,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 40877,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var subtract = load(__webpack_require__(77));\n\t  var equalScalar = load(__webpack_require__(48));\n  var solveValidation = load(__webpack_require__(362));\n  var DenseMatrix = type.DenseMatrix;\n  /** \n\t   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.\n\t   *\n\t   * `L * x = b`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lsolve(L, b);\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = [[-2, 3], [2, 1]];\n\t   *    var b = [11, 9];\n\t   *    var x = lsolve(a, b);  // [[-5.5], [20]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, slu, usolve, lusolve\n\t   *\n\t   * @param {Matrix, Array} L       A N x N matrix or array (L)\n\t   * @param {Matrix, Array} b       A column vector with the b values\n\t   *\n\t   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41068,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41070,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\n\tvar array = util.array;\nvar isArray = Array.isArray;\nfunction factory (type) {\n\t  \n\t  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Validates matrix and column vector b for backward/forward substitution algorithms.\n\t   *\n\t   * @param {Matrix} m            An N x N matrix\n\t   * @param {Array | Matrix} b    A column vector\n\t   * @param {Boolean} copy        Return a copy of vector b\n\t   *\n\t   * @return {DenseMatrix}        Dense column vector b",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41235,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41237,
            "description": "'use strict';\nvar isArray = Array.isArray;\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var lup = load(__webpack_require__(340));\n\t  var slu = load(__webpack_require__(341));\n\t  var cs_ipvec = load(__webpack_require__(364));\n  var solveValidation = load(__webpack_require__(362));\n  var usolve = load(__webpack_require__(365));\n\t  var lsolve = load(__webpack_require__(361));\n  /**\n\t   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n\t   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];\n\t   *\n\t   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n\t   *\n\t   *    var f = math.lup(m);\n\t   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n\t   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]\n\t   *\n\t   *    var a = [[-2, 3], [2, 1]];\n\t   *    var b = [11, 9];\n\t   *    var x = lusolve(a, b);  // [[-5.5], [20]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, slu, lsolve, usolve\n\t   *\n\t   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n\t   * @param {Matrix | Array} b               Column Vector\n\t   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n\t   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n\t   *\n\t   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41366,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41368,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.\n\t   *\n\t   * @param {Array} p           The permutation vector of length n. null value denotes identity\n\t   * @param {Array} b           The input vector\n\t   *\n\t   * @return {Array}            The output vector x = P'b",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41413,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41415,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var subtract = load(__webpack_require__(77));\n\t  var equalScalar = load(__webpack_require__(48));\n  var solveValidation = load(__webpack_require__(362));\n\t  \n\t  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n\t   *\n\t   * `U * x = b`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.usolve(U, b);\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = [[-2, 3], [2, 1]];\n\t   *    var b = [11, 9];\n\t   *    var x = usolve(a, b);  // [[8], [9]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, slu, usolve, lusolve\n\t   *\n\t   * @param {Matrix, Array} U       A N x N matrix or array (U)\n\t   * @param {Matrix, Array} b       A column vector with the b values\n\t   *\n\t   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41607,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41609,
            "description": "module.exports = [\n\t  __webpack_require__(86),\n\t  __webpack_require__(51),\n\t  __webpack_require__(53),\n\t  __webpack_require__(367),\n\t  __webpack_require__(369),\n\t  __webpack_require__(370),\n\t  __webpack_require__(329),\n\t  __webpack_require__(371),\n\t  __webpack_require__(373),\n\t  __webpack_require__(375),\n\t  __webpack_require__(376),\n\t  __webpack_require__(87),\n\t  __webpack_require__(377),\n\t  __webpack_require__(378),\n\t  __webpack_require__(379),\n\t  __webpack_require__(382),\n\t  __webpack_require__(385),\n\t  __webpack_require__(386),\n\t  __webpack_require__(387),\n\t  __webpack_require__(84),\n\t  __webpack_require__(388),\n\t  __webpack_require__(390),\n\t  __webpack_require__(82),\n\t  __webpack_require__(391),\n\t  __webpack_require__(393),\n\t  __webpack_require__(380),\n\t  __webpack_require__(394),\n\t  __webpack_require__(77),\n\t  __webpack_require__(78),\n\t  __webpack_require__(395),\n\t  __webpack_require__(396)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41648,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var unaryMinus = load(__webpack_require__(78));\n\t  var isNegative = load(__webpack_require__(368));\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Calculate the cubic root of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cbrt(x)\n\t   *    math.cbrt(x, allRoots)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cbrt(27);                  // returns 3\n\t   *    math.cube(3);                   // returns 27\n\t   *    math.cbrt(-64);                 // returns -4\n\t   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m\n\t   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]\n\t   *\n\t   *    var x = math.complex('8i');\n\t   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i\n\t   *    math.cbrt(x, true);             // returns Matrix [\n\t   *                                    //    1.7320508075689 + i\n\t   *                                    //   -1.7320508075689 + i\n\t   *                                    //   -2i\n\t   *                                    // ]\n\t   *\n\t   * See also:\n\t   *\n\t   *    square, sqrt, cube\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x\n\t   *            Value for which to calculate the cubic root.\n\t   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n\t   *            when `x` is a number or complex number. If true, all complex\n\t   *            roots are returned, if false (default) the principal root is\n\t   *            returned.\n\t   * @return {number | BigNumber | Complex | Unit | Array | Matrix}\n\t   *            Returns the cubic root of `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41719,
            "description": "Calculate the cubic root for a complex number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Complex"
                },
                {
                    "name": "allRoots",
                    "description": "If true, the function will return an array\n                              with all three roots. If false or undefined,\n                              the principal root is returned.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the cubic root(s) of x",
                "type": "Complex | Array.<Complex> | Matrix.<Complex>"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41754,
            "description": "Calculate the cubic root for a Unit",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "Returns the cubic root of x",
                "type": "Unit"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41801,
            "description": "Calculate cbrt for a number\n\nCode from es6-shim.js:\n  https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the cubic root of x",
                "type": "Number | Complex"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41837,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41839,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is negative: smaller than zero.\n\t   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isNegative(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isNegative(3);                     // returns false\n\t   *    math.isNegative(-2);                    // returns true\n\t   *    math.isNegative(0);                     // returns false\n\t   *    math.isNegative(-0);                    // returns false\n\t   *    math.isNegative(math.bignumber(2));     // returns false\n\t   *    math.isNegative(math.fraction(-2, 5));  // returns true\n\t   *    math.isNegative('-2');                  // returns true\n\t   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isPositive, isZero, isInteger\n\t   *\n\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t   *                    Throws an error in case of an unknown data type.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41905,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41907,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Round a value towards plus infinity\n\t   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.ceil(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.ceil(3.2);               // returns number 4\n\t   *    math.ceil(3.8);               // returns number 4\n\t   *    math.ceil(-4.2);              // returns number -4\n\t   *    math.ceil(-4.7);              // returns number -4\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.ceil(c);                 // returns Complex 4 - 2i\n\t   *\n\t   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]\n\t   *\n\t   * See also:\n\t   *\n\t   *    floor, fix, round\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41972,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 41974,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Compute the cube of a value, `x * x * x`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cube(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cube(2);            // returns number 8\n\t   *    math.pow(2, 3);          // returns number 8\n\t   *    math.cube(4);            // returns number 64\n\t   *    4 * 4 * 4;               // returns number 64\n\t   *\n\t   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, square, pow, cbrt\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42042,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42044,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var latex = __webpack_require__(32);\n\t  \n\t  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Divide two matrices element wise. The function accepts both matrices and\n\t   * scalar values.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dotDivide(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dotDivide(2, 4);   // returns 0.5\n\t   *\n\t   *    a = [[9, 5], [6, 1]];\n\t   *    b = [[3, 2], [5, 2]];\n\t   *\n\t   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]\n\t   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    divide, multiply, dotMultiply\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42193,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42195,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n\t   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n\t   *\n\t   *\n\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤\n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42318,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42320,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var latex = __webpack_require__(32);\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm09 = load(__webpack_require__(374));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Multiply two matrices element wise. The function accepts both matrices and\n\t   * scalar values.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dotMultiply(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dotMultiply(2, 4); // returns 8\n\t   *\n\t   *    a = [[9, 5], [6, 1]];\n\t   *    b = [[3, 2], [5, 2]];\n\t   *\n\t   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]\n\t   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, divide, dotDivide\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42467,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42469,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked NZA times, number of nonzero elements in A.\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42622,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42624,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var pow = load(__webpack_require__(82));\n\t  var latex = __webpack_require__(32);\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Calculates the power of x to y element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dotPow(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dotPow(2, 3);            // returns number 8\n\t   *\n\t   *    var a = [[1, 2], [4, 3]];\n\t   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]\n\t   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    pow, sqrt, multiply\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n\t   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42769,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42771,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the exponent of a value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.exp(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.exp(2);                  // returns number 7.3890560989306495\n\t   *    math.pow(math.e, 2);          // returns number 7.3890560989306495\n\t   *    math.log(math.exp(2));        // returns number 2\n\t   *\n\t   *    math.exp([1, 2, 3]);\n\t   *    // returns Array [\n\t   *    //   2.718281828459045,\n\t   *    //   7.3890560989306495,\n\t   *    //   20.085536923187668\n\t   *    // ]\n\t   *\n\t   * See also:\n\t   *\n\t   *    log, pow\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42832,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42834,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Round a value towards minus infinity.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.floor(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.floor(3.2);              // returns number 3\n\t   *    math.floor(3.8);              // returns number 3\n\t   *    math.floor(-4.2);             // returns number -5\n\t   *    math.floor(-4.7);             // returns number -5\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.floor(c);                // returns Complex 3 - 3i\n\t   *\n\t   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ceil, fix, round\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42898,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 42900,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm04 = load(__webpack_require__(55));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Calculate the greatest common divisor for two or more values or arrays.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.gcd(a, b)\n\t   *    math.gcd(a, b, c, ...)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.gcd(8, 12);              // returns 4\n\t   *    math.gcd(-4, 6);              // returns 2\n\t   *    math.gcd(25, 15, -10);        // returns 5\n\t   *\n\t   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lcm, xgcd\n\t   *\n\t   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n\t   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43054,
            "description": "Calculate gcd for BigNumbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "Returns greatest common denominator of a and b",
                "type": "BigNumber"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43077,
            "description": "Calculate gcd for numbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the greatest common denominator of a and b",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43103,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43105,
            "description": "'use strict';\nvar flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n\t  var abs = load(__webpack_require__(86));\n\t  var add = load(__webpack_require__(53));\n\t  var divide = load(__webpack_require__(81));\n\t  var multiply = load(__webpack_require__(80));\n\t  var sqrt = load(__webpack_require__(380));\n\t  var smaller = load(__webpack_require__(60));\n\t  var isPositive = load(__webpack_require__(381));\n  /**\n\t   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n\t   *\n\t   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n\t   *\n\t   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.hypot(a, b, ...)\n\t   *     math.hypot([a, b, c, ...])\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.hypot(3, 4);      // 5\n\t   *     math.hypot(3, 4, 5);   // 7.0710678118654755\n\t   *     math.hypot([3, 4, 5]); // 7.0710678118654755\n\t   *     math.hypot(-2);        // 2\n\t   *\n\t   * See also:\n\t   *\n\t   *     abs, norm\n\t   *\n\t   * @param {... number | BigNumber} args\n\t   * @return {number | BigNumber} Returns the hypothenusa of the input values.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43158,
            "description": "Calculate the hypotenusa for an Array with values",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "type": "Array.<number | BigNumber>"
                }
            ],
            "return": {
                "description": "Returns the result",
                "type": "Number | BigNumber"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43193,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43195,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the square root of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sqrt(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sqrt(25);                // returns 5\n\t   *    math.square(5);               // returns 25\n\t   *    math.sqrt(-4);                // returns Complex 2i\n\t   *\n\t   * See also:\n\t   *\n\t   *    square, multiply, cube, cbrt\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n\t   *            Value for which to calculate the square root.\n\t   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n\t   *            Returns the square root of `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43255,
            "description": "Calculate sqrt for a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the square root of x",
                "type": "Number | Complex"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43279,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43281,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is positive: larger than zero.\n\t   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isPositive(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isPositive(3);                     // returns true\n\t   *    math.isPositive(-2);                    // returns false\n\t   *    math.isPositive(0);                     // returns false\n\t   *    math.isPositive(-0);                    // returns false\n\t   *    math.isPositive(0.5);                   // returns true\n\t   *    math.isPositive(math.bignumber(2));     // returns true\n\t   *    math.isPositive(math.fraction(-2, 5));  // returns false\n\t   *    math.isPositive(math.fraction(1,3));    // returns false\n\t   *    math.isPositive('2');                   // returns true\n\t   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isZero, isNegative, isInteger\n\t   *\n\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t   *                    Throws an error in case of an unknown data type.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43349,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43351,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm06 = load(__webpack_require__(383));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Calculate the least common multiple for two or more values or arrays.\n\t   *\n\t   * lcm is defined as:\n\t   *\n\t   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lcm(a, b)\n\t   *    math.lcm(a, b, c, ...)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.lcm(4, 6);               // returns 12\n\t   *    math.lcm(6, 21);              // returns 42\n\t   *    math.lcm(6, 21, 5);           // returns 210\n\t   *\n\t   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]\n\t   *\n\t   * See also:\n\t   *\n\t   *    gcd, xgcd\n\t   *\n\t   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n\t   * @return {number | BigNumber | Array | Matrix}                           The least common multiple",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43509,
            "description": "Calculate lcm for two BigNumbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "Returns the least common multiple of a and b",
                "type": "BigNumber"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43537,
            "description": "Calculate lcm for two numbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the least common multiple of a and b",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43569,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43571,
            "description": "'use strict';\nvar scatter = __webpack_require__(384);\n\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43738,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43740,
            "description": "'use strict';\nmodule.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {\n\t  // a arrays\n\t  var avalues = a._values;\n\t  var aindex = a._index;\n\t  var aptr = a._ptr;\n\t  // c arrays\n\t  var cindex = c._index;\n  // vars\n\t  var k, k0, k1, i;\n  // check we need to process values (pattern matrix)\n\t  if (x) {\n\t    // values in j\n\t    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t      // row\n\t      i = aindex[k];\n\t      // check value exists in current j\n\t      if (w[i] !== mark) {\n\t        // i is new entry in j\n\t        w[i] = mark;\n\t        // add i to pattern of C\n\t        cindex.push(i);\n\t        // x(i) = A, check we need to call function this time\n\t        if (update) {\n\t          // copy value to workspace calling callback function\n\t          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);\n\t          // function was called on current row\n\t          u[i] = mark;\n\t        }\n\t        else {\n\t          // copy value to workspace\n\t          x[i] = avalues[k];\n\t        }\n\t      }\n\t      else {\n\t        // i exists in C already\n\t        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);\n\t        // function was called on current row\n\t        u[i] = mark;\n\t      }\n\t    }\n\t  }\n\t  else {\n\t    // values in j\n\t    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t      // row\n\t      i = aindex[k];\n\t      // check value exists in current j\n\t      if (w[i] !== mark) {\n\t        // i is new entry in j\n\t        w[i] = mark;\n\t        // add i to pattern of C\n\t        cindex.push(i);\n\t      }\n\t      else {\n\t        // indicate function was called on current row\n\t        u[i] = mark;\n\t      }\n\t    }\n\t  }\n\t};\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43810,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var divideScalar = load(__webpack_require__(81));\n  /**\n\t   * Calculate the logarithm of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.log(x)\n\t   *    math.log(x, base)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.log(3.5);                  // returns 1.252762968495368\n\t   *    math.exp(math.log(2.4));        // returns 2.4\n\t   *\n\t   *    math.pow(10, 4);                // returns 10000\n\t   *    math.log(10000, 10);            // returns 4\n\t   *    math.log(10000) / math.log(10); // returns 4\n\t   *\n\t   *    math.log(1024, 2);              // returns 10\n\t   *    math.pow(2, 10);                // returns 1024\n\t   *\n\t   * See also:\n\t   *\n\t   *    exp, log10\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            Value for which to calculate the logarithm.\n\t   * @param {number | BigNumber | Complex} [base=e]\n\t   *            Optional base for the logarithm. If not provided, the natural\n\t   *            logarithm of `x` is calculated.\n\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t   *            Returns the logarithm of `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43900,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43902,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.log10(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.log10(0.00001);            // returns -5\n\t   *    math.log10(10000);              // returns 4\n\t   *    math.log(10000) / math.log(10); // returns 4\n\t   *    math.pow(10, 4);                // returns 10000\n\t   *\n\t   * See also:\n\t   *\n\t   *    exp, log\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            Value for which to calculate the logarithm.\n\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t   *            Returns the 10-base logarithm of `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43969,
            "description": "Calculate the 10-base logarithm of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43984,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 43986,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var latex = __webpack_require__(32);\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Calculates the modulus, the remainder of an integer division.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * The modulus is defined as:\n\t   *\n\t   *     x - y * floor(x / y)\n\t   *\n\t   * See http://en.wikipedia.org/wiki/Modulo_operation.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.mod(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.mod(8, 3);                // returns 2\n\t   *    math.mod(11, 2);               // returns 1\n\t   *\n\t   *    function isOdd(x) {\n\t   *      return math.mod(x, 2) != 0;\n\t   *    }\n\t   *\n\t   *    isOdd(2);                      // returns false\n\t   *    isOdd(3);                      // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    divide\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n\t   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n\t   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44146,
            "description": "Calculate the modulus of two numbers",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "res",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44174,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44176,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  \n\t  var abs         = load(__webpack_require__(86));\n\t  var add         = load(__webpack_require__(51));\n\t  var pow         = load(__webpack_require__(82));\n\t  var sqrt        = load(__webpack_require__(380));\n\t  var multiply    = load(__webpack_require__(84));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var larger      = load(__webpack_require__(64));\n\t  var smaller     = load(__webpack_require__(60));\n\t  var matrix      = load(__webpack_require__(52));\n\t  var trace       = load(__webpack_require__(389));\n\t  var transpose   = load(__webpack_require__(347));\n\n  /**\n\t   * Calculate the norm of a number, vector or matrix.\n\t   *\n\t   * The second parameter p is optional. If not provided, it defaults to 2.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.norm(x)\n\t   *    math.norm(x, p)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.abs(-3.5);                         // returns 3.5\n\t   *    math.norm(-3.5);                        // returns 3.5\n\t   *\n\t   *    math.norm(math.complex(3, -4));         // returns 5\n\t   *\n\t   *    math.norm([1, 2, -3], Infinity);        // returns 3\n\t   *    math.norm([1, 2, -3], -Infinity);       // returns 1\n\t   *\n\t   *    math.norm([3, 4], 2);                   // returns 5\n\t   *\n\t   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n\t   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7\n\t   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661\n\t   *\n\t   * See also:\n\t   *\n\t   *    abs, hypot\n\t   *\n\t   * @param  {number | BigNumber | Complex | Array | Matrix} x\n\t   *            Value for which to calculate the norm\n\t   * @param  {number | BigNumber | string} [p=2]\n\t   *            Vector space.\n\t   *            Supported numbers include Infinity and -Infinity.\n\t   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n\t   * @return {number | BigNumber} the p-norm",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44272,
            "description": "Calculate the norm for an array",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "p",
                    "description": "",
                    "type": "Number | string"
                }
            ],
            "return": {
                "description": "Returns the norm",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44395,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44397,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var add = load(__webpack_require__(51));\n  /**\n\t   * Calculate the trace of a matrix: the sum of the elements on the main\n\t   * diagonal of a square matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.trace(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.trace([[1, 2], [3, 4]]); // returns 5\n\t   *\n\t   *    var A = [\n\t   *      [1, 2, 3],\n\t   *      [-1, 2, 3],\n\t   *      [2, 0, 3]\n\t   *    ]\n\t   *    math.trace(A); // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    diag\n\t   *\n\t   * @param {Array | Matrix} x  A matrix\n\t   *\n\t   * @return {number} The trace of `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44548,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44550,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm06 = load(__webpack_require__(383));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Calculate the nth root of a value.\n\t   * The principal nth root of a positive real number A, is the positive real\n\t   * solution of the equation\n\t   *\n\t   *     x^root = A\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.nthRoot(a)\n\t   *     math.nthRoot(a, root)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9\n\t   *     math.sqrt(9);          // returns 3, as 3^2 == 9\n\t   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64\n\t   *\n\t   * See also:\n\t   *\n\t   *     sqrt, pow\n\t   *\n\t   * @param {number | BigNumber | Array | Matrix | Complex} a\n\t   *              Value for which to calculate the nth root\n\t   * @param {number | BigNumber} [root=2]    The root.\n\t   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44730,
            "description": "Calculate the nth root of a for BigNumbers, solve x^root == a\nhttp://rosettacode.org/wiki/Nth_root#JavaScript",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "root",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44771,
            "description": "Calculate the nth root of a, solve x^root == a\nhttp://rosettacode.org/wiki/Nth_root#JavaScript",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "root",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44829,
            "description": "Calculate the nth root of a Complex Number a using De Moviers Theorem.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Complex"
                },
                {
                    "name": "root",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "array or n Complex Roots in Polar Form.",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44853,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 44855,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar toFixed = __webpack_require__(6).toFixed;\n\tvar deepMap = __webpack_require__(19);\nvar NO_INT = 'Number of decimals in function round must be an integer';\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(392));\n  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Round a value towards the nearest integer.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.round(x)\n\t   *    math.round(x, n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.round(3.2);              // returns number 3\n\t   *    math.round(3.8);              // returns number 4\n\t   *    math.round(-4.2);             // returns number -4\n\t   *    math.round(-4.7);             // returns number -5\n\t   *    math.round(math.pi, 3);       // returns number 3.142\n\t   *    math.round(123.45678, 2);     // returns number 123.46\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.round(c);                // returns Complex 3 - 3i\n\t   *\n\t   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ceil, fix, floor\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45017,
            "description": "round a number to the given number of decimals, or to zero if decimals is\nnot provided",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "decimals",
                    "description": "number of decimals, between 0 and 15 (0 by default)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "roundedValue",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45033,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45035,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar resize = __webpack_require__(40).resize;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Create a matrix filled with zeros. The created matrix can have one or\n\t   * multiple dimensions.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.zeros(m)\n\t   *    math.zeros(m, format)\n\t   *    math.zeros(m, n)\n\t   *    math.zeros(m, n, format)\n\t   *    math.zeros([m, n])\n\t   *    math.zeros([m, n], format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.zeros(3);                  // returns [0, 0, 0]\n\t   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]\n\t   *    math.zeros(3, 'dense');         // returns [0, 0, 0]\n\t   *\n\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ones, eye, size, range\n\t   *\n\t   * @param {...number | Array} size    The size of each dimension of the matrix\n\t   * @param {string} [format]           The Matrix storage format\n\t   *\n\t   * @return {Array | Matrix}           A matrix filled with zeros",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45115,
            "description": "Create an Array or Matrix with zeros",
            "params": [
                {
                    "name": "size",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'default'"
                }
            ],
            "return": {
                "description": "",
                "type": "Array | Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45173,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45175,
            "description": "'use strict';\nvar number = __webpack_require__(6);\n\tvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the sign of a value. The sign of a value x is:\n\t   *\n\t   * -  1 when x > 1\n\t   * - -1 when x < 0\n\t   * -  0 when x == 0\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sign(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sign(3.5);               // returns 1\n\t   *    math.sign(-4.2);              // returns -1\n\t   *    math.sign(0);                 // returns 0\n\t   *\n\t   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]\n\t   *\n\t   * See also:\n\t   *\n\t   *    abs\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t   *            The number for which to determine the sign\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n\t   *            The sign of `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45248,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45250,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the square of a value, `x * x`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.square(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.square(2);           // returns number 4\n\t   *    math.square(3);           // returns number 9\n\t   *    math.pow(3, 2);           // returns number 9\n\t   *    math.multiply(3, 3);      // returns number 9\n\t   *\n\t   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, cube, sqrt, pow\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t   *            Number for which to calculate the square\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n\t   *            Squared value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45319,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45321,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Unary plus operation.\n\t   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.unaryPlus(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.unaryPlus(3.5);      // returns 3.5\n\t   *    math.unaryPlus(1);     // returns 1\n\t   *\n\t   * See also:\n\t   *\n\t   *    unaryMinus, add, subtract\n\t   *\n\t   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n\t   *            Input value\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t   *            Returns the input value when numeric, converts to a number when input is non-numeric.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45397,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45399,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Calculate the extended greatest common divisor for two values.\n\t   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.xgcd(a, b)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.xgcd(8, 12);             // returns [4, -1, 1]\n\t   *    math.gcd(8, 12);              // returns 4\n\t   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]\n\t   *\n\t   * See also:\n\t   *\n\t   *    gcd, lcm\n\t   *\n\t   * @param {number | BigNumber} a  An integer number\n\t   * @param {number | BigNumber} b  An integer number\n\t   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n\t   *                              where `div = gcd(a, b)` and `a*m + b*n = div`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45441,
            "description": "Calculate xgcd for two numbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "result",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45486,
            "description": "Calculate xgcd for two BigNumbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "result",
                "type": "BigNumber[]"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45540,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45542,
            "description": "module.exports = [\n\t  __webpack_require__(398),\n\t  __webpack_require__(402),\n\t  __webpack_require__(403),\n\t  __webpack_require__(405),\n\t  __webpack_require__(407),\n\t  __webpack_require__(410),\n\t  __webpack_require__(412)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45557,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigBitAnd = __webpack_require__(399);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm06 = load(__webpack_require__(383));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Bitwise AND two values, `x & y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitAnd(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitAnd(53, 131);               // returns number 1\n\t   *\n\t   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x First value to and\n\t   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n\t   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45710,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45712,
            "description": "var bitwise = __webpack_require__(400);\n/**\n\t * Bitwise and for Bignumbers\n\t *\n\t * Special Cases:\n\t *   N &  n =  N\n\t *   n &  0 =  0\n\t *   n & -1 =  n\n\t *   n &  n =  n\n\t *   I &  I =  I\n\t *  -I & -I = -I\n\t *   I & -I =  0\n\t *   I &  n =  n\n\t *   I & -n =  I\n\t *  -I &  n =  0\n\t *  -I & -n = -I\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` & `y`, is fully precise\n\t * @private",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45784,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45786,
            "description": "var bitNot = __webpack_require__(401);\n/**\n\t * Applies bitwise function to numbers\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @param {function (a, b)} func\n\t * @return {BigNumber}",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45914,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45916,
            "description": "/**\n\t * Bitwise not\n\t * @param {BigNumber} value\n\t * @return {BigNumber} Result of ~`x`, fully precise\n\t *",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45941,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 45943,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar bigBitNot = __webpack_require__(401);\n\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Bitwise NOT value, `~x`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitNot(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitNot(1);               // returns number -2\n\t   *\n\t   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x Value to not\n\t   * @return {number | BigNumber | Array | Matrix} NOT of `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46003,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46005,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigBitOr = __webpack_require__(404);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm04 = load(__webpack_require__(55));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Bitwise OR two values, `x | y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the lowest print base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitOr(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitOr(1, 2);               // returns number 3\n\t   *\n\t   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x First value to or\n\t   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n\t   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46158,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46160,
            "description": "var bitwise = __webpack_require__(400);\n/**\n\t * Bitwise OR for BigNumbers\n\t *\n\t * Special Cases:\n\t *   N |  n =  N\n\t *   n |  0 =  n\n\t *   n | -1 = -1\n\t *   n |  n =  n\n\t *   I |  I =  I\n\t *  -I | -I = -I\n\t *   I | -n = -1\n\t *   I | -I = -1\n\t *   I |  n =  I\n\t *  -I |  n = -I\n\t *  -I | -n = -n\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` | `y`, fully precise",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46217,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46219,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigBitXor = __webpack_require__(406);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Bitwise XOR two values, `x ^ y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitXor(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitXor(1, 2);               // returns number 3\n\t   *\n\t   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x First value to xor\n\t   * @param  {number | BigNumber | Array | Matrix} y Second value to xor\n\t   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46372,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46374,
            "description": "var bitwise = __webpack_require__(400);\n\tvar bitNot = __webpack_require__(401);\n/**\n\t * Bitwise XOR for BigNumbers\n\t *\n\t * Special Cases:\n\t *   N ^  n =  N\n\t *   n ^  0 =  n\n\t *   n ^  n =  0\n\t *   n ^ -1 = ~n\n\t *   I ^  n =  I\n\t *   I ^ -n = -I\n\t *   I ^ -I = -1\n\t *  -I ^  n = -I\n\t *  -I ^ -n =  I\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` ^ `y`, fully precise\n\t *",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46438,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46440,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigLeftShift = __webpack_require__(408);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm08 = load(__webpack_require__(409));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.leftShift(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.leftShift(1, 2);               // returns number 4\n\t   *\n\t   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]\n\t   *\n\t   * See also:\n\t   *\n\t   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n\t   * @param  {number | BigNumber} y Amount of shifts\n\t   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46606,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46608,
            "description": "/**\n\t * Bitwise left shift\n\t *\n\t * Special Cases:\n\t *  n << -n = N\n\t *  n <<  N = N\n\t *  N <<  n = N\n\t *  n <<  0 = n\n\t *  0 <<  n = 0\n\t *  I <<  I = N\n\t *  I <<  n = I\n\t *  n <<  I = I\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` << `y`\n\t *",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46653,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46655,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46819,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46821,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigRightArithShift = __webpack_require__(411);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm08 = load(__webpack_require__(409));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.rightArithShift(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.rightArithShift(4, 2);               // returns number 1\n\t   *\n\t   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n\t   * @param  {number | BigNumber} y Amount of shifts\n\t   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46987,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 46989,
            "description": "/*\n\t * Special Cases:\n\t *   n >> -n =  N\n\t *   n >>  N =  N\n\t *   N >>  n =  N\n\t *   I >>  I =  N\n\t *   n >>  0 =  n\n\t *   I >>  n =  I\n\t *  -I >>  n = -I\n\t *  -I >>  I = -I\n\t *   n >>  I =  I\n\t *  -n >>  I = -1\n\t *   0 >>  n =  0\n\t *\n\t * @param {BigNumber} value\n\t * @param {BigNumber} value\n\t * @return {BigNumber} Result of `x` >> `y`\n\t *",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47040,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47042,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm08 = load(__webpack_require__(409));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.rightLogShift(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.rightLogShift(4, 2);               // returns number 1\n\t   *\n\t   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n\t   *\n\t   * @param  {number | Array | Matrix} x Value to be shifted\n\t   * @param  {number} y Amount of shifts\n\t   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47208,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47210,
            "description": "module.exports = [\n\t  __webpack_require__(414),\n\t  __webpack_require__(420),\n\t  __webpack_require__(415),\n\t  __webpack_require__(421)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47222,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var stirlingS2 = load(__webpack_require__(415));\n\t  var isNegative = load(__webpack_require__(368));\n\t  var isInteger = load(__webpack_require__(419));\n  /**\n\t   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\n\t   * bellNumbers only takes integer arguments.\n\t   * The following condition must be enforced: n >= 0\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.bellNumbers(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bellNumbers(3); // returns 5;\n\t   *    math.bellNumbers(8); // returns 4140;\n\t   *\n\t   * See also:\n\t   *\n\t   *    stirlingS2\n\t   *\n\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t   * @return {Number | BigNumber}     B(n)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47279,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47281,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(84));\n\t  var divide = load(__webpack_require__(329));\n\t  var pow = load(__webpack_require__(82));\n\t  var factorial = load(__webpack_require__(416));\n\t  var combinations = load(__webpack_require__(418));\n\t  var isNegative = load(__webpack_require__(368));\n\t  var isInteger = load(__webpack_require__(419));\n\t  var larger = load(__webpack_require__(64));\n  /**\n\t   * The Stirling numbers of the second kind, counts the number of ways to partition\n\t   * a set of n labelled objects into k nonempty unlabelled subsets.\n\t   * stirlingS2 only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   *  If n = k or k = 1, then s(n,k) = 1\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.stirlingS2(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.stirlingS2(5, 3); //returns 25\n\t   *\n\t   * See also:\n\t   *\n\t   *    Bell numbers\n\t   *\n\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t   * @param {Number | BigNumber} k    Number of objects in the subset\n\t   * @return {Number | BigNumber}     S(n,k)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47354,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47356,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var gamma = load(__webpack_require__(417));\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Compute the factorial of a value\n\t   *\n\t   * Factorial only supports an integer value as argument.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.factorial(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.factorial(5);    // returns 120\n\t   *    math.factorial(3);    // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, gamma, permutations\n\t   *\n\t   * @param {number | BigNumber | Array | Matrix} n   An integer number\n\t   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47421,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47423,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var multiply = load(__webpack_require__(84));\n\t  var pow = load(__webpack_require__(82));\n  /**\n\t   * Compute the gamma function of a value using Lanczos approximation for\n\t   * small values, and an extended Stirling approximation for large values.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.gamma(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.gamma(5);       // returns 24\n\t   *    math.gamma(-0.5);    // returns -3.5449077018110335\n\t   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, factorial, permutations\n\t   *\n\t   * @param {number | Array | Matrix} n   A real or complex number\n\t   * @return {number | Array | Matrix}    The gamma of `n`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47575,
            "description": "Calculate factorial for a BigNumber",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "Returns the factorial of n",
                "type": "BigNumber"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47629,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47631,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the number of ways of picking `k` unordered outcomes from `n`\n\t   * possibilities.\n\t   *\n\t   * Combinations only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.combinations(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.combinations(7, 5); // returns 21\n\t   *\n\t   * See also:\n\t   *\n\t   *    permutations, factorial\n\t   *\n\t   * @param {number | BigNumber} n    Total number of objects in the set\n\t   * @param {number | BigNumber} k    Number of objects in the subset\n\t   * @return {number | BigNumber}     Number of possible combinations.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47713,
            "description": "Test whether BigNumber n is a positive integer",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "isPositiveInteger",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47726,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47728,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is an integer number.\n\t   * The function supports `number`, `BigNumber`, and `Fraction`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isInteger(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isInteger(2);                     // returns true\n\t   *    math.isInteger(0);                     // returns true\n\t   *    math.isInteger(0.5);                   // returns false\n\t   *    math.isInteger(math.bignumber(500));   // returns true\n\t   *    math.isInteger(math.fraction(4));      // returns true\n\t   *    math.isInteger('3');                   // returns true\n\t   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]\n\t   *    math.isInteger(math.complex('2-4i');   // throws an error\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isPositive, isNegative, isZero\n\t   *\n\t   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n\t   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n\t   *                    Throws an error in case of an unknown data type.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47788,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47790,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var combinations = load(__webpack_require__(418));\n\t  var add = load(__webpack_require__(53));\n\t  var isPositive = load(__webpack_require__(381));\n\t  var isInteger = load(__webpack_require__(419));\n\t  var larger = load(__webpack_require__(64));\n  /**\n\t   * The composition counts of n into k parts.\n\t   *\n\t   * composition only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.composition(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.composition(5, 3); // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations\n\t   *\n\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t   * @param {Number | BigNumber} k    Number of objects in the subset\n\t   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47845,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47847,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var divide = load(__webpack_require__(329));\n\t  var multiply = load(__webpack_require__(84));\n\t  var combinations = load(__webpack_require__(418));\n\t  var isNegative = load(__webpack_require__(368));\n\t  var isInteger = load(__webpack_require__(419));\n\n  /**\n\t   * The Catalan Numbers enumerate combinatorial structures of many different types.\n\t   * catalan only takes integer arguments.\n\t   * The following condition must be enforced: n >= 0\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.catalan(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.catalan(3); // returns 5;\n\t   *    math.catalan(8); // returns 1430;\n\t   *\n\t   * See also:\n\t   *\n\t   *    bellNumbers\n\t   *\n\t   * @param {Number | BigNumber} n    nth Catalan number\n\t   * @return {Number | BigNumber}     Cn(n)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47902,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47904,
            "description": "module.exports = [\n\t  __webpack_require__(423),\n\t  __webpack_require__(424),\n\t  __webpack_require__(425),\n\t  __webpack_require__(426)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47916,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the argument of a complex value.\n\t   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.arg(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(2, 2);\n\t   *    math.arg(a) / math.pi;          // returns number 0.25\n\t   *\n\t   *    var b = math.complex('2 + 3i');\n\t   *    math.arg(b);                    // returns number 0.982793723247329\n\t   *    math.atan2(3, 2);               // returns number 0.982793723247329\n\t   *\n\t   * See also:\n\t   *\n\t   *    re, im, conj, abs\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | BigNumber | Array | Matrix} The argument of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47979,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 47981,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the complex conjugate of a complex value.\n\t   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.conj(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i\n\t   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i\n\t   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i\n\t   *\n\t   * See also:\n\t   *\n\t   *    re, im, arg, abs\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t   *            The complex conjugate of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48040,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48042,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Get the imaginary part of a complex number.\n\t   * For a complex number `a + bi`, the function returns `b`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.im(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    math.re(a);                     // returns number 2\n\t   *    math.im(a);                     // returns number 3\n\t   *\n\t   *    math.re(math.complex('-5.2i')); // returns number -5.2\n\t   *    math.re(math.complex(2.4));     // returns number 0\n\t   *\n\t   * See also:\n\t   *\n\t   *    re, conj, abs, arg\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | BigNumber | Array | Matrix} The imaginary part of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48103,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48105,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Get the real part of a complex number.\n\t   * For a complex number `a + bi`, the function returns `a`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.re(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    math.re(a);                     // returns number 2\n\t   *    math.im(a);                     // returns number 3\n\t   *\n\t   *    math.re(math.complex('-5.2i')); // returns number 0\n\t   *    math.re(math.complex(2.4));     // returns number 2.4\n\t   *\n\t   * See also:\n\t   *\n\t   *    im, conj, abs, arg\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | BigNumber | Array | Matrix} The real part of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48166,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48168,
            "description": "module.exports = [\n\t  __webpack_require__(428),\n\t  __webpack_require__(429)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48178,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var abs = load(__webpack_require__(86));\n\t  var add = load(__webpack_require__(51));\n\t  var matrix = load(__webpack_require__(52));\n\t  var multiply = load(__webpack_require__(84));\n\t  var subtract = load(__webpack_require__(77));\n  /**\n\t   * Calculates the point of intersection of two lines in two or three dimensions\n\t   * and of a line and a plane in three dimensions. The inputs are in the form of\n\t   * arrays or 1 dimensional matrices. The line intersection functions return null\n\t   * if the lines do not meet.\n\t   *\n\t   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n\t   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]\n\t   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]\n\t   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]\n\t   *\n\t   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n\t   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n\t   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n\t   *                              OR Co-efficients of the plane's equation\n\t   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n\t   *                              OR null if the calculation is for line and plane\n\t   * @return {Array}              Returns the point of intersection of lines/lines-planes",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48324,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48326,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t    * Calculates:\n\t    *    The eucledian distance between two points in 2 and 3 dimensional spaces.\n\t    *    Distance between point and a line in 2 and 3 dimensional spaces.\n\t    *    Pairwise distance between a set of 2D or 3D points\n\t    * NOTE:\n\t    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n\t    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n\t    *\n\t    * Syntax:\n\t    *    math.distance([x1, y1], [x2, y2])\n\t    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n\t    *    math.distance([x1, y1, z1], [x2, y2, z2])\n\t    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n\t    *    math.distance([[A], [B], [C]...])\n\t    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n\t    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n\t    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n\t    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n\t    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n\t    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n\t    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n\t    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n\t    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n\t    *\n\t    * Examples:\n\t    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n\t    *    math.distance(\n\t    *     {pointOneX: 0, pointOneY: 0},\n\t    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n\t    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n\t    *    math.distance(\n\t    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n\t    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n\t    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n\t    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n\t    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n\t    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n\t    *    math.distance(\n\t    *     {pointX: 1, pointY: 4},\n\t    *     {lineOnePtX: 6, lineOnePtY: 3},\n\t    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n\t    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n\t    *    math.distance(\n\t    *     {pointX: 2, pointY: 3, pointZ: 1},\n\t    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n\t    *\n\t    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n\t    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n\t    * @return {Number | BigNumber} Returns the distance from two/three points",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48631,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48633,
            "description": "module.exports = [\n\t  __webpack_require__(431),\n\t  __webpack_require__(432),\n\t  __webpack_require__(434),\n\t  __webpack_require__(435)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48645,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t  var zeros = load(__webpack_require__(392));\n\t  var not = load(__webpack_require__(432));\n\t  var isZero = load(__webpack_require__(433));\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm06 = load(__webpack_require__(383));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.and(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.and(2, 4);   // returns true\n\t   *\n\t   *    a = [2, 0, 0];\n\t   *    b = [3, 7, 0];\n\t   *    c = 0;\n\t   *\n\t   *    math.and(a, b);   // returns [true, false, false]\n\t   *    math.and(a, c);   // returns [false, false, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    not, or, xor\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when both inputs are defined with a nonzero/nonempty value.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48820,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48822,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Logical `not`. Flips boolean value of a given parameter.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.not(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.not(2);      // returns false\n\t   *    math.not(0);      // returns true\n\t   *    math.not(true);   // returns false\n\t   *\n\t   *    a = [2, -7, 0];\n\t   *    math.not(a);      // returns [false, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    and, or, xor\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when input is a zero or empty value.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48889,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48891,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is zero.\n\t   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n\t   * `Complex`, and `Unit`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isZero(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isZero(0);                     // returns true\n\t   *    math.isZero(2);                     // returns false\n\t   *    math.isZero(0.5);                   // returns false\n\t   *    math.isZero(math.bignumber(0));     // returns true\n\t   *    math.isZero(math.fraction(0));      // returns true\n\t   *    math.isZero(math.fraction(1,3));    // returns false\n\t   *    math.isZero(math.complex('2 - 4i'); // returns false\n\t   *    math.isZero(math.complex('0i');     // returns true\n\t   *    math.isZero('0');                   // returns true\n\t   *    math.isZero('2');                   // returns false\n\t   *    math.isZero([2, 0, -3]');           // returns [false, true, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isPositive, isNegative, isInteger\n\t   *\n\t   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n\t   * @return {boolean}  Returns true when `x` is zero.\n\t   *                    Throws an error in case of an unknown data type.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48965,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 48967,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.or(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.or(2, 4);   // returns true\n\t   *\n\t   *    a = [2, 5, 0];\n\t   *    b = [0, 22, 0];\n\t   *    c = 0;\n\t   *\n\t   *    math.or(a, b);   // returns [true, true, false]\n\t   *    math.or(b, c);   // returns [false, true, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    and, not, xor\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49129,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49131,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.xor(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.xor(2, 4);   // returns false\n\t   *\n\t   *    a = [2, 0, 0];\n\t   *    b = [2, 7, 0];\n\t   *    c = 0;\n\t   *\n\t   *    math.xor(a, b);   // returns [false, true, false]\n\t   *    math.xor(a, c);   // returns [true, false, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    and, not, or\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when one and only one input is defined with a nonzero/nonempty value.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49293,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49295,
            "description": "module.exports = [\n\t  __webpack_require__(313),\n\t  __webpack_require__(437),\n\t  __webpack_require__(331),\n\t  __webpack_require__(438),\n\t  __webpack_require__(439),\n\t  __webpack_require__(83),\n\t  __webpack_require__(315),\n\t  __webpack_require__(440),\n\t  __webpack_require__(317),\n\t  __webpack_require__(330),\n\t  __webpack_require__(320),\n\t  __webpack_require__(441),\n\t  __webpack_require__(442),\n\t  __webpack_require__(335),\n\t  __webpack_require__(444),\n\t  __webpack_require__(445),\n\t  __webpack_require__(446),\n\t  __webpack_require__(447),\n\t  __webpack_require__(288),\n\t  __webpack_require__(389),\n\t  __webpack_require__(347),\n\t  __webpack_require__(392)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49325,
            "description": "'use strict';\nvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t  var matrix   = load(__webpack_require__(52));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(84));\n  /**\n\t   * Calculate the cross product for two vectors in three dimensional space.\n\t   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n\t   * as:\n\t   *\n\t   *    cross(A, B) = [\n\t   *      a2 * b3 - a3 * b2,\n\t   *      a3 * b1 - a1 * b3,\n\t   *      a1 * b2 - a2 * b1\n\t   *    ]\n\t   *\n\t   * If one of the input vectors has a dimension greater than 1, the output\n\t   * vector will be a 1x3 (2-dimensional) matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cross(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cross([1, 1, 0],   [0, 1, 1]);       // Returns [1, -1, 1]\n\t   *    math.cross([3, -3, 1],  [4, 9, 2]);       // Returns [-15, -2, 39]\n\t   *    math.cross([2, 3, 4],   [5, 6, 7]);       // Returns [-3, 6, -3]\n\t   *    math.cross([[1, 2, 3]], [[4], [5], [6]]); // Returns [[-3, 6, -3]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    dot, multiply\n\t   *\n\t   * @param  {Array | Matrix} x   First vector\n\t   * @param  {Array | Matrix} y   Second vector\n\t   * @return {Array | Matrix}     Returns the cross product of `x` and `y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49391,
            "description": "Calculate the cross product for two arrays",
            "params": [
                {
                    "name": "x",
                    "description": "First vector",
                    "type": "Array"
                },
                {
                    "name": "y",
                    "description": "Second vector",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the cross product of x and y",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49430,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49432,
            "description": "'use strict';\nvar array     = __webpack_require__(40);\n\tvar clone     = __webpack_require__(3).clone;\n\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  \n\t  /**\n\t   * Create a diagonal matrix or retrieve the diagonal of a matrix\n\t   *\n\t   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n\t   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n\t   * When k is positive, the values are placed on the super diagonal.\n\t   * When k is negative, the values are placed on the sub diagonal.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.diag(X)\n\t   *     math.diag(X, format)\n\t   *     math.diag(X, k)\n\t   *     math.diag(X, k, format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     // create a diagonal matrix\n\t   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\t   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n\t   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\t   *\n\t   *    // retrieve the diagonal from a matrix\n\t   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\t   *    math.diag(a);   // returns [1, 5, 9]\n\t   *\n\t   * See also:\n\t   *\n\t   *     ones, zeros, eye\n\t   *\n\t   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n\t   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n\t   *                                    in or retrieved.\n\t   * @param {string} [format='dense']   The matrix storage format.\n\t   *\n\t   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49537,
            "description": "Creeate diagonal matrix from a vector or vice versa",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Array | Matrix"
                },
                {
                    "name": "k",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "Storage format for matrix. If null,\n                         an Array is returned",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array | Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49606,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49608,
            "description": "'use strict';\nvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t  var add      = load(__webpack_require__(51));\n\t  var multiply = load(__webpack_require__(84));\n  /**\n\t   * Calculate the dot product of two vectors. The dot product of\n\t   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:\n\t   *\n\t   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dot(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15\n\t   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, cross\n\t   *\n\t   * @param  {Array | Matrix} x     First vector\n\t   * @param  {Array | Matrix} y     Second vector\n\t   * @return {number}               Returns the dot product of `x` and `y`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49661,
            "description": "Calculate the dot product for two arrays",
            "params": [
                {
                    "name": "x",
                    "description": "First vector",
                    "type": "Array"
                },
                {
                    "name": "y",
                    "description": "Second vector",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the dot product of x and y",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49691,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49693,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar _flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Flatten a multi dimensional matrix into a single dimensional matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.flatten(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]\n\t   *\n\t   * See also:\n\t   *\n\t   *    concat, resize, size, squeeze\n\t   *\n\t   * @param {Matrix | Array} x   Matrix to be flattened\n\t   * @return {Matrix | Array} Returns the flattened matrix",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49742,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49744,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar resize = __webpack_require__(40).resize;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Create a matrix filled with ones. The created matrix can have one or\n\t   * multiple dimensions.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.ones(m)\n\t   *    math.ones(m, format)\n\t   *    math.ones(m, n)\n\t   *    math.ones(m, n, format)\n\t   *    math.ones([m, n])\n\t   *    math.ones([m, n], format)\n\t   *    math.ones([m, n, p, ...])\n\t   *    math.ones([m, n, p, ...], format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.ones(3);                   // returns [1, 1, 1]\n\t   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]\n\t   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n\t   *\n\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    zeros, eye, size, range\n\t   *\n\t   * @param {...number | Array} size    The size of each dimension of the matrix\n\t   * @param {string} [format]           The Matrix storage format\n\t   *\n\t   * @return {Array | Matrix | number}  A matrix filled with ones",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49826,
            "description": "Create an Array or Matrix with ones",
            "params": [
                {
                    "name": "size",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'default'"
                }
            ],
            "return": {
                "description": "",
                "type": "Array | Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49882,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49884,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var asc = load(__webpack_require__(443));\n\t  function desc(a, b) {\n\t    return -asc(a, b);\n\t  }\n  /**\n\t   * Partition-based selection of an array or 1D matrix.\n\t   * Will find the kth smallest value, and mutates the input array.\n\t   * Uses Quickselect.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.partitionSelect(x, k)\n\t   *    math.partitionSelect(x, k, compare)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.partitionSelect([5, 10, 1], 2);           // returns 10\n\t   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'\n\t   *\n\t   *    function sortByLength (a, b) {\n\t   *      return a.length - b.length;\n\t   *    }\n\t   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'\n\t   *\n\t   * See also:\n\t   *\n\t   *    sort\n\t   *\n\t   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n\t   * @param {Number} k            The kth smallest value to be retrieved; zero-based index\n\t   * @param {Function | 'asc' | 'desc'} [compare='asc']\n\t   *        An optional comparator function. The function is called as\n\t   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n\t   *        and 0 when a == b.\n\t   * @return {*} Returns the kth lowest value.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 49966,
            "description": "Quickselect algorithm.\nCode adapted from:\nhttp://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "k",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "compare",
                    "description": "",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50024,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50026,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n\t   *\n\t   * x and y are considered equal when the relative difference between x and y\n\t   * is smaller than the configured epsilon. The function cannot be used to\n\t   * compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.compare(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.compare(6, 1);           // returns 1\n\t   *    math.compare(2, 3);           // returns -1\n\t   *    math.compare(7, 7);           // returns 0\n\t   *\n\t   *    var a = math.unit('5 cm');\n\t   *    var b = math.unit('40 mm');\n\t   *    math.compare(a, b);           // returns 1\n\t   *\n\t   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, smallerEq, larger, largerEq\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50212,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50214,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\n\tvar ArgumentsError = __webpack_require__(11);\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar format = __webpack_require__(23).format;\n\tvar clone = __webpack_require__(3).clone;\n\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Resize a matrix\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.resize(x, size)\n\t   *     math.resize(x, size, defaultValue)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]\n\t   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]\n\t   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n\t   *     math.resize(\"hello\", [8], \"!\");    // returns string 'hello!!!'\n\t   *\n\t   * See also:\n\t   *\n\t   *     size, squeeze, subset\n\t   *\n\t   * @param {Array | Matrix | *} x             Matrix to be resized\n\t   * @param {Array | Matrix} size              One dimensional array with numbers\n\t   * @param {number | string} [defaultValue=0] Zero by default, except in\n\t   *                                           case of a string, in that case\n\t   *                                           defaultValue = ' '\n\t   * @return {* | Array | Matrix} A resized clone of matrix `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50310,
            "description": "Resize a string",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number[]"
                },
                {
                    "name": "defaultChar",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "' '"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50356,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50358,
            "description": "'use strict';\nvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Calculate the size of a matrix or scalar.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.size(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.size(2.3);                  // returns []\n\t   *     math.size('hello world');        // returns [11]\n\t   *\n\t   *     var A = [[1, 2, 3], [4, 5, 6]];\n\t   *     math.size(A);                    // returns [2, 3]\n\t   *     math.size(math.range(1,6));      // returns [5]\n\t   *\n\t   * See also:\n\t   *\n\t   *     resize, squeeze, subset\n\t   *\n\t   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\n\t   * @return {Array | Matrix} A vector with size of `x`.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50417,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50419,
            "description": "'use strict';\nvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var asc = load(__webpack_require__(443));\n\t  var desc = function (a, b) {\n\t    return -asc(a, b);\n\t  };\n  /**\n\t   * Sort the items in a matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sort(x)\n\t   *    math.sort(x, compare)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sort([5, 10, 1]); // returns [1, 5, 10]\n\t   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']\n\t   *\n\t   *    function sortByLength (a, b) {\n\t   *      return a.length - b.length;\n\t   *    }\n\t   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']\n\t   *\n\t   * See also:\n\t   *\n\t   *    filter, forEach, map\n\t   *\n\t   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n\t   * @param {Function | 'asc' | 'desc'} [compare='asc']\n\t   *        An optional _comparator function. The function is called as\n\t   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n\t   *        and 0 when a == b.\n\t   * @return {Matrix | Array} Returns the sorted matrix.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50495,
            "description": "Get the comparator for given order ('asc' or 'desc')",
            "params": [
                {
                    "name": "order",
                    "description": "",
                    "type": "'asc' | 'desc'"
                }
            ],
            "return": {
                "description": "Returns a _comparator function",
                "type": "Function"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50512,
            "description": "Validate whether an array is one dimensional\nThrows an error when this is not the case",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50524,
            "description": "Validate whether a matrix is one dimensional\nThrows an error when this is not the case",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50543,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50545,
            "description": "'use strict';\nvar object = __webpack_require__(3);\n\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.squeeze(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.squeeze([3]);           // returns 3\n\t   *     math.squeeze([[3]]);         // returns 3\n\t   *\n\t   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)\n\t   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)\n\t   *\n\t   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)\n\t   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)\n\t   *\n\t   *     // only inner and outer dimensions are removed\n\t   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n\t   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n\t   *\n\t   * See also:\n\t   *\n\t   *     subset\n\t   *\n\t   * @param {Matrix | Array} x      Matrix to be squeezed\n\t   * @return {Matrix | Array} Squeezed matrix",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50610,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50612,
            "description": "module.exports = [\n\t  //require('./distribution'), // TODO: rethink math.distribution\n\t  __webpack_require__(418),\n\t  __webpack_require__(416),\n\t  __webpack_require__(417),\n\t  __webpack_require__(449),\n\t  __webpack_require__(451),\n\t  __webpack_require__(452),\n\t  __webpack_require__(453),\n\t  __webpack_require__(455),\n\t  __webpack_require__(456)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50630,
            "description": "'use strict';\n\nfunction factory(type, config, load, typed) {\n\t    var matrix = load(__webpack_require__(52));\n\t    var divide = load(__webpack_require__(329));\n\t    var sum = load(__webpack_require__(450));\n\t    var multiply = load(__webpack_require__(84));\n\t    var dotDivide = load(__webpack_require__(371));\n\t    var log = load(__webpack_require__(385));\n\t    var isNumeric = load(__webpack_require__(89));\n    /**\n\t     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n\t     *\n\t     * Syntax:\n\t     *\n\t     *     math.kldivergence(x, y)\n\t     *\n\t     * Examples:\n\t     *\n\t     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153\n\t     *\n\t     *\n\t     * @param  {Array | Matrix} q    First vector\n\t     * @param  {Array | Matrix} p    Second vector\n\t     * @return {number}              Returns distance between q and p",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50725,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50727,
            "description": "'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(53));\n  /**\n\t   * Compute the sum of a matrix or a list with values.\n\t   * In case of a (multi dimensional) array or matrix, the sum of all\n\t   * elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.sum(a, b, c, ...)\n\t   *     math.sum(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.sum(2, 1, 4, 3);               // returns 10\n\t   *     math.sum([2, 1, 4, 3]);             // returns 10\n\t   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, min, max, prod, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The sum of all values",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50781,
            "description": "Recursively calculate the sum of an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "sum",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50815,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50817,
            "description": "'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var multiply = load(__webpack_require__(84));\n\t  var divide = load(__webpack_require__(329));\n\t  var factorial = load(__webpack_require__(416));\n\t  var isInteger = load(__webpack_require__(419));\n\t  var isPositive = load(__webpack_require__(381));\n  /**\n\t   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n\t   *\n\t   * multinomial takes one array of integers as an argument.\n\t   * The following condition must be enforced: every ai <= 0\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.multinomial(a) // a is an array type\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.multinomial([1,2,1]); // returns 12\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, factorial\n\t   *\n\t   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n\t   * @return {Number | BigNumber}         Multinomial coefficient.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50874,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50876,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var factorial = load(__webpack_require__(416));\n  /**\n\t   * Compute the number of ways of obtaining an ordered subset of `k` elements\n\t   * from a set of `n` elements.\n\t   *\n\t   * Permutations only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.permutations(n)\n\t   *     math.permutations(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.permutations(5);     // 120\n\t   *    math.permutations(5, 3);  // 60\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, factorial\n\t   *\n\t   * @param {number | BigNumber} n   The number of objects in total\n\t   * @param {number | BigNumber} [k] The number of objects in the subset\n\t   * @return {number | BigNumber}    The number of permutations",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50961,
            "description": "Test whether BigNumber n is a positive integer",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "isPositiveInteger",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50974,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 50976,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var distribution = load(__webpack_require__(454));\n  /**\n\t   * Random pick one or more values from a one dimensional array.\n\t   * Array elements are picked using a random function with uniform or weighted distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.pickRandom(array)\n\t   *     math.pickRandom(array, number)\n\t   *     math.pickRandom(array, weights)\n\t   *     math.pickRandom(array, number, weights)\n\t   *     math.pickRandom(array, weights, number)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.pickRandom([3, 6, 12, 2]);                  // returns one of the values in the array\n\t   *     math.pickRandom([3, 6, 12, 2], 2);               // returns an array of two of the values in the array\n\t   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1]);    // returns one of the values in the array with weighted distribution\n\t   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]); // returns an array of two of the values in the array with weighted distribution\n\t   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2); // returns an array of two of the values in the array with weighted distribution\n\t   *\n\t   * See also:\n\t   *\n\t   *     random, randomInt\n\t   *\n\t   * @param {Array} array     A one dimensional array\n\t   * @param {Int} number      An int or float\n\t   * @param {Array} weights   An array of ints or floats\n\t   * @return {number} One of the elements of the provided input array\n\t   * @return {array} An array of elements of the provided input array",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51025,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51027,
            "description": "'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\tvar isCollection = __webpack_require__(322);\n\tvar isNumber = __webpack_require__(6).isNumber;\n// TODO: rethink math.distribution\n\t// TODO: rework to a typed function\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var array = __webpack_require__(40);\n  /**\n\t   * Create a distribution object with a set of random functions for given\n\t   * random distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.distribution(name)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var normalDist = math.distribution('normal'); // create a normal distribution\n\t   *     normalDist.random(0, 10);                     // get a random value between 0 and 10\n\t   *\n\t   * See also:\n\t   *\n\t   *     random, randomInt, pickRandom\n\t   *\n\t   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.\n\t   * @return {Object}       Returns a distribution object containing functions:\n\t   *                        `random([size] [, min] [, max])`,\n\t   *                        `randomInt([min] [, max])`,\n\t   *                        `pickRandom(array)`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51327,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51329,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var distribution = load(__webpack_require__(454));\n  /**\n\t   * Return a random number larger or equal to `min` and smaller than `max`\n\t   * using a uniform distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.random()                // generate a random number between 0 and 1\n\t   *     math.random(max)             // generate a random number between 0 and max\n\t   *     math.random(min, max)        // generate a random number between min and max\n\t   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n\t   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n\t   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.random();       // returns a random number between 0 and 1\n\t   *     math.random(100);    // returns a random number between 0 and 100\n\t   *     math.random(30, 40); // returns a random number between 30 and 40\n\t   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1\n\t   *\n\t   * See also:\n\t   *\n\t   *     randomInt, pickRandom\n\t   *\n\t   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n\t   *                                size and filled with random values is returned\n\t   * @param {number} [min]  Minimum boundary for the random value, included\n\t   * @param {number} [max]  Maximum boundary for the random value, excluded\n\t   * @return {number | Array | Matrix} A random number",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51378,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51380,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var distribution = load(__webpack_require__(454));\n  /**\n\t   * Return a random integer number larger or equal to `min` and smaller than `max`\n\t   * using a uniform distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.randomInt(max)             // generate a random integer between 0 and max\n\t   *     math.randomInt(min, max)        // generate a random integer between min and max\n\t   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n\t   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n\t   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.randomInt(100);    // returns a random integer between 0 and 100\n\t   *     math.randomInt(30, 40); // returns a random integer between 30 and 40\n\t   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1\n\t   *\n\t   * See also:\n\t   *\n\t   *     random, pickRandom\n\t   *\n\t   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n\t   *                                size and filled with random values is returned\n\t   * @param {number} [min]  Minimum boundary for the random value, included\n\t   * @param {number} [max]  Maximum boundary for the random value, excluded\n\t   * @return {number | Array | Matrix} A random integer value",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51427,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51429,
            "description": "module.exports = [\n\t  __webpack_require__(443),\n\t  __webpack_require__(458),\n\t  __webpack_require__(88),\n\t  __webpack_require__(64),\n\t  __webpack_require__(354),\n\t  __webpack_require__(60),\n\t  __webpack_require__(459),\n\t  __webpack_require__(460)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51445,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var equal = load(__webpack_require__(88));\n  /**\n\t   * Test element wise whether two matrices are equal.\n\t   * The function accepts both matrices and scalar values.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.deepEqual(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.deepEqual(2, 4);   // returns false\n\t   *\n\t   *    a = [2, 5, 1];\n\t   *    b = [2, 7, 1];\n\t   *\n\t   *    math.deepEqual(a, b);   // returns false\n\t   *    math.equal(a, b);       // returns [true, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t   *            Returns true when the input matrices have the same size and each of their elements is equal.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51489,
            "description": "Test whether two arrays have the same size and all elements are equal",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Array | *"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Array | *"
                }
            ],
            "return": {
                "description": "Returns true if both arrays are deep equal",
                "type": "Boolean"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51530,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51532,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether value x is smaller or equal to y.\n\t   *\n\t   * The function returns true when x is smaller than y or the relative\n\t   * difference between x and y is smaller than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.smallerEq(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.smaller(1 + 2, 3);        // returns false\n\t   *    math.smallerEq(1 + 2, 3);      // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, larger, largerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51710,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51712,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether two values are unequal.\n\t   *\n\t   * The function tests whether the relative difference between x and y is\n\t   * larger than the configured epsilon. The function cannot be used to compare\n\t   * values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n\t   *\n\t   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n\t   * with everything except `null`, and `undefined` is unequal with everying\n\t   * except. `undefined`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.unequal(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.unequal(2 + 2, 3);       // returns true\n\t   *    math.unequal(2 + 2, 4);       // returns false\n\t   *\n\t   *    var a = math.unit('50 cm');\n\t   *    var b = math.unit('5 m');\n\t   *    math.unequal(a, b);           // returns false\n\t   *\n\t   *    var c = [2, 5, 1];\n\t   *    var d = [2, 7, 1];\n\t   *\n\t   *    math.unequal(c, d);           // returns [false, true, false]\n\t   *    math.deepEqual(c, d);         // returns false\n\t   *\n\t   *    math.unequal(0, null);        // returns true\n\t   * See also:\n\t   *\n\t   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51920,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51922,
            "description": "module.exports = [\n\t  __webpack_require__(462)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51931,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar sign = __webpack_require__(6).sign;\n\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the erf function of a value using a rational Chebyshev\n\t   * approximations for different intervals of x.\n\t   *\n\t   * This is a translation of W. J. Cody's Fortran implementation from 1987\n\t   * ( http://www.netlib.org/specfun/erf ). See the AMS publication\n\t   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n\t   * for an explanation of this process.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.erf(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.erf(0.2);    // returns 0.22270258921047847\n\t   *    math.erf(-0.5);   // returns -0.5204998778130465\n\t   *    math.erf(4);      // returns 0.9999999845827421\n\t   *\n\t   * @param {number | Array | Matrix} x   A real number\n\t   * @return {number | Array | Matrix}    The erf of `x`",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 51996,
            "description": "Approximates the error function erf() for x <= 0.46875 using this function:\n              n\nerf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n             j=0",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52015,
            "description": "Approximates the complement of the error function erfc() for\n0.46875 <= x <= 4.0 using this function:\n                      n\nerfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n                     j=0",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52037,
            "description": "Approximates the complement of the error function erfc() for x > 4.0 using\nthis function:\n\nerfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n              n\n   1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n             j=0",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52068,
            "description": "Upper bound for the first approximation interval, 0 <= x <= THRESH",
            "constant": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52074,
            "description": "Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)",
            "constant": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52080,
            "description": "Coefficients for each term of the numerator sum (p_j) for each approximation\ninterval (see W. J. Cody's paper for more details)",
            "constant": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52101,
            "description": "Coefficients for each term of the denominator sum (q_j) for each approximation\ninterval (see W. J. Cody's paper for more details)",
            "constant": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52120,
            "description": "Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\nNumber.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\nreturn 1",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52132,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52134,
            "description": "module.exports = [\n\t  __webpack_require__(323),\n\t  __webpack_require__(328),\n\t  __webpack_require__(464),\n\t  __webpack_require__(333),\n\t  __webpack_require__(465),\n\t  __webpack_require__(466),\n\t  __webpack_require__(467),\n\t  __webpack_require__(468),\n\t  __webpack_require__(450),\n\t  __webpack_require__(469)\n\t];\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52151,
            "description": "'use strict';\nvar flatten = __webpack_require__(40).flatten;\n\tvar reduce = __webpack_require__(325);\n\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(53));\n\t  var divide = load(__webpack_require__(81));\n\t  var compare = load(__webpack_require__(443));\n\t  var partitionSelect = load(__webpack_require__(442));\n  /**\n\t   * Compute the median of a matrix or a list with values. The values are\n\t   * sorted and the middle value is returned. In case of an even number of\n\t   * values, the average of the two middle values is returned.\n\t   * Supported types of values are: Number, BigNumber, Unit\n\t   *\n\t   * In case of a (multi dimensional) array or matrix, the median of all\n\t   * elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.median(a, b, c, ...)\n\t   *     math.median(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.median(5, 2, 7);        // returns 5\n\t   *     math.median([3, -1, 5, 7]);  // returns 4\n\t   *\n\t   * See also:\n\t   *\n\t   *     mean, min, max, sum, prod, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The median",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52213,
            "description": "Recursively calculate the median of an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "median",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52273,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52275,
            "description": "'use strict';\nvar flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n  /**\n\t  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n\t  * If there are more than one modes, it returns a list of those values.\n\t  *\n\t  * Syntax:\n\t  *\n\t  *     math.mode(a, b, c, ...)\n\t  *     math.mode(A)\n\t  *\n\t  * Examples:\n\t  *\n\t  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]\n\t  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]\n\t  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n\t  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n\t  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n\t  *\n\t  * See also:\n\t  *\n\t  *     median,\n\t  *     mean\n\t  *\n\t  * @param {... *} args  A single matrix\n\t  * @return {*} The mode of all values",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52319,
            "description": "Calculates the mode in an 1-dimensional array",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "mode",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52355,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52357,
            "description": "'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t  var multiply = load(__webpack_require__(80));\n  /**\n\t   * Compute the product of a matrix or a list with values.\n\t   * In case of a (multi dimensional) array or matrix, the sum of all\n\t   * elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.prod(a, b, c, ...)\n\t   *     math.prod(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.multiply(2, 3);           // returns 6\n\t   *     math.prod(2, 3);               // returns 6\n\t   *     math.prod(2, 3, 4);            // returns 24\n\t   *     math.prod([2, 3, 4]);          // returns 24\n\t   *     math.prod([[2, 5], [4, 3]]);   // returns 120\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, min, max, sum, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The product of all values",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52412,
            "description": "Recursively calculate the product of an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "prod",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52437,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52439,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar isNumber = __webpack_require__(6).isNumber;\n\tvar flatten = __webpack_require__(40).flatten;\n\tvar isCollection = __webpack_require__(322);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var multiply = load(__webpack_require__(84));\n\t  var partitionSelect = load(__webpack_require__(442));\n\t  var compare = load(__webpack_require__(443));\n  /**\n\t   * Compute the prob order quantile of a matrix or a list with values.\n\t   * The sequence is sorted and the middle value is returned.\n\t   * Supported types of sequence values are: Number, BigNumber, Unit\n\t   * Supported types of probability are: Number, BigNumber\n\t   *\n\t   * In case of a (multi dimensional) array or matrix, the prob order quantile\n\t   * of all elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.quantileSeq(A, prob[, sorted])\n\t   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])\n\t   *     math.quantileSeq(A, N[, sorted])\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4\n\t   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]\n\t   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]\n\t   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4\n\t   *\n\t   * See also:\n\t   *\n\t   *     median, mean, min, max, sum, prod, std, var\n\t   *\n\t   * @param {Array, Matrix} data                A single matrix or Array\n\t   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is\n\t   *                                            the amount of evenly distributed steps of\n\t   *                                            probabilities; only one of these options can\n\t   *                                            be provided\n\t   * @param {Boolean} sorted=false              is data sorted in ascending order\n\t   * @return {Number, BigNumber, Unit, Array}   Quantile(s)",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52590,
            "description": "Calculate the prob order quantile of an n-dimensional array.",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "prob",
                    "description": "",
                    "type": "Number, BigNumber"
                },
                {
                    "name": "sorted",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "prob order quantile",
                "type": "Number, BigNumber, Unit"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52681,
            "description": "Check if array value types are valid, throw error otherwise.",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number | BigNumber | Unit"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number | BigNumber | Unit"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52700,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52702,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var sqrt       = load(__webpack_require__(380));\n\t  var variance   = load(__webpack_require__(469));\n  /**\n\t   * Compute the standard deviation of a matrix or a  list with values.\n\t   * The standard deviations is defined as the square root of the variance:\n\t   * `std(A) = sqrt(var(A))`.\n\t   * In case of a (multi dimensional) array or matrix, the standard deviation\n\t   * over all elements will be calculated.\n\t   *\n\t   * Optionally, the type of normalization can be specified as second\n\t   * parameter. The parameter `normalization` can be one of the following values:\n\t   *\n\t   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\t   * - 'uncorrected'        The sum of squared errors is divided by n\n\t   * - 'biased'             The sum of squared errors is divided by (n + 1)\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.std(a, b, c, ...)\n\t   *     math.std(A)\n\t   *     math.std(A, normalization)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.std(2, 4, 6);                     // returns 2\n\t   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611\n\t   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979\n\t   *     math.std([2, 4, 6, 8], 'biased');      // returns 2\n\t   *\n\t   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, max, min, prod, sum, var\n\t   *\n\t   * @param {Array | Matrix} array\n\t   *                        A single matrix or or multiple scalar values\n\t   * @param {string} [normalization='unbiased']\n\t   *                        Determines how to normalize the variance.\n\t   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n\t   * @return {*} The standard deviation",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52780,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52782,
            "description": "'use strict';\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(53));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(80));\n\t  var divide = load(__webpack_require__(81));\n  /**\n\t   * Compute the variance of a matrix or a  list with values.\n\t   * In case of a (multi dimensional) array or matrix, the variance over all\n\t   * elements will be calculated.\n\t   *\n\t   * Optionally, the type of normalization can be specified as second\n\t   * parameter. The parameter `normalization` can be one of the following values:\n\t   *\n\t   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\t   * - 'uncorrected'        The sum of squared errors is divided by n\n\t   * - 'biased'             The sum of squared errors is divided by (n + 1)\n\t   *\n\t   * Note that older browser may not like the variable name `var`. In that\n\t   * case, the function can be called as `math['var'](...)` instead of\n\t   * `math.var(...)`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.var(a, b, c, ...)\n\t   *     math.var(A)\n\t   *     math.var(A, normalization)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.var(2, 4, 6);                     // returns 4\n\t   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667\n\t   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5\n\t   *     math.var([2, 4, 6, 8], 'biased');      // returns 4\n\t   *\n\t   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, max, min, prod, std, sum\n\t   *\n\t   * @param {Array | Matrix} array\n\t   *                        A single matrix or or multiple scalar values\n\t   * @param {string} [normalization='unbiased']\n\t   *                        Determines how to normalize the variance.\n\t   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n\t   * @return {*} The variance",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52857,
            "description": "Recursively calculate the variance of an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "normalization",
                    "description": "Determines how to normalize the variance:\n                       - 'unbiased'    The sum of squared errors is divided by (n - 1)\n                       - 'uncorrected' The sum of squared errors is divided by n\n                       - 'biased'      The sum of squared errors is divided by (n + 1)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "variance",
                "type": "Number | BigNumber"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52914,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52916,
            "description": "module.exports = [\n\t  __webpack_require__(90),\n\t  __webpack_require__(471)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52926,
            "description": "'use strict';\nvar isString = __webpack_require__(23).isString;\n\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Interpolate values into a string template.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.print(template, values)\n\t   *     math.print(template, values, precision)\n\t   *     math.print(template, values, options)\n\t   *\n\t   * Example usage:\n\t   *\n\t   *     // the following outputs: 'Lucy is 5 years old'\n\t   *     math.print('Lucy is $age years old', {age: 5});\n\t   *\n\t   *     // the following outputs: 'The value of pi is 3.141592654'\n\t   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);\n\t   *\n\t   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\n\t   *     math.print('Hello $user.name! The date is $date', {\n\t   *       user: {\n\t   *         name: 'Mary',\n\t   *       },\n\t   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\n\t   *     });\n\t   *\n\t   * See also:\n\t   *\n\t   *     format\n\t   *\n\t   * @param {string} template     A string containing variable placeholders.\n\t   * @param {Object} values       An object containing variables which will\n\t   *                              be filled in in the template.\n\t   * @param {number | Object} [options]  Formatting options,\n\t   *                              or the number of digits to format numbers.\n\t   *                              See function math.format for a description\n\t   *                              of all options.\n\t   * @return {string} Interpolated string",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 52982,
            "description": "Interpolate values into a string template.",
            "params": [
                {
                    "name": "template",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Number | Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Interpolated string",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53017,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53019,
            "description": "module.exports = [\n\t  __webpack_require__(473),\n\t  __webpack_require__(474),\n\t  __webpack_require__(475),\n\t  __webpack_require__(476),\n\t  __webpack_require__(477),\n\t  __webpack_require__(478),\n\t  __webpack_require__(479),\n\t  __webpack_require__(480),\n\t  __webpack_require__(481),\n\t  __webpack_require__(482),\n\t  __webpack_require__(483),\n\t  __webpack_require__(484),\n\t  __webpack_require__(485),\n\t  __webpack_require__(486),\n\t  __webpack_require__(487),\n\t  __webpack_require__(488),\n\t  __webpack_require__(489),\n\t  __webpack_require__(490),\n\t  __webpack_require__(491),\n\t  __webpack_require__(492),\n\t  __webpack_require__(493),\n\t  __webpack_require__(494),\n\t  __webpack_require__(495),\n\t  __webpack_require__(496),\n\t  __webpack_require__(497)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53052,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse cosine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acos(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acos(0.5);           // returns number 1.0471975511965979\n\t   *    math.acos(math.cos(1.5)); // returns number 1.5\n\t   *\n\t   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, atan, asin\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53115,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53117,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the hyperbolic arccos of a value,\n\t   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acosh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acosh(1.5);       // returns 0.9624236501192069\n\t   *\n\t   * See also:\n\t   *\n\t   *    cosh, asinh, atanh\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53175,
            "description": "Calculate the hyperbolic arccos of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53189,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53191,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acot(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acot(0.5);           // returns number 0.4636476090008061\n\t   *    math.acot(math.cot(1.5)); // returns number 1.5\n\t   *\n\t   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    cot, atan\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x   Function input\n\t   * @return {number | Complex | Array | Matrix} The arc cotangent of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53249,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53251,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the hyperbolic arccotangent of a value,\n\t   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acoth(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acoth(0.5);       // returns 0.8047189562170503\n\t   *\n\t   * See also:\n\t   *\n\t   *    acsch, asech\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53310,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53312,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acsc(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acsc(0.5);           // returns number 0.5235987755982989\n\t   *    math.acsc(math.csc(1.5)); // returns number ~1.5\n\t   *\n\t   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    csc, asin, asec\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x   Function input\n\t   * @return {number | Complex | Array | Matrix} The arc cosecant of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53374,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53376,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the hyperbolic arccosecant of a value,\n\t   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acsch(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acsch(0.5);       // returns 1.4436354751788103\n\t   *\n\t   * See also:\n\t   *\n\t   *    asech, acoth\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53433,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53435,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asec(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asec(0.5);           // returns 1.0471975511965979\n\t   *    math.asec(math.sec(1.5)); // returns 1.5\n\t   *\n\t   *    math.asec(2);             // returns 0 + 1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    acos, acot, acsc\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} The arc secant of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53496,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53498,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var acosh = typed.find(load(__webpack_require__(474)), ['Complex']);\n  /**\n\t   * Calculate the hyperbolic arcsecant of a value,\n\t   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asech(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asech(0.5);       // returns 1.3169578969248166\n\t   *\n\t   * See also:\n\t   *\n\t   *    acsch, acoth\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53566,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53568,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse sine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asin(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asin(0.5);           // returns number 0.5235987755982989\n\t   *    math.asin(math.sin(1.5)); // returns number ~1.5\n\t   *\n\t   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    sin, atan, acos\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53632,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53634,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the hyperbolic arcsine of a value,\n\t   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asinh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asinh(0.5);       // returns 0.48121182505960347\n\t   *\n\t   * See also:\n\t   *\n\t   *    acosh, atanh\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53691,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53693,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse tangent of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.atan(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.atan(0.5);           // returns number 0.4636476090008061\n\t   *    math.atan(math.tan(1.5)); // returns number 1.5\n\t   *\n\t   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    tan, asin, acos\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53752,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53754,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm09 = load(__webpack_require__(374));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Calculate the inverse tangent function with two arguments, y/x.\n\t   * By providing two arguments, the right quadrant of the computed angle can be\n\t   * determined.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.atan2(y, x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.atan2(2, 2) / math.pi;       // returns number 0.25\n\t   *\n\t   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg\n\t   *    var x = math.cos(angle);\n\t   *    var y = math.sin(angle);\n\t   *\n\t   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    tan, atan, sin, cos\n\t   *\n\t   * @param {number | Array | Matrix} y  Second dimension\n\t   * @param {number | Array | Matrix} x  First dimension\n\t   * @return {number | Array | Matrix} Four-quadrant inverse tangent",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53910,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53912,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic arctangent of a value,\n\t   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.atanh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.atanh(0.5);       // returns 0.5493061443340549\n\t   *\n\t   * See also:\n\t   *\n\t   *    acosh, asinh\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53967,
            "description": "Calculate the hyperbolic arctangent of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53981,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 53983,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the cosine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cos(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cos(2);                      // returns number -0.4161468365471422\n\t   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475\n\t   *    math.cos(math.unit(180, 'deg'));  // returns number -1\n\t   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5\n\t   *\n\t   *    var angle = 0.2;\n\t   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, tan\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54049,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54051,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic cosine of a value,\n\t   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cosh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cosh(0.5);       // returns number 1.1276259652063807\n\t   *\n\t   * See also:\n\t   *\n\t   *    sinh, tanh\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54107,
            "description": "Calculate the hyperbolic cosine of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54121,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54123,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cot(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cot(2);      // returns number -0.45765755436028577\n\t   *    1 / math.tan(2);  // returns number -0.45765755436028577\n\t   *\n\t   * See also:\n\t   *\n\t   *    tan, sec, csc\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Cotangent of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54185,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54187,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic cotangent of a value,\n\t   * defined as `coth(x) = 1 / tanh(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.coth(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    // coth(x) = 1 / tanh(x)\n\t   *    math.coth(2);         // returns 1.0373147207275482\n\t   *    1 / math.tanh(2);     // returns 1.0373147207275482\n\t   *\n\t   * See also:\n\t   *\n\t   *    sinh, tanh, cosh\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54245,
            "description": "Calculate the hyperbolic cosine of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54260,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54262,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.csc(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.csc(2);      // returns number 1.099750170294617\n\t   *    1 / math.sin(2);  // returns number 1.099750170294617\n\t   *\n\t   * See also:\n\t   *\n\t   *    sin, sec, cot\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Cosecant of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54324,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54326,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar sign = __webpack_require__(6).sign;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic cosecant of a value,\n\t   * defined as `csch(x) = 1 / sinh(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.csch(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    // csch(x) = 1/ sinh(x)\n\t   *    math.csch(0.5);       // returns 1.9190347513349437\n\t   *    1 / math.sinh(0.5);   // returns 1.9190347513349437\n\t   *\n\t   * See also:\n\t   *\n\t   *    sinh, sech, coth\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54385,
            "description": "Calculate the hyperbolic cosecant of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54405,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54407,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sec(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sec(2);      // returns number -2.4029979617223822\n\t   *    1 / math.cos(2);  // returns number -2.4029979617223822\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, csc, cot\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Secant of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54469,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54471,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic secant of a value,\n\t   * defined as `sech(x) = 1 / cosh(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sech(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    // sech(x) = 1/ cosh(x)\n\t   *    math.sech(0.5);       // returns 0.886818883970074\n\t   *    1 / math.cosh(0.5);   // returns 0.886818883970074\n\t   *\n\t   * See also:\n\t   *\n\t   *    cosh, csch, coth\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54529,
            "description": "Calculate the hyperbolic secant of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54543,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54545,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the sine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sin(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sin(2);                      // returns number 0.9092974268256813\n\t   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475\n\t   *    math.sin(math.unit(90, 'deg'));   // returns number 1\n\t   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5\n\t   *\n\t   *    var angle = 0.2;\n\t   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, tan\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54612,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54614,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic sine of a value,\n\t   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sinh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sinh(0.5);       // returns number 0.5210953054937474\n\t   *\n\t   * See also:\n\t   *\n\t   *    cosh, tanh\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54671,
            "description": "Calculate the hyperbolic sine of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54685,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54687,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.tan(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.tan(0.5);                    // returns number 0.5463024898437905\n\t   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905\n\t   *    math.tan(math.pi / 4);            // returns number 1\n\t   *    math.tan(math.unit(45, 'deg'));   // returns number 1\n\t   *\n\t   * See also:\n\t   *\n\t   *    atan, sin, cos\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54750,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54752,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic tangent of a value,\n\t   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.tanh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\n\t   *    math.tanh(0.5);                   // returns 0.46211715726000974\n\t   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974\n\t   *    1 / math.coth(0.5);               // returns 0.46211715726000974\n\t   *\n\t   * See also:\n\t   *\n\t   *    sinh, cosh, coth\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54812,
            "description": "Calculate the hyperbolic tangent of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54827,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54829,
            "description": "module.exports = [\n\t  __webpack_require__(499)\n\t];\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54837,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Change the unit of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.to(x, unit)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm\n\t   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm\n\t   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits\n\t   *\n\t   * See also:\n\t   *\n\t   *    unit\n\t   *\n\t   * @param {Unit | Array | Matrix} x     The unit to be converted.\n\t   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n\t   *                                      or a unit without value.\n\t   * @return {Unit | Array | Matrix} value with changed, fixed unit.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54931,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54933,
            "description": "module.exports = [\n\t  __webpack_require__(501),\n\t  __webpack_require__(419),\n\t  __webpack_require__(368),\n\t  __webpack_require__(89),\n\t  __webpack_require__(381),\n\t  __webpack_require__(502),\n\t  __webpack_require__(433),\n\t  __webpack_require__(503),\n\t  __webpack_require__(91)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54950,
            "description": "'use strict';\nvar object= __webpack_require__(3);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Clone an object.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.clone(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.clone(3.5);                   // returns number 3.5\n\t   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i\n\t   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg\n\t   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]\n\t   *    math.clone(\"hello world\");         // returns string \"hello world\"\n\t   *\n\t   * @param {*} x   Object to be cloned\n\t   * @return {*} A clone of object x",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54988,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 54990,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is prime: has no divisors other than itself and one.\n\t   * The function supports type `number`, `bignumber`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isPrime(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isPrime(3);                     // returns true\n\t   *    math.isPrime(-2);                    // returns false\n\t   *    math.isPrime(0);                     // returns false\n\t   *    math.isPrime(-0);                    // returns false\n\t   *    math.isPrime(0.5);                   // returns false\n\t   *    math.isPrime('2');                   // returns true\n\t   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isZero, isNegative, isInteger\n\t   *\n\t   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t   *                    Throws an error in case of an unknown data type.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 55075,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 55077,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is NaN (not a number).\n\t   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isNaN(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isNaN(3);                     // returns false\n\t   *    math.isNaN(NaN);                   // returns true\n\t   *    math.isNaN(0);                     // returns false\n\t   *    math.isNaN(math.bignumber(NaN));   // returns true\n\t   *    math.isNaN(math.bignumber(0));     // returns false\n\t   *    math.isNaN(math.fraction(-2, 5));  // returns false\n\t   *    math.isNaN('-2');                  // returns false\n\t   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isNegative, isPositive, isZero, isInteger\n\t   *\n\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t   * @return {boolean}  Returns true when `x` is NaN.\n\t   *                    Throws an error in case of an unknown data type.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 55147,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 55149,
            "description": "module.exports = [\n\t  __webpack_require__(505)\n\t];\n\n\n/***/ },",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 55158,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Instantiate mathjs data types from their JSON representation\n\t   * @param {string} key\n\t   * @param {*} value\n\t   * @returns {*} Returns the revived object",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 55184,
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/math.js",
            "line": 55186,
            "description": "'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\tvar DimensionError = __webpack_require__(42);\n\tvar IndexError = __webpack_require__(43);\nmodule.exports = [\n\t  {\n\t    name: 'ArgumentsError', path: 'error',\n\t    factory: function () {\n\t      return ArgumentsError;\n\t    }\n\t  },\n\t  {\n\t    name: 'DimensionError',\n\t    path: 'error',\n\t    factory: function () {\n\t      return DimensionError;\n\t    }\n\t  },\n\t  {\n\t    name: 'IndexError',\n\t    path: 'error',\n\t    factory: function () {\n\t      return IndexError;\n\t    }\n\t  }\n\t];\n// TODO: implement an InvalidValueError?\n\n\n/***/ }\n/******/ ])\n});\n;",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 461,
            "description": "Constructs a promise for an immediate reference, passes promises through, or\ncoerces promises from different systems.",
            "params": [
                {
                    "name": "value",
                    "description": "immediate reference or promise"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 483,
            "description": "Performs a task in a future turn of the event loop.",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 489,
            "description": "Controls whether or not long stack traces will be on",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 494,
            "description": "Constructs a {promise, resolve, reject} object.\n\n`resolve` is a callback to invoke with a more resolved value for the\npromise. To fulfill the promise, invoke `resolve` with any value that is\nnot a thenable. To reject the promise, invoke `resolve` with a rejected\nthenable, or invoke `reject` with the reason directly. To resolve the\npromise to another thenable, thus putting it in the same state, invoke\n`resolve` with that other thenable.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 620,
            "description": "Creates a Node-style callback that will resolve or reject the deferred\npromise.",
            "return": {
                "description": "a nodeback"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 638,
            "params": [
                {
                    "name": "resolver",
                    "description": "a function that returns nothing and accepts\nthe resolve, reject, and notify functions for a deferred.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a promise that may be resolved with the given resolve and reject\nfunctions, or rejected by a thrown exception in resolver"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 673,
            "description": "If two promises eventually fulfill to the same value, promises that value,\nbut otherwise rejects.",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Any*"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Any*"
                }
            ],
            "return": {
                "description": "a promise for x and y if they are the same, but a rejection\notherwise.",
                "type": "Any*"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 697,
            "description": "Returns a promise for the first of an array of promises to become fulfilled.",
            "params": [
                {
                    "name": "answers",
                    "description": "promises to race",
                    "type": "Array[Any*]"
                }
            ],
            "return": {
                "description": "the first promise to be fulfilled",
                "type": "Any*"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 720,
            "description": "Constructs a Promise with a promise descriptor object and optional fallback\nfunction.  The descriptor contains methods like when(rejected), get(name),\nset(name, value), post(name, args), and delete(name), which all\nreturn either a value, a promise for a value, or a rejection.  The fallback\naccepts the operation name, a resolver, and any further arguments that would\nhave been forwarded to the appropriate method above had a method been\nprovided with the proper name.  The API makes no guarantees about the nature\nof the returned object, apart from that it is usable whereever promises are\nbought and sold.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 861,
            "description": "Registers an observer on a promise.\n\nGuarantees:\n\n1. that fulfilled and rejected will be called only once.\n2. that either the fulfilled callback or the rejected callback will be\n   called, but not both.\n3. that fulfilled and rejected will not be called in this turn.",
            "params": [
                {
                    "name": "value",
                    "description": "promise or immediate reference to observe"
                },
                {
                    "name": "fulfilled",
                    "description": "function to be called with the fulfilled value"
                },
                {
                    "name": "rejected",
                    "description": "function to be called with the rejection exception"
                },
                {
                    "name": "progressed",
                    "description": "function to be called on any progress notifications"
                }
            ],
            "return": {
                "description": "promise for the return value from the invoked callback"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 898,
            "description": "If an object is not a promise, it is as \"near\" as possible.\nIf a promise is rejected, it is as \"near\" as possible too.\nIf it’s a fulfilled promise, the fulfillment value is nearer.\nIf it’s a deferred promise and the deferred has been resolved, the\nresolution is \"nearer\".",
            "params": [
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "return": {
                "description": "most resolved (nearest) form of the object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 920,
            "return": {
                "description": "whether the given object is a promise.\nOtherwise it is a fulfilled value."
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 936,
            "return": {
                "description": "whether the given object is a pending promise, meaning not\nfulfilled or rejected."
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 949,
            "return": {
                "description": "whether the given object is a value or fulfilled\npromise."
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 962,
            "return": {
                "description": "whether the given object is a rejected promise."
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1067,
            "description": "Constructs a rejected promise.",
            "params": [
                {
                    "name": "reason",
                    "description": "value describing the failure"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1093,
            "description": "Constructs a fulfilled promise for an immediate reference.",
            "params": [
                {
                    "name": "value",
                    "description": "immediate reference"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1132,
            "description": "Converts thenables to Q promises.",
            "params": [
                {
                    "name": "promise",
                    "description": "thenable promise"
                }
            ],
            "return": {
                "description": "a Q promise"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1149,
            "description": "Annotates an object such that it will never be\ntransferred away from this process over any promise\ncommunication channel.",
            "params": [
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "return": {
                "description": "promise a wrapping of that object that\nadditionally responds to the \"isDef\" message\nwithout a rejection."
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1169,
            "description": "Spreads the values of a promised array of arguments into the\nfulfillment callback.",
            "params": [
                {
                    "name": "fulfilled",
                    "description": "callback that receives variadic arguments from the\npromised array"
                },
                {
                    "name": "rejected",
                    "description": "callback that receives the exception if the promise\nis rejected."
                }
            ],
            "return": {
                "description": "a promise for the return value or thrown exception of\neither callback."
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1190,
            "description": "The async function is a decorator for generator functions, turning\nthem into asynchronous generators.  Although generators are only part\nof the newest ECMAScript 6 drafts, this code does not cause syntax\nerrors in older engines.  This code should continue to work and will\nin fact improve over time as the language improves.\n\nES6 generators are currently part of V8 version 3.19 with the\n--harmony-generators runtime flag enabled.  SpiderMonkey has had them\nfor longer, but under an older Python-inspired form.  This function\nworks on both kinds of generators.\n\nDecorates a generator function such that:\n - it may yield promises\n - execution will continue when that promise is fulfilled\n - the value of the yield expression will be the fulfilled value\n - it returns a promise for the return value (when the generator\n   stops iterating)\n - the decorated function returns a promise for the return value\n   of the generator or the first rejected promise among those\n   yielded.\n - if an error is thrown in the generator, it propagates through\n   every following yield until it is caught, or until it escapes\n   the generator function altogether, and is translated into a\n   rejection for the promise returned by the decorated generator.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1255,
            "description": "The spawn function is a small wrapper around async that immediately\ncalls the generator and also ends the promise chain, so that any\nunhandled errors are thrown instead of forwarded to the error\nhandler. This is useful because it's extremely common to run\ngenerators at the top-level to work with libraries.",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1268,
            "description": "Throws a ReturnValue exception to stop an asynchronous generator.\n\nThis interface is a stop-gap measure to support generator return\nvalues in older Firefox/SpiderMonkey.  In browsers that support ES6\ngenerators like Chromium 29, just use \"return\" in your generator\nfunctions.",
            "params": [
                {
                    "name": "value",
                    "description": "the return value for the surrounding generator"
                }
            ],
            "throws": {
                "description": "ReturnValue exception with the value."
            },
            "example": [
                "\n// ES6 style\nQ.async(function* () {\n     var foo = yield getFooPromise();\n     var bar = yield getBarPromise();\n     return foo + bar;\n})\n// Older SpiderMonkey style\nQ.async(function () {\n     var foo = yield getFooPromise();\n     var bar = yield getBarPromise();\n     Q.return(foo + bar);\n})"
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1297,
            "description": "The promised function decorator ensures that any promise arguments\nare settled and passed as values (`this` is also settled and passed\nas a value).  It will also ensure that the result of a function is\nalways a promise.",
            "example": [
                "\nvar add = Q.promised(function (a, b) {\n    return a + b;\n});\nadd(Q(a), Q(B));"
            ],
            "params": [
                {
                    "name": "callback",
                    "description": "The function to decorate",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a function that has been decorated.",
                "type": "Function"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1321,
            "description": "sends a message to a value in a future turn",
            "params": [
                {
                    "name": "object",
                    "description": "the recipient",
                    "multiple": true
                },
                {
                    "name": "op",
                    "description": "the name of the message operation, e.g., \"when\","
                },
                {
                    "name": "args",
                    "description": "further arguments to be forwarded to the operation"
                }
            ],
            "return": {
                "description": "result  a promise for the result of the operation",
                "type": "Promise"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1342,
            "description": "Gets the value of a property in a future turn.",
            "params": [
                {
                    "name": "object",
                    "description": "promise or immediate reference for target object"
                },
                {
                    "name": "name",
                    "description": "name of property to get"
                }
            ],
            "return": {
                "description": "promise for the property value"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1356,
            "description": "Sets the value of a property in a future turn.",
            "params": [
                {
                    "name": "object",
                    "description": "promise or immediate reference for object object"
                },
                {
                    "name": "name",
                    "description": "name of property to set"
                },
                {
                    "name": "value",
                    "description": "new value of property"
                }
            ],
            "return": {
                "description": "promise for the return value"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1371,
            "description": "Deletes a property in a future turn.",
            "params": [
                {
                    "name": "object",
                    "description": "promise or immediate reference for target object"
                },
                {
                    "name": "name",
                    "description": "name of property to delete"
                }
            ],
            "return": {
                "description": "promise for the return value"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1387,
            "description": "Invokes a method in a future turn.",
            "params": [
                {
                    "name": "object",
                    "description": "promise or immediate reference for target object"
                },
                {
                    "name": "name",
                    "description": "name of method to invoke"
                },
                {
                    "name": "value",
                    "description": "a value to post, typically an array of\n                 invocation arguments for promises that\n                 are ultimately backed with `resolve` values,\n                 as opposed to those backed with URLs\n                 wherein the posted value can be any\n                 JSON serializable object."
                }
            ],
            "return": {
                "description": "promise for the return value"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1410,
            "description": "Invokes a method in a future turn.",
            "params": [
                {
                    "name": "object",
                    "description": "promise or immediate reference for target object"
                },
                {
                    "name": "name",
                    "description": "name of method to invoke"
                },
                {
                    "name": "args",
                    "description": "array of invocation arguments",
                    "multiple": true
                }
            ],
            "return": {
                "description": "promise for the return value"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1429,
            "description": "Applies the promised function in a future turn.",
            "params": [
                {
                    "name": "object",
                    "description": "promise or immediate reference for target function"
                },
                {
                    "name": "args",
                    "description": "array of application arguments"
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1442,
            "description": "Calls the promised function in a future turn.",
            "params": [
                {
                    "name": "object",
                    "description": "promise or immediate reference for target function"
                },
                {
                    "name": "args",
                    "description": "array of application arguments",
                    "multiple": true
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1456,
            "description": "Binds the promised function, transforming return values into a fulfilled\npromise and thrown errors into a rejected one.",
            "params": [
                {
                    "name": "object",
                    "description": "promise or immediate reference for target function"
                },
                {
                    "name": "args",
                    "description": "array of application arguments",
                    "multiple": true
                }
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1483,
            "description": "Requests the names of the owned properties of a promised\nobject in a future turn.",
            "params": [
                {
                    "name": "object",
                    "description": "promise or immediate reference for target object"
                }
            ],
            "return": {
                "description": "promise for the keys of the eventually settled object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1497,
            "description": "Turns an array of promises into a promise for an array.  If any of\nthe promises gets rejected, the whole array is rejected immediately.",
            "params": [
                {
                    "name": "an",
                    "description": "array (or promise for an array) of values (or\npromises for values)",
                    "type": "Array*"
                }
            ],
            "return": {
                "description": "a promise for an array of the corresponding values"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1546,
            "description": "Waits for all promises to be settled, either fulfilled or\nrejected.  This is distinct from `all` since that would stop\nwaiting at the first rejection.  The promise returned by\n`allResolved` will never be rejected.",
            "params": [
                {
                    "name": "promises",
                    "description": "a promise for an array (or an array) of promises\n(or values)"
                }
            ],
            "return": {
                "description": "a promise for an array of promises"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1571,
            "see": [
                "Promise#allSettled"
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1579,
            "description": "Turns an array of promises into a promise for an array of their states (as\nreturned by `inspect`) when they have all settled.",
            "params": [
                {
                    "name": "values",
                    "description": "an array (or promise for an array) of values (or\npromises for values)",
                    "type": "Array[Any*]"
                }
            ],
            "return": {
                "description": "an array of states for the respective values.",
                "type": "Array[State]"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1598,
            "description": "Captures the failure of a promise, giving an oportunity to recover\nwith a callback.  If the given promise is fulfilled, the returned\npromise is fulfilled.",
            "params": [
                {
                    "name": "promise",
                    "description": "for something",
                    "type": "Any*"
                },
                {
                    "name": "callback",
                    "description": "to fulfill the returned promise if the\ngiven promise is rejected",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a promise for the return value of the callback"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1617,
            "description": "Attaches a listener that can respond to progress notifications from a\npromise's originating deferred. This listener receives the exact arguments\npassed to ``deferred.notify``.",
            "params": [
                {
                    "name": "promise",
                    "description": "for something",
                    "type": "Any*"
                },
                {
                    "name": "callback",
                    "description": "to receive any progress notifications",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the given promise, unchanged"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1634,
            "description": "Provides an opportunity to observe the settling of a promise,\nregardless of whether the promise is fulfilled or rejected.  Forwards\nthe resolution to the returned promise when the callback is done.\nThe callback can return a promise to defer completion.",
            "params": [
                {
                    "name": "promise",
                    "description": "",
                    "type": "Any*"
                },
                {
                    "name": "callback",
                    "description": "to observe the resolution of the given\npromise, takes no arguments.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a promise for the resolution of the given promise when\n``fin`` is done."
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1665,
            "description": "Terminates a chain of promises, forcing rejections to be\nthrown as exceptions.",
            "params": [
                {
                    "name": "promise",
                    "description": "at the end of a chain of promises",
                    "type": "Any*"
                }
            ],
            "return": {
                "description": "nothing"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1701,
            "description": "Causes a promise to be rejected if it does not get fulfilled before\nsome milliseconds time out.",
            "params": [
                {
                    "name": "promise",
                    "description": "",
                    "type": "Any*"
                },
                {
                    "name": "milliseconds",
                    "description": "timeout",
                    "type": "Number"
                },
                {
                    "name": "custom",
                    "description": "error message (optional)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a promise for the resolution of the given promise if it is\nfulfilled before the timeout, otherwise rejected."
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1731,
            "description": "Returns a promise for the given value (or promised value), some\nmilliseconds after it resolved. Passes rejections immediately.",
            "params": [
                {
                    "name": "promise",
                    "description": "",
                    "type": "Any*"
                },
                {
                    "name": "milliseconds",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a promise for the resolution of the given promise after milliseconds\ntime has elapsed since the resolution of the given promise.\nIf the given promise rejects, that is passed immediately."
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1758,
            "description": "Passes a continuation to a Node function, which is called with the given\narguments provided as an array, and returns a promise.\n\n     Q.nfapply(FS.readFile, [__filename])\n     .then(function (content) {\n     })",
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1779,
            "description": "Passes a continuation to a Node function, which is called with the given\narguments provided individually, and returns a promise.",
            "example": [
                "\nQ.nfcall(FS.readFile, __filename)\n.then(function (content) {\n})\n"
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1801,
            "description": "Wraps a NodeJS continuation passing function and returns an equivalent\nversion that returns a promise.",
            "example": [
                "\nQ.nfbind(FS.readFile, __filename)(\"utf-8\")\n.then(console.log)\n.done()"
            ],
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1848,
            "description": "Calls a method of a Node-style object that accepts a Node-style\ncallback with a given array of arguments, plus a provided callback.",
            "params": [
                {
                    "name": "object",
                    "description": "an object that has the named method"
                },
                {
                    "name": "name",
                    "description": "name of the method of object",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "arguments to pass to the method; the callback\nwill be provided by Q and appended to these arguments.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a promise for the value or error"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1871,
            "description": "Calls a method of a Node-style object that accepts a Node-style\ncallback, forwarding the given variadic arguments, plus a provided\ncallback argument.",
            "params": [
                {
                    "name": "object",
                    "description": "an object that has the named method"
                },
                {
                    "name": "name",
                    "description": "name of the method of object",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "arguments to pass to the method; the callback will\nbe provided by Q and appended to these arguments.",
                    "multiple": true
                }
            ],
            "return": {
                "description": "a promise for the value or error"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "lib/q.js",
            "line": 1901,
            "description": "If a function would like to support both Node continuation-passing-style and\npromise-returning-style, it can end its internal promise chain with\n`nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\nelects to use a nodeback, the result will be sent there.  If they do not\npass a nodeback, they will receive the result promise.",
            "params": [
                {
                    "name": "object",
                    "description": "a result (or a promise for a result)"
                },
                {
                    "name": "nodeback",
                    "description": "a Node.js-style callback",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "either the promise or nothing"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "K_Means.js",
            "line": 1,
            "description": "Copyright (c) 2016 Hussain Mir Ali",
            "class": "K_Means_Clustering"
        },
        {
            "file": "K_Means.js",
            "line": 54,
            "description": "This method serves as the logic for the calculating distance between centroids and data points.",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "X",
                    "description": "This is the unsupervised input data for clustering.",
                    "type": "Matrix"
                },
                {
                    "name": "u",
                    "description": "This is the centroid from which distance relative to all input data points will be calculated.",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "distance This is a matrix containing the distance of all data points relative to a centroid.",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "K_Means.js",
            "line": 76,
            "description": "This method updates each centroid by calculating the mean of the respective clusters.",
            "itemtype": "method",
            "name": "update_Centroids",
            "return": {
                "description": "this.centroids Are the updated centroids for the given data.",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "K_Means.js",
            "line": 96,
            "description": "This method contains the logic to assign clusters points to different centroids.",
            "itemtype": "method",
            "name": "assign_Clusters",
            "params": [
                {
                    "name": "X",
                    "description": "This is the unsupervised input data for clustering.",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "this.clusters This is the matrix containing the clustered data.",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "K_Means.js",
            "line": 138,
            "description": "This method contains the iterative implementation of the K-Means clustering algorithm.",
            "itemtype": "method",
            "name": "start_Clustering",
            "params": [
                {
                    "name": "X",
                    "description": "The matrix to be used as the data input for clustering.",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "defered.promise Returns a promise upon completion.",
                "type": "Object"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "K_Means.js",
            "line": 173,
            "description": "This method is reponsible for passing data to the provided callback function for the purpose of diagnostics.",
            "itemtype": "method",
            "name": "apply_Callback",
            "params": [
                {
                    "name": "isComplete",
                    "description": "The boolean value to indicate if the clustering is completed.",
                    "type": "Boolean"
                },
                {
                    "name": "iterations",
                    "description": "Is the number of iterations for the K-Means clustering algorithm.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "info Is the object containing information for diagnostics.",
                "type": "Array"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "K_Means.js",
            "line": 193,
            "description": "This method is reponsible for generating unique random numbers and keeps track of previous random values.",
            "itemtype": "method",
            "name": "unique_Random_Val",
            "params": [
                {
                    "name": "X",
                    "description": "The matrix to be used as the unsupervised data.",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Returns the unique random value.",
                "type": "Number"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "K_Means.js",
            "line": 216,
            "description": "This method is responsible to randomly initiate centroids for the given data.",
            "itemtype": "method",
            "name": "initiate_Centroids",
            "params": [
                {
                    "name": "X",
                    "description": "This is the unsupervised input data for clustering.",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "this.centroids Are the randomly genrated centroids.",
                "type": "Matrix"
            },
            "class": "K_Means_Clustering"
        },
        {
            "file": "util.js",
            "line": 1,
            "description": "/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45,
            "description": "/**\n\t * math.js\n\t * https://github.com/josdejong/mathjs\n\t *\n\t * Math.js is an extensive math library for JavaScript and Node.js,\n\t * It features real and complex numbers, units, matrices, a large set of\n\t * mathematical functions, and a flexible expression parser.\n\t *\n\t * @version 3.8.0\n\t * @date    2016-11-18\n\t *\n\t * @license\n\t * Copyright (C) 2013-2016 Jos de Jong <wjosdejong@gmail.com>\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n\t * use this file except in compliance with the License. You may obtain a copy\n\t * of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\t * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions and limitations under\n\t * the License.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 85,
            "description": "/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 126,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 128,
            "description": "var core = __webpack_require__(1);\n/**\n\t\t * math.js factory function. Creates a new instance of math.js\n\t\t *\n\t\t * @param {Object} [config] Available configuration options:\n\t\t *                            {number} epsilon\n\t\t *                              Minimum relative difference between two\n\t\t *                              compared values, used by all comparison functions.\n\t\t *                            {string} matrix\n\t\t *                              A string 'matrix' (default) or 'array'.\n\t\t *                            {string} number\n\t\t *                              A string 'number' (default), 'bignumber', or\n\t\t *                              'fraction'\n\t\t *                            {number} precision\n\t\t *                              The number of significant digits for BigNumbers.\n\t\t *                              Not applicable for Numbers.\n\t\t *                            {boolean} predictable\n\t\t *                              Predictable output type of functions. When true,\n\t\t *                              output type depends only on the input types. When\n\t\t *                              false (default), output type can vary depending\n\t\t *                              on input values. For example `math.sqrt(-2)`\n\t\t *                              returns `NaN` when predictable is false, and\n\t\t *                              returns `complex('2i')` when true.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 170,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 172,
            "description": "module.exports = __webpack_require__(2);\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 178,
            "description": "var isFactory = __webpack_require__(3).isFactory;\n\t\tvar deepExtend = __webpack_require__(3).deepExtend;\n\t\tvar typedFactory = __webpack_require__(4);\n\t\tvar emitter = __webpack_require__(8);\nvar importFactory = __webpack_require__(10);\n\t\tvar configFactory = __webpack_require__(12);\n/**\n\t\t * Math.js core. Creates a new, empty math.js instance\n\t\t * @param {Object} [options] Available options:\n\t\t *                            {number} epsilon\n\t\t *                              Minimum relative difference between two\n\t\t *                              compared values, used by all comparison functions.\n\t\t *                            {string} matrix\n\t\t *                              A string 'Matrix' (default) or 'Array'.\n\t\t *                            {string} number\n\t\t *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n\t\t *                            {number} precision\n\t\t *                              The number of significant digits for BigNumbers.\n\t\t *                              Not applicable for Numbers.\n\t\t *                            {boolean} predictable\n\t\t *                              Predictable output type of functions. When true,\n\t\t *                              output type depends only on the input types. When\n\t\t *                              false (default), output type can vary depending\n\t\t *                              on input values. For example `math.sqrt(-2)`\n\t\t *                              returns `NaN` when predictable is false, and\n\t\t *                              returns `complex('2i')` when true.\n\t\t * @returns {Object} Returns a bare-bone math.js instance containing\n\t\t *                   functions:\n\t\t *                   - `import` to add new functions\n\t\t *                   - `config` to change configuration\n\t\t *                   - `on`, `off`, `once`, `emit` for events",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 257,
            "description": "Load a function or data type from a factory.\nIf the function or data type already exists, the existing instance is\nreturned.",
            "params": [
                {
                    "name": "}",
                    "description": "factory",
                    "type": "Type: string, name: string, factory: Function"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 306,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 308,
            "description": "'use strict';\n/**\n\t\t * Clone an object\n\t\t *\n\t\t *     clone(x)\n\t\t *\n\t\t * Can clone any primitive type, array, and object.\n\t\t * If x has a function clone, this function will be invoked to clone the object.\n\t\t *\n\t\t * @param {*} x\n\t\t * @return {*} clone",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 361,
            "description": "Extend object a with the properties of object b",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 376,
            "description": "Deep extend an object a with the properties of object b",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 410,
            "description": "Deep test equality of all fields in two pairs of arrays or objects.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Array | Object"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Array | Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 458,
            "description": "Test whether the current JavaScript engine supports Object.defineProperty",
            "return": {
                "description": "returns true if supported",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 474,
            "description": "Attach a lazy loading property to a constant.\nThe given function `fn` is called once when the property is first requested.\nOn older browsers (<IE8), the function will fall back to direct evaluation\nof the properties value.",
            "params": [
                {
                    "name": "object",
                    "description": "Object where to add the property",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "Property name",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function returning the property value. Called\n                         without arguments.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 512,
            "description": "Traverse a path into an object.\nWhen a namespace is missing, it will be created",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "A dot separated string like 'name.space'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the object at the end of the path",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 536,
            "description": "Test whether an object is a factory. a factory has fields:\n\n- factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n- name: string (optional)\n- path: string    A dot separated path (optional)\n- math: boolean   If true (false by default), the math namespace is passed\n                  as fifth argument of the factory function",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 553,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 555,
            "description": "var typedFunction = __webpack_require__(5);\n\t\tvar digits = __webpack_require__(6).digits;\n// returns a new instance of typed-function\n\t\tvar createTyped = function () {\n\t\t  // initially, return the original instance of typed-function\n\t\t  // consecutively, return a new instance from typed.create.\n\t\t  createTyped = typedFunction.create;\n\t\t  return typedFunction;\n\t\t};\n/**\n\t\t * Factory function for creating a new typed instance\n\t\t * @param {Object} type   Object with data types like Complex and BigNumber\n\t\t * @returns {Function}",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 748,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 750,
            "description": "var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t\t * typed-function\n\t\t *\n\t\t * Type checking for JavaScript functions\n\t\t *\n\t\t * https://github.com/josdejong/typed-function",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 778,
            "description": "Get a type test function for a specific data type",
            "params": [
                {
                    "name": "name",
                    "description": "Name of a data type like 'number' or 'string'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a type testing function.\n                                       Throws an error for an unknown type.",
                "type": "Function(obj: *) : boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 810,
            "description": "Retrieve the function name from a set of functions, and check\nwhether the name of all functions match (if given)",
            "params": [
                {
                    "name": "fns",
                    "description": "",
                    "type": "Array.<function>"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 840,
            "description": "Create an ArgumentsError. Creates messages like:\n\n  Unexpected type of argument (expected: ..., actual: ..., index: ...)\n  Too few arguments (expected: ..., index: ...)\n  Too many arguments (expected: ..., actual: ...)",
            "params": [
                {
                    "name": "fn",
                    "description": "Function name",
                    "type": "String"
                },
                {
                    "name": "argCount",
                    "description": "Number of arguments",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "Current argument index",
                    "type": "Number"
                },
                {
                    "name": "actual",
                    "description": "Current argument",
                    "type": "*"
                },
                {
                    "name": "expected",
                    "description": "An optional, comma separated string with\n                           expected types on given index",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "Error",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 891,
            "description": "Collection with function references (local shortcuts to functions)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Optional name for the refs, used to generate\n                               JavaScript code",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'refs'"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 902,
            "description": "Add a function reference.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "category",
                    "description": "A function category, like 'fn' or 'signature'",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'fn'"
                }
            ],
            "return": {
                "description": "Returns the function name, for example 'fn0' or 'signature2'",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 921,
            "description": "Create code lines for all function references",
            "return": {
                "description": "Returns the code containing all function references",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 943,
            "description": "A function parameter",
            "params": [
                {
                    "name": "types",
                    "description": "A parameter type like 'string',\n                                            'number | boolean'",
                    "type": "String | string[] | Param"
                },
                {
                    "name": "varArgs",
                    "description": "Variable arguments if true",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 990,
            "description": "Order Params\nany type ('any') will be ordered last, and object as second last (as other\ntypes may be an object as well, like Array).",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Param"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Param"
                }
            ],
            "return": {
                "description": "Returns 1 if a > b, -1 if a < b, and else 0.",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1058,
            "description": "Test whether this parameters types overlap an other parameters types.\nWill not match ['any'] with ['number']",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Param"
                }
            ],
            "return": {
                "description": "Returns true when there are overlapping types",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1073,
            "description": "Test whether this parameters types matches an other parameters types.\nWhen any of the two parameters contains `any`, true is returned",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Param"
                }
            ],
            "return": {
                "description": "Returns true when there are matching types",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1083,
            "description": "Create a clone of this param",
            "return": {
                "description": "Returns a cloned version of this param",
                "type": "Param"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1093,
            "description": "Test whether this parameter contains conversions",
            "return": {
                "description": "Returns true if the parameter contains one or\n                   multiple conversions.",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1102,
            "description": "Tests whether this parameters contains any of the provided types",
            "params": [
                {
                    "name": "types",
                    "description": "A Map with types, like {'number': true}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true when the parameter contains any\n                       of the provided types",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1117,
            "description": "Return a string representation of this params types, like 'string' or\n'number | boolean' or '...number'",
            "params": [
                {
                    "name": "toConversion",
                    "description": "If true, the returned types string\n                                  contains the types where the parameter\n                                  will convert to. If false (default)\n                                  the \"from\" types are returned",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1142,
            "description": "A function signature",
            "params": [
                {
                    "name": "params",
                    "description": "Array with the type(s) of each parameter,\n                        or a comma separated string with types",
                    "type": "String | string[] | Param[]"
                },
                {
                    "name": "fn",
                    "description": "The actual function",
                    "type": "Function"
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1186,
            "description": "Create a clone of this signature",
            "return": {
                "description": "Returns a cloned version of this signature",
                "type": "Signature"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1194,
            "description": "Expand a signature: split params with union types in separate signatures\nFor example split a Signature \"string | number\" into two signatures.",
            "return": {
                "description": "Returns an array with signatures (at least one)",
                "type": "Signature[]"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1251,
            "description": "Compare two signatures.\n\nWhen two params are equal and contain conversions, they will be sorted\nby lowest index of the first conversions.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Signature"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Signature"
                }
            ],
            "return": {
                "description": "Returns 1 if a > b, -1 if a < b, and else 0.",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1289,
            "description": "Test whether any of the signatures parameters has conversions",
            "return": {
                "description": "Returns true when any of the parameters contains\n                  conversions.",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1303,
            "description": "Test whether this signature should be ignored.\nChecks whether any of the parameters contains a type listed in\ntyped.ignore",
            "return": {
                "description": "Returns true when the signature should be ignored",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1326,
            "description": "Test whether the path of this signature matches a given path.",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Param[]"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1350,
            "description": "Generate the code to invoke this signature",
            "params": [
                {
                    "name": "refs",
                    "description": "",
                    "type": "Refs"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns code",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1382,
            "description": "Return a string representation of the signature",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1390,
            "description": "A group of signatures with the same parameter on given index",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "Param[]"
                },
                {
                    "name": "signature",
                    "description": "",
                    "type": "Signature",
                    "optional": true
                },
                {
                    "name": "childs",
                    "description": "",
                    "type": "Node[]"
                },
                {
                    "name": "fallThrough",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1406,
            "description": "Generate code for this group of signatures",
            "params": [
                {
                    "name": "refs",
                    "description": "",
                    "type": "Refs"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the code as string",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1502,
            "description": "Generate inner code for this group of signatures.\nThis is a helper function of Node.prototype.toCode",
            "params": [
                {
                    "name": "refs",
                    "description": "",
                    "type": "Refs"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the inner code as string",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1536,
            "description": "Generate code to throw exceptions",
            "params": [
                {
                    "name": "refs",
                    "description": "",
                    "type": "Refs"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the inner code as string",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1575,
            "description": "Split all raw signatures into an array with expanded Signatures",
            "params": [
                {
                    "name": "rawSignatures",
                    "description": "",
                    "type": "Object.<string, Function>"
                }
            ],
            "return": {
                "description": "Returns an array with expanded signatures",
                "type": "Signature[]"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1669,
            "description": "Filter all any type signatures",
            "params": [
                {
                    "name": "signatures",
                    "description": "",
                    "type": "Signature[]"
                }
            ],
            "return": {
                "description": "Returns only any type signatures",
                "type": "Signature[]"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1686,
            "description": "create a map with normalized signatures as key and the function as value",
            "params": [
                {
                    "name": "signatures",
                    "description": "An array with split signatures",
                    "type": "Signature[]"
                }
            ],
            "return": {
                "description": "Returns a map with normalized\n                                    signatures as key, and the function\n                                    as value.",
                "type": "Object.<string, Function>"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1707,
            "description": "Parse signatures recursively in a node tree.",
            "params": [
                {
                    "name": "signatures",
                    "description": "Array with expanded signatures",
                    "type": "Signature[]"
                },
                {
                    "name": "path",
                    "description": "Traversed path of parameter types",
                    "type": "Param[]"
                },
                {
                    "name": "anys",
                    "description": "",
                    "type": "Signature[]"
                }
            ],
            "return": {
                "description": "Returns a node tree",
                "type": "Node"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1802,
            "description": "Generate an array like ['arg0', 'arg1', 'arg2']",
            "params": [
                {
                    "name": "count",
                    "description": "Number of arguments to generate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns an array with argument names",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1817,
            "description": "Compose a function from sub-functions each handling a single type signature.\nSignatures:\n  typed(signature: string, fn: function)\n  typed(name: string, signature: string, fn: function)\n  typed(signatures: Object.<string, function>)\n  typed(name: string, signatures: Object.<string, function>)",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String | null"
                },
                {
                    "name": "signatures",
                    "description": "",
                    "type": "Object.<string, Function>"
                }
            ],
            "return": {
                "description": "Returns the typed function",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1877,
            "description": "Calculate the maximum number of parameters in givens signatures",
            "params": [
                {
                    "name": "signatures",
                    "description": "",
                    "type": "Signature[]"
                }
            ],
            "return": {
                "description": "The maximum number of parameters",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1895,
            "description": "Get the type of a value",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns a string with the type of value",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1921,
            "description": "Test whether an array contains some item",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "item",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns true if array contains item, false if not.",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1931,
            "description": "Returns the last item in the array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "item",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 1973,
            "description": "Construct the typed function itself with various signatures\n\nSignatures:\n\n  typed(signatures: Object.<string, function>)\n  typed(name: string, signatures: Object.<string, function>)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2032,
            "description": "Find a specific signature from a (composed) typed function, for\nexample:\n\n  typed.find(fn, ['number', 'string'])\n  typed.find(fn, 'number, string')\n\nFunction find only only works for exact matches.",
            "params": [
                {
                    "name": "fn",
                    "description": "A typed-function",
                    "type": "Function"
                },
                {
                    "name": "signature",
                    "description": "Signature to be found, can be\n                                       an array or a comma separated string.",
                    "type": "String | string[]"
                }
            ],
            "return": {
                "description": "Returns the matching signature, or\n                                       throws an errror when no signature\n                                       is found.",
                "type": "Function"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2081,
            "description": "Convert a given value to another data type.",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2141,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2143,
            "description": "'use strict';\nvar NumberFormatter = __webpack_require__(7);\n/**\n\t\t * Test whether value is a number\n\t\t * @param {*} value\n\t\t * @return {boolean} isNumber",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2158,
            "description": "Check if a number is integer",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number | boolean"
                }
            ],
            "return": {
                "description": "isInteger",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2170,
            "description": "Calculate the sign of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2187,
            "description": "Convert a number to a formatted string representation.\n\nSyntax:\n\n   format(value)\n   format(value, options)\n   format(value, precision)\n   format(value, fn)\n\nWhere:\n\n   {number} value   The value to be formatted\n   {Object} options An object with formatting options. Available options:\n                    {string} notation\n                        Number notation. Choose from:\n                        'fixed'          Always use regular number notation.\n                                         For example '123.40' and '14000000'\n                        'exponential'    Always use exponential notation.\n                                         For example '1.234e+2' and '1.4e+7'\n                        'engineering'    Always use engineering notation.\n                                         For example '123.4e+0' and '14.0e+6'\n                        'auto' (default) Regular number notation for numbers\n                                         having an absolute value between\n                                         `lower` and `upper` bounds, and uses\n                                         exponential notation elsewhere.\n                                         Lower bound is included, upper bound\n                                         is excluded.\n                                         For example '123.4' and '1.4e7'.\n                    {number} precision   A number between 0 and 16 to round\n                                         the digits of the number.\n                                         In case of notations 'exponential' and\n                                         'auto', `precision` defines the total\n                                         number of significant digits returned\n                                         and is undefined by default.\n                                         In case of notation 'fixed',\n                                         `precision` defines the number of\n                                         significant digits after the decimal\n                                         point, and is 0 by default.\n                    {Object} exponential An object containing two parameters,\n                                         {number} lower and {number} upper,\n                                         used by notation 'auto' to determine\n                                         when to return exponential notation.\n                                         Default values are `lower=1e-3` and\n                                         `upper=1e5`.\n                                         Only applicable for notation `auto`.\n   {Function} fn    A custom formatting function. Can be used to override the\n                    built-in notations. Function `fn` is called with `value` as\n                    parameter and must return a string. Is useful for example to\n                    format all values inside a matrix in a particular way.\n\nExamples:\n\n   format(6.4);                                        // '6.4'\n   format(1240000);                                    // '1.24e6'\n   format(1/3);                                        // '0.3333333333333333'\n   format(1/3, 3);                                     // '0.333'\n   format(21385, 2);                                   // '21000'\n   format(12.071, {notation: 'fixed'});                // '12'\n   format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n   format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n   format(12345678, {notation: 'engineering'});        // '12.345678e+6'",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object | Function | number",
                    "optional": true
                }
            ],
            "return": {
                "description": "str The formatted value",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2318,
            "description": "Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "Number of digits in formatted output.\n                             If not provided, the maximum available digits\n                             is used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2330,
            "description": "Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "Number of digits in formatted output.\n                             If not provided, the maximum available digits\n                             is used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2342,
            "description": "Format a number with fixed notation.",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "Optional number of decimals after the\n                                     decimal point. Zero by default.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2352,
            "description": "Format a number with a certain precision",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "Optional number of digits.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "undefined"
                },
                {
                    "name": "}",
                    "description": "[options]  By default:\n                                                   lower = 1e-3 (excl)\n                                                   upper = 1e+5 (incl)",
                    "type": "Lower: number, upper: number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2365,
            "description": "Count the number of significant digits of a number.\n\nFor example:\n  2.34 returns 3\n  0.0034 returns 2\n  120.5e+30 returns 4",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "digits   Number of significant digits",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2384,
            "description": "Minimum number added to one that makes the result different than one",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2389,
            "description": "Compares two floating point numbers.",
            "params": [
                {
                    "name": "x",
                    "description": "First value to compare",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Second value to compare",
                    "type": "Number"
                },
                {
                    "name": "epsilon",
                    "description": "The maximum relative difference between x and y\n                           If epsilon is undefined or null, the function will\n                           test whether x and y are exactly equal.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the two numbers are nearly equal",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2432,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2434,
            "description": "'use strict';\n/**\n\t\t * Format a number using methods toPrecision, toFixed, toExponential.\n\t\t * @param {number | string} value\n\t\t * @constructor",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2480,
            "description": "Format a number with engineering notation.",
            "params": [
                {
                    "name": "precision",
                    "description": "Optional number of decimals after the\n                                     decimal point. Zero by default.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2520,
            "description": "Format a number with fixed notation.",
            "params": [
                {
                    "name": "precision",
                    "description": "Optional number of decimals after the\n                                     decimal point. Zero by default.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2550,
            "description": "Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "params": [
                {
                    "name": "precision",
                    "description": "Number of digits in formatted output.\n                             If not provided, the maximum available digits\n                             is used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2573,
            "description": "Format a number with a certain precision",
            "params": [
                {
                    "name": "precision",
                    "description": "Optional number of digits.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "undefined"
                },
                {
                    "name": "}",
                    "description": "[options]\n                                      By default:\n                                        lower = 1e-3 (excl)\n                                        upper = 1e+5 (incl)",
                    "type": "Lower: number | undefined, upper: number | undefined"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2619,
            "description": "Crete a clone of the NumberFormatter",
            "return": {
                "description": "Returns a clone of the NumberFormatter",
                "type": "NumberFormatter"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2631,
            "description": "Round the number of digits of a number *",
            "params": [
                {
                    "name": "precision",
                    "description": "A positive integer",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a new NumberFormatter with the rounded\n                           digits",
                "type": "NumberFormatter"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2670,
            "description": "Create an array filled with zeros.",
            "params": [
                {
                    "name": "length",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2686,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2688,
            "description": "var Emitter = __webpack_require__(9);\n/**\n\t\t * Extend given object with emitter functions `on`, `off`, `once`, `emit`\n\t\t * @param {Object} obj\n\t\t * @return {Object} obj",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2711,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2713,
            "description": "function E () {\n\t\t\t// Keep this empty so it's easier to inherit from\n\t\t  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n\t\t}\nE.prototype = {\n\t\t\ton: function (name, callback, ctx) {\n\t\t    var e = this.e || (this.e = {});\n    (e[name] || (e[name] = [])).push({\n\t\t      fn: callback,\n\t\t      ctx: ctx\n\t\t    });\n    return this;\n\t\t  },\n  once: function (name, callback, ctx) {\n\t\t    var self = this;\n\t\t    function listener () {\n\t\t      self.off(name, listener);\n\t\t      callback.apply(ctx, arguments);\n\t\t    };\n    listener._ = callback\n\t\t    return this.on(name, listener, ctx);\n\t\t  },\n  emit: function (name) {\n\t\t    var data = [].slice.call(arguments, 1);\n\t\t    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n\t\t    var i = 0;\n\t\t    var len = evtArr.length;\n    for (i; i < len; i++) {\n\t\t      evtArr[i].fn.apply(evtArr[i].ctx, data);\n\t\t    }\n    return this;\n\t\t  },\n  off: function (name, callback) {\n\t\t    var e = this.e || (this.e = {});\n\t\t    var evts = e[name];\n\t\t    var liveEvents = [];\n    if (evts && callback) {\n\t\t      for (var i = 0, len = evts.length; i < len; i++) {\n\t\t        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n\t\t          liveEvents.push(evts[i]);\n\t\t      }\n\t\t    }\n    // Remove event from queue to prevent memory leak\n\t\t    // Suggested by https://github.com/lazd\n\t\t    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n    (liveEvents.length)\n\t\t      ? e[name] = liveEvents\n\t\t      : delete e[name];\n    return this;\n\t\t  }\n\t\t};\nmodule.exports = E;\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2785,
            "description": "'use strict';\nvar lazy = __webpack_require__(3).lazy;\n\t\tvar isFactory = __webpack_require__(3).isFactory;\n\t\tvar traverse = __webpack_require__(3).traverse;\n\t\tvar extend = __webpack_require__(3).extend;\n\t\tvar ArgumentsError = __webpack_require__(11);\nfunction factory (type, config, load, typed, math) {\n\t\t  /**\n\t\t   * Import functions from an object or a module\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.import(object)\n\t\t   *    math.import(object, options)\n\t\t   *\n\t\t   * Where:\n\t\t   *\n\t\t   * - `object: Object`\n\t\t   *   An object with functions to be imported.\n\t\t   * - `options: Object` An object with import options. Available options:\n\t\t   *   - `override: boolean`\n\t\t   *     If true, existing functions will be overwritten. False by default.\n\t\t   *   - `silent: boolean`\n\t\t   *     If true, the function will not throw errors on duplicates or invalid\n\t\t   *     types. False by default.\n\t\t   *   - `wrap: boolean`\n\t\t   *     If true, the functions will be wrapped in a wrapper function\n\t\t   *     which converts data types like Matrix to primitive data types like Array.\n\t\t   *     The wrapper is needed when extending math.js with libraries which do not\n\t\t   *     support these data type. False by default.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    // define new functions and variables\n\t\t   *    math.import({\n\t\t   *      myvalue: 42,\n\t\t   *      hello: function (name) {\n\t\t   *        return 'hello, ' + name + '!';\n\t\t   *      }\n\t\t   *    });\n\t\t   *\n\t\t   *    // use the imported function and variable\n\t\t   *    math.myvalue * 2;               // 84\n\t\t   *    math.hello('user');             // 'hello, user!'\n\t\t   *\n\t\t   *    // import the npm module 'numbers'\n\t\t   *    // (must be installed first with `npm install numbers`)\n\t\t   *    math.import(require('numbers'), {wrap: true});\n\t\t   *\n\t\t   *    math.fibonacci(7); // returns 13\n\t\t   *\n\t\t   * @param {Object | Array} object   Object with functions to be imported.\n\t\t   * @param {Object} [options]        Import options.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2886,
            "description": "Add a property to the math namespace and create a chain proxy for it.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "See import for a description of the options",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2937,
            "description": "Create a wrapper a round an function which converts the arguments\nto their primitive values (like convert a Matrix to Array)",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the wrapped function",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 2961,
            "description": "Import an instance of a factory into math.js",
            "params": [
                {
                    "name": "}",
                    "description": "factory",
                    "type": "Factory: Function, name: string, path: string, math: boolean"
                },
                {
                    "name": "options",
                    "description": "See import for a description of the options",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3013,
            "description": "Check whether given object is a type which can be imported",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Function | number | string | boolean | null | Unit | Complex"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3033,
            "description": "Test whether a given thing is a typed-function",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns true when `fn` is a typed-function",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3051,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3053,
            "description": "'use strict';\n/**\n\t\t * Create a syntax error with the message:\n\t\t *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n\t\t * @param {string} fn     Function name\n\t\t * @param {number} count  Actual argument count\n\t\t * @param {number} min    Minimum required argument count\n\t\t * @param {number} [max]  Maximum required argument count\n\t\t * @extends Error",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3091,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3093,
            "description": "'use strict';\nvar object = __webpack_require__(3);\nfunction factory (type, config, load, typed, math) {\n\t\t  var MATRIX = ['Matrix', 'Array'];                   // valid values for option matrix\n\t\t  var NUMBER = ['number', 'BigNumber', 'Fraction'];   // valid values for option number\n  /**\n\t\t   * Set configuration options for math.js, and get current options.\n\t\t   * Will emit a 'config' event, with arguments (curr, prev).\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.config(config: Object): Object\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.config().number;                // outputs 'number'\n\t\t   *     math.eval('0.4');                    // outputs number 0.4\n\t\t   *     math.config({number: 'Fraction'});\n\t\t   *     math.eval('0.4');                    // outputs Fraction 2/5\n\t\t   *\n\t\t   * @param {Object} [options] Available options:\n\t\t   *                            {number} epsilon\n\t\t   *                              Minimum relative difference between two\n\t\t   *                              compared values, used by all comparison functions.\n\t\t   *                            {string} matrix\n\t\t   *                              A string 'Matrix' (default) or 'Array'.\n\t\t   *                            {string} number\n\t\t   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n\t\t   *                            {number} precision\n\t\t   *                              The number of significant digits for BigNumbers.\n\t\t   *                              Not applicable for Numbers.\n\t\t   *                            {string} parenthesis\n\t\t   *                              How to display parentheses in LaTeX and string\n\t\t   *                              output.\n\t\t   * @return {Object} Returns the current configuration",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3164,
            "description": "Test whether an Array contains a specific item.",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array.<string>"
                },
                {
                    "name": "item",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3174,
            "description": "Find a string in an array. Case insensitive search",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array.<string>"
                },
                {
                    "name": "item",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the index when found. Returns -1 when not found",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3188,
            "description": "Validate an option",
            "params": [
                {
                    "name": "options",
                    "description": "Object with options",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "Name of the option to validate",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "Array with valid values for this option",
                    "type": "Array.<string>"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3216,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3218,
            "description": "module.exports = [\n\t\t  __webpack_require__(14),        // data types (Matrix, Complex, Unit, ...)\n\t\t  __webpack_require__(100),   // constants\n\t\t  __webpack_require__(102),  // expression parsing\n\t\t  __webpack_require__(338),    // functions\n\t\t  __webpack_require__(504),        // serialization utility (math.json.reviver)\n\t\t  __webpack_require__(506)        // errors\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3232,
            "description": "module.exports = [\n\t\t  __webpack_require__(15),\n\t\t  __webpack_require__(20),\n\t\t  __webpack_require__(21),\n\t\t  __webpack_require__(26),\n\t\t  __webpack_require__(33),\n\t\t  __webpack_require__(37),\n\t\t  __webpack_require__(70),\n\t\t  __webpack_require__(71),\n\t\t  __webpack_require__(73),\n\t\t  __webpack_require__(74)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3250,
            "description": "module.exports = [\n\t\t  // type\n\t\t  __webpack_require__(16),\n  // construction function\n\t\t  __webpack_require__(18)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3263,
            "description": "var Decimal = __webpack_require__(17);\nfunction factory (type, config, load, typed, math) {\n\t\t  var BigNumber = Decimal.clone({precision: config.precision});\n  /**\n\t\t   * Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3276,
            "description": "Get a JSON representation of a BigNumber containing\ntype information",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3289,
            "description": "Instantiate a BigNumber from a JSON object",
            "params": [
                {
                    "name": "json",
                    "description": "a JSON object structured as:\n                      `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "BigNumber"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3314,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 3316,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8341,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8343,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a BigNumber, which can store numbers with arbitrary precision.\n\t\t   * When a matrix is provided, all elements will be converted to BigNumber.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.bignumber(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    0.1 + 0.2;                                  // returns number 0.30000000000000004\n\t\t   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3\n\t\t   *\n\t\t   *\n\t\t   *    7.2e500;                                    // returns number Infinity\n\t\t   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    boolean, complex, index, matrix, string, unit\n\t\t   *\n\t\t   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n\t\t   *                                                    0 by default.\n\t\t   * @returns {BigNumber} The created bignumber",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8415,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8417,
            "description": "'use strict';\n/**\n\t\t * Execute the callback function element wise for each element in array and any\n\t\t * nested array\n\t\t * Returns an array with the results\n\t\t * @param {Array | Matrix} array\n\t\t * @param {Function} callback   The callback is called with two parameters:\n\t\t *                              value1 and value2, which contain the current\n\t\t *                              element of both arrays.\n\t\t * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n\t\t *\n\t\t * @return {Array | Matrix} res",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8446,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8448,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a boolean or convert a string or number to a boolean.\n\t\t   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n\t\t   * case of zero.\n\t\t   * Strings can be `'true'` or `'false'`, or can contain a number.\n\t\t   * When value is a matrix, all elements will be converted to boolean.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.boolean(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.boolean(0);     // returns false\n\t\t   *    math.boolean(1);     // returns true\n\t\t   *    math.boolean(-3);     // returns true\n\t\t   *    math.boolean('true');     // returns true\n\t\t   *    math.boolean('false');     // returns false\n\t\t   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, complex, index, matrix, string, unit\n\t\t   *\n\t\t   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n\t\t   * @return {boolean | Array | Matrix} The boolean value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8530,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8532,
            "description": "module.exports = [\n\t\t  // type\n\t\t  __webpack_require__(22),\n  // construction function\n\t\t  __webpack_require__(25)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8545,
            "description": "'use strict';\nvar format = __webpack_require__(23).format;\n\t\tvar lazy = __webpack_require__(3).lazy;\nfunction factory (type, config, load, typed, math) {\n\t\t  /**\n\t\t   * @constructor Chain\n\t\t   * Wrap any value in a chain, allowing to perform chained operations on\n\t\t   * the value.\n\t\t   *\n\t\t   * All methods available in the math.js library can be called upon the chain,\n\t\t   * and then will be evaluated with the value itself as first argument.\n\t\t   * The chain can be closed by executing chain.done(), which will return\n\t\t   * the final value.\n\t\t   *\n\t\t   * The Chain has a number of special functions:\n\t\t   * - done()             Finalize the chained operation and return the\n\t\t   *                      chain's value.\n\t\t   * - valueOf()          The same as done()\n\t\t   * - toString()         Returns a string representation of the chain's value.\n\t\t   *\n\t\t   * @param {*} [value]",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8584,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8590,
            "description": "Close the chain. Returns the final value.\nDoes the same as method valueOf()",
            "return": {
                "description": "value",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8599,
            "description": "Close the chain. Returns the final value.\nDoes the same as method done()",
            "return": {
                "description": "value",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8608,
            "description": "Get a string representation of the value in the chain",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8616,
            "description": "Create a proxy method for the chain",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to be proxied\n                          If fn is no function, it is silently ignored.",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8629,
            "description": "Create a proxy method for the chain",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "resolver",
                    "description": "The function resolving with the\n                             function to be proxied",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8647,
            "description": "Make a function chainable",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "chain function",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8664,
            "description": "Create a proxy for a single method, or an object with multiple methods.\nExample usage:\n\n  Chain.createProxy('add', function add (x, y) {...});\n  Chain.createProxy({\n    add:      function add (x, y) {...},\n    subtract: function subtract (x, y) {...}\n  }",
            "params": [
                {
                    "name": "arg0",
                    "description": "A name (string), or an object with\n                                functions",
                    "type": "String | Object"
                },
                {
                    "name": "arg1",
                    "description": "A function, when arg0 is a name",
                    "type": "*",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8714,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8716,
            "description": "'use strict';\nvar formatNumber = __webpack_require__(6).format;\n\t\tvar formatBigNumber = __webpack_require__(24).format;\n/**\n\t\t * Test whether value is a string\n\t\t * @param {*} value\n\t\t * @return {boolean} isString",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8732,
            "description": "Check if a text ends with a certain string.",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "search",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8743,
            "description": "Format a value of any type into a string.\n\nUsage:\n    math.format(value)\n    math.format(value, precision)\n\nWhen value is a function:\n\n- When the function has a property `syntax`, it returns this\n  syntax description.\n- In other cases, a string `'function'` is returned.\n\nWhen `value` is an Object:\n\n- When the object contains a property `format` being a function, this\n  function is invoked as `value.format(options)` and the result is returned.\n- When the object has its own `toString` method, this method is invoked\n  and the result is returned.\n- In other cases the function will loop over all object properties and\n  return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n\nExample usage:\n    math.format(2/7);                // '0.2857142857142857'\n    math.format(math.pi, 3);         // '3.14'\n    math.format(new Complex(2, 3));  // '2 + 3i'\n    math.format('hello');            // '\"hello\"'",
            "params": [
                {
                    "name": "value",
                    "description": "Value to be stringified",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8834,
            "description": "Recursively format an n-dimensional matrix\nExample output: \"[[1, 2], [3, 4]]\"",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8863,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 8865,
            "description": "/**\n\t\t * Convert a BigNumber to a formatted string representation.\n\t\t *\n\t\t * Syntax:\n\t\t *\n\t\t *    format(value)\n\t\t *    format(value, options)\n\t\t *    format(value, precision)\n\t\t *    format(value, fn)\n\t\t *\n\t\t * Where:\n\t\t *\n\t\t *    {number} value   The value to be formatted\n\t\t *    {Object} options An object with formatting options. Available options:\n\t\t *                     {string} notation\n\t\t *                         Number notation. Choose from:\n\t\t *                         'fixed'          Always use regular number notation.\n\t\t *                                          For example '123.40' and '14000000'\n\t\t *                         'exponential'    Always use exponential notation.\n\t\t *                                          For example '1.234e+2' and '1.4e+7'\n\t\t *                         'auto' (default) Regular number notation for numbers\n\t\t *                                          having an absolute value between\n\t\t *                                          `lower` and `upper` bounds, and uses\n\t\t *                                          exponential notation elsewhere.\n\t\t *                                          Lower bound is included, upper bound\n\t\t *                                          is excluded.\n\t\t *                                          For example '123.4' and '1.4e7'.\n\t\t *                     {number} precision   A number between 0 and 16 to round\n\t\t *                                          the digits of the number.\n\t\t *                                          In case of notations 'exponential' and\n\t\t *                                          'auto', `precision` defines the total\n\t\t *                                          number of significant digits returned\n\t\t *                                          and is undefined by default.\n\t\t *                                          In case of notation 'fixed',\n\t\t *                                          `precision` defines the number of\n\t\t *                                          significant digits after the decimal\n\t\t *                                          point, and is 0 by default.\n\t\t *                     {Object} exponential An object containing two parameters,\n\t\t *                                          {number} lower and {number} upper,\n\t\t *                                          used by notation 'auto' to determine\n\t\t *                                          when to return exponential notation.\n\t\t *                                          Default values are `lower=1e-3` and\n\t\t *                                          `upper=1e5`.\n\t\t *                                          Only applicable for notation `auto`.\n\t\t *    {Function} fn    A custom formatting function. Can be used to override the\n\t\t *                     built-in notations. Function `fn` is called with `value` as\n\t\t *                     parameter and must return a string. Is useful for example to\n\t\t *                     format all values inside a matrix in a particular way.\n\t\t *\n\t\t * Examples:\n\t\t *\n\t\t *    format(6.4);                                        // '6.4'\n\t\t *    format(1240000);                                    // '1.24e6'\n\t\t *    format(1/3);                                        // '0.3333333333333333'\n\t\t *    format(1/3, 3);                                     // '0.333'\n\t\t *    format(21385, 2);                                   // '21000'\n\t\t *    format(12.071, {notation: 'fixed'});                // '12'\n\t\t *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n\t\t *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n\t\t *\n\t\t * @param {BigNumber} value\n\t\t * @param {Object | Function | number} [options]\n\t\t * @return {string} str The formatted value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9022,
            "description": "Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "precision",
                    "description": "Number of digits in formatted output.\n                             If not provided, the maximum available digits\n                             is used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9039,
            "description": "Format a number with fixed notation.",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "precision",
                    "description": "Optional number of decimals after the\n                                     decimal point. Zero by default.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9052,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9054,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Wrap any value in a chain, allowing to perform chained operations on\n\t\t   * the value.\n\t\t   *\n\t\t   * All methods available in the math.js library can be called upon the chain,\n\t\t   * and then will be evaluated with the value itself as first argument.\n\t\t   * The chain can be closed by executing `chain.done()`, which returns\n\t\t   * the final value.\n\t\t   *\n\t\t   * The chain has a number of special functions:\n\t\t   *\n\t\t   * - `done()`     Finalize the chain and return the chain's value.\n\t\t   * - `valueOf()`  The same as `done()`\n\t\t   * - `toString()` Executes `math.format()` onto the chain's value, returning\n\t\t   *                a string representation of the value.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.chain(value)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.chain(3)\n\t\t   *         .add(4)\n\t\t   *         .subtract(2)\n\t\t   *         .done();     // 5\n\t\t   *\n\t\t   *     math.chain( [[1, 2], [3, 4]] )\n\t\t   *         .subset(math.index(0, 0), 8)\n\t\t   *         .multiply(3)\n\t\t   *         .done();     // [[24, 6], [9, 12]]\n\t\t   *\n\t\t   * @param {*} [value]   A value of any type on which to start a chained operation.\n\t\t   * @return {math.type.Chain} The created chain",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9109,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9111,
            "description": "module.exports = [\n\t\t  // type\n\t\t  __webpack_require__(27),\n  // construction function\n\t\t  __webpack_require__(31)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9124,
            "description": "var Complex = __webpack_require__(28);\n\t\tvar format = __webpack_require__(6).format;\n\t\tvar isNumber = __webpack_require__(6).isNumber;\nfunction factory (type, config, load, typed, math) {\n  /**\n\t\t   * Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9139,
            "description": "Get a JSON representation of the complex number",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9164,
            "description": "Get a string representation of the complex number,\nwith optional formatting options.",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9223,
            "description": "Create a complex number from polar coordinates\n\nUsage:\n\n    Complex.fromPolar(r: number, phi: number) : Complex\n    Complex.fromPolar({r: number, phi: number}) : Complex",
            "params": [
                {
                    "name": "args...",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9269,
            "description": "Create a Complex number from a JSON object",
            "params": [
                {
                    "name": "json",
                    "description": "A JSON Object structured as\n                      {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n                      All properties are optional, default values\n                      for `re` and `im` are 0.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new Complex number",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9300,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9302,
            "description": "var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**\n\t\t * @license Complex.js v2.0.1 11/02/2016\n\t\t *\n\t\t * Copyright (c) 2016, Robert Eisele (robert@xarg.org)\n\t\t * Dual licensed under the MIT or GPL Version 2 licenses.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9311,
            "description": "This class allows the manipilation of complex numbers.\n You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\nObject form\n { re: <real>, im: <imaginary> }\n { arg: <angle>, abs: <radius> }\n { phi: <angle>, r: <radius> }\nDouble form\n 99.3 - Single double value\nString form\n \"23.1337\" - Simple real number\n \"15+3i\" - a simple complex number\n \"3-i\" - a simple complex number\nExample:\nvar c = new Complex(\"99.3+8i\");\n c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9354,
            "description": "Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9513,
            "is_constructor": 1,
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9534,
            "description": "Calculates the sign of a complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9548,
            "description": "Adds two complex numbers",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9562,
            "description": "Subtracts two complex numbers",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9576,
            "description": "Multiplies two complex numbers",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9595,
            "description": "Divides two complex numbers",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9643,
            "description": "Calculate the power of two complex numbers",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9709,
            "description": "Calculate the complex square root",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9741,
            "description": "Calculate the complex exponent",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9758,
            "description": "Calculate the natural log",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9777,
            "description": "Calculate the magniture of the complex number",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9800,
            "description": "Calculate the angle of the complex number",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9810,
            "description": "Calculate the sine of the complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9825,
            "description": "Calculate the cosine",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9840,
            "description": "Calculate the tangent",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9856,
            "description": "Calculate the cotangent",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9872,
            "description": "Calculate the secant",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9888,
            "description": "Calculate the cosecans",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9904,
            "description": "Calculate the complex arcus sinus",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9925,
            "description": "Calculate the complex arcus cosinus",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9946,
            "description": "Calculate the complex arcus tangent",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 9976,
            "description": "Calculate the complex arcus cotangent",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10000,
            "description": "Calculate the complex arcus secant",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10024,
            "description": "Calculate the complex arcus cosecans",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10048,
            "description": "Calculate the complex sinh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10063,
            "description": "Calculate the complex cosh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10078,
            "description": "Calculate the complex tanh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10094,
            "description": "Calculate the complex coth",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10110,
            "description": "Calculate the complex coth",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10126,
            "description": "Calculate the complex sech",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10142,
            "description": "Calculate the complex asinh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10163,
            "description": "Calculate the complex asinh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10184,
            "description": "Calculate the complex atanh",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10216,
            "description": "Calculate the complex acoth",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10241,
            "description": "Calculate the complex acsch",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10269,
            "description": "Calculate the complex asech",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10293,
            "description": "Calculate the complex inverse 1/z",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10310,
            "description": "Returns the complex conjugate",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10320,
            "description": "Gets the negated complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10330,
            "description": "Ceils the actual complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10344,
            "description": "Floors the actual complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10358,
            "description": "Ceils the actual complex number",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10372,
            "description": "Compares two complex numbers",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10385,
            "description": "Clones the actual object",
            "return": {
                "description": "",
                "type": "Complex"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10395,
            "description": "Gets a string of the actual complex number",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10436,
            "description": "Returns the actual number as a vector",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10446,
            "description": "Returns the actual real value of the current object",
            "return": {
                "description": "",
                "type": "Number|null"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10459,
            "description": "Checks if the given complex number is not a number",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10490,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10492,
            "description": "module.exports = function(module) {\n\t\t\tif(!module.webpackPolyfill) {\n\t\t\t\tmodule.deprecate = function() {};\n\t\t\t\tmodule.paths = [];\n\t\t\t\t// module.parent = undefined by default\n\t\t\t\tmodule.children = [];\n\t\t\t\tmodule.webpackPolyfill = 1;\n\t\t\t}\n\t\t\treturn module;\n\t\t}\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10508,
            "description": "module.exports = function() { throw new Error(\"define cannot be used indirect\"); };\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10515,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Create a complex value or convert a value to a complex value.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.complex()                           // creates a complex value with zero\n\t\t   *                                              // as real and imaginary part.\n\t\t   *     math.complex(re : number, im : string)   // creates a complex value with provided\n\t\t   *                                              // values for real and imaginary part.\n\t\t   *     math.complex(re : number)                // creates a complex value with provided\n\t\t   *                                              // real value and zero imaginary part.\n\t\t   *     math.complex(complex : Complex)          // clones the provided complex value.\n\t\t   *     math.complex(arg : string)               // parses a string into a complex value.\n\t\t   *     math.complex(array : Array)              // converts the elements of the array\n\t\t   *                                              // or matrix element wise into a\n\t\t   *                                              // complex value.\n\t\t   *     math.complex({re: number, im: number})   // creates a complex value with provided\n\t\t   *                                              // values for real an imaginary part.\n\t\t   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n\t\t   *                                              // polar coordinates\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i\n\t\t   *    a.re = 5;                        // a = Complex 5 - 4i\n\t\t   *    var i = a.im;                    // Number -4;\n\t\t   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i\n\t\t   *    var c = math.complex();          // Complex 0 + 0i\n\t\t   *    var d = math.add(a, b);          // Complex 5 + 2i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, index, matrix, number, string, unit\n\t\t   *\n\t\t   * @param {* | Array | Matrix} [args]\n\t\t   *            Arguments specifying the real and imaginary part of the complex number\n\t\t   * @return {Complex | Array | Matrix} Returns a complex value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10619,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10621,
            "description": "'use strict';\nexports.symbols = {\n\t\t  // GREEK LETTERS\n\t\t  Alpha: 'A',     alpha: '\\\\alpha',\n\t\t  Beta: 'B',      beta: '\\\\beta',\n\t\t  Gamma: '\\\\Gamma',    gamma: '\\\\gamma',\n\t\t  Delta: '\\\\Delta',    delta: '\\\\delta',\n\t\t  Epsilon: 'E',   epsilon: '\\\\epsilon',  varepsilon: '\\\\varepsilon',\n\t\t  Zeta: 'Z',      zeta: '\\\\zeta',\n\t\t  Eta: 'H',       eta: '\\\\eta',\n\t\t  Theta: '\\\\Theta',    theta: '\\\\theta',    vartheta: '\\\\vartheta',\n\t\t  Iota: 'I',      iota: '\\\\iota',\n\t\t  Kappa: 'K',     kappa: '\\\\kappa',    varkappa: '\\\\varkappa',\n\t\t  Lambda: '\\\\Lambda',   lambda: '\\\\lambda',\n\t\t  Mu: 'M',        mu: '\\\\mu',\n\t\t  Nu: 'N',        nu: '\\\\nu',\n\t\t  Xi: '\\\\Xi',       xi: '\\\\xi',\n\t\t  Omicron: 'O',   omicron: 'o',\n\t\t  Pi: '\\\\Pi',       pi: '\\\\pi',       varpi: '\\\\varpi',\n\t\t  Rho: 'P',       rho: '\\\\rho',      varrho: '\\\\varrho',\n\t\t  Sigma: '\\\\Sigma',    sigma: '\\\\sigma',    varsigma: '\\\\varsigma',\n\t\t  Tau: 'T',       tau: '\\\\tau',\n\t\t  Upsilon: '\\\\Upsilon',  upsilon: '\\\\upsilon',\n\t\t  Phi: '\\\\Phi',      phi: '\\\\phi',      varphi: '\\\\varphi',\n\t\t  Chi: 'X',       chi: '\\\\chi',\n\t\t  Psi: '\\\\Psi',      psi: '\\\\psi',\n\t\t  Omega: '\\\\Omega',    omega: '\\\\omega',\n\t\t  //logic\n\t\t  'true': '\\\\mathrm{True}',\n\t\t  'false': '\\\\mathrm{False}',\n\t\t  //other\n\t\t  i: 'i', //TODO use \\i ??\n\t\t  inf: '\\\\infty',\n\t\t  Inf: '\\\\infty',\n\t\t  infinity: '\\\\infty',\n\t\t  Infinity: '\\\\infty',\n\t\t  oo: '\\\\infty',\n\t\t  lim: '\\\\lim',\n\t\t  'undefined': '\\\\mathbf{?}'\n\t\t};\nexports.operators = {\n\t\t  'transpose': '^\\\\top',\n\t\t  'factorial': '!',\n\t\t  'pow': '^',\n\t\t  'dotPow': '.^\\\\wedge', //TODO find ideal solution\n\t\t  'unaryPlus': '+',\n\t\t  'unaryMinus': '-',\n\t\t  'bitNot': '~', //TODO find ideal solution\n\t\t  'not': '\\\\neg',\n\t\t  'multiply': '\\\\cdot',\n\t\t  'divide': '\\\\frac', //TODO how to handle that properly?\n\t\t  'dotMultiply': '.\\\\cdot', //TODO find ideal solution\n\t\t  'dotDivide': '.:', //TODO find ideal solution\n\t\t  'mod': '\\\\mod',\n\t\t  'add': '+',\n\t\t  'subtract': '-',\n\t\t  'to': '\\\\rightarrow',\n\t\t  'leftShift': '<<',\n\t\t  'rightArithShift': '>>',\n\t\t  'rightLogShift': '>>>',\n\t\t  'equal': '=',\n\t\t  'unequal': '\\\\neq',\n\t\t  'smaller': '<',\n\t\t  'larger': '>',\n\t\t  'smallerEq': '\\\\leq',\n\t\t  'largerEq': '\\\\geq',\n\t\t  'bitAnd': '\\\\&',\n\t\t  'bitXor': '\\\\underline{|}',\n\t\t  'bitOr': '|',\n\t\t  'and': '\\\\wedge',\n\t\t  'xor': '\\\\veebar',\n\t\t  'or': '\\\\vee'\n\t\t};\nexports.defaultTemplate = '\\\\mathrm{${name}}\\\\left(${args}\\\\right)';\nvar units = {\n\t\t  deg: '^\\\\circ'\n\t\t};\n//@param {string} name\n\t\t//@param {boolean} isUnit\n\t\texports.toSymbol = function (name, isUnit) {\n\t\t  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n\t\t  if (isUnit) {\n\t\t    if (units.hasOwnProperty(name)) {\n\t\t      return units[name];\n\t\t    }\n\t\t    return '\\\\mathrm{' + name + '}';\n\t\t  }\n  if (exports.symbols.hasOwnProperty(name)) {\n\t\t    return exports.symbols[name];\n\t\t  }\n\t\t  else if (name.indexOf('_') !== -1) {\n\t\t    //symbol with index (eg. alpha_1)\n\t\t    var index = name.indexOf('_');\n\t\t    return exports.toSymbol(name.substring(0, index)) + '_{'\n\t\t      + exports.toSymbol(name.substring(index + 1)) + '}';\n\t\t  }\n\t\t  return name;\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10731,
            "description": "module.exports = [\n\t\t  // type\n\t\t  __webpack_require__(34),\n  // construction function\n\t\t  __webpack_require__(36)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10744,
            "description": "var Fraction = __webpack_require__(35);\n/**\n\t\t * Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10754,
            "description": "Get a JSON representation of a Fraction containing type information",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10767,
            "description": "Instantiate a Fraction from a JSON object",
            "params": [
                {
                    "name": "json",
                    "description": "a JSON object structured as:\n                      `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "BigNumber"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10787,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10789,
            "description": "var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**\n\t\t * @license Fraction.js v3.3.1 09/09/2015\n\t\t * http://www.xarg.org/2014/03/precise-calculations-in-javascript/\n\t\t *\n\t\t * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n\t\t * Dual licensed under the MIT or GPL Version 2 licenses.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 10800,
            "description": "This class offers the possibility to calculate fractions.\n You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\nArray/Object form\n [ 0 => <nominator>, 1 => <denominator> ]\n [ n => <nominator>, d => <denominator> ]\nInteger form\n - Single integer value\nDouble form\n - Single double value\nString form\n 123.456 - a simple double\n 123/456 - a string fraction\n 123.'456' - a double with repeating decimal places\n 123.(456) - synonym\n 123.45'6' - a double with repeating last place\n 123.45(6) - synonym\nExample:\nvar f = new Fraction(\"9.4'31'\");\n f.mul([-4, 3]).div(4.9);",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11090,
            "description": "Module constructor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number|Fraction"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number="
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11116,
            "description": "Boolean global variable to be able to disable automatic reduction of the fraction",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11128,
            "description": "Calculates the absolute value\n\nEx: new Fraction(-4).abs() => 4",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11138,
            "description": "Inverts the sign of the current fraction\n\nEx: new Fraction(-4).neg() => 4",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11148,
            "description": "Adds two rational numbers\n\nEx: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11162,
            "description": "Subtracts two rational numbers\n\nEx: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11176,
            "description": "Multiplies two rational numbers\n\nEx: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11190,
            "description": "Divides two rational numbers\n\nEx: new Fraction(\"-17.(345)\").inverse().div(3)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11204,
            "description": "Clones the actual object\n\nEx: new Fraction(\"-17.(345)\").clone()",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11213,
            "description": "Calculates the modulo of two rational numbers - a more precise fmod\n\nEx: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11253,
            "description": "Calculates the fractional gcd of two rational numbers\n\nEx: new Fraction(5,8).gcd(3,7) => 1/56",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11267,
            "description": "Calculates the fractional lcm of two rational numbers\n\nEx: new Fraction(5,8).lcm(3,7) => 15",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11284,
            "description": "Calculates the ceil of a rational number\n\nEx: new Fraction('4.(3)').ceil() => (5 / 1)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11299,
            "description": "Calculates the floor of a rational number\n\nEx: new Fraction('4.(3)').floor() => (4 / 1)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11314,
            "description": "Rounds a rational numbers\n\nEx: new Fraction('4.(3)').round() => (4 / 1)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11329,
            "description": "Gets the inverse of the fraction, means numerator and denumerator are exchanged\n\nEx: new Fraction([-3, 4]).inverse() => -4 / 3",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11339,
            "description": "Calculates the fraction to some integer exponent\n\nEx: new Fraction(-1,2).pow(-3) => -8",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11353,
            "description": "Check if two rational numbers are the same\n\nEx: new Fraction(19.6).equals([98, 5]);",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11364,
            "description": "Check if two rational numbers are the same\n\nEx: new Fraction(19.6).equals([98, 5]);",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11376,
            "description": "Check if two rational numbers are divisible\n\nEx: new Fraction(19.6).divisible(1.5);",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11387,
            "description": "Returns a decimal representation of the fraction\n\nEx: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11397,
            "description": "Returns a string-fraction representation of a Fraction object\n\nEx: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11428,
            "description": "Returns a latex representation of a Fraction object\n\nEx: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11460,
            "description": "Returns an array of continued fraction elements\n\nEx: new Fraction(\"7/8\").toContinued() => [0,1,7]",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11482,
            "description": "Creates a string representation of a fraction with all digits\n\nEx: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11573,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11575,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a fraction convert a value to a fraction.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *     math.fraction(numerator, denominator)\n\t\t   *     math.fraction({n: numerator, d: denominator})\n\t\t   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n\t\t   *                                                   into fractions\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.fraction(1, 3);\n\t\t   *     math.fraction('2/3');\n\t\t   *     math.fraction({n: 2, d: 3});\n\t\t   *     math.fraction([0.2, 0.25, 1.25]);\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, number, string, unit\n\t\t   *\n\t\t   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n\t\t   *            Arguments specifying the numerator and denominator of\n\t\t   *            the fraction\n\t\t   * @return {Fraction | Array | Matrix} Returns a fraction",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11648,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11650,
            "description": "module.exports = [\n\t\t  // types\n\t\t  __webpack_require__(38),\n\t\t  __webpack_require__(46),\n\t\t  __webpack_require__(47),\n\t\t  __webpack_require__(50),\n\t\t  __webpack_require__(59),\n\t\t  __webpack_require__(65),\n\t\t  __webpack_require__(66),\n\t\t  __webpack_require__(67),\n  // construction functions\n\t\t  __webpack_require__(68),\n\t\t  __webpack_require__(52),\n\t\t  __webpack_require__(69)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11672,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\nvar isString = string.isString;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * @constructor Matrix\n\t\t   *\n\t\t   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n\t\t   * array. A matrix can be constructed as:\n\t\t   *     var matrix = math.matrix(data)\n\t\t   *\n\t\t   * Matrix contains the functions to resize, get and set values, get the size,\n\t\t   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n\t\t   * Furthermore, one can iterate over the matrix using map and forEach.\n\t\t   * The internal Array of the Matrix can be accessed using the function valueOf.\n\t\t   *\n\t\t   * Example usage:\n\t\t   *     var matrix = math.matrix([[1, 2], [3, 4]]);\n\t\t   *     matix.size();              // [2, 2]\n\t\t   *     matrix.resize([3, 2], 5);\n\t\t   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]\n\t\t   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n\t\t   *",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11709,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11715,
            "description": "Get the Matrix storage constructor for the given format.",
            "params": [
                {
                    "name": "format",
                    "description": "The Matrix storage format.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Matrix storage constructor.",
                "type": "Function"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11741,
            "description": "Get the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "return": {
                "description": "The storage format.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11754,
            "description": "Get the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "return": {
                "description": "The datatype.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11767,
            "description": "Create a new Matrix With the type of the current matrix instance",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array | Object"
                },
                {
                    "name": "datatype",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11776,
            "description": "Get a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "",
                    "type": "Array | Matrix | *",
                    "optional": true
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11794,
            "description": "Get a single element from the matrix.",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "value",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11804,
            "description": "Replace a single element in the matrix.",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be left undefined.",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "self",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11818,
            "description": "Resize the matrix to the given size. Returns a copy of the matrix when \n`copy=true`, otherwise return the matrix itself (resize in place).",
            "params": [
                {
                    "name": "size",
                    "description": "The new size the matrix should have.",
                    "type": "Number[]"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries.\n                                 If not provided, the matrix elements will\n                                 be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "copy",
                    "description": "Return a resized copy of the matrix",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The resized matrix",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11835,
            "description": "Create a clone of the matrix",
            "return": {
                "description": "clone",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11844,
            "description": "Retrieve the size of the matrix.",
            "return": {
                "description": "size",
                "type": "Number[]"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11853,
            "description": "Create a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                },
                {
                    "name": "skipZeros",
                    "description": "Invoke callback function for non-zero values only.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11868,
            "description": "Execute a callback function on each entry of the matrix.",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11879,
            "description": "Create an Array with a copy of the data of the Matrix",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11888,
            "description": "Get the primitive value of the Matrix: a multidimensional array",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11897,
            "description": "Get a string representation of the matrix, with optional formatting options.",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11910,
            "description": "Get a string representation of the matrix",
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11928,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11930,
            "description": "'use strict';\nexports.array = __webpack_require__(40);\n\t\texports['boolean'] = __webpack_require__(44);\n\t\texports['function'] = __webpack_require__(45);\n\t\texports.number = __webpack_require__(6);\n\t\texports.object = __webpack_require__(3);\n\t\texports.string = __webpack_require__(23);\n\t\texports.types = __webpack_require__(41);\n\t\texports.emitter = __webpack_require__(8);\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11946,
            "description": "'use strict';\nvar number = __webpack_require__(6);\n\t\tvar string = __webpack_require__(23);\n\t\tvar object = __webpack_require__(3);\n\t\tvar types = __webpack_require__(41);\nvar DimensionError = __webpack_require__(42);\n\t\tvar IndexError = __webpack_require__(43);\n/**\n\t\t * Calculate the size of a multi dimensional array.\n\t\t * This function checks the size of the first entry, it does not validate\n\t\t * whether all dimensions match. (use function `validate` for that)\n\t\t * @param {Array} x\n\t\t * @Return {Number[]} size",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 11976,
            "description": "Recursively validate whether each element in a multi dimensional array\nhas a size corresponding to the provided size array.",
            "params": [
                {
                    "name": "array",
                    "description": "Array to be validated",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "Array with the size of each dimension",
                    "type": "Number[]"
                },
                {
                    "name": "dim",
                    "description": "Current dimension",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "DimensionError"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12014,
            "description": "Validate whether each element in a multi dimensional array has\na size corresponding to the provided size array.",
            "params": [
                {
                    "name": "array",
                    "description": "Array to be validated",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "Array with the size of each dimension",
                    "type": "Number[]"
                }
            ],
            "throws": {
                "description": "DimensionError"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12035,
            "description": "Test whether index is an integer number with index >= 0 and index < length\nwhen length is provided",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "Length of the array",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12053,
            "description": "Resize a multi dimensional array. The resized array is returned.",
            "params": [
                {
                    "name": "array",
                    "description": "Array to be resized",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "Array with the size of each dimension",
                    "type": "Array.<number>"
                },
                {
                    "name": "defaultValue",
                    "description": "Value to be filled in in new entries,\n                             zero by default. To leave new entries undefined,\n                             specify array.UNINITIALIZED as defaultValue",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "array         The resized array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12088,
            "description": "Recursively resize a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "Array to be resized",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "Array with the size of each dimension",
                    "type": "Number[]"
                },
                {
                    "name": "dim",
                    "description": "Current dimension",
                    "type": "Number"
                },
                {
                    "name": "defaultValue",
                    "description": "Value to be filled in in new entries,\n                             undefined by default.",
                    "type": "*",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12151,
            "description": "Squeeze a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "returns the array itself",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12181,
            "description": "Recursively squeeze a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dims",
                    "description": "Required number of dimensions",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "Current dimension",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the squeezed array",
                "type": "Array | *"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12207,
            "description": "Unsqueeze a multi dimensional array: add dimensions when missing\n\nParamter `size` will be mutated to match the new, unqueezed matrix size.",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dims",
                    "description": "Desired number of dimensions of the array",
                    "type": "Number"
                },
                {
                    "name": "outer",
                    "description": "Number of outer dimensions to be added",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "size",
                    "description": "Current size of array.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "returns the array itself",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12239,
            "description": "Recursively unsqueeze a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dims",
                    "description": "Required number of dimensions",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "Current dimension",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the squeezed array",
                "type": "Array | *"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12264,
            "description": "Flatten a multi dimensional array, put all elements in a one dimensional\narray",
            "params": [
                {
                    "name": "array",
                    "description": "A multi dimensional array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The flattened array (1 dimensional)",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12289,
            "description": "Test whether an object is an array",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "isArray",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12297,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12299,
            "description": "'use strict';\n/**\n\t\t * Determine the type of a variable\n\t\t *\n\t\t *     type(x)\n\t\t *\n\t\t * The following types are recognized:\n\t\t *\n\t\t *     'undefined'\n\t\t *     'null'\n\t\t *     'boolean'\n\t\t *     'number'\n\t\t *     'string'\n\t\t *     'Array'\n\t\t *     'Function'\n\t\t *     'Date'\n\t\t *     'RegExp'\n\t\t *     'Object'\n\t\t *\n\t\t * @param {*} x\n\t\t * @return {string} Returns the name of the type. Primitive types are lower case,\n\t\t *                  non-primitive types are upper-camel-case.\n\t\t *                  For example 'number', 'string', 'Array', 'Date'.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12346,
            "description": "Test whether a value is a scalar",
            "params": [
                {
                    "name": "x",
                    "description": ""
                }
            ],
            "return": {
                "description": "Returns true when x is a scalar, returns false when\n                  x is a Matrix or Array.",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12357,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12359,
            "description": "'use strict';\n/**\n\t\t * Create a range error with the message:\n\t\t *     'Dimension mismatch (<actual size> != <expected size>)'\n\t\t * @param {number | number[]} actual        The actual size\n\t\t * @param {number | number[]} expected      The expected size\n\t\t * @param {string} [relation='!=']          Optional relation between actual\n\t\t *                                          and expected size: '!=', '<', etc.\n\t\t * @extends RangeError",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12398,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12400,
            "description": "'use strict';\n/**\n\t\t * Create a range error with the message:\n\t\t *     'Index out of range (index < min)'\n\t\t *     'Index out of range (index < max)'\n\t\t *\n\t\t * @param {number} index     The actual index\n\t\t * @param {number} [min=0]   Minimum index (included)\n\t\t * @param {number} [max]     Maximum index (excluded)\n\t\t * @extends RangeError",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12450,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12452,
            "description": "'use strict';\n/**\n\t\t * Test whether value is a boolean\n\t\t * @param {*} value\n\t\t * @return {boolean} isBoolean",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12466,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12468,
            "description": "// function utils\n/*\n\t\t * Memoize a given function by caching the computed result.\n\t\t * The cache of a memoized function can be cleared by deleting the `cache`\n\t\t * property of the function.\n\t\t *\n\t\t * @param {function} fn                     The function to be memoized.\n\t\t *                                          Must be a pure function.\n\t\t * @param {function(args: Array)} [hasher]  A custom hash builder.\n\t\t *                                          Is JSON.stringify by default.\n\t\t * @return {function}                       Returns the memoized function",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12502,
            "description": "Find the maximum number of arguments expected by a typed function.",
            "params": [
                {
                    "name": "fn",
                    "description": "A typed function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the maximum number of expected arguments.\n                 Returns -1 when no signatures where found on the function.",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12517,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12519,
            "description": "'use strict';\nvar util = __webpack_require__(39);\n\t\tvar DimensionError = __webpack_require__(42);\nvar string = util.string;\n\t\tvar array = util.array;\n\t\tvar object = util.object;\n\t\tvar number = util.number;\nvar isArray = Array.isArray;\n\t\tvar isNumber = number.isNumber;\n\t\tvar isInteger = number.isInteger;\n\t\tvar isString = string.isString;\nvar validateIndex = array.validateIndex;\nfunction factory (type, config, load, typed) {\n\t\t  var Matrix = load(__webpack_require__(38)); // force loading Matrix (do not use via type.Matrix)\n  /**\n\t\t   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n\t\t   * @class DenseMatrix",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12596,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12602,
            "description": "Get the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "memberof": "DenseMatrix",
            "return": {
                "description": "The storage format.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12615,
            "description": "Get the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "memberof": "DenseMatrix",
            "return": {
                "description": "The datatype.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12628,
            "description": "Create a new DenseMatrix",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "datatype",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12638,
            "description": "Get a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "",
                    "type": "Array | DenseMatrix | *",
                    "optional": true
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12667,
            "description": "Get a single element from the matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "value",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12693,
            "description": "Replace a single element in the matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be left undefined.",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "self",
                "type": "DenseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12733,
            "description": "Get a submatrix of this matrix",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "DenseMatrix"
                },
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Index"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12771,
            "description": "Recursively get a submatrix of a multi dimensional matrix.\nIndex is not checked for correct number or length of dimensions.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "dims",
                    "description": "Total number of dimensions",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "Current dimension",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "submatrix",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12799,
            "description": "Replace a submatrix in this matrix\nIndexes are zero-based.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "DenseMatrix"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "submatrix",
                    "description": "",
                    "type": "DenseMatrix | Array | *"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "DenseMatrix"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12884,
            "description": "Replace a submatrix of a multi dimensional matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "submatrix",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dims",
                    "description": "Total number of dimensions",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12912,
            "description": "Resize the matrix to the given size. Returns a copy of the matrix when\n`copy=true`, otherwise return the matrix itself (resize in place).",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "size",
                    "description": "The new size the matrix should have.",
                    "type": "Number[]"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries.\n                                 If not provided, the matrix elements will\n                                 be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "copy",
                    "description": "Return a resized copy of the matrix",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The resized matrix",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12954,
            "description": "Enlarge the matrix when it is smaller than given size.\nIf the matrix is larger or equal sized, nothing is done.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "The matrix to be resized",
                    "type": "DenseMatrix"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number[]"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries.",
                    "type": "*"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 12987,
            "description": "Create a clone of the matrix",
            "memberof": "DenseMatrix",
            "return": {
                "description": "clone",
                "type": "DenseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13001,
            "description": "Retrieve the size of the matrix.",
            "memberof": "DenseMatrix",
            "return": {
                "description": "size",
                "type": "Number[]"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13010,
            "description": "Create a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "DenseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13041,
            "description": "Execute a callback function on each entry of the matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13064,
            "description": "Create an Array with a copy of the data of the DenseMatrix",
            "memberof": "DenseMatrix",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13073,
            "description": "Get the primitive value of the DenseMatrix: a multidimensional array",
            "memberof": "DenseMatrix",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13082,
            "description": "Get a string representation of the matrix, with optional formatting options.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13095,
            "description": "Get a string representation of the matrix",
            "memberof": "DenseMatrix",
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13104,
            "description": "Get a JSON representation of the matrix",
            "memberof": "DenseMatrix",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13118,
            "description": "Get the kth Matrix diagonal.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "k",
                    "description": "The kth diagonal where the vector will retrieved.",
                    "type": "Number | BigNumber",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The array vector with the diagonal values.",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13168,
            "description": "Create a diagonal matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "size",
                    "description": "The matrix size.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The values for the diagonal.",
                    "type": "Number | Array"
                },
                {
                    "name": "k",
                    "description": "The kth diagonal where the vector will be filled in.",
                    "type": "Number | BigNumber",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "defaultValue",
                    "description": "The default value for non-diagonal",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DenseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13293,
            "description": "Generate a matrix from a JSON object",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "json",
                    "description": "An object structured like\n                      `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n                      where mathjs is optional",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DenseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13305,
            "description": "Swap rows i and j in Matrix.",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "i",
                    "description": "Matrix row index 1",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "Matrix row index 2",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The matrix reference",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13333,
            "description": "Swap rows i and j in Dense Matrix data structure.",
            "params": [
                {
                    "name": "i",
                    "description": "Matrix row index 1",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "Matrix row index 2",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13346,
            "description": "Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\nMatrices. Replaces all nested Matrices with Arrays",
            "memberof": "DenseMatrix",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "data",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13380,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13382,
            "description": "'use strict';\nvar util = __webpack_require__(39);\n\t\tvar DimensionError = __webpack_require__(42);\nvar array = util.array;\n\t\tvar object = util.object;\n\t\tvar string = util.string;\n\t\tvar number = util.number;\nvar isArray = Array.isArray;\n\t\tvar isNumber = number.isNumber;\n\t\tvar isInteger = number.isInteger;\n\t\tvar isString = string.isString;\nvar validateIndex = array.validateIndex;\nfunction factory (type, config, load, typed) {\n\t\t  var Matrix = load(__webpack_require__(38)); // force loading Matrix (do not use via type.Matrix)\n\t\t  var equalScalar = load(__webpack_require__(48));\n  /**\n\t\t   * Sparse Matrix implementation. This type implements a Compressed Column Storage format\n\t\t   * for sparse matrices.\n\t\t   * @class SparseMatrix",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13539,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13545,
            "description": "Get the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "memberof": "SparseMatrix",
            "return": {
                "description": "The storage format.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13558,
            "description": "Get the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "memberof": "SparseMatrix",
            "return": {
                "description": "The datatype.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13571,
            "description": "Create a new SparseMatrix",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "datatype",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13581,
            "description": "Get the matrix density.\n\nUsage:\n    var density = matrix.density()                   // retrieve matrix density",
            "memberof": "SparseMatrix",
            "return": {
                "description": "The matrix density.",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13598,
            "description": "Get a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "",
                    "type": "Array | Maytrix | *",
                    "optional": true
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13797,
            "description": "Get a single element from the matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "value",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13830,
            "description": "Replace a single element in the matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be set to zero.",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "self",
                "type": "SparseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 13938,
            "description": "Resize the matrix to the given size. Returns a copy of the matrix when \n`copy=true`, otherwise return the matrix itself (resize in place).",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "size",
                    "description": "The new size the matrix should have.",
                    "type": "Number[]"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries.\n                                 If not provided, the matrix elements will\n                                 be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "copy",
                    "description": "Return a resized copy of the matrix",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The resized matrix",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14092,
            "description": "Create a clone of the matrix",
            "memberof": "SparseMatrix",
            "return": {
                "description": "clone",
                "type": "SparseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14108,
            "description": "Retrieve the size of the matrix.",
            "memberof": "SparseMatrix",
            "return": {
                "description": "size",
                "type": "Number[]"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14117,
            "description": "Create a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                },
                {
                    "name": "skipZeros",
                    "description": "Invoke callback function for non-zero values only.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "matrix",
                "type": "SparseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14146,
            "description": "Create a new matrix with the results of the callback function executed on the interval\n[minRow..maxRow, minColumn..maxColumn].",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14223,
            "description": "Execute a callback function on each entry of the matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                },
                {
                    "name": "skipZeros",
                    "description": "Invoke callback function for non-zero values only.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14271,
            "description": "Create an Array with a copy of the data of the SparseMatrix",
            "memberof": "SparseMatrix",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14280,
            "description": "Get the primitive value of the SparseMatrix: a two dimensions array",
            "memberof": "SparseMatrix",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14320,
            "description": "Get a string representation of the matrix, with optional formatting options.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14353,
            "description": "Get a string representation of the matrix",
            "memberof": "SparseMatrix",
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14362,
            "description": "Get a JSON representation of the matrix",
            "memberof": "SparseMatrix",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14378,
            "description": "Get the kth Matrix diagonal.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "k",
                    "description": "The kth diagonal where the vector will retrieved.",
                    "type": "Number | BigNumber",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The matrix vector with the diagonal values.",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14449,
            "description": "Generate a matrix from a JSON object",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "json",
                    "description": "An object structured like\n                      `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n                      where mathjs is optional",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "SparseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14461,
            "description": "Create a diagonal matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "size",
                    "description": "The matrix size.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The values for the diagonal.",
                    "type": "Number | Array | Matrix"
                },
                {
                    "name": "k",
                    "description": "The kth diagonal where the vector will be filled in.",
                    "type": "Number | BigNumber",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "datatype",
                    "description": "The Matrix datatype, values must be of this datatype.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "SparseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14602,
            "description": "Swap rows i and j in Matrix.",
            "memberof": "SparseMatrix",
            "params": [
                {
                    "name": "i",
                    "description": "Matrix row index 1",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "Matrix row index 2",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The matrix reference",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14630,
            "description": "Loop rows with data in column j.",
            "params": [
                {
                    "name": "j",
                    "description": "Column",
                    "type": "Number"
                },
                {
                    "name": "values",
                    "description": "Matrix values",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "Matrix row indeces",
                    "type": "Array"
                },
                {
                    "name": "ptr",
                    "description": "Matrix column pointers",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Callback function invoked for every row in column j",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14650,
            "description": "Swap rows x and y in Sparse Matrix data structures.",
            "params": [
                {
                    "name": "x",
                    "description": "Matrix row index 1",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Matrix row index 2",
                    "type": "Number"
                },
                {
                    "name": "columns",
                    "description": "Number of columns in matrix",
                    "type": "Number"
                },
                {
                    "name": "values",
                    "description": "Matrix values",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "Matrix row indeces",
                    "type": "Array"
                },
                {
                    "name": "ptr",
                    "description": "Matrix column pointers",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14724,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14726,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  /**\n\t\t   * Test whether two values are equal.\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n\t\t   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n\t\t   * @private",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14783,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14785,
            "description": "'use strict';\n/**\n\t\t * Compares two BigNumbers.\n\t\t * @param {BigNumber} x       First value to compare\n\t\t * @param {BigNumber} y       Second value to compare\n\t\t * @param {number} [epsilon]  The maximum relative difference between x and y\n\t\t *                            If epsilon is undefined or null, the function will\n\t\t *                            test whether x and y are exactly equal.\n\t\t * @return {boolean} whether the two numbers are nearly equal",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14834,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14836,
            "description": "'use strict';\nfunction factory (type, config, load) {\n\t\t  \n\t\t  var add = load(__webpack_require__(51));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  \n\t\t  /**\n\t\t   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array \n\t\t   * of the vector elements and an ordered list of non-zero elements.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14858,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14864,
            "description": "Set the value for index i.",
            "params": [
                {
                    "name": "i",
                    "description": "The index",
                    "type": "Number"
                },
                {
                    "name": "The",
                    "description": "value at index i",
                    "type": "Number | BigNumber | Complex"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14981,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 14983,
            "description": "'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var addScalar = load(__webpack_require__(53));\n\t\t  var latex = __webpack_require__(32);\n\t\t  \n\t\t  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm04 = load(__webpack_require__(55));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Add two or more values, `x + y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.add(x, y)\n\t\t   *    math.add(x, y, z, ...)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.add(2, 3);               // returns number 5\n\t\t   *    math.add(2, 3, 4);            // returns number 9\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    var b = math.complex(-4, 1);\n\t\t   *    math.add(a, b);               // returns Complex -2 + 4i\n\t\t   *\n\t\t   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\t\t   *\n\t\t   *    var c = math.unit('5 cm');\n\t\t   *    var d = math.unit('2.1 mm');\n\t\t   *    math.add(c, d);               // returns Unit 52.1 mm\n\t\t   *\n\t\t   *    math.add(\"2.3\", \"4\");         // returns number 6.3\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    subtract, sum\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15151,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15153,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a Matrix. The function creates a new `math.type.Matrix` object from\n\t\t   * an `Array`. A Matrix has utility functions to manipulate the data in the\n\t\t   * matrix, like getting the size and getting or setting values in the matrix.\n\t\t   * Supported storage formats are 'dense' and 'sparse'.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n\t\t   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n\t\t   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n\t\t   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n\t\t   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n\t\t   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var m = math.matrix([[1, 2], [3, 4]]);\n\t\t   *    m.size();                        // Array [2, 2]\n\t\t   *    m.resize([3, 2], 5);\n\t\t   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n\t\t   *    m.get([1, 0])                    // number 3\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, index, number, string, unit, sparse\n\t\t   *\n\t\t   * @param {Array | Matrix} [data]    A multi dimensional array\n\t\t   * @param {string} [format]          The Matrix storage format\n\t\t   *\n\t\t   * @return {Matrix} The created matrix",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15224,
            "description": "Create a new Matrix with given storage format",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "datatype",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new Matrix",
                "type": "Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15245,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15247,
            "description": "'use strict';\nfunction factory(type, config, load, typed) {\n  /**\n\t\t   * Add two scalar values, `x + y`.\n\t\t   * This function is meant for internal use: it is used by the public function\n\t\t   * `add`\n\t\t   *\n\t\t   * This function does not support collections (Array or Matrix), and does\n\t\t   * not validate the number of of inputs.\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n\t\t   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`\n\t\t   * @private",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15302,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15304,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n\t\t   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤\n\t\t   *          └  Dij          ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n\t\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15422,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15424,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t\t   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n\t\t   *          └  B(i,j)       ; B(i,j) !== 0\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15615,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15617,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t\t   * Callback function invoked NZ times (number of nonzero items in S).\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  b          ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t\t   * @param {Scalar}   b                 The Scalar value\n\t\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15731,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15733,
            "description": "'use strict';\nvar util = __webpack_require__(39);\n\t\tvar DimensionError = __webpack_require__(42);\nvar string = util.string,\n\t\t    isString = string.isString;\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). \n\t\t   * Callback function invoked MxN times.\n\t\t   *\n\t\t   * C(i,j,...z) = f(Aij..z, Bij..z)\n\t\t   *\n\t\t   * @param {Matrix}   a                 The DenseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The DenseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15841,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15843,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). \n\t\t   * Callback function invoked MxN times.\n\t\t   *\n\t\t   * C(i,j,...z) = f(Aij..z, b)\n\t\t   *\n\t\t   * @param {Matrix}   a                 The DenseMatrix instance (A)\n\t\t   * @param {Scalar}   b                 The Scalar value\n\t\t   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15929,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15931,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var smaller = load(__webpack_require__(60));\n\t\t  var larger = load(__webpack_require__(64));\n\t\t  \n\t\t  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\t\t  \n\t\t  /**\n\t\t   * Fibonacci Heap implementation, used interally for Matrix math.\n\t\t   * @class FibonacciHeap\n\t\t   * @constructor FibonacciHeap",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15956,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 15962,
            "description": "Inserts a new data element into the heap. No heap consolidation is\nperformed at this time, the new node is simply inserted into the root\nlist of this heap. Running time: O(1) actual.",
            "memberof": "FibonacciHeap",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16003,
            "description": "Returns the number of nodes in heap. Running time: O(1) actual.",
            "memberof": "FibonacciHeap",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16011,
            "description": "Removes all elements from this heap.",
            "memberof": "FibonacciHeap",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16020,
            "description": "Returns true if the heap is empty, otherwise false.",
            "memberof": "FibonacciHeap",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16028,
            "description": "Extracts the node with minimum key from heap. Amortized running \ntime: O(log n).",
            "memberof": "FibonacciHeap",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16084,
            "description": "Removes a node from the heap given the reference to the node. The trees\nin the heap will be consolidated, if necessary. This operation may fail\nto remove the correct element if there are nodes with key value -Infinity.\nRunning time: O(log n) amortized.",
            "memberof": "FibonacciHeap",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16098,
            "description": "Decreases the key value for a heap node, given the new value to take on.\nThe structure of the heap may be changed and will not be consolidated. \nRunning time: O(1) amortized.",
            "memberof": "FibonacciHeap",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16122,
            "description": "The reverse of the link operation: removes node from the child list of parent.\nThis method assumes that min is non-null. Running time: O(1).",
            "memberof": "FibonacciHeap",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16149,
            "description": "Performs a cascading cut operation. This cuts node from its parent and then\ndoes the same for its parent, and so on up the tree.\nRunning time: O(log n); O(1) excluding the recursion.",
            "memberof": "FibonacciHeap",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16173,
            "description": "Make the first node a child of the second one. Running time: O(1) actual.",
            "memberof": "FibonacciHeap",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16284,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16286,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether value x is smaller than y.\n\t\t   *\n\t\t   * The function returns true when x is smaller than y and the relative\n\t\t   * difference between x and y is smaller than the configured epsilon. The\n\t\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.smaller(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.smaller(2, 3);            // returns true\n\t\t   *    math.smaller(5, 2 * 2);        // returns false\n\t\t   *\n\t\t   *    var a = math.unit('5 cm');\n\t\t   *    var b = math.unit('2 inch');\n\t\t   *    math.smaller(a, b);            // returns true\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16469,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16471,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n\t\t   * Callback function invoked M*N times.\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤\n\t\t   *          └  f(Dij, 0)    ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n\t\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16600,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16602,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked MxN times.\n\t\t   *\n\t\t   * C(i,j) = f(Aij, Bij)\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16730,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16732,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t\t   * Callback function invoked MxN times.\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  f(0, b)    ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t\t   * @param {Scalar}   b                 The Scalar value\n\t\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16846,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 16848,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether value x is larger than y.\n\t\t   *\n\t\t   * The function returns true when x is larger than y and the relative\n\t\t   * difference between x and y is larger than the configured epsilon. The\n\t\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.larger(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.larger(2, 3);             // returns false\n\t\t   *    math.larger(5, 2 + 2);         // returns true\n\t\t   *\n\t\t   *    var a = math.unit('5 cm');\n\t\t   *    var b = math.unit('2 inch');\n\t\t   *    math.larger(a, b);             // returns false\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal, smaller, smallerEq, largerEq, compare\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17031,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17033,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\n\t\tvar object = util.object;\nvar isArray = Array.isArray;\n\t\tvar isString = string.isString;\nfunction factory (type, config, load) {\n  var DenseMatrix = load(__webpack_require__(46));\n  var smaller = load(__webpack_require__(60));\n  function ImmutableDenseMatrix(data, datatype) {\n\t\t    if (!(this instanceof ImmutableDenseMatrix))\n\t\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t\t    if (datatype && !isString(datatype))\n\t\t      throw new Error('Invalid datatype: ' + datatype);\n    if ((data && data.isMatrix === true) || isArray(data)) {\n\t\t      // use DenseMatrix implementation\n\t\t      var matrix = new DenseMatrix(data, datatype);\n\t\t      // internal structures\n\t\t      this._data = matrix._data;\n\t\t      this._size = matrix._size;\n\t\t      this._datatype = matrix._datatype;\n\t\t      this._min = null;\n\t\t      this._max = null;\n\t\t    }\n\t\t    else if (data && isArray(data.data) && isArray(data.size)) {\n\t\t      // initialize fields from JSON representation\n\t\t      this._data = data.data;\n\t\t      this._size = data.size;\n\t\t      this._datatype = data.datatype;\n\t\t      this._min = typeof data.min !== 'undefined' ? data.min : null;\n\t\t      this._max = typeof data.max !== 'undefined' ? data.max : null;\n\t\t    }\n\t\t    else if (data) {\n\t\t      // unsupported type\n\t\t      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n\t\t    }\n\t\t    else {\n\t\t      // nothing provided\n\t\t      this._data = [];\n\t\t      this._size = [0];\n\t\t      this._datatype = datatype;\n\t\t      this._min = null;\n\t\t      this._max = null;\n\t\t    }\n\t\t  }\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n  /**\n\t\t   * Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17097,
            "description": "Get a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "",
                    "type": "Array | ImmutableDenseMatrix | *",
                    "optional": true
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17136,
            "description": "Replace a single element in the matrix.",
            "params": [
                {
                    "name": "index",
                    "description": "Zero-based index",
                    "type": "Number[]"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries when\n                                 the matrix is resized. If not provided,\n                                 new matrix elements will be left undefined.",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "self",
                "type": "ImmutableDenseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17149,
            "description": "Resize the matrix to the given size. Returns a copy of the matrix when\n`copy=true`, otherwise return the matrix itself (resize in place).",
            "params": [
                {
                    "name": "size",
                    "description": "The new size the matrix should have.",
                    "type": "Number[]"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value, filled in on new entries.\n                                 If not provided, the matrix elements will\n                                 be filled with zeros.",
                    "type": "*",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "copy",
                    "description": "Return a resized copy of the matrix",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The resized matrix",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17165,
            "description": "Create a clone of the matrix",
            "return": {
                "description": "clone",
                "type": "ImmutableDenseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17178,
            "description": "Get a JSON representation of the matrix",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17191,
            "description": "Generate a matrix from a JSON object",
            "params": [
                {
                    "name": "json",
                    "description": "An object structured like\n                      `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n                      where mathjs is optional",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "ImmutableDenseMatrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17202,
            "description": "Swap rows i and j in Matrix.",
            "params": [
                {
                    "name": "i",
                    "description": "Matrix row index 1",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "Matrix row index 2",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The matrix reference",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17214,
            "description": "Calculate the minimum value in the set",
            "return": {
                "description": "min",
                "type": "Number | undefined"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17233,
            "description": "Calculate the maximum value in the set",
            "return": {
                "description": "max",
                "type": "Number | undefined"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17261,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17263,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type) {\n\t\t  \n\t\t  /**\n\t\t   * Create an index. An Index can store ranges and sets for multiple dimensions.\n\t\t   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n\t\t   *\n\t\t   * Usage:\n\t\t   *     var index = new Index(range1, range2, matrix1, array1, ...);\n\t\t   *\n\t\t   * Where each parameter can be any of:\n\t\t   *     A number\n\t\t   *     A string (containing a name of an object property)\n\t\t   *     An instance of Range\n\t\t   *     An Array with the Set values\n\t\t   *     A Matrix with the Set values\n\t\t   *\n\t\t   * The parameters start, end, and step must be integer numbers.\n\t\t   *\n\t\t   * @class Index\n\t\t   * @Constructor Index\n\t\t   * @param {...*} ranges",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17332,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17349,
            "description": "Create a clone of the index",
            "memberof": "Index",
            "return": {
                "description": "clone",
                "type": "Index"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17361,
            "description": "Create an index from an array with ranges/numbers",
            "memberof": "Index",
            "params": [
                {
                    "name": "ranges",
                    "description": "",
                    "type": "Array.<Array | number>"
                }
            ],
            "return": {
                "description": "index",
                "type": "Index"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17374,
            "description": "Retrieve the size of the index, the number of elements for each dimension.",
            "memberof": "Index",
            "return": {
                "description": "size",
                "type": "Number[]"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17390,
            "description": "Get the maximum value for each of the indexes ranges.",
            "memberof": "Index",
            "return": {
                "description": "max",
                "type": "Number[]"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17406,
            "description": "Get the minimum value for each of the indexes ranges.",
            "memberof": "Index",
            "return": {
                "description": "min",
                "type": "Number[]"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17422,
            "description": "Loop over each of the ranges of the index",
            "memberof": "Index",
            "params": [
                {
                    "name": "callback",
                    "description": "Called for each range with a Range as first\n                             argument, the dimension as second, and the\n                             index object as third.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17435,
            "description": "Retrieve the dimension for the given index",
            "memberof": "Index",
            "params": [
                {
                    "name": "dim",
                    "description": "Number of the dimension",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "range",
                "type": "Range | null"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17445,
            "description": "Test whether this index contains an object property",
            "return": {
                "description": "Returns true if the index is an object property",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17453,
            "description": "Returns the object property name when the Index holds a single object property,\nelse returns null",
            "return": {
                "description": "",
                "type": "String | null"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17462,
            "description": "Test whether this index contains only a single value.\n\nThis is the case when the index is created with only scalar values as ranges,\nnot for ranges resolving into a single value.",
            "memberof": "Index",
            "return": {
                "description": "isScalar",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17474,
            "description": "Expand the Index into an array.\nFor example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]",
            "memberof": "Index",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17489,
            "description": "Get the primitive value of the Index, a two dimensional array.\nEquivalent to Index.toArray().",
            "memberof": "Index",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17497,
            "description": "Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'",
            "memberof": "Index",
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17518,
            "description": "Get a JSON representation of the Index",
            "memberof": "Index",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17531,
            "description": "Instantiate an Index from a JSON object",
            "memberof": "Index",
            "params": [
                {
                    "name": "json",
                    "description": "A JSON object structured as:\n                    `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Index"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17550,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17552,
            "description": "'use strict';\nvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a range. A range has a start, step, and end, and contains functions\n\t\t   * to iterate over the range.\n\t\t   *\n\t\t   * A range can be constructed as:\n\t\t   *     var range = new Range(start, end);\n\t\t   *     var range = new Range(start, end, step);\n\t\t   *\n\t\t   * To get the result of the range:\n\t\t   *     range.forEach(function (x) {\n\t\t   *         console.log(x);\n\t\t   *     });\n\t\t   *     range.map(function (x) {\n\t\t   *         return math.sin(x);\n\t\t   *     });\n\t\t   *     range.toArray();\n\t\t   *\n\t\t   * Example usage:\n\t\t   *     var c = new Range(2, 6);         // 2:1:5\n\t\t   *     c.toArray();                     // [2, 3, 4, 5]\n\t\t   *     var d = new Range(2, -3, -1);    // 2:-1:-2\n\t\t   *     d.toArray();                     // [2, 1, 0, -1, -2]\n\t\t   *\n\t\t   * @class Range\n\t\t   * @constructor Range\n\t\t   * @param {number} start  included lower bound\n\t\t   * @param {number} end    excluded upper bound\n\t\t   * @param {number} [step] step size, default value is 1",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17617,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17623,
            "description": "Parse a string into a range,\nThe string contains the start, optional step, and end, separated by a colon.\nIf the string does not contain a valid range, null is returned.\nFor example str='0:2:11'.",
            "memberof": "Range",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "range",
                "type": "Range | null"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17659,
            "description": "Create a clone of the range",
            "return": {
                "description": "clone",
                "type": "Range"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17667,
            "description": "Retrieve the size of the range.\nReturns an array containing one number, the number of elements in the range.",
            "memberof": "Range",
            "return": {
                "description": "size",
                "type": "Number[]"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17693,
            "description": "Calculate the minimum value in the range",
            "memberof": "Range",
            "return": {
                "description": "min",
                "type": "Number | undefined"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17716,
            "description": "Calculate the maximum value in the range",
            "memberof": "Range",
            "return": {
                "description": "max",
                "type": "Number | undefined"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17740,
            "description": "Execute a callback function for each value in the range.",
            "memberof": "Range",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback method is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Range being traversed.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17769,
            "description": "Execute a callback function for each value in the Range, and return the\nresults as an array",
            "memberof": "Range",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback method is invoked with three\n                             parameters: the value of the element, the index\n                             of the element, and the Matrix being traversed.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17786,
            "description": "Create an Array with a copy of the Ranges data",
            "memberof": "Range",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17799,
            "description": "Get the primitive value of the Range, a one dimensional array",
            "memberof": "Range",
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17809,
            "description": "Get a string representation of the range, with optional formatting options.\nOutput is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'",
            "memberof": "Range",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | function",
                    "optional": true
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17829,
            "description": "Get a string representation of the range.",
            "memberof": "Range",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17838,
            "description": "Get a JSON representation of the range",
            "memberof": "Range",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17853,
            "description": "Instantiate a Range from a JSON object",
            "memberof": "Range",
            "params": [
                {
                    "name": "json",
                    "description": "A JSON object structured as:\n                     `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17872,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17874,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create an index. An Index can store ranges having start, step, and end\n\t\t   * for multiple dimensions.\n\t\t   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.index(range1, range2, ...)\n\t\t   *\n\t\t   * Where each range can be any of:\n\t\t   *\n\t\t   * - A number\n\t\t   * - A string for getting/setting an object property\n\t\t   * - An instance of `Range`\n\t\t   * - A one-dimensional Array or a Matrix with numbers\n\t\t   *\n\t\t   * Indexes must be zero-based, integer numbers.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var math = math.js\n\t\t   *\n\t\t   *    var b = [1, 2, 3, 4, 5];\n\t\t   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]\n\t\t   *\n\t\t   *    var a = math.matrix([[1, 2], [3, 4]]);\n\t\t   *    a.subset(math.index(0, 1));             // returns 2\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, matrix, number, string, unit\n\t\t   *\n\t\t   * @param {...*} ranges   Zero or more ranges or numbers.\n\t\t   * @return {Index}        Returns the created index",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17942,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 17944,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from\n\t\t   * an `Array`. A Matrix has utility functions to manipulate the data in the\n\t\t   * matrix, like getting the size and getting or setting values in the matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sparse()               // creates an empty sparse matrix.\n\t\t   *    math.sparse(data)           // creates a sparse matrix with initial data.\n\t\t   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var m = math.sparse([[1, 2], [3, 4]]);\n\t\t   *    m.size();                        // Array [2, 2]\n\t\t   *    m.resize([3, 2], 5);\n\t\t   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n\t\t   *    m.get([1, 0])                    // number 3\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, index, number, string, unit, matrix\n\t\t   *\n\t\t   * @param {Array | Matrix} [data]    A two dimensional array\n\t\t   *\n\t\t   * @return {Matrix} The created matrix",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18009,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18011,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a number or convert a string, boolean, or unit to a number.\n\t\t   * When value is a matrix, all elements will be converted to number.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.number(value)\n\t\t   *    math.number(unit, valuelessUnit)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.number(2);                         // returns number 2\n\t\t   *    math.number('7.2');                     // returns number 7.2\n\t\t   *    math.number(true);                      // returns number 1\n\t\t   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]\n\t\t   *    math.number(math.unit('52cm'), 'm');    // returns 0.52\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, index, matrix, string, unit\n\t\t   *\n\t\t   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n\t\t   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n\t\t   * @return {number | Array | Matrix} The created number",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18094,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18096,
            "description": "module.exports = [\n\t\t  // type\n\t\t  __webpack_require__(72)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18106,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * A ResultSet contains a list or results\n\t\t   * @class ResultSet\n\t\t   * @param {Array} entries\n\t\t   * @constructor ResultSet",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18125,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18131,
            "description": "Returns the array with results hold by this ResultSet",
            "memberof": "ResultSet",
            "return": {
                "description": "entries",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18140,
            "description": "Returns the stringified results of the ResultSet",
            "memberof": "ResultSet",
            "return": {
                "description": "string",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18149,
            "description": "Get a JSON representation of the ResultSet",
            "memberof": "ResultSet",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18162,
            "description": "Instantiate a ResultSet from a JSON object",
            "memberof": "ResultSet",
            "params": [
                {
                    "name": "json",
                    "description": "A JSON object structured as:\n                      `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "ResultSet"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18181,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18183,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a string or convert any object into a string.\n\t\t   * Elements of Arrays and Matrices are processed element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.string(value)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.string(4.2);               // returns string '4.2'\n\t\t   *    math.string(math.complex(3, 2); // returns string '3 + 2i'\n\t\t   *\n\t\t   *    var u = math.unit(5, 'km');\n\t\t   *    math.string(u.to('m'));         // returns string '5000 m'\n\t\t   *\n\t\t   *    math.string([true, false]);     // returns ['true', 'false']\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, index, matrix, number, unit\n\t\t   *\n\t\t   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n\t\t   * @return {string | Array | Matrix} The created string",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18256,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18258,
            "description": "module.exports = [\n\t\t  // type\n\t\t  __webpack_require__(75),\n  // construction function\n\t\t  __webpack_require__(96),\n  // create new units\n\t\t  __webpack_require__(97),\n  // split units\n\t\t  __webpack_require__(98),\n  // physical constants\n\t\t  __webpack_require__(99)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18280,
            "description": "'use strict';\nvar endsWith = __webpack_require__(23).endsWith;\n\t\tvar clone = __webpack_require__(3).clone;\n\t\tvar constants = __webpack_require__(76);\nfunction factory (type, config, load, typed, math) {\n\t\t  var add       = load(__webpack_require__(53));\n\t\t  var subtract  = load(__webpack_require__(77));\n\t\t  var multiply  = load(__webpack_require__(80));\n\t\t  var divide    = load(__webpack_require__(81));\n\t\t  var pow       = load(__webpack_require__(82));\n\t\t  var abs       = load(__webpack_require__(86));\n\t\t  var fix       = load(__webpack_require__(87));\n\t\t  var equal     = load(__webpack_require__(88));\n\t\t  var isNumeric = load(__webpack_require__(89));\n\t\t  var format    = load(__webpack_require__(90));\n\t\t  var getTypeOf = load(__webpack_require__(91));\n\t\t  var toNumber  = load(__webpack_require__(70));\n\t\t  var Complex   = load(__webpack_require__(27));\n  /**\n\t\t   * A unit can be constructed in the following ways:\n\t\t   *     var a = new Unit(value, name);\n\t\t   *     var b = new Unit(null, name);\n\t\t   *     var c = Unit.parse(str);\n\t\t   *\n\t\t   * Example usage:\n\t\t   *     var a = new Unit(5, 'cm');               // 50 mm\n\t\t   *     var b = Unit.parse('23 kg');             // 23 kg\n\t\t   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m\n\t\t   *     var d = new Unit(9.81, \"m/s^2\");         // 9.81 m/s^2\n\t\t   *\n\t\t   * @class Unit\n\t\t   * @constructor Unit\n\t\t   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n\t\t   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18363,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18507,
            "description": "Parse a string into a unit. The value of the unit is parsed as number,\nBigNumber, or Fraction depending on the math.js config setting `number`.\n\nThrows an exception if the provided string does not contain a valid unit or\ncannot be parsed.",
            "memberof": "Unit",
            "params": [
                {
                    "name": "str",
                    "description": "A string like \"5.2 inch\", \"4e2 cm/s^2\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "unit",
                "type": "Unit"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18693,
            "description": "create a copy of this unit",
            "memberof": "Unit",
            "return": {
                "description": "Returns a cloned version of the unit",
                "type": "Unit"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18719,
            "description": "Return whether the unit is derived (such as m/s, or cm^2, but not N)",
            "memberof": "Unit",
            "return": {
                "description": "True if the unit is derived",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18731,
            "description": "Normalize a value, based on its currently set unit(s)",
            "memberof": "Unit",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number | BigNumber | Fraction | boolean"
                }
            ],
            "return": {
                "description": "normalized value",
                "type": "Number | BigNumber | Fraction | boolean"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18772,
            "description": "Denormalize a value, based on its currently set unit(s)",
            "memberof": "Unit",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "prefixValue",
                    "description": "Optional prefix value to be used (ignored if this is a derived unit)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "denormalized value",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18820,
            "description": "Find a unit from a string",
            "memberof": "Unit",
            "params": [
                {
                    "name": "str",
                    "description": "A string like 'cm' or 'inch'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "result  When found, an object with fields unit and\n                                 prefix is returned. Else, null is returned.",
                "type": "Object | null"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18861,
            "description": "Test if the given expression is a unit.\nThe unit can have a prefix but cannot have a value.",
            "memberof": "Unit",
            "params": [
                {
                    "name": "name",
                    "description": "A string to be tested whether it is a value less unit.\n                       The unit can have prefix, like \"cm\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the given string is a unit",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18873,
            "description": "check if this unit has given base unit\nIf this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.",
            "memberof": "Unit",
            "params": [
                {
                    "name": "base",
                    "description": "",
                    "type": "BASE_UNITS | string | undefined"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18899,
            "description": "Check if this unit has a base or bases equal to another base or bases\nFor derived units, the exponent on each base also must match",
            "memberof": "Unit",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "true if equal base",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18916,
            "description": "Check if this unit equals another unit",
            "memberof": "Unit",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "true if both units are equal",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18926,
            "description": "Multiply this unit with another one",
            "memberof": "Unit",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "product of this unit and the other unit",
                "type": "Unit"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 18966,
            "description": "Divide this unit by another one",
            "memberof": "Unit",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "result of dividing this unit by the other unit",
                "type": "Unit"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19007,
            "description": "Calculate the power of a unit",
            "memberof": "Unit",
            "params": [
                {
                    "name": "p",
                    "description": "",
                    "type": "Number | Fraction | BigNumber"
                }
            ],
            "return": {
                "description": "The result: this^p",
                "type": "Unit"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19045,
            "description": "Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "The numeric value of the unit if conditions are met, or the original unit otherwise",
                "type": "Number | Fraction | BigNumber | Unit"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19060,
            "description": "Calculate the absolute value of a unit",
            "memberof": "Unit",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number | Fraction | BigNumber"
                }
            ],
            "return": {
                "description": "The result: |x|, absolute value of x",
                "type": "Unit"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19081,
            "description": "Convert the unit to a specific unit name.",
            "memberof": "Unit",
            "params": [
                {
                    "name": "valuelessUnit",
                    "description": "A unit without value. Can have prefix, like \"cm\"",
                    "type": "String | Unit"
                }
            ],
            "return": {
                "description": "Returns a clone of the unit with a fixed prefix and unit.",
                "type": "Unit"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19123,
            "description": "Return the value of the unit when represented with given valueless unit",
            "memberof": "Unit",
            "params": [
                {
                    "name": "valuelessUnit",
                    "description": "For example 'cm' or 'inch'",
                    "type": "String | Unit"
                }
            ],
            "return": {
                "description": "Returns the unit value as number.",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19134,
            "description": "Return the value of the unit in the original numeric type",
            "memberof": "Unit",
            "params": [
                {
                    "name": "valuelessUnit",
                    "description": "For example 'cm' or 'inch'",
                    "type": "String | Unit"
                }
            ],
            "return": {
                "description": "Returns the unit value",
                "type": "Number | BigNumber | Fraction"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19155,
            "description": "Get a string representation of the unit.",
            "memberof": "Unit",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19164,
            "description": "Get a JSON representation of the unit",
            "memberof": "Unit",
            "return": {
                "description": "Returns a JSON object structured as:\n                  `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19179,
            "description": "Instantiate a Unit from a JSON object",
            "memberof": "Unit",
            "params": [
                {
                    "name": "json",
                    "description": "A JSON object structured as:\n                      `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Unit"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19192,
            "description": "Returns the string representation of the unit.",
            "memberof": "Unit",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19199,
            "description": "Attempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the \"best\" units for formatting.\nIntended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19274,
            "description": "Get a string representation of the units of this Unit, without the value.",
            "memberof": "Unit",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19339,
            "description": "Get a string representation of the Unit, with optional formatting options.",
            "memberof": "Unit",
            "params": [
                {
                    "name": "options",
                    "description": "Formatting options. See\n                                               lib/utils/number:format for a\n                                               description of the available\n                                               options.",
                    "type": "Object | number | Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19400,
            "description": "Calculate the best prefix using current value.",
            "memberof": "Unit",
            "return": {
                "description": "prefix",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 19455,
            "description": "Returns an array of units whose sum is equal to this unit",
            "memberof": "Unit",
            "params": [
                {
                    "name": "[parts] An array of strings or valueless units. \n\n  Example:\n\n  var u = new Unit(1, 'm');\n  u.splitUnit(['feet', 'inch']);\n    [ 3 feet, 3.3700787401575 inch ]",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of units.",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21039,
            "description": "Calculate the values for the angle units.\nValue is calculated as number or BigNumber depending on the configuration",
            "params": [
                {
                    "name": "}",
                    "description": "config",
                    "type": "Number: 'number' | 'BigNumber'"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21074,
            "description": "A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\nA user perhaps could issue a command to select a preferred unit system, or use the default (see below).\nAuto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21138,
            "description": "Set a unit system for formatting derived units.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the unit system.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21151,
            "description": "Return the current unit system.",
            "return": {
                "description": "The current unit system.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21163,
            "description": "Converters to convert from number to an other numeric type like BigNumber\nor Fraction",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21185,
            "description": "Retrieve the right convertor function corresponding with the type\nof provided exampleValue.",
            "params": [
                {
                    "name": "type",
                    "description": "A string 'number', 'BigNumber', or 'Fraction'\n                       In case of an unknown type,",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21244,
            "description": "Wrapper around createUnitSingle.\nExample: \n createUnit({\n   foo: { },\n   bar: {\n     definition: 'kg/foo',\n     aliases: ['ba', 'barr', 'bars'],\n     offset: 200\n   },\n   baz: '4 bar'\n }, \n {\n   override: true;\n });",
            "params": [
                {
                    "name": "obj",
                    "description": "Object map. Each key becomes a unit which is defined by its value.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21292,
            "description": "Create a user-defined unit and register it with the Unit type.\nExample: \n createUnitSingle('knot', '0.514444444 m/s')\n createUnitSingle('acre', new Unit(43560, 'ft^2'))",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the new unit. Must be unique. Example: 'knot'",
                    "type": "String"
                },
                {
                    "name": "definition",
                    "description": "Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.",
                    "type": "String, Unit"
                },
                {
                    "name": "options",
                    "description": "(optional) An object containing any of the following properties:\n    prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n    aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n    offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Unit"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21499,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21501,
            "description": "var memoize = __webpack_require__(45).memoize;\n/**\n\t\t * Calculate BigNumber e\n\t\t * @param {function} BigNumber   BigNumber constructor\n\t\t * @returns {BigNumber} Returns e",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21514,
            "description": "Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2",
            "params": [
                {
                    "name": "BigNumber",
                    "description": "BigNumber constructor",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns phi",
                "type": "BigNumber"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21523,
            "description": "Calculate BigNumber pi.",
            "params": [
                {
                    "name": "BigNumber",
                    "description": "BigNumber constructor",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns pi",
                "type": "BigNumber"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21532,
            "description": "Calculate BigNumber tau, tau = 2 * pi",
            "params": [
                {
                    "name": "BigNumber",
                    "description": "BigNumber constructor",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns tau",
                "type": "BigNumber"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21541,
            "description": "Create a hash for a BigNumber constructor function. The created has is\nthe configured precision",
            "params": [
                {
                    "name": "args",
                    "description": "Supposed to contain a single entry with\n                            a BigNumber constructor",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "precision",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21554,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21556,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t\t  var addScalar = load(__webpack_require__(53));\n\t\t  var unaryMinus = load(__webpack_require__(78));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm05 = load(__webpack_require__(79));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  // TODO: split function subtract in two: subtract and subtractScalar\n  /**\n\t\t   * Subtract two values, `x - y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.subtract(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.subtract(5.3, 2);        // returns number 3.3\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    var b = math.complex(4, 1);\n\t\t   *    math.subtract(a, b);          // returns Complex -2 + 2i\n\t\t   *\n\t\t   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]\n\t\t   *\n\t\t   *    var c = math.unit('2.1 km');\n\t\t   *    var d = math.unit('500m');\n\t\t   *    math.subtract(c, d);          // returns Unit 1.6 km\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    add\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n\t\t   *            Initial value\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n\t\t   *            Value to subtract from `x`\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t\t   *            Subtraction of `x` and `y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21759,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21761,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Inverse the sign of a value, apply a unary minus operation.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise. Boolean values and\n\t\t   * strings will be converted to a number. For complex numbers, both real and\n\t\t   * complex value are inverted.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.unaryMinus(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.unaryMinus(3.5);      // returns -3.5\n\t\t   *    math.unaryMinus(-4.2);     // returns 4.2\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    add, subtract, unaryPlus\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21835,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 21837,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n\t\t  \n\t\t  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  0            ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22017,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22019,
            "description": "'use strict';\nfunction factory(type, config, load, typed) {\n\t\t  \n\t\t  /**\n\t\t   * Multiply two scalar values, `x * y`.\n\t\t   * This function is meant for internal use: it is used by the public function\n\t\t   * `multiply`\n\t\t   *\n\t\t   * This function does not support collections (Array or Matrix), and does\n\t\t   * not validate the number of of inputs.\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n\t\t   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`\n\t\t   * @private",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22080,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22082,
            "description": "'use strict';\nfunction factory(type, config, load, typed) {\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n  /**\n\t\t   * Divide two scalar values, `x / y`.\n\t\t   * This function is meant for internal use: it is used by the public functions\n\t\t   * `divide` and `inv`.\n\t\t   *\n\t\t   * This function does not support collections (Array or Matrix), and does\n\t\t   * not validate the number of of inputs.\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n\t\t   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`\n\t\t   * @private",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22145,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22147,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n\t\t  var eye = load(__webpack_require__(83));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var fraction = load(__webpack_require__(36));\n\t\t  var number = load(__webpack_require__(70));\n  /**\n\t\t   * Calculates the power of x to y, `x ^ y`.\n\t\t   * Matrix exponentiation is supported for square matrices `x`, and positive\n\t\t   * integer exponents `y`.\n\t\t   *\n\t\t   * For cubic roots of negative numbers, the function returns the principal\n\t\t   * root by default. In order to let the function return the real root,\n\t\t   * math.js can be configured with `math.config({predictable: true})`.\n\t\t   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.pow(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.pow(2, 3);               // returns number 8\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    math.pow(a, 2)                // returns Complex -5 + 12i\n\t\t   *\n\t\t   *    var b = [[1, 2], [4, 3]];\n\t\t   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply, sqrt, cbrt, nthRoot\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base\n\t\t   * @param  {number | BigNumber | Complex} y                   The exponent\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22242,
            "description": "Calculates the power of x to y, x^y, for two numbers.",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "res",
                "type": "Number | Complex"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22279,
            "description": "Calculate the power of a 2d array",
            "params": [
                {
                    "name": "x",
                    "description": "must be a 2 dimensional, square matrix",
                    "type": "Array"
                },
                {
                    "name": "y",
                    "description": "a positive, integer value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22311,
            "description": "Calculate the power of a 2d matrix",
            "params": [
                {
                    "name": "x",
                    "description": "must be a 2 dimensional, square matrix",
                    "type": "Matrix"
                },
                {
                    "name": "y",
                    "description": "a positive, integer value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22335,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22337,
            "description": "'use strict';\nvar array = __webpack_require__(40);\n\t\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  \n\t\t  /**\n\t\t   * Create a 2-dimensional identity matrix with size m x n or n x n.\n\t\t   * The matrix has ones on the diagonal and zeros elsewhere.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.eye(n)\n\t\t   *    math.eye(n, format)\n\t\t   *    math.eye(m, n)\n\t\t   *    math.eye(m, n, format)\n\t\t   *    math.eye([m, n])\n\t\t   *    math.eye([m, n], format)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\t\t   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]\n\t\t   *\n\t\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t\t   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    diag, ones, zeros, size, range\n\t\t   *\n\t\t   * @param {...number | Matrix | Array} size   The size for the matrix\n\t\t   * @param {string} [format]                   The Matrix storage format\n\t\t   *\n\t\t   * @return {Matrix | Array | number} A matrix with ones on the diagonal.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22433,
            "description": "Create an identity matrix",
            "params": [
                {
                    "name": "rows",
                    "description": "",
                    "type": "Number | BigNumber"
                },
                {
                    "name": "cols",
                    "description": "",
                    "type": "Number | BigNumber"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22487,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22489,
            "description": "'use strict';\nvar extend = __webpack_require__(3).extend;\n\t\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t\t  var addScalar = load(__webpack_require__(53));\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n\t\t  var equalScalar = load(__webpack_require__(48));\n  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  var DenseMatrix = type.DenseMatrix;\n\t\t  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Multiply two or more values, `x * y`.\n\t\t   * For matrices, the matrix product is calculated.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.multiply(x, y)\n\t\t   *    math.multiply(x, y, z, ...)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.multiply(4, 5.2);        // returns number 20.8\n\t\t   *    math.multiply(2, 3, 4);       // returns number 24\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    var b = math.complex(4, 1);\n\t\t   *    math.multiply(a, b);          // returns Complex 5 + 14i\n\t\t   *\n\t\t   *    var c = [[1, 2], [4, 3]];\n\t\t   *    var d = [[1, 2, 3], [3, -4, 7]];\n\t\t   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]\n\t\t   *\n\t\t   *    var e = math.unit('2.1 km');\n\t\t   *    math.multiply(3, e);          // returns Unit 6.3 km\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    divide, prod, cross, dot\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22697,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "Dense Vector   (N)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Dense Vector   (N)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Scalar value",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22743,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "Dense Vector   (M)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Matrix         (MxN)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Dense Vector   (N)",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22760,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "Dense Vector   (M)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Dense Matrix   (MxN)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Dense Vector   (N)",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22820,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "Matrix         (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Dense Vector   (N)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Dense Vector   (M)",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22838,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "Matrix         (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Matrix         (NxC)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Matrix         (MxC)",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22870,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "DenseMatrix  (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Dense Vector (N)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "Dense Vector (M)",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22931,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "DenseMatrix    (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "DenseMatrix    (NxC)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "DenseMatrix    (MxC)",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 22999,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "DenseMatrix    (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "SparseMatrix   (NxC)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "SparseMatrix   (MxC)",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23110,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "SparseMatrix    (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "Dense Vector (N)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "SparseMatrix    (M, 1)",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23214,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "SparseMatrix      (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "DenseMatrix       (NxC)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "SparseMatrix      (MxC)",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23327,
            "description": "C = A * B",
            "params": [
                {
                    "name": "a",
                    "description": "SparseMatrix      (MxN)",
                    "type": "Matrix"
                },
                {
                    "name": "b",
                    "description": "SparseMatrix      (NxC)",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "SparseMatrix      (MxC)",
                "type": "Matrix"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23463,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23465,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t\t   * Callback function invoked NZ times (number of nonzero items in S).\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  0          ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t\t   * @param {Scalar}   b                 The Scalar value\n\t\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23578,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23580,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the absolute value of a number. For matrices, the function is\n\t\t   * evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.abs(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.abs(3.5);                // returns number 3.5\n\t\t   *    math.abs(-4.2);               // returns number 4.2\n\t\t   *\n\t\t   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sign\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t\t   *            A number or matrix for which to get the absolute value\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n\t\t   *            Absolute value of `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23645,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23647,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Round a value towards zero.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.fix(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.fix(3.2);                // returns number 3\n\t\t   *    math.fix(3.8);                // returns number 3\n\t\t   *    math.fix(-4.2);               // returns number -4\n\t\t   *    math.fix(-4.7);               // returns number -4\n\t\t   *\n\t\t   *    var c = math.complex(3.2, -2.7);\n\t\t   *    math.fix(c);                  // returns Complex 3 - 2i\n\t\t   *\n\t\t   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    ceil, floor, round\n\t\t   *\n\t\t   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23716,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23718,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var equalScalar = load(__webpack_require__(48));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether two values are equal.\n\t\t   *\n\t\t   * The function tests whether the relative difference between x and y is\n\t\t   * smaller than the configured epsilon. The function cannot be used to\n\t\t   * compare values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n\t\t   *\n\t\t   * Values `null` and `undefined` are compared strictly, thus `null` is only\n\t\t   * equal to `null` and nothing else, and `undefined` is only equal to\n\t\t   * `undefined` and nothing else.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.equal(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.equal(2 + 2, 3);         // returns false\n\t\t   *    math.equal(2 + 2, 4);         // returns true\n\t\t   *\n\t\t   *    var a = math.unit('50 cm');\n\t\t   *    var b = math.unit('5 m');\n\t\t   *    math.equal(a, b);             // returns true\n\t\t   *\n\t\t   *    var c = [2, 5, 1];\n\t\t   *    var d = [2, 7, 1];\n\t\t   *\n\t\t   *    math.equal(c, d);             // returns [true, false, true]\n\t\t   *    math.deepEqual(c, d);         // returns false\n\t\t   *\n\t\t   *    math.equal(0, null);          // returns false\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual\n\t\t   *\n\t\t   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23891,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23893,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is an numeric value.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isNumeric(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isNumeric(2);                     // returns true\n\t\t   *    math.isNumeric(0);                     // returns true\n\t\t   *    math.isNumeric(math.bignumber(500));   // returns true\n\t\t   *    math.isNumeric(math.fraction(4));      // returns true\n\t\t   *    math.isNumeric(math.complex('2-4i');   // returns false\n\t\t   *    math.isNumeric('3');                   // returns false\n\t\t   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isZero, isPositive, isNegative, isInteger\n\t\t   *\n\t\t   * @param {*} x       Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n\t\t   *                    `Fraction`, or `boolean`. Returns false for other types.\n\t\t   *                    Throws an error in case of unknown types.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23950,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 23952,
            "description": "'use strict';\nvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Format a value of any type into a string.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.format(value)\n\t\t   *    math.format(value, options)\n\t\t   *    math.format(value, precision)\n\t\t   *    math.format(value, callback)\n\t\t   *\n\t\t   * Where:\n\t\t   *\n\t\t   *  - `value: *`\n\t\t   *    The value to be formatted\n\t\t   *  - `options: Object`\n\t\t   *    An object with formatting options. Available options:\n\t\t   *    - `notation: string`\n\t\t   *      Number notation. Choose from:\n\t\t   *      - 'fixed'\n\t\t   *        Always use regular number notation.\n\t\t   *        For example '123.40' and '14000000'\n\t\t   *      - 'exponential'\n\t\t   *        Always use exponential notation.\n\t\t   *        For example '1.234e+2' and '1.4e+7'\n\t\t   *      - 'engineering'\n\t\t   *        Always use engineering notation.\n\t\t   *        For example '123.4e+0' and '14.0e+6'\n\t\t   *      - 'auto' (default)\n\t\t   *        Regular number notation for numbers having an absolute value between\n\t\t   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\n\t\t   *        Lower bound is included, upper bound is excluded.\n\t\t   *        For example '123.4' and '1.4e7'.\n\t\t   *    - `precision: number`\n\t\t   *      A number between 0 and 16 to round the digits of the number. In case\n\t\t   *      of notations 'exponential' and 'auto', `precision` defines the total\n\t\t   *      number of significant digits returned and is undefined by default.\n\t\t   *      In case of notation 'fixed', `precision` defines the number of\n\t\t   *      significant digits after the decimal point, and is 0 by default.\n\t\t   *    - `exponential: Object`\n\t\t   *      An object containing two parameters, {number} lower and {number} upper,\n\t\t   *      used by notation 'auto' to determine when to return exponential\n\t\t   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only\n\t\t   *      applicable for notation `auto`.\n\t\t   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.\n\t\t   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is\n\t\t   *      configured, and will output `0.(3)` when 'decimal' is configured.\n\t\t   * - `callback: function`\n\t\t   *   A custom formatting function, invoked for all numeric elements in `value`,\n\t\t   *   for example all elements of a matrix, or the real and imaginary\n\t\t   *   parts of a complex number. This callback can be used to override the\n\t\t   *   built-in numeric notation with any type of formatting. Function `callback`\n\t\t   *   is called with `value` as parameter and must return a string.\n\t\t   *\n\t\t   * When `value` is an Object:\n\t\t   *\n\t\t   * - When the object contains a property `format` being a function, this function\n\t\t   *   is invoked as `value.format(options)` and the result is returned.\n\t\t   * - When the object has its own `toString` method, this method is invoked\n\t\t   *   and the result is returned.\n\t\t   * - In other cases the function will loop over all object properties and\n\t\t   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n\t\t   *\n\t\t   * When value is a function:\n\t\t   *\n\t\t   * - When the function has a property `syntax`, it returns this\n\t\t   *   syntax description.\n\t\t   * - In other cases, a string `'function'` is returned.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.format(6.4);                                        // returns '6.4'\n\t\t   *    math.format(1240000);                                    // returns '1.24e6'\n\t\t   *    math.format(1/3);                                        // returns '0.3333333333333333'\n\t\t   *    math.format(1/3, 3);                                     // returns '0.333'\n\t\t   *    math.format(21385, 2);                                   // returns '21000'\n\t\t   *    math.format(12.071, {notation: 'fixed'});                // returns '12'\n\t\t   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'\n\t\t   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'\n\t\t   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'\n\t\t   *\n\t\t   *    function formatCurrency(value) {\n\t\t   *      // return currency notation with two digits:\n\t\t   *      return '$' + value.toFixed(2);\n\t\t   *\n\t\t   *      // you could also use math.format inside the callback:\n\t\t   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});\n\t\t   *    }\n\t\t   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    print\n\t\t   *\n\t\t   * @param {*} value                               Value to be stringified\n\t\t   * @param {Object | Function | number} [options]  Formatting options\n\t\t   * @return {string} The formatted value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24070,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24072,
            "description": "'use strict';\nvar types = __webpack_require__(41);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Determine the type of a variable.\n\t\t   *\n\t\t   * Function `typeof` recognizes the following types of objects:\n\t\t   *\n\t\t   * Object                 | Returns       | Example\n\t\t   * ---------------------- | ------------- | ------------------------------------------\n\t\t   * null                   | `'null'`      | `math.typeof(null)`\n\t\t   * number                 | `'number'`    | `math.typeof(3.5)`\n\t\t   * boolean                | `'boolean'`   | `math.typeof (true)`\n\t\t   * string                 | `'string'`    | `math.typeof ('hello world')`\n\t\t   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`\n\t\t   * Date                   | `'Date'`      | `math.typeof (new Date())`\n\t\t   * Function               | `'Function'`  | `math.typeof (function () {})`\n\t\t   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`\n\t\t   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`\n\t\t   * undefined              | `'undefined'` | `math.typeof(undefined)`\n\t\t   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`\n\t\t   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`\n\t\t   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`\n\t\t   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`\n\t\t   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`\n\t\t   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`\n\t\t   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`\n\t\t   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`\n\t\t   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.typeof(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.typeof(3.5);                     // returns 'number'\n\t\t   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'\n\t\t   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'\n\t\t   *    math.typeof('hello world');           // returns 'string'\n\t\t   *\n\t\t   * @param {*} x     The variable for which to test the type.\n\t\t   * @return {string} Returns the name of the type. Primitive types are lower case,\n\t\t   *                  non-primitive types are upper-camel-case.\n\t\t   *                  For example 'number', 'string', 'Array', 'Date'.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24153,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24155,
            "description": "/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n\t\t//\n\t\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t\t// copy of this software and associated documentation files (the\n\t\t// \"Software\"), to deal in the Software without restriction, including\n\t\t// without limitation the rights to use, copy, modify, merge, publish,\n\t\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t\t// persons to whom the Software is furnished to do so, subject to the\n\t\t// following conditions:\n\t\t//\n\t\t// The above copyright notice and this permission notice shall be included\n\t\t// in all copies or substantial portions of the Software.\n\t\t//\n\t\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar formatRegExp = /%[sdj%]/g;\n\t\texports.format = function(f) {\n\t\t  if (!isString(f)) {\n\t\t    var objects = [];\n\t\t    for (var i = 0; i < arguments.length; i++) {\n\t\t      objects.push(inspect(arguments[i]));\n\t\t    }\n\t\t    return objects.join(' ');\n\t\t  }\n  var i = 1;\n\t\t  var args = arguments;\n\t\t  var len = args.length;\n\t\t  var str = String(f).replace(formatRegExp, function(x) {\n\t\t    if (x === '%%') return '%';\n\t\t    if (i >= len) return x;\n\t\t    switch (x) {\n\t\t      case '%s': return String(args[i++]);\n\t\t      case '%d': return Number(args[i++]);\n\t\t      case '%j':\n\t\t        try {\n\t\t          return JSON.stringify(args[i++]);\n\t\t        } catch (_) {\n\t\t          return '[Circular]';\n\t\t        }\n\t\t      default:\n\t\t        return x;\n\t\t    }\n\t\t  });\n\t\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t\t    if (isNull(x) || !isObject(x)) {\n\t\t      str += ' ' + x;\n\t\t    } else {\n\t\t      str += ' ' + inspect(x);\n\t\t    }\n\t\t  }\n\t\t  return str;\n\t\t};\n\n// Mark that a method should not be used.\n\t\t// Returns a modified function which warns once by default.\n\t\t// If --no-deprecation is set, then it is a no-op.\n\t\texports.deprecate = function(fn, msg) {\n\t\t  // Allow for deprecating things in the process of starting up.\n\t\t  if (isUndefined(global.process)) {\n\t\t    return function() {\n\t\t      return exports.deprecate(fn, msg).apply(this, arguments);\n\t\t    };\n\t\t  }\n  if (process.noDeprecation === true) {\n\t\t    return fn;\n\t\t  }\n  var warned = false;\n\t\t  function deprecated() {\n\t\t    if (!warned) {\n\t\t      if (process.throwDeprecation) {\n\t\t        throw new Error(msg);\n\t\t      } else if (process.traceDeprecation) {\n\t\t        console.trace(msg);\n\t\t      } else {\n\t\t        console.error(msg);\n\t\t      }\n\t\t      warned = true;\n\t\t    }\n\t\t    return fn.apply(this, arguments);\n\t\t  }\n  return deprecated;\n\t\t};\n\nvar debugs = {};\n\t\tvar debugEnviron;\n\t\texports.debuglog = function(set) {\n\t\t  if (isUndefined(debugEnviron))\n\t\t    debugEnviron = process.env.NODE_DEBUG || '';\n\t\t  set = set.toUpperCase();\n\t\t  if (!debugs[set]) {\n\t\t    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n\t\t      var pid = process.pid;\n\t\t      debugs[set] = function() {\n\t\t        var msg = exports.format.apply(exports, arguments);\n\t\t        console.error('%s %d: %s', set, pid, msg);\n\t\t      };\n\t\t    } else {\n\t\t      debugs[set] = function() {};\n\t\t    }\n\t\t  }\n\t\t  return debugs[set];\n\t\t};\n\n/**\n\t\t * Echos the value of a value. Trys to print the value out\n\t\t * in the best way possible given the different types.\n\t\t *\n\t\t * @param {Object} obj The object to print out.\n\t\t * @param {Object} opts Optional options object that alters the output.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24713,
            "description": "Inherit the prototype methods from one constructor into another.\n\nThe Function.prototype.inherits from lang.js rewritten as a standalone\nfunction (not on Function.prototype). NOTE: If this file is to be loaded\nduring bootstrapping this function needs to be rewritten using some native\nfunctions as prototype setup using normal JavaScript does not work as\nexpected during bootstrapping (see mirror.js in r114903).",
            "params": [
                {
                    "name": "ctor",
                    "description": "Constructor function which needs to inherit the\n    prototype.",
                    "type": "Function"
                },
                {
                    "name": "superCtor",
                    "description": "Constructor function to inherit prototype from.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24746,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24748,
            "description": "// shim for using process in browser\nvar process = module.exports = {};\n\t\tvar queue = [];\n\t\tvar draining = false;\n\t\tvar currentQueue;\n\t\tvar queueIndex = -1;\nfunction cleanUpNextTick() {\n\t\t    draining = false;\n\t\t    if (currentQueue.length) {\n\t\t        queue = currentQueue.concat(queue);\n\t\t    } else {\n\t\t        queueIndex = -1;\n\t\t    }\n\t\t    if (queue.length) {\n\t\t        drainQueue();\n\t\t    }\n\t\t}\nfunction drainQueue() {\n\t\t    if (draining) {\n\t\t        return;\n\t\t    }\n\t\t    var timeout = setTimeout(cleanUpNextTick);\n\t\t    draining = true;\n    var len = queue.length;\n\t\t    while(len) {\n\t\t        currentQueue = queue;\n\t\t        queue = [];\n\t\t        while (++queueIndex < len) {\n\t\t            if (currentQueue) {\n\t\t                currentQueue[queueIndex].run();\n\t\t            }\n\t\t        }\n\t\t        queueIndex = -1;\n\t\t        len = queue.length;\n\t\t    }\n\t\t    currentQueue = null;\n\t\t    draining = false;\n\t\t    clearTimeout(timeout);\n\t\t}\nprocess.nextTick = function (fun) {\n\t\t    var args = new Array(arguments.length - 1);\n\t\t    if (arguments.length > 1) {\n\t\t        for (var i = 1; i < arguments.length; i++) {\n\t\t            args[i - 1] = arguments[i];\n\t\t        }\n\t\t    }\n\t\t    queue.push(new Item(fun, args));\n\t\t    if (queue.length === 1 && !draining) {\n\t\t        setTimeout(drainQueue, 0);\n\t\t    }\n\t\t};\n// v8 likes predictible objects\n\t\tfunction Item(fun, array) {\n\t\t    this.fun = fun;\n\t\t    this.array = array;\n\t\t}\n\t\tItem.prototype.run = function () {\n\t\t    this.fun.apply(null, this.array);\n\t\t};\n\t\tprocess.title = 'browser';\n\t\tprocess.browser = true;\n\t\tprocess.env = {};\n\t\tprocess.argv = [];\n\t\tprocess.version = ''; // empty string to avoid regexp issues\n\t\tprocess.versions = {};\nfunction noop() {}\nprocess.on = noop;\n\t\tprocess.addListener = noop;\n\t\tprocess.once = noop;\n\t\tprocess.off = noop;\n\t\tprocess.removeListener = noop;\n\t\tprocess.removeAllListeners = noop;\n\t\tprocess.emit = noop;\nprocess.binding = function (name) {\n\t\t    throw new Error('process.binding is not supported');\n\t\t};\nprocess.cwd = function () { return '/' };\n\t\tprocess.chdir = function (dir) {\n\t\t    throw new Error('process.chdir is not supported');\n\t\t};\n\t\tprocess.umask = function() { return 0; };\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24845,
            "description": "module.exports = function isBuffer(arg) {\n\t\t  return arg && typeof arg === 'object'\n\t\t    && typeof arg.copy === 'function'\n\t\t    && typeof arg.fill === 'function'\n\t\t    && typeof arg.readUInt8 === 'function';\n\t\t}\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24856,
            "description": "if (typeof Object.create === 'function') {\n\t\t  // implementation from standard node.js 'util' module\n\t\t  module.exports = function inherits(ctor, superCtor) {\n\t\t    ctor.super_ = superCtor\n\t\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t\t      constructor: {\n\t\t        value: ctor,\n\t\t        enumerable: false,\n\t\t        writable: true,\n\t\t        configurable: true\n\t\t      }\n\t\t    });\n\t\t  };\n\t\t} else {\n\t\t  // old school shim for old browsers\n\t\t  module.exports = function inherits(ctor, superCtor) {\n\t\t    ctor.super_ = superCtor\n\t\t    var TempCtor = function () {}\n\t\t    TempCtor.prototype = superCtor.prototype\n\t\t    ctor.prototype = new TempCtor()\n\t\t    ctor.prototype.constructor = ctor\n\t\t  }\n\t\t}\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24885,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a unit. Depending on the passed arguments, the function\n\t\t   * will create and return a new math.type.Unit object.\n\t\t   * When a matrix is provided, all elements will be converted to units.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.unit(unit : string)\n\t\t   *     math.unit(value : number, unit : string)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm\n\t\t   *    var b = math.unit('23 kg');    // returns Unit 23 kg\n\t\t   *    a.to('m');                     // returns Unit 0.05 m\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n\t\t   *\n\t\t   * @param {* | Array | Matrix} args   A number and unit.\n\t\t   * @return {Unit | Array | Matrix}    The created unit",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24950,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 24952,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a user-defined unit and register it with the Unit type.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.createUnit({\n\t\t   *       baseUnit1: {\n\t\t   *         aliases: [string, ...]\n\t\t   *         prefixes: object\n\t\t   *       },\n\t\t   *       unit2: {\n\t\t   *         definition: string,\n\t\t   *         aliases: [string, ...]\n\t\t   *         prefixes: object,\n\t\t   *         offset: number\n\t\t   *       },\n\t\t   *       unit3: string    // Shortcut\n\t\t   *     })\n\t\t   *\n\t\t   *     // Another shortcut:\n\t\t   *     math.createUnit(string, unit : string, [object])\n\t\t   *\n\t\t   * Examples: \n\t\t   *\n\t\t   *     math.createUnit('foo');\n\t\t   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']});\n\t\t   *     math.createUnit('mph', '1 mile/hour');\n\t\t   *\n\t\t   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n\t\t   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n\t\t   * @param {Object} options   (optional) An object containing any of the following properties:\n\t\t   *     prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n\t\t   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n\t\t   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     unit\n\t\t   *\n\t\t   * @return {Unit} The new unit",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25041,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25043,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Split a unit in an array of units whose sum is equal to the original unit.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n\t\t   *\n\t\t   * Example:\n\t\t   *\n\t\t   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch']);\n\t\t   *     // [ 3 feet, 3.3700787401575 inch ]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     unit\n\t\t   *\n\t\t   * @param {Array} [parts] An array of strings or valueless units.\n\t\t   * @return {Array} An array of units.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25084,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25086,
            "description": "var lazy = __webpack_require__(3).lazy;\n\nfunction factory (type, config, load, typed, math) {\n  // helper function to create a unit with a fixed prefix\n\t\t  function fixedUnit(str) {\n\t\t    var unit = type.Unit.parse(str);\n\t\t    unit.fixPrefix = true;\n\t\t    return unit;\n\t\t  }\n  // Source: http://www.wikiwand.com/en/Physical_constant\n  // Universal constants\n\t\t  lazy(math, 'speedOfLight',         function () {return fixedUnit('299792458 m s^-1')});\n\t\t  lazy(math, 'gravitationConstant',  function () {return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2')});\n\t\t  lazy(math, 'planckConstant',       function () {return fixedUnit('6.626069311e-34 J s')});\n\t\t  lazy(math, 'reducedPlanckConstant',function () {return fixedUnit('1.05457172647e-34 J s')});\n  // Electromagnetic constants\n\t\t  lazy(math, 'magneticConstant',          function () {return fixedUnit('1.2566370614e-6 N A^-2')});\n\t\t  lazy(math, 'electricConstant',          function () {return fixedUnit('8.854187817e-12 F m^-1')});\n\t\t  lazy(math, 'vacuumImpedance',           function () {return fixedUnit('376.730313461 ohm')});\n\t\t  lazy(math, 'coulomb',                   function () {return fixedUnit('8.9875517873681764e9 N m^2 C^-2')});\n\t\t  lazy(math, 'elementaryCharge',          function () {return fixedUnit('1.60217656535e-19 C')});\n\t\t  lazy(math, 'bohrMagneton',              function () {return fixedUnit('9.2740096820e-24 J T^-1')});\n\t\t  lazy(math, 'conductanceQuantum',        function () {return fixedUnit('7.748091734625e-5 S')});\n\t\t  lazy(math, 'inverseConductanceQuantum', function () {return fixedUnit('12906.403721742 ohm')});\n\t\t  lazy(math, 'magneticFluxQuantum',       function () {return fixedUnit('2.06783375846e-15 Wb')});\n\t\t  lazy(math, 'nuclearMagneton',           function () {return fixedUnit('5.0507835311e-27 J T^-1')});\n\t\t  lazy(math, 'klitzing',                  function () {return fixedUnit('25812.807443484 ohm')});\n\t\t  //lazy(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed\n  // Atomic and nuclear constants\n\t\t  lazy(math, 'bohrRadius',              function () {return fixedUnit('5.291772109217e-11 m')});\n\t\t  lazy(math, 'classicalElectronRadius', function () {return fixedUnit('2.817940326727e-15 m')});\n\t\t  lazy(math, 'electronMass',            function () {return fixedUnit('9.1093829140e-31 kg')});\n\t\t  lazy(math, 'fermiCoupling',           function () {return fixedUnit('1.1663645e-5 GeV^-2')});\n\t\t  lazy(math, 'fineStructure',           function () {return 7.297352569824e-3});\n\t\t  lazy(math, 'hartreeEnergy',           function () {return fixedUnit('4.3597443419e-18 J')});\n\t\t  lazy(math, 'protonMass',              function () {return fixedUnit('1.67262177774e-27 kg')});\n\t\t  lazy(math, 'deuteronMass',            function () {return fixedUnit('3.3435830926e-27 kg')});\n\t\t  lazy(math, 'neutronMass',             function () {return fixedUnit('1.6749271613e-27 kg')});\n\t\t  lazy(math, 'quantumOfCirculation',    function () {return fixedUnit('3.636947552024e-4 m^2 s^-1')});\n\t\t  lazy(math, 'rydberg',                 function () {return fixedUnit('10973731.56853955 m^-1')});\n\t\t  lazy(math, 'thomsonCrossSection',     function () {return fixedUnit('6.65245873413e-29 m^2')});\n\t\t  lazy(math, 'weakMixingAngle',         function () {return 0.222321});\n\t\t  lazy(math, 'efimovFactor',            function () {return 22.7});\n  // Physico-chemical constants\n\t\t  lazy(math, 'atomicMass',          function () {return fixedUnit('1.66053892173e-27 kg')});\n\t\t  lazy(math, 'avogadro',            function () {return fixedUnit('6.0221412927e23 mol^-1')});\n\t\t  lazy(math, 'boltzmann',           function () {return fixedUnit('1.380648813e-23 J K^-1')});\n\t\t  lazy(math, 'faraday',             function () {return fixedUnit('96485.336521 C mol^-1')});\n\t\t  lazy(math, 'firstRadiation',      function () {return fixedUnit('3.7417715317e-16 W m^2')});\n\t\t  // lazy(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance\n\t\t  lazy(math, 'loschmidt',           function () {return fixedUnit('2.686780524e25 m^-3')});\n\t\t  lazy(math, 'gasConstant',         function () {return fixedUnit('8.314462175 J K^-1 mol^-1')});\n\t\t  lazy(math, 'molarPlanckConstant', function () {return fixedUnit('3.990312717628e-10 J s mol^-1')});\n\t\t  lazy(math, 'molarVolume',         function () {return fixedUnit('2.241396820e-10 m^3 mol^-1')});\n\t\t  lazy(math, 'sackurTetrode',       function () {return -1.164870823});\n\t\t  lazy(math, 'secondRadiation',     function () {return fixedUnit('1.438777013e-2 m K')});\n\t\t  lazy(math, 'stefanBoltzmann',     function () {return fixedUnit('5.67037321e-8 W m^-2 K^-4')});\n\t\t  lazy(math, 'wienDisplacement',    function () {return fixedUnit('2.897772126e-3 m K')});\n  // Adopted values\n\t\t  lazy(math, 'molarMass',         function () {return fixedUnit('1e-3 kg mol^-1')});\n\t\t  lazy(math, 'molarMassC12',      function () {return fixedUnit('1.2e-2 kg mol^-1')});\n\t\t  lazy(math, 'gravity',           function () {return fixedUnit('9.80665 m s^-2')});\n\t\t  // atm is defined in Unit.js\n  // Natural units\n\t\t  lazy(math, 'planckLength',      function () {return fixedUnit('1.61619997e-35 m')});\n\t\t  lazy(math, 'planckMass',        function () {return fixedUnit('2.1765113e-8 kg')});\n\t\t  lazy(math, 'planckTime',        function () {return fixedUnit('5.3910632e-44 s')});\n\t\t  lazy(math, 'planckCharge',      function () {return fixedUnit('1.87554595641e-18 C')});\n\t\t  lazy(math, 'planckTemperature', function () {return fixedUnit('1.41683385e+32 K')});\n}\nexports.factory = factory;\n\t\texports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\n\t\texports.math = true;   // request access to the math namespace\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25176,
            "description": "'use strict';\nvar object = __webpack_require__(3);\n\t\tvar bigConstants = __webpack_require__(76);\nfunction factory (type, config, load, typed, math) {\n\t\t  // listen for changed in the configuration, automatically reload\n\t\t  // constants when needed\n\t\t  math.on('config', function (curr, prev) {\n\t\t    if (curr.number !== prev.number) {\n\t\t      factory(type, config, load, typed, math);\n\t\t    }\n\t\t  });\n  math['true']     = true;\n\t\t  math['false']    = false;\n\t\t  math['null']     = null;\n\t\t  math['uninitialized'] = __webpack_require__(40).UNINITIALIZED;\n  if (config.number === 'BigNumber') {\n\t\t    math['Infinity'] = new type.BigNumber(Infinity);\n\t\t    math['NaN']      = new type.BigNumber(NaN);\n    object.lazy(math, 'pi',  function () {return bigConstants.pi(type.BigNumber)});\n\t\t    object.lazy(math, 'tau', function () {return bigConstants.tau(type.BigNumber)});\n\t\t    object.lazy(math, 'e',   function () {return bigConstants.e(type.BigNumber)});\n\t\t    object.lazy(math, 'phi', function () {return bigConstants.phi(type.BigNumber)}); // golden ratio, (1+sqrt(5))/2\n    // uppercase constants (for compatibility with built-in Math)\n\t\t    object.lazy(math, 'E',       function () {return math.e;});\n\t\t    object.lazy(math, 'LN2',     function () {return new type.BigNumber(2).ln();});\n\t\t    object.lazy(math, 'LN10',    function () {return new type.BigNumber(10).ln()});\n\t\t    object.lazy(math, 'LOG2E',   function () {return new type.BigNumber(1).div(new type.BigNumber(2).ln());});\n\t\t    object.lazy(math, 'LOG10E',  function () {return new type.BigNumber(1).div(new type.BigNumber(10).ln())});\n\t\t    object.lazy(math, 'PI',      function () {return math.pi});\n\t\t    object.lazy(math, 'SQRT1_2', function () {return new type.BigNumber('0.5').sqrt()});\n\t\t    object.lazy(math, 'SQRT2',   function () {return new type.BigNumber(2).sqrt()});\n\t\t  }\n\t\t  else {\n\t\t    math['Infinity'] = Infinity;\n\t\t    math['NaN']      = NaN;\n    math.pi  = Math.PI;\n\t\t    math.tau = Math.PI * 2;\n\t\t    math.e   = Math.E;\n\t\t    math.phi = 1.61803398874989484820458683436563811772030917980576286213545; // golden ratio, (1+sqrt(5))/2\n    // uppercase constants (for compatibility with built-in Math)\n\t\t    math.E           = math.e;\n\t\t    math.LN2         = Math.LN2;\n\t\t    math.LN10        = Math.LN10;\n\t\t    math.LOG2E       = Math.LOG2E;\n\t\t    math.LOG10E      = Math.LOG10E;\n\t\t    math.PI          = math.pi;\n\t\t    math.SQRT1_2     = Math.SQRT1_2;\n\t\t    math.SQRT2       = Math.SQRT2;\n\t\t  }\n  // complex i\n\t\t  math.i = type.Complex.I;\n  // meta information\n\t\t  math.version = __webpack_require__(101);\n\t\t}\nexports.factory = factory;\n\t\texports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\n\t\texports.math = true;   // request access to the math namespace\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25249,
            "description": "module.exports = '3.8.0';\n\t\t// Note: This file is automatically generated when building math.js.\n\t\t// Changes made in this file will be overwritten.\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25258,
            "description": "module.exports = [\n\t\t  __webpack_require__(103),\n\t\t  __webpack_require__(280),\n\t\t  __webpack_require__(309),\n\t\t  __webpack_require__(311),\n  __webpack_require__(337),\n\t\t  __webpack_require__(282),\n\t\t  __webpack_require__(308)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25274,
            "description": "function factory (construction, config, load, typed) {\n\t\t  var docs = {};\n\n  // construction functions\n\t\t  docs.bignumber = __webpack_require__(104);\n\t\t  docs['boolean'] = __webpack_require__(105);\n\t\t  docs.complex = __webpack_require__(106);\n\t\t  docs.createUnit = __webpack_require__(107);\n\t\t  docs.fraction = __webpack_require__(108);\n\t\t  docs.index = __webpack_require__(109);\n\t\t  docs.matrix = __webpack_require__(110);\n\t\t  docs.number = __webpack_require__(111);\n\t\t  docs.sparse = __webpack_require__(112);\n\t\t  docs.splitUnit = __webpack_require__(113);\n\t\t  docs.string = __webpack_require__(114);\n\t\t  docs.unit = __webpack_require__(115);\n  // constants\n\t\t  docs.e = __webpack_require__(116);\n\t\t  docs.E = __webpack_require__(116);\n\t\t  docs['false'] = __webpack_require__(117);\n\t\t  docs.i = __webpack_require__(118);\n\t\t  docs['Infinity'] = __webpack_require__(119);\n\t\t  docs.LN2 = __webpack_require__(120);\n\t\t  docs.LN10 = __webpack_require__(121);\n\t\t  docs.LOG2E = __webpack_require__(122);\n\t\t  docs.LOG10E = __webpack_require__(123);\n\t\t  docs.NaN = __webpack_require__(124);\n\t\t  docs['null'] = __webpack_require__(125);\n\t\t  docs.pi = __webpack_require__(126);\n\t\t  docs.PI = __webpack_require__(126);\n\t\t  docs.phi = __webpack_require__(127);\n\t\t  docs.SQRT1_2 = __webpack_require__(128);\n\t\t  docs.SQRT2 = __webpack_require__(129);\n\t\t  docs.tau = __webpack_require__(130);\n\t\t  docs['true'] = __webpack_require__(131);\n\t\t  docs.version = __webpack_require__(132);\n  // physical constants\n\t\t  // TODO: more detailed docs for physical constants\n\t\t  docs.speedOfLight = {description: 'Speed of light in vacuum', examples: ['speedOfLight']};\n\t\t  docs.gravitationConstant = {description: 'Newtonian constant of gravitation', examples: ['gravitationConstant']};\n\t\t  docs.planckConstant = {description: 'Planck constant', examples: ['planckConstant']};\n\t\t  docs.reducedPlanckConstant = {description: 'Reduced Planck constant', examples: ['reducedPlanckConstant']};\n  docs.magneticConstant = {description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant']};\n\t\t  docs.electricConstant = {description: 'Electric constant (vacuum permeability)', examples: ['electricConstant']};\n\t\t  docs.vacuumImpedance = {description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance']};\n\t\t  docs.coulomb = {description: 'Coulomb\\'s constant', examples: ['coulomb']};\n\t\t  docs.elementaryCharge = {description: 'Elementary charge', examples: ['elementaryCharge']};\n\t\t  docs.bohrMagneton = {description: 'Borh magneton', examples: ['bohrMagneton']};\n\t\t  docs.conductanceQuantum = {description: 'Conductance quantum', examples: ['conductanceQuantum']};\n\t\t  docs.inverseConductanceQuantum = {description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']};\n\t\t  //docs.josephson = {description: 'Josephson constant', examples: ['josephson']};\n\t\t  docs.magneticFluxQuantum = {description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum']};\n\t\t  docs.nuclearMagneton = {description: 'Nuclear magneton', examples: ['nuclearMagneton']};\n\t\t  docs.klitzing = {description: 'Von Klitzing constant', examples: ['klitzing']};\n  docs.bohrRadius = {description: 'Borh radius', examples: ['bohrRadius']};\n\t\t  docs.classicalElectronRadius = {description: 'Classical electron radius', examples: ['classicalElectronRadius']};\n\t\t  docs.electronMass = {description: 'Electron mass', examples: ['electronMass']};\n\t\t  docs.fermiCoupling = {description: 'Fermi coupling constant', examples: ['fermiCoupling']};\n\t\t  docs.fineStructure = {description: 'Fine-structure constant', examples: ['fineStructure']};\n\t\t  docs.hartreeEnergy = {description: 'Hartree energy', examples: ['hartreeEnergy']};\n\t\t  docs.protonMass = {description: 'Proton mass', examples: ['protonMass']};\n\t\t  docs.deuteronMass = {description: 'Deuteron Mass', examples: ['deuteronMass']};\n\t\t  docs.neutronMass = {description: 'Neutron mass', examples: ['neutronMass']};\n\t\t  docs.quantumOfCirculation = {description: 'Quantum of circulation', examples: ['quantumOfCirculation']};\n\t\t  docs.rydberg = {description: 'Rydberg constant', examples: ['rydberg']};\n\t\t  docs.thomsonCrossSection = {description: 'Thomson cross section', examples: ['thomsonCrossSection']};\n\t\t  docs.weakMixingAngle = {description: 'Weak mixing angle', examples: ['weakMixingAngle']};\n\t\t  docs.efimovFactor = {description: 'Efimov factor', examples: ['efimovFactor']};\n  docs.atomicMass = {description: 'Atomic mass constant', examples: ['atomicMass']};\n\t\t  docs.avogadro = {description: 'Avogadro\\'s number', examples: ['avogadro']};\n\t\t  docs.boltzmann = {description: 'Boltzmann constant', examples: ['boltzmann']};\n\t\t  docs.faraday = {description: 'Faraday constant', examples: ['faraday']};\n\t\t  docs.firstRadiation = {description: 'First radiation constant', examples: ['firstRadiation']};\n\t\t  docs.loschmidt = {description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt']};\n\t\t  docs.gasConstant = {description: 'Gas constant', examples: ['gasConstant']};\n\t\t  docs.molarPlanckConstant = {description: 'Molar Planck constant', examples: ['molarPlanckConstant']};\n\t\t  docs.molarVolume = {description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume']};\n\t\t  docs.sackurTetrode = {description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode']};\n\t\t  docs.secondRadiation = {description: 'Second radiation constant', examples: ['secondRadiation']};\n\t\t  docs.stefanBoltzmann = {description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann']};\n\t\t  docs.wienDisplacement = {description: 'Wien displacement law constant', examples: ['wienDisplacement']};\n\t\t  //docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};\n  docs.molarMass = {description: 'Molar mass constant', examples: ['molarMass']};\n\t\t  docs.molarMassC12 = {description: 'Molar mass constant of carbon-12', examples: ['molarMassC12']};\n\t\t  docs.gravity = {description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity']};\n  docs.planckLength = {description: 'Planck length', examples: ['planckLength']};\n\t\t  docs.planckMass = {description: 'Planck mass', examples: ['planckMass']};\n\t\t  docs.planckTime = {description: 'Planck time', examples: ['planckTime']};\n\t\t  docs.planckCharge = {description: 'Planck charge', examples: ['planckCharge']};\n\t\t  docs.planckTemperature = {description: 'Planck temperature', examples: ['planckTemperature']};\n  // functions - algebra\n\t\t  docs.lsolve = __webpack_require__(133);\n\t\t  docs.lup = __webpack_require__(134);\n\t\t  docs.lusolve = __webpack_require__(135);\n\t\t  docs.slu = __webpack_require__(136);\n\t\t  docs.usolve = __webpack_require__(137);\n  // functions - arithmetic\n\t\t  docs.abs = __webpack_require__(138);\n\t\t  docs.add = __webpack_require__(139);\n\t\t  docs.cbrt = __webpack_require__(140);\n\t\t  docs.ceil = __webpack_require__(141);\n\t\t  docs.cube = __webpack_require__(142);\n\t\t  docs.divide = __webpack_require__(143);\n\t\t  docs.dotDivide = __webpack_require__(144);\n\t\t  docs.dotMultiply = __webpack_require__(145);\n\t\t  docs.dotPow = __webpack_require__(146);\n\t\t  docs.exp = __webpack_require__(147);\n\t\t  docs.fix = __webpack_require__(148);\n\t\t  docs.floor = __webpack_require__(149);\n\t\t  docs.gcd = __webpack_require__(150);\n\t\t  docs.hypot = __webpack_require__(151);\n\t\t  docs.lcm = __webpack_require__(152);\n\t\t  docs.log = __webpack_require__(153);\n\t\t  docs.log10 = __webpack_require__(154);\n\t\t  docs.mod = __webpack_require__(155);\n\t\t  docs.multiply = __webpack_require__(156);\n\t\t  docs.norm = __webpack_require__(157);\n\t\t  docs.nthRoot = __webpack_require__(158);\n\t\t  docs.pow = __webpack_require__(159);\n\t\t  docs.round = __webpack_require__(160);\n\t\t  docs.sign = __webpack_require__(161);\n\t\t  docs.sqrt = __webpack_require__(162);\n\t\t  docs.square = __webpack_require__(163);\n\t\t  docs.subtract = __webpack_require__(164);\n\t\t  docs.unaryMinus = __webpack_require__(165);\n\t\t  docs.unaryPlus = __webpack_require__(166);\n\t\t  docs.xgcd = __webpack_require__(167);\n  // functions - bitwise\n\t\t  docs.bitAnd = __webpack_require__(168);\n\t\t  docs.bitNot = __webpack_require__(169);\n\t\t  docs.bitOr = __webpack_require__(170);\n\t\t  docs.bitXor = __webpack_require__(171);\n\t\t  docs.leftShift = __webpack_require__(172);\n\t\t  docs.rightArithShift = __webpack_require__(173);\n\t\t  docs.rightLogShift = __webpack_require__(174);\n  // functions - combinatorics\n\t\t  docs.bellNumbers = __webpack_require__(175);\n\t\t  docs.catalan = __webpack_require__(176);\n\t\t  docs.composition = __webpack_require__(177);\n\t\t  docs.stirlingS2 = __webpack_require__(178);\n  // functions - core\n\t\t  docs['config'] =  __webpack_require__(179);\n\t\t  docs['import'] =  __webpack_require__(180);\n\t\t  docs['typed'] =  __webpack_require__(181);\n  // functions - complex\n\t\t  docs.arg = __webpack_require__(182);\n\t\t  docs.conj = __webpack_require__(183);\n\t\t  docs.re = __webpack_require__(184);\n\t\t  docs.im = __webpack_require__(185);\n  // functions - expression\n\t\t  docs['eval'] =  __webpack_require__(186);\n\t\t  docs.help =  __webpack_require__(187);\n  // functions - geometry\n\t\t  docs.distance = __webpack_require__(188);\n\t\t  docs.intersect = __webpack_require__(189);\n  // functions - logical\n\t\t  docs['and'] = __webpack_require__(190);\n\t\t  docs['not'] = __webpack_require__(191);\n\t\t  docs['or'] = __webpack_require__(192);\n\t\t  docs['xor'] = __webpack_require__(193);\n  // functions - matrix\n\t\t  docs['concat'] = __webpack_require__(194);\n\t\t  docs.cross = __webpack_require__(195);\n\t\t  docs.det = __webpack_require__(196);\n\t\t  docs.diag = __webpack_require__(197);\n\t\t  docs.dot = __webpack_require__(198);\n\t\t  docs.eye = __webpack_require__(199);\n\t\t  docs.filter =  __webpack_require__(200);\n\t\t  docs.flatten = __webpack_require__(201);\n\t\t  docs.forEach =  __webpack_require__(202);\n\t\t  docs.inv = __webpack_require__(203);\n\t\t  docs.map =  __webpack_require__(204);\n\t\t  docs.ones = __webpack_require__(205);\n\t\t  docs.partitionSelect =  __webpack_require__(206);\n\t\t  docs.range = __webpack_require__(207);\n\t\t  docs.resize = __webpack_require__(208);\n\t\t  docs.size = __webpack_require__(209);\n\t\t  docs.sort =  __webpack_require__(210);\n\t\t  docs.squeeze = __webpack_require__(211);\n\t\t  docs.subset = __webpack_require__(212);\n\t\t  docs.trace = __webpack_require__(213);\n\t\t  docs.transpose = __webpack_require__(214);\n\t\t  docs.zeros = __webpack_require__(215);\n  // functions - probability\n\t\t  docs.combinations = __webpack_require__(216);\n\t\t  //docs.distribution = require('./function/probability/distribution');\n\t\t  docs.factorial = __webpack_require__(217);\n\t\t  docs.gamma = __webpack_require__(218);\n\t\t  docs.kldivergence = __webpack_require__(219);\n\t\t  docs.multinomial = __webpack_require__(220);\n\t\t  docs.permutations = __webpack_require__(221);\n\t\t  docs.pickRandom = __webpack_require__(222);\n\t\t  docs.random = __webpack_require__(223);\n\t\t  docs.randomInt = __webpack_require__(224);\n  // functions - relational\n\t\t  docs.compare = __webpack_require__(225);\n\t\t  docs.deepEqual = __webpack_require__(226);\n\t\t  docs['equal'] = __webpack_require__(227);\n\t\t  docs.larger = __webpack_require__(228);\n\t\t  docs.largerEq = __webpack_require__(229);\n\t\t  docs.smaller = __webpack_require__(230);\n\t\t  docs.smallerEq = __webpack_require__(231);\n\t\t  docs.unequal = __webpack_require__(232);\n  // functions - special\n\t\t  docs.erf = __webpack_require__(233);\n  // functions - statistics\n\t\t  docs.max = __webpack_require__(234);\n\t\t  docs.mean = __webpack_require__(235);\n\t\t  docs.median = __webpack_require__(236);\n\t\t  docs.min = __webpack_require__(237);\n\t\t  docs.mode = __webpack_require__(238);\n\t\t  docs.prod = __webpack_require__(239);\n\t\t  docs.quantileSeq = __webpack_require__(240);\n\t\t  docs.std = __webpack_require__(241);\n\t\t  docs.sum = __webpack_require__(242);\n\t\t  docs['var'] = __webpack_require__(243);\n  // functions - trigonometry\n\t\t  docs.acos = __webpack_require__(244);\n\t\t  docs.acosh = __webpack_require__(245);\n\t\t  docs.acot = __webpack_require__(246);\n\t\t  docs.acoth = __webpack_require__(247);\n\t\t  docs.acsc = __webpack_require__(248);\n\t\t  docs.acsch = __webpack_require__(249);\n\t\t  docs.asec = __webpack_require__(250);\n\t\t  docs.asech = __webpack_require__(251);\n\t\t  docs.asin = __webpack_require__(252);\n\t\t  docs.asinh = __webpack_require__(253);\n\t\t  docs.atan = __webpack_require__(254);\n\t\t  docs.atanh = __webpack_require__(255);\n\t\t  docs.atan2 = __webpack_require__(256);\n\t\t  docs.cos = __webpack_require__(257);\n\t\t  docs.cosh = __webpack_require__(258);\n\t\t  docs.cot = __webpack_require__(259);\n\t\t  docs.coth = __webpack_require__(260);\n\t\t  docs.csc = __webpack_require__(261);\n\t\t  docs.csch = __webpack_require__(262);\n\t\t  docs.sec = __webpack_require__(263);\n\t\t  docs.sech = __webpack_require__(264);\n\t\t  docs.sin = __webpack_require__(265);\n\t\t  docs.sinh = __webpack_require__(266);\n\t\t  docs.tan = __webpack_require__(267);\n\t\t  docs.tanh = __webpack_require__(268);\n  // functions - units\n\t\t  docs.to = __webpack_require__(269);\n  // functions - utils\n\t\t  docs.clone = __webpack_require__(270);\n\t\t  docs.format = __webpack_require__(271);\n\t\t  docs.isNaN = __webpack_require__(272);\n\t\t  docs.isInteger = __webpack_require__(273);\n\t\t  docs.isNegative = __webpack_require__(274);\n\t\t  docs.isNumeric = __webpack_require__(275);\n\t\t  docs.isPositive = __webpack_require__(276);\n\t\t  docs.isPrime = __webpack_require__(277);\n\t\t  docs.isZero = __webpack_require__(278);\n\t\t  // docs.print = require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.\n\t\t  docs['typeof'] =  __webpack_require__(279);\n  return docs;\n\t\t}\nexports.name = 'docs';\n\t\texports.path = 'expression';\n\t\texports.factory = factory;\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25568,
            "description": "module.exports = {\n\t\t  'name': 'bignumber',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'bignumber(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a big number from a number or string.',\n\t\t  'examples': [\n\t\t    '0.1 + 0.2',\n\t\t    'bignumber(0.1) + bignumber(0.2)',\n\t\t    'bignumber(\"7.2\")',\n\t\t    'bignumber(\"7.2e500\")',\n\t\t    'bignumber([0.1, 0.2, 0.3])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25593,
            "description": "module.exports = {\n\t\t  'name': 'boolean',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'x',\n\t\t    'boolean(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Convert a string or number into a boolean.',\n\t\t  'examples': [\n\t\t    'boolean(0)',\n\t\t    'boolean(1)',\n\t\t    'boolean(3)',\n\t\t    'boolean(\"true\")',\n\t\t    'boolean(\"false\")',\n\t\t    'boolean([1, 0, 1, 1])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25620,
            "description": "module.exports = {\n\t\t  'name': 'complex',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'complex()',\n\t\t    'complex(re, im)',\n\t\t    'complex(string)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a complex number.',\n\t\t  'examples': [\n\t\t    'complex()',\n\t\t    'complex(2, 3)',\n\t\t    'complex(\"7 - 2i\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25645,
            "description": "module.exports = {\n\t\t  'name': 'createUnit',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'createUnit(definitions)',\n\t\t    'createUnit(name, definition)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a user-defined unit and register it with the Unit type.',\n\t\t  'examples': [\n\t\t    'createUnit(\"foo\")',\n\t\t    'createUnit(\"knot\", {definition: \"0.514444444 m/s\", aliases: [\"knots\", \"kt\", \"kts\"]})',\n\t\t    'createUnit(\"mph\", \"1 mile/hour\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'unit', 'splitUnit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25669,
            "description": "module.exports = {\n\t\t  'name': 'fraction',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'fraction(num)',\n\t\t    'fraction(num,den)'\n\t\t  ],\n\t\t  'description':\n\t\t    'Create a fraction from a number or from a numerator and denominator.',\n\t\t  'examples': [\n\t\t    'fraction(0.125)',\n\t\t    'fraction(1, 3) + fraction(2, 5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25692,
            "description": "module.exports = {\n\t\t  'name': 'index',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    '[start]',\n\t\t    '[start:end]',\n\t\t    '[start:step:end]',\n\t\t    '[start1, start 2, ...]',\n\t\t    '[start1:end1, start2:end2, ...]',\n\t\t    '[start1:step1:end1, start2:step2:end2, ...]'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create an index to get or replace a subset of a matrix',\n\t\t  'examples': [\n\t\t    '[]',\n\t\t    '[1, 2, 3]',\n\t\t    'A = [1, 2, 3; 4, 5, 6]',\n\t\t    'A[1, :]',\n\t\t    'A[1, 2] = 50',\n\t\t    'A[0:2, 0:2] = ones(2, 2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25723,
            "description": "module.exports = {\n\t\t  'name': 'matrix',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    '[]',\n\t\t    '[a1, b1, ...; a2, b2, ...]',\n\t\t    'matrix()',\n\t\t    'matrix(\"dense\")',\n\t\t    'matrix([...])'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a matrix.',\n\t\t  'examples': [\n\t\t    '[]',\n\t\t    '[1, 2, 3]',\n\t\t    '[1, 2, 3; 4, 5, 6]',\n\t\t    'matrix()',\n\t\t    'matrix([3, 4])',\n\t\t    'matrix([3, 4; 5, 6], \"sparse\")',\n\t\t    'matrix([3, 4; 5, 6], \"sparse\", \"number\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25754,
            "description": "module.exports = {\n\t\t  'name': 'number',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'x',\n\t\t    'number(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a number or convert a string or boolean into a number.',\n\t\t  'examples': [\n\t\t    '2',\n\t\t    '2e3',\n\t\t    '4.05',\n\t\t    'number(2)',\n\t\t    'number(\"7.2\")',\n\t\t    'number(true)',\n\t\t    'number([true, false, true, true])',\n\t\t    'number(\"52cm\", \"m\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25783,
            "description": "module.exports = {\n\t\t  'name': 'sparse',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'sparse()',\n\t\t    'sparse([a1, b1, ...; a1, b2, ...])',\n\t\t    'sparse([a1, b1, ...; a1, b2, ...], \"number\")'\n\t\t  ],\n\t\t  'description':\n\t\t  'Create a sparse matrix.',\n\t\t  'examples': [\n\t\t    'sparse()',\n\t\t    'sparse([3, 4; 5, 6])',\n\t\t    'sparse([3, 0; 5, 0], \"number\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25808,
            "description": "module.exports = {\n\t\t  'name': 'splitUnit',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'splitUnit(unit: Unit, parts: Unit[])'\n\t\t  ],\n\t\t  'description':\n\t\t      'Split a unit in an array of units whose sum is equal to the original unit.',\n\t\t  'examples': [\n\t\t    'splitUnit(1 m, [\"feet\", \"inch\"])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'unit', 'createUnit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25829,
            "description": "module.exports = {\n\t\t  'name': 'string',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    '\"text\"',\n\t\t    'string(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a string or convert a value to a string',\n\t\t  'examples': [\n\t\t    '\"Hello World!\"',\n\t\t    'string(4.2)',\n\t\t    'string(3 + 2i)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25853,
            "description": "module.exports = {\n\t\t  'name': 'unit',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'value unit',\n\t\t    'unit(value, unit)',\n\t\t    'unit(string)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a unit.',\n\t\t  'examples': [\n\t\t    '5.5 mm',\n\t\t    '3 inch',\n\t\t    'unit(7.1, \"kilogram\")',\n\t\t    'unit(\"23 deg\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25879,
            "description": "module.exports = {\n\t\t  'name': 'e',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'e'\n\t\t  ],\n\t\t  'description': 'Euler\\'s number, the base of the natural logarithm. Approximately equal to 2.71828',\n\t\t  'examples': [\n\t\t    'e',\n\t\t    'e ^ 2',\n\t\t    'exp(2)',\n\t\t    'log(e)'\n\t\t  ],\n\t\t  'seealso': ['exp']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25900,
            "description": "module.exports = {\n\t\t  'name': 'false',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'false'\n\t\t  ],\n\t\t  'description': 'Boolean value false',\n\t\t  'examples': [\n\t\t    'false'\n\t\t  ],\n\t\t  'seealso': ['true']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25918,
            "description": "module.exports = {\n\t\t  'name': 'i',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'i'\n\t\t  ],\n\t\t  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',\n\t\t  'examples': [\n\t\t    'i',\n\t\t    'i * i',\n\t\t    'sqrt(-1)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25938,
            "description": "module.exports = {\n\t\t  'name': 'Infinity',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'Infinity'\n\t\t  ],\n\t\t  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',\n\t\t  'examples': [\n\t\t    'Infinity',\n\t\t    '1 / 0'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25957,
            "description": "module.exports = {\n\t\t  'name': 'LN2',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'LN2'\n\t\t  ],\n\t\t  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',\n\t\t  'examples': [\n\t\t    'LN2',\n\t\t    'log(2)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25976,
            "description": "module.exports = {\n\t\t  'name': 'LN10',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'LN10'\n\t\t  ],\n\t\t  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',\n\t\t  'examples': [\n\t\t    'LN10',\n\t\t    'log(10)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 25995,
            "description": "module.exports = {\n\t\t  'name': 'LOG2E',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'LOG2E'\n\t\t  ],\n\t\t  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',\n\t\t  'examples': [\n\t\t    'LOG2E',\n\t\t    'log(e, 2)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26014,
            "description": "module.exports = {\n\t\t  'name': 'LOG10E',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'LOG10E'\n\t\t  ],\n\t\t  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',\n\t\t  'examples': [\n\t\t    'LOG10E',\n\t\t    'log(e, 10)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26033,
            "description": "module.exports = {\n\t\t  'name': 'NaN',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'NaN'\n\t\t  ],\n\t\t  'description': 'Not a number',\n\t\t  'examples': [\n\t\t    'NaN',\n\t\t    '0 / 0'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26052,
            "description": "module.exports = {\n\t\t  'name': 'null',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'null'\n\t\t  ],\n\t\t  'description': 'Value null',\n\t\t  'examples': [\n\t\t    'null'\n\t\t  ],\n\t\t  'seealso': ['true', 'false']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26070,
            "description": "module.exports = {\n\t\t  'name': 'pi',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'pi'\n\t\t  ],\n\t\t  'description': 'The number pi is a mathematical constant that is the ratio of a circle\\'s circumference to its diameter, and is approximately equal to 3.14159',\n\t\t  'examples': [\n\t\t    'pi',\n\t\t    'sin(pi/2)'\n\t\t  ],\n\t\t  'seealso': ['tau']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26089,
            "description": "module.exports = {\n\t\t  'name': 'phi',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'phi'\n\t\t  ],\n\t\t  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',\n\t\t  'examples': [\n\t\t    'tau'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26107,
            "description": "module.exports = {\n\t\t  'name': 'SQRT1_2',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'SQRT1_2'\n\t\t  ],\n\t\t  'description': 'Returns the square root of 1/2, approximately equal to 0.707',\n\t\t  'examples': [\n\t\t    'SQRT1_2',\n\t\t    'sqrt(1/2)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26126,
            "description": "module.exports = {\n\t\t  'name': 'SQRT2',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'SQRT2'\n\t\t  ],\n\t\t  'description': 'Returns the square root of 2, approximately equal to 1.414',\n\t\t  'examples': [\n\t\t    'SQRT2',\n\t\t    'sqrt(2)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26145,
            "description": "module.exports = {\n\t\t  'name': 'tau',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'tau'\n\t\t  ],\n\t\t  'description': 'Tau is the ratio constant of a circle\\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',\n\t\t  'examples': [\n\t\t    'tau',\n\t\t    '2 * pi'\n\t\t  ],\n\t\t  'seealso': ['pi']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26164,
            "description": "module.exports = {\n\t\t  'name': 'true',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'true'\n\t\t  ],\n\t\t  'description': 'Boolean value true',\n\t\t  'examples': [\n\t\t    'true'\n\t\t  ],\n\t\t  'seealso': ['false']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26182,
            "description": "module.exports = {\n\t\t  'name': 'version',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'version'\n\t\t  ],\n\t\t  'description': 'A string with the version number of math.js',\n\t\t  'examples': [\n\t\t    'version'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26200,
            "description": "module.exports = {\n\t\t  'name': 'lsolve',\n\t\t  'category': 'Algebra',\n\t\t  'syntax': [\n\t\t    'x=lsolve(L, b)'\n\t\t  ],\n\t\t  'description':\n\t\t  'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',\n\t\t  'examples': [\n\t\t    'a = [-2, 3; 2, 1]',\n\t\t    'b = [11, 9]',\n\t\t    'x = lsolve(a, b)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'lup', 'lusolve', 'usolve', 'matrix', 'sparse'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26223,
            "description": "module.exports = {\n\t\t  'name': 'lup',\n\t\t  'category': 'Algebra',\n\t\t  'syntax': [\n\t\t    'lup(m)'\n\t\t  ],\n\t\t  'description':\n\t\t  'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',\n\t\t  'examples': [\n\t\t    'lup([[2, 1], [1, 4]])',\n\t\t    'lup(matrix([[2, 1], [1, 4]]))',\n\t\t    'lup(sparse([[2, 1], [1, 4]]))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26246,
            "description": "module.exports = {\n\t\t  'name': 'lusolve',\n\t\t  'category': 'Algebra',\n\t\t  'syntax': [\n\t\t    'x=lusolve(A, b)',\n\t\t    'x=lusolve(lu, b)'\n\t\t  ],\n\t\t  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',\n\t\t  'examples': [\n\t\t    'a = [-2, 3; 2, 1]',\n\t\t    'b = [11, 9]',\n\t\t    'x = lusolve(a, b)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26269,
            "description": "module.exports = {\n\t\t  'name': 'slu',\n\t\t  'category': 'Algebra',\n\t\t  'syntax': [\n\t\t    'slu(A, order, threshold)'\n\t\t  ],\n\t\t  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',\n\t\t  'examples': [\n\t\t    'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26289,
            "description": "module.exports = {\n\t\t  'name': 'usolve',\n\t\t  'category': 'Algebra',\n\t\t  'syntax': [\n\t\t    'x=usolve(U, b)'\n\t\t  ],\n\t\t  'description':\n\t\t  'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',\n\t\t  'examples': [\n\t\t    'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26310,
            "description": "module.exports = {\n\t\t  'name': 'abs',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'abs(x)'\n\t\t  ],\n\t\t  'description': 'Compute the absolute value.',\n\t\t  'examples': [\n\t\t    'abs(3.5)',\n\t\t    'abs(-4.2)'\n\t\t  ],\n\t\t  'seealso': ['sign']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26329,
            "description": "module.exports = {\n\t\t  'name': 'add',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x + y',\n\t\t    'add(x, y)'\n\t\t  ],\n\t\t  'description': 'Add two values.',\n\t\t  'examples': [\n\t\t    'a = 2.1 + 3.6',\n\t\t    'a - 3.6',\n\t\t    '3 + 2i',\n\t\t    '3 cm + 2 inch',\n\t\t    '\"2.3\" + \"4\"'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'subtract'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26354,
            "description": "module.exports = {\n\t\t  'name': 'cbrt',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'cbrt(x)',\n\t\t    'cbrt(x, allRoots)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',\n\t\t  'examples': [\n\t\t    'cbrt(64)',\n\t\t    'cube(4)',\n\t\t    'cbrt(-8)',\n\t\t    'cbrt(2 + 3i)',\n\t\t    'cbrt(8i)',\n\t\t    'cbrt(8i, true)',\n\t\t    'cbrt(27 m^3)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'square',\n\t\t    'sqrt',\n\t\t    'cube',\n\t\t    'multiply'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26385,
            "description": "module.exports = {\n\t\t  'name': 'ceil',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'ceil(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',\n\t\t  'examples': [\n\t\t    'ceil(3.2)',\n\t\t    'ceil(3.8)',\n\t\t    'ceil(-4.2)'\n\t\t  ],\n\t\t  'seealso': ['floor', 'fix', 'round']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26406,
            "description": "module.exports = {\n\t\t  'name': 'cube',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'cube(x)'\n\t\t  ],\n\t\t  'description': 'Compute the cube of a value. The cube of x is x * x * x.',\n\t\t  'examples': [\n\t\t    'cube(2)',\n\t\t    '2^3',\n\t\t    '2 * 2 * 2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'square',\n\t\t    'pow'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26430,
            "description": "module.exports = {\n\t\t  'name': 'divide',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x / y',\n\t\t    'divide(x, y)'\n\t\t  ],\n\t\t  'description': 'Divide two values.',\n\t\t  'examples': [\n\t\t    'a = 2 / 3',\n\t\t    'a * 3',\n\t\t    '4.5 / 2',\n\t\t    '3 + 4 / 2',\n\t\t    '(3 + 4) / 2',\n\t\t    '18 km / 4.5'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26456,
            "description": "module.exports = {\n\t\t  'name': 'dotDivide',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x ./ y',\n\t\t    'dotDivide(x, y)'\n\t\t  ],\n\t\t  'description': 'Divide two values element wise.',\n\t\t  'examples': [\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'b = [2, 1, 1; 3, 2, 5]',\n\t\t    'a ./ b'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'dotMultiply',\n\t\t    'divide'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26481,
            "description": "module.exports = {\n\t\t  'name': 'dotMultiply',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x .* y',\n\t\t    'dotMultiply(x, y)'\n\t\t  ],\n\t\t  'description': 'Multiply two values element wise.',\n\t\t  'examples': [\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'b = [2, 1, 1; 3, 2, 5]',\n\t\t    'a .* b'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'divide',\n\t\t    'dotDivide'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26506,
            "description": "module.exports = {\n\t\t  'name': 'dotpow',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x .^ y',\n\t\t    'dotpow(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Calculates the power of x to y element wise.',\n\t\t  'examples': [\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'a .^ 2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'pow'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26529,
            "description": "module.exports = {\n\t\t  'name': 'exp',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'exp(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the exponent of a value.',\n\t\t  'examples': [\n\t\t    'exp(1.3)',\n\t\t    'e ^ 1.3',\n\t\t    'log(exp(1.3))',\n\t\t    'x = 2.4',\n\t\t    '(exp(i*x) == cos(x) + i*sin(x))   # Euler\\'s formula'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'pow',\n\t\t    'log'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26554,
            "description": "module.exports = {\n\t\t  'name': 'fix',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'fix(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',\n\t\t  'examples': [\n\t\t    'fix(3.2)',\n\t\t    'fix(3.8)',\n\t\t    'fix(-4.2)',\n\t\t    'fix(-4.8)'\n\t\t  ],\n\t\t  'seealso': ['ceil', 'floor', 'round']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26576,
            "description": "module.exports = {\n\t\t  'name': 'floor',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'floor(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',\n\t\t  'examples': [\n\t\t    'floor(3.2)',\n\t\t    'floor(3.8)',\n\t\t    'floor(-4.2)'\n\t\t  ],\n\t\t  'seealso': ['ceil', 'fix', 'round']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26597,
            "description": "module.exports = {\n\t\t  'name': 'gcd',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'gcd(a, b)',\n\t\t    'gcd(a, b, c, ...)'\n\t\t  ],\n\t\t  'description': 'Compute the greatest common divisor.',\n\t\t  'examples': [\n\t\t    'gcd(8, 12)',\n\t\t    'gcd(-4, 6)',\n\t\t    'gcd(25, 15, -10)'\n\t\t  ],\n\t\t  'seealso': [ 'lcm', 'xgcd' ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26618,
            "description": "module.exports = {\n\t\t  'name': 'hypot',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'hypot(a, b, c, ...)',\n\t\t    'hypot([a, b, c, ...])'\n\t\t  ],\n\t\t  'description': 'Calculate the hypotenusa of a list with values. ',\n\t\t  'examples': [\n\t\t    'hypot(3, 4)',\n\t\t    'sqrt(3^2 + 4^2)',\n\t\t    'hypot(-2)',\n\t\t    'hypot([3, 4, 5])'\n\t\t  ],\n\t\t  'seealso': [ 'abs', 'norm' ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26640,
            "description": "module.exports = {\n\t\t  'name': 'lcm',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'lcm(x, y)'\n\t\t  ],\n\t\t  'description': 'Compute the least common multiple.',\n\t\t  'examples': [\n\t\t    'lcm(4, 6)',\n\t\t    'lcm(6, 21)',\n\t\t    'lcm(6, 21, 5)'\n\t\t  ],\n\t\t  'seealso': [ 'gcd' ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26660,
            "description": "module.exports = {\n\t\t  'name': 'log',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'log(x)',\n\t\t    'log(x, base)'\n\t\t  ],\n\t\t  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',\n\t\t  'examples': [\n\t\t    'log(3.5)',\n\t\t    'a = log(2.4)',\n\t\t    'exp(a)',\n\t\t    '10 ^ 4',\n\t\t    'log(10000, 10)',\n\t\t    'log(10000) / log(10)',\n\t\t    'b = log(1024, 2)',\n\t\t    '2 ^ b'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'exp',\n\t\t    'log10'\n\t\t  ]\n\t\t};\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26688,
            "description": "module.exports = {\n\t\t  'name': 'log10',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'log10(x)'\n\t\t  ],\n\t\t  'description': 'Compute the 10-base logarithm of a value.',\n\t\t  'examples': [\n\t\t    'log10(0.00001)',\n\t\t    'log10(10000)',\n\t\t    '10 ^ 4',\n\t\t    'log(10000) / log(10)',\n\t\t    'log(10000, 10)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'exp',\n\t\t    'log'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26713,
            "description": "module.exports = {\n\t\t  'name': 'mod',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x % y',\n\t\t    'x mod y',\n\t\t    'mod(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Calculates the modulus, the remainder of an integer division.',\n\t\t  'examples': [\n\t\t    '7 % 3',\n\t\t    '11 % 2',\n\t\t    '10 mod 4',\n\t\t    'function isOdd(x) = x % 2',\n\t\t    'isOdd(2)',\n\t\t    'isOdd(3)'\n\t\t  ],\n\t\t  'seealso': ['divide']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26739,
            "description": "module.exports = {\n\t\t  'name': 'multiply',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x * y',\n\t\t    'multiply(x, y)'\n\t\t  ],\n\t\t  'description': 'multiply two values.',\n\t\t  'examples': [\n\t\t    'a = 2.1 * 3.4',\n\t\t    'a / 3.4',\n\t\t    '2 * 3 + 4',\n\t\t    '2 * (3 + 4)',\n\t\t    '3 * 2.1 km'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'divide'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26764,
            "description": "module.exports = {\n\t\t  'name': 'norm',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'norm(x)',\n\t\t    'norm(x, p)'\n\t\t  ],\n\t\t  'description': 'Calculate the norm of a number, vector or matrix.',\n\t\t  'examples': [\n\t\t    'abs(-3.5)',\n\t\t    'norm(-3.5)',\n\t\t    'norm(3 - 4i))',\n\t\t    'norm([1, 2, -3], Infinity)',\n\t\t    'norm([1, 2, -3], -Infinity)',\n\t\t    'norm([3, 4], 2)',\n\t\t    'norm([[1, 2], [3, 4]], 1)',\n\t\t    'norm([[1, 2], [3, 4]], \\'inf\\')',\n\t\t    'norm([[1, 2], [3, 4]], \\'fro\\')'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26790,
            "description": "module.exports = {\n\t\t  'name': 'nthRoot',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'nthRoot(a)',\n\t\t    'nthRoot(a, root)'\n\t\t  ],\n\t\t  'description': 'Calculate the nth root of a value. ' +\n\t\t      'The principal nth root of a positive real number A, ' +\n\t\t      'is the positive real solution of the equation \"x^root = A\".',\n\t\t  'examples': [\n\t\t    '4 ^ 3',\n\t\t    'nthRoot(64, 3)',\n\t\t    'nthRoot(9, 2)',\n\t\t    'sqrt(9)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sqrt',\n\t\t    'pow'\n\t\t  ]\n\t\t};\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26816,
            "description": "module.exports = {\n\t\t  'name': 'pow',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x ^ y',\n\t\t    'pow(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Calculates the power of x to y, x^y.',\n\t\t  'examples': [\n\t\t    '2^3 = 8',\n\t\t    '2*2*2',\n\t\t    '1 + e ^ (pi * i)'\n\t\t  ],\n\t\t  'seealso': [ 'multiply' ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26838,
            "description": "module.exports = {\n\t\t  'name': 'round',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'round(x)',\n\t\t    'round(x, n)'\n\t\t  ],\n\t\t  'description':\n\t\t      'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',\n\t\t  'examples': [\n\t\t    'round(3.2)',\n\t\t    'round(3.8)',\n\t\t    'round(-4.2)',\n\t\t    'round(-4.8)',\n\t\t    'round(pi, 3)',\n\t\t    'round(123.45678, 2)'\n\t\t  ],\n\t\t  'seealso': ['ceil', 'floor', 'fix']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26863,
            "description": "module.exports = {\n\t\t  'name': 'sign',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'sign(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',\n\t\t  'examples': [\n\t\t    'sign(3.5)',\n\t\t    'sign(-4.2)',\n\t\t    'sign(0)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'abs'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26886,
            "description": "module.exports = {\n\t\t  'name': 'sqrt',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'sqrt(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the square root value. If x = y * y, then y is the square root of x.',\n\t\t  'examples': [\n\t\t    'sqrt(25)',\n\t\t    '5 * 5',\n\t\t    'sqrt(-1)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'square',\n\t\t    'multiply'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26910,
            "description": "module.exports = {\n\t\t  'name': 'square',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'square(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the square of a value. The square of x is x * x.',\n\t\t  'examples': [\n\t\t    'square(3)',\n\t\t    'sqrt(9)',\n\t\t    '3^2',\n\t\t    '3 * 3'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'pow',\n\t\t    'sqrt',\n\t\t    'cube'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26937,
            "description": "module.exports = {\n\t\t  'name': 'subtract',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x - y',\n\t\t    'subtract(x, y)'\n\t\t  ],\n\t\t  'description': 'subtract two values.',\n\t\t  'examples': [\n\t\t    'a = 5.3 - 2',\n\t\t    'a + 2',\n\t\t    '2/3 - 1/6',\n\t\t    '2 * 3 - 3',\n\t\t    '2.1 km - 500m'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'add'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26962,
            "description": "module.exports = {\n\t\t  'name': 'unaryMinus',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    '-x',\n\t\t    'unaryMinus(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Inverse the sign of a value. Converts booleans and strings to numbers.',\n\t\t  'examples': [\n\t\t    '-4.5',\n\t\t    '-(-5.6)',\n\t\t    '-\"22\"'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'add', 'subtract', 'unaryPlus'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 26986,
            "description": "module.exports = {\n\t\t  'name': 'unaryPlus',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    '+x',\n\t\t    'unaryPlus(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Converts booleans and strings to numbers.',\n\t\t  'examples': [\n\t\t    '+true',\n\t\t    '+\"2\"'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'add', 'subtract', 'unaryMinus'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27009,
            "description": "module.exports = {\n\t\t  'name': 'xgcd',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'xgcd(a, b)'\n\t\t  ],\n\t\t  'description': 'Calculate the extended greatest common divisor for two values',\n\t\t  'examples': [\n\t\t    'xgcd(8, 12)',\n\t\t    'gcd(8, 12)',\n\t\t    'xgcd(36163, 21199)'\n\t\t  ],\n\t\t  'seealso': [ 'gcd', 'lcm' ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27029,
            "description": "module.exports = {\n\t\t  'name': 'bitAnd',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'x & y',\n\t\t    'bitAnd(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',\n\t\t  'examples': [\n\t\t    '5 & 3',\n\t\t    'bitAnd(53, 131)',\n\t\t    '[1, 12, 31] & 42'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27052,
            "description": "module.exports = {\n\t\t  'name': 'bitNot',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    '~x',\n\t\t    'bitNot(x)'\n\t\t  ],\n\t\t  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',\n\t\t  'examples': [\n\t\t    '~1',\n\t\t    '~2',\n\t\t    'bitNot([2, -3, 4])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27075,
            "description": "module.exports = {\n\t\t  'name': 'bitOr',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'x | y',\n\t\t    'bitOr(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',\n\t\t  'examples': [\n\t\t    '5 | 3',\n\t\t    'bitOr([1, 2, 3], 4)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27097,
            "description": "module.exports = {\n\t\t  'name': 'bitXor',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'bitXor(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',\n\t\t  'examples': [\n\t\t    'bitOr(1, 2)',\n\t\t    'bitXor([2, 3, 4], 4)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27118,
            "description": "module.exports = {\n\t\t  'name': 'leftShift',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'x << y',\n\t\t    'leftShift(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise left logical shift of a value x by y number of bits.',\n\t\t  'examples': [\n\t\t    '4 << 1',\n\t\t    '8 >> 1'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27140,
            "description": "module.exports = {\n\t\t  'name': 'rightArithShift',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'x >> y',\n\t\t    'leftShift(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',\n\t\t  'examples': [\n\t\t    '8 >> 1',\n\t\t    '4 << 1',\n\t\t    '-12 >> 2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27163,
            "description": "module.exports = {\n\t\t  'name': 'rightLogShift',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'x >> y',\n\t\t    'leftShift(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise right logical shift of a value x by y number of bits.',\n\t\t  'examples': [\n\t\t    '8 >>> 1',\n\t\t    '4 << 1',\n\t\t    '-12 >>> 2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27186,
            "description": "module.exports = {\n\t\t  'name': 'bellNumbers',\n\t\t  'category': 'Combinatorics',\n\t\t  'syntax': [\n\t\t    'bellNumbers(n)'\n\t\t  ],\n\t\t  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',\n\t\t  'examples': [\n\t\t    'bellNumbers(3)',\n\t\t    'bellNumbers(8)'\n\t\t  ],\n\t\t  'seealso': ['stirlingS2']\n\t\t};\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27204,
            "description": "module.exports = {\n\t\t  'name': 'catalan',\n\t\t  'category': 'Combinatorics',\n\t\t  'syntax': [\n\t\t    'catalan(n)'\n\t\t  ],\n\t\t  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',\n\t\t  'examples': [\n\t\t    'catalan(3)',\n\t\t    'catalan(8)'\n\t\t  ],\n\t\t  'seealso': ['bellNumbers']\n\t\t};\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27222,
            "description": "module.exports = {\n\t\t  'name': 'composition',\n\t\t  'category': 'Combinatorics',\n\t\t  'syntax': [\n\t\t    'composition(n, k)'\n\t\t  ],\n\t\t  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',\n\t\t  'examples': [\n\t\t    'composition(5, 3)'\n\t\t  ],\n\t\t  'seealso': ['combinations']\n\t\t};\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27239,
            "description": "module.exports = {\n\t\t  'name': 'stirlingS2',\n\t\t  'category': 'Combinatorics',\n\t\t  'syntax': [\n\t\t    'stirlingS2(n, k)'\n\t\t  ],\n\t\t  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',\n\t\t  'examples': [\n\t\t    'stirlingS2(5, 3)'\n\t\t  ],\n\t\t  'seealso': ['bellNumbers']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27257,
            "description": "module.exports = {\n\t\t  'name': 'config',\n\t\t  'category': 'Core',\n\t\t  'syntax': [\n\t\t    'config()',\n\t\t    'config(options)'\n\t\t  ],\n\t\t  'description': 'Get configuration or change configuration.',\n\t\t  'examples': [\n\t\t    'config()',\n\t\t    '1/3 + 1/4',\n\t\t    'config({number: \"Fraction\"})',\n\t\t    '1/3 + 1/4'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27279,
            "description": "module.exports = {\n\t\t  'name': 'import',\n\t\t  'category': 'Core',\n\t\t  'syntax': [\n\t\t    'import(functions)',\n\t\t    'import(functions, options)'\n\t\t  ],\n\t\t  'description': 'Import functions or constants from an object.',\n\t\t  'examples': [\n\t\t    'import({myFn: f(x)=x^2, myConstant: 32 })',\n\t\t    'myFn(2)',\n\t\t    'myConstant'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27300,
            "description": "module.exports = {\n\t\t  'name': 'typed',\n\t\t  'category': 'Core',\n\t\t  'syntax': [\n\t\t    'typed(signatures)',\n\t\t    'typed(name, signatures)'\n\t\t  ],\n\t\t  'description': 'Create a typed function.',\n\t\t  'examples': [\n\t\t    'double = typed({ \"number, number\": f(x)=x+x })',\n\t\t    'double(2)',\n\t\t    'double(\"hello\")'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27321,
            "description": "module.exports = {\n\t\t  'name': 'arg',\n\t\t  'category': 'Complex',\n\t\t  'syntax': [\n\t\t    'arg(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',\n\t\t  'examples': [\n\t\t    'arg(2 + 2i)',\n\t\t    'atan2(3, 2)',\n\t\t    'arg(2 + 3i)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    're',\n\t\t    'im',\n\t\t    'conj',\n\t\t    'abs'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27347,
            "description": "module.exports = {\n\t\t  'name': 'conj',\n\t\t  'category': 'Complex',\n\t\t  'syntax': [\n\t\t    'conj(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',\n\t\t  'examples': [\n\t\t    'conj(2 + 3i)',\n\t\t    'conj(2 - 3i)',\n\t\t    'conj(-5.2i)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    're',\n\t\t    'im',\n\t\t    'abs',\n\t\t    'arg'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27373,
            "description": "module.exports = {\n\t\t  'name': 're',\n\t\t  'category': 'Complex',\n\t\t  'syntax': [\n\t\t    're(x)'\n\t\t  ],\n\t\t  'description': 'Get the real part of a complex number.',\n\t\t  'examples': [\n\t\t    're(2 + 3i)',\n\t\t    'im(2 + 3i)',\n\t\t    're(-5.2i)',\n\t\t    're(2.4)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'im',\n\t\t    'conj',\n\t\t    'abs',\n\t\t    'arg'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27399,
            "description": "module.exports = {\n\t\t  'name': 'im',\n\t\t  'category': 'Complex',\n\t\t  'syntax': [\n\t\t    'im(x)'\n\t\t  ],\n\t\t  'description': 'Get the imaginary part of a complex number.',\n\t\t  'examples': [\n\t\t    'im(2 + 3i)',\n\t\t    're(2 + 3i)',\n\t\t    'im(-5.2i)',\n\t\t    'im(2.4)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    're',\n\t\t    'conj',\n\t\t    'abs',\n\t\t    'arg'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27425,
            "description": "module.exports = {\n\t\t  'name': 'eval',\n\t\t  'category': 'Expression',\n\t\t  'syntax': [\n\t\t    'eval(expression)',\n\t\t    'eval([expr1, expr2, expr3, ...])'\n\t\t  ],\n\t\t  'description': 'Evaluate an expression or an array with expressions.',\n\t\t  'examples': [\n\t\t    'eval(\"2 + 3\")',\n\t\t    'eval(\"sqrt(\" + 4 + \")\")'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27445,
            "description": "module.exports = {\n\t\t  'name': 'help',\n\t\t  'category': 'Expression',\n\t\t  'syntax': [\n\t\t    'help(object)',\n\t\t    'help(string)'\n\t\t  ],\n\t\t  'description': 'Display documentation on a function or data type.',\n\t\t  'examples': [\n\t\t    'help(sqrt)',\n\t\t    'help(\"complex\")'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27465,
            "description": "module.exports = {\n\t\t  'name': 'distance',\n\t\t  'category': 'Geometry',\n\t\t  'syntax': [\n\t\t    'distance([x1, y1], [x2, y2])',\n\t\t    'distance([[x1, y1], [x2, y2])'\n\t\t  ],\n\t\t  'description': 'Calculates the Euclidean distance between two points.',\n\t\t  'examples': [\n\t\t    'distance([0,0], [4,4])',\n\t\t    'distance([[0,0], [4,4]])'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27485,
            "description": "module.exports = {\n\t\t  'name': 'intersect',\n\t\t  'category': 'Geometry',\n\t\t  'syntax': [\n\t\t    'intersect(expr1, expr2, expr3, expr4)',\n\t\t    'intersect(expr1, expr2, expr3)'\n\t\t  ],\n\t\t  'description': 'Computes the intersection point of lines and/or planes.',\n\t\t  'examples': [\n\t\t    'intersect([0, 0], [10, 10], [10, 0], [0, 10])',\n\t\t    'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27505,
            "description": "module.exports = {\n\t\t  'name': 'and',\n\t\t  'category': 'Logical',\n\t\t  'syntax': [\n\t\t    'x and y',\n\t\t    'and(x, y)'\n\t\t  ],\n\t\t  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',\n\t\t  'examples': [\n\t\t    'true and false',\n\t\t    'true and true',\n\t\t    '2 and 4'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'not', 'or', 'xor'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27528,
            "description": "module.exports = {\n\t\t  'name': 'not',\n\t\t  'category': 'Logical',\n\t\t  'syntax': [\n\t\t    'not x',\n\t\t    'not(x)'\n\t\t  ],\n\t\t  'description': 'Logical not. Flips the boolean value of given argument.',\n\t\t  'examples': [\n\t\t    'not true',\n\t\t    'not false',\n\t\t    'not 2',\n\t\t    'not 0'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'and', 'or', 'xor'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27552,
            "description": "module.exports = {\n\t\t  'name': 'or',\n\t\t  'category': 'Logical',\n\t\t  'syntax': [\n\t\t    'x or y',\n\t\t    'or(x, y)'\n\t\t  ],\n\t\t  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',\n\t\t  'examples': [\n\t\t    'true or false',\n\t\t    'false or false',\n\t\t    '0 or 4'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'not', 'and', 'xor'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27575,
            "description": "module.exports = {\n\t\t  'name': 'xor',\n\t\t  'category': 'Logical',\n\t\t  'syntax': [\n\t\t    'x or y',\n\t\t    'or(x, y)'\n\t\t  ],\n\t\t  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',\n\t\t  'examples': [\n\t\t    'true xor false',\n\t\t    'false xor false',\n\t\t    'true xor true',\n\t\t    '0 or 4'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'not', 'and', 'or'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27599,
            "description": "module.exports = {\n\t\t  'name': 'concat',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'concat(A, B, C, ...)',\n\t\t    'concat(A, B, C, ..., dim)'\n\t\t  ],\n\t\t  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',\n\t\t  'examples': [\n\t\t    'A = [1, 2; 5, 6]',\n\t\t    'B = [3, 4; 7, 8]',\n\t\t    'concat(A, B)',\n\t\t    'concat(A, B, 1)',\n\t\t    'concat(A, B, 2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27624,
            "description": "module.exports = {\n\t\t  'name': 'cross',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'cross(A, B)'\n\t\t  ],\n\t\t  'description': 'Calculate the cross product for two vectors in three dimensional space.',\n\t\t  'examples': [\n\t\t    'cross([1, 1, 0],  [0, 1, 1])',\n\t\t    'cross([3, -3, 1], [4, 9, 2])',\n\t\t    'cross([2, 3, 4],  [5, 6, 7])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'dot'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27647,
            "description": "module.exports = {\n\t\t  'name': 'det',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'det(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the determinant of a matrix',\n\t\t  'examples': [\n\t\t    'det([1, 2; 3, 4])',\n\t\t    'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27668,
            "description": "module.exports = {\n\t\t  'name': 'diag',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'diag(x)',\n\t\t    'diag(x, k)'\n\t\t  ],\n\t\t  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',\n\t\t  'examples': [\n\t\t    'diag(1:3)',\n\t\t    'diag(1:3, 1)',\n\t\t    'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',\n\t\t    'diag(a)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27692,
            "description": "module.exports = {\n\t\t  'name': 'dot',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'dot(A, B)'\n\t\t  ],\n\t\t  'description': 'Calculate the dot product of two vectors. ' +\n\t\t      'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +\n\t\t      'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',\n\t\t  'examples': [\n\t\t    'dot([2, 4, 1], [2, 2, 3])',\n\t\t    '[2, 4, 1] * [2, 2, 3]'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'cross'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27716,
            "description": "module.exports = {\n\t\t  'name': 'eye',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'eye(n)',\n\t\t    'eye(m, n)',\n\t\t    'eye([m, n])',\n\t\t    'eye'\n\t\t  ],\n\t\t  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',\n\t\t  'examples': [\n\t\t    'eye(3)',\n\t\t    'eye(3, 5)',\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'eye(size(a))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27742,
            "description": "module.exports = {\n\t\t  'name': 'filter',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'filter(x, test)'\n\t\t  ],\n\t\t  'description': 'Filter items in a matrix.',\n\t\t  'examples': [\n\t\t    'isPositive(x) = x > 0',\n\t\t    'filter([6, -2, -1, 4, 3], isPositive)',\n\t\t    'filter([6, -2, 0, 1, 0], x != 0)'\n\t\t  ],\n\t\t  'seealso': ['sort', 'map', 'forEach']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27762,
            "description": "module.exports = {\n\t\t  'name': 'flatten',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'flatten(x)'\n\t\t  ],\n\t\t  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',\n\t\t  'examples': [\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'size(a)',\n\t\t    'b = flatten(a)',\n\t\t    'size(b)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'resize', 'size', 'squeeze'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27785,
            "description": "module.exports = {\n\t\t  'name': 'forEach',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'forEach(x, callback)'\n\t\t  ],\n\t\t  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',\n\t\t  'examples': [\n\t\t    'forEach([1, 2, 3], function(val) { console.log(val) })'\n\t\t  ],\n\t\t  'seealso': ['map', 'sort', 'filter']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27803,
            "description": "module.exports = {\n\t\t  'name': 'inv',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'inv(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the inverse of a matrix',\n\t\t  'examples': [\n\t\t    'inv([1, 2; 3, 4])',\n\t\t    'inv(4)',\n\t\t    '1 / 4'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27825,
            "description": "module.exports = {\n\t\t  'name': 'map',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'map(x, callback)'\n\t\t  ],\n\t\t  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',\n\t\t  'examples': [\n\t\t    'map([1, 2, 3], function(val) { return value * value })'\n\t\t  ],\n\t\t  'seealso': ['filter', 'forEach']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27843,
            "description": "module.exports = {\n\t\t  'name': 'ones',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'ones(m)',\n\t\t    'ones(m, n)',\n\t\t    'ones(m, n, p, ...)',\n\t\t    'ones([m])',\n\t\t    'ones([m, n])',\n\t\t    'ones([m, n, p, ...])',\n\t\t    'ones'\n\t\t  ],\n\t\t  'description': 'Create a matrix containing ones.',\n\t\t  'examples': [\n\t\t    'ones(3)',\n\t\t    'ones(3, 5)',\n\t\t    'ones([2,3]) * 4.5',\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'ones(size(a))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27873,
            "description": "module.exports = {\n\t\t  'name': 'partitionSelect',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'partitionSelect(x, k)',\n\t\t    'partitionSelect(x, k, compare)'\n\t\t  ],\n\t\t  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',\n\t\t  'examples': [\n\t\t    'partitionSelect([5, 10, 1], 2)',\n\t\t    'partitionSelect([\"C\", \"B\", \"A\", \"D\"], 1)'\n\t\t  ],\n\t\t  'seealso': ['sort']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27893,
            "description": "module.exports = {\n\t\t  'name': 'range',\n\t\t  'category': 'Type',\n\t\t  'syntax': [\n\t\t    'start:end',\n\t\t    'start:step:end',\n\t\t    'range(start, end)',\n\t\t    'range(start, end, step)',\n\t\t    'range(string)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a range. Lower bound of the range is included, upper bound is excluded.',\n\t\t  'examples': [\n\t\t    '1:5',\n\t\t    '3:-1:-3',\n\t\t    'range(3, 7)',\n\t\t    'range(0, 12, 2)',\n\t\t    'range(\"4:10\")',\n\t\t    'a = [1, 2, 3, 4; 5, 6, 7, 8]',\n\t\t    'a[1:2, 1:2]'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27924,
            "description": "module.exports = {\n\t\t  'name': 'resize',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'resize(x, size)',\n\t\t    'resize(x, size, defaultValue)'\n\t\t  ],\n\t\t  'description': 'Resize a matrix.',\n\t\t  'examples': [\n\t\t    'resize([1,2,3,4,5], [3])',\n\t\t    'resize([1,2,3], [5])',\n\t\t    'resize([1,2,3], [5], -1)',\n\t\t    'resize(2, [2, 3])',\n\t\t    'resize(\"hello\", [8], \"!\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'size', 'subset', 'squeeze'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27949,
            "description": "module.exports = {\n\t\t  'name': 'size',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'size(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the size of a matrix.',\n\t\t  'examples': [\n\t\t    'size(2.3)',\n\t\t    'size(\"hello world\")',\n\t\t    'a = [1, 2; 3, 4; 5, 6]',\n\t\t    'size(a)',\n\t\t    'size(1:6)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27973,
            "description": "module.exports = {\n\t\t  'name': 'sort',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'sort(x)',\n\t\t    'sort(x, compare)'\n\t\t  ],\n\t\t  'description': 'Sort the items in a matrix. Compare can be a string \"asc\" or \"desc\", or a custom sort function.',\n\t\t  'examples': [\n\t\t    'sort([5, 10, 1])',\n\t\t    'sort([\"C\", \"B\", \"A\", \"D\"])',\n\t\t    'sortByLength(a, b) = size(a)[1] - size(b)[1]',\n\t\t    'sort([\"Langdon\", \"Tom\", \"Sara\"], sortByLength)'\n\t\t  ],\n\t\t  'seealso': ['map', 'filter', 'forEach']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 27995,
            "description": "module.exports = {\n\t\t  'name': 'squeeze',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'squeeze(x)'\n\t\t  ],\n\t\t  'description': 'Remove inner and outer singleton dimensions from a matrix.',\n\t\t  'examples': [\n\t\t    'a = zeros(3,2,1)',\n\t\t    'size(squeeze(a))',\n\t\t    'b = zeros(1,1,3)',\n\t\t    'size(squeeze(b))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28018,
            "description": "module.exports = {\n\t\t  'name': 'subset',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'value(index)',\n\t\t    'value(index) = replacement',\n\t\t    'subset(value, [index])',\n\t\t    'subset(value, [index], replacement)'\n\t\t  ],\n\t\t  'description': 'Get or set a subset of a matrix or string. ' +\n\t\t      'Indexes are one-based. ' +\n\t\t      'Both the ranges lower-bound and upper-bound are included.',\n\t\t  'examples': [\n\t\t    'd = [1, 2; 3, 4]',\n\t\t    'e = []',\n\t\t    'e[1, 1:2] = [5, 6]',\n\t\t    'e[2, :] = [7, 8]',\n\t\t    'f = d * e',\n\t\t    'f[2, 1]',\n\t\t    'f[:, 1]'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28049,
            "description": "module.exports = {\n\t\t  'name': 'trace',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'trace(A)'\n\t\t  ],\n\t\t  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',\n\t\t  'examples': [\n\t\t    'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',\n\t\t    'trace(A)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28070,
            "description": "module.exports = {\n\t\t  'name': 'transpose',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'x\\'',\n\t\t    'transpose(x)'\n\t\t  ],\n\t\t  'description': 'Transpose a matrix',\n\t\t  'examples': [\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'a\\'',\n\t\t    'transpose(a)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28093,
            "description": "module.exports = {\n\t\t  'name': 'zeros',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'zeros(m)',\n\t\t    'zeros(m, n)',\n\t\t    'zeros(m, n, p, ...)',\n\t\t    'zeros([m])',\n\t\t    'zeros([m, n])',\n\t\t    'zeros([m, n, p, ...])',\n\t\t    'zeros'\n\t\t  ],\n\t\t  'description': 'Create a matrix containing zeros.',\n\t\t  'examples': [\n\t\t    'zeros(3)',\n\t\t    'zeros(3, 5)',\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'zeros(size(a))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28122,
            "description": "module.exports = {\n\t\t  'name': 'combinations',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'combinations(n, k)'\n\t\t  ],\n\t\t  'description': 'Compute the number of combinations of n items taken k at a time',\n\t\t  'examples': [\n\t\t    'combinations(7, 5)'\n\t\t  ],\n\t\t  'seealso': ['permutations', 'factorial']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28140,
            "description": "module.exports = {\n\t\t  'name': 'factorial',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'kldivergence(x, y)'\n\t\t  ],\n\t\t  'description': 'Compute the factorial of a value',\n\t\t  'examples': [\n\t\t    '5!',\n\t\t    '5 * 4 * 3 * 2 * 1',\n\t\t    '3!'\n\t\t  ],\n\t\t  'seealso': ['combinations', 'permutations', 'gamma']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28160,
            "description": "module.exports = {\n\t\t  'name': 'gamma',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'gamma(n)'\n\t\t  ],\n\t\t  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',\n\t\t  'examples': [\n\t\t    'gamma(4)',\n\t\t    '3!',\n\t\t    'gamma(1/2)',\n\t\t    'sqrt(pi)'\n\t\t  ],\n\t\t  'seealso': ['factorial']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28181,
            "description": "module.exports = {\n\t\t  'name': 'kldivergence',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'n!',\n\t\t    'factorial(n)'\n\t\t  ],\n\t\t  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',\n\t\t  'examples': [\n\t\t    'math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28200,
            "description": "module.exports = {\n\t\t  'name': 'multinomial',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'multinomial(A)'\n\t\t  ],\n\t\t  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',\n\t\t  'examples': [\n\t\t    'multinomial([1, 2, 1])'\n\t\t  ],\n\t\t  'seealso': ['combinations', 'factorial']\n\t\t};\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28217,
            "description": "module.exports = {\n\t\t  'name': 'permutations',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'permutations(n)',\n\t\t    'permutations(n, k)'\n\t\t  ],\n\t\t  'description': 'Compute the number of permutations of n items taken k at a time',\n\t\t  'examples': [\n\t\t    'permutations(5)',\n\t\t    'permutations(5, 3)'\n\t\t  ],\n\t\t  'seealso': ['combinations', 'factorial']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28237,
            "description": "module.exports = {\n\t\t  'name': 'pickRandom',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'pickRandom(array)',\n\t\t    'pickRandom(array, number)',\n\t\t    'pickRandom(array, weights)',\n\t\t    'pickRandom(array, number, weights)',\n\t\t    'pickRandom(array, weights, number)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Pick a random entry from a given array.',\n\t\t  'examples': [\n\t\t    'pickRandom(0:10)',\n\t\t    'pickRandom([1, 3, 1, 6])',\n\t\t    'pickRandom([1, 3, 1, 6], 2)',\n\t\t    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])',\n\t\t    'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])',\n\t\t    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'\n\t\t  ],\n\t\t  'seealso': ['random', 'randomInt']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28265,
            "description": "module.exports = {\n\t\t  'name': 'random',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'random()',\n\t\t    'random(max)',\n\t\t    'random(min, max)',\n\t\t    'random(size)',\n\t\t    'random(size, max)',\n\t\t    'random(size, min, max)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Return a random number.',\n\t\t  'examples': [\n\t\t    'random()',\n\t\t    'random(10, 20)',\n\t\t    'random([2, 3])'\n\t\t  ],\n\t\t  'seealso': ['pickRandom', 'randomInt']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28291,
            "description": "module.exports = {\n\t\t  'name': 'randInt',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'randInt(max)',\n\t\t    'randInt(min, max)',\n\t\t    'randInt(size)',\n\t\t    'randInt(size, max)',\n\t\t    'randInt(size, min, max)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Return a random integer number',\n\t\t  'examples': [\n\t\t    'randInt(10, 20)',\n\t\t    'randInt([2, 3], 10)'\n\t\t  ],\n\t\t  'seealso': ['pickRandom', 'random']\n\t\t};\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28314,
            "description": "module.exports = {\n\t\t  'name': 'compare',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'compare(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',\n\t\t  'examples': [\n\t\t    'compare(2, 3)',\n\t\t    'compare(3, 2)',\n\t\t    'compare(2, 2)',\n\t\t    'compare(5cm, 40mm)',\n\t\t    'compare(2, [1, 2, 3])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28339,
            "description": "module.exports = {\n\t\t  'name': 'deepEqual',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'deepEqual(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',\n\t\t  'examples': [\n\t\t    '[1,3,4] == [1,3,4]',\n\t\t    '[1,3,4] == [1,3]'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28361,
            "description": "module.exports = {\n\t\t  'name': 'equal',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x == y',\n\t\t    'equal(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check equality of two values. Returns true if the values are equal, and false if not.',\n\t\t  'examples': [\n\t\t    '2+2 == 3',\n\t\t    '2+2 == 4',\n\t\t    'a = 3.2',\n\t\t    'b = 6-2.8',\n\t\t    'a == b',\n\t\t    '50cm == 0.5m'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28388,
            "description": "module.exports = {\n\t\t  'name': 'larger',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x > y',\n\t\t    'larger(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',\n\t\t  'examples': [\n\t\t    '2 > 3',\n\t\t    '5 > 2*2',\n\t\t    'a = 3.3',\n\t\t    'b = 6-2.8',\n\t\t    '(a > b)',\n\t\t    '(b < a)',\n\t\t    '5 cm > 2 inch'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28416,
            "description": "module.exports = {\n\t\t  'name': 'largerEq',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x >= y',\n\t\t    'largerEq(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',\n\t\t  'examples': [\n\t\t    '2 > 1+1',\n\t\t    '2 >= 1+1',\n\t\t    'a = 3.2',\n\t\t    'b = 6-2.8',\n\t\t    '(a > b)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28442,
            "description": "module.exports = {\n\t\t  'name': 'smaller',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x < y',\n\t\t    'smaller(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',\n\t\t  'examples': [\n\t\t    '2 < 3',\n\t\t    '5 < 2*2',\n\t\t    'a = 3.3',\n\t\t    'b = 6-2.8',\n\t\t    '(a < b)',\n\t\t    '5 cm < 2 inch'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28469,
            "description": "module.exports = {\n\t\t  'name': 'smallerEq',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x <= y',\n\t\t    'smallerEq(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',\n\t\t  'examples': [\n\t\t    '2 < 1+1',\n\t\t    '2 <= 1+1',\n\t\t    'a = 3.2',\n\t\t    'b = 6-2.8',\n\t\t    '(a < b)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28495,
            "description": "module.exports = {\n\t\t  'name': 'unequal',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x != y',\n\t\t    'unequal(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',\n\t\t  'examples': [\n\t\t    '2+2 != 3',\n\t\t    '2+2 != 4',\n\t\t    'a = 3.2',\n\t\t    'b = 6-2.8',\n\t\t    'a != b',\n\t\t    '50cm != 0.5m',\n\t\t    '5 cm != 2 inch'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28523,
            "description": "module.exports = {\n\t\t  'name': 'erf',\n\t\t  'category': 'Special',\n\t\t  'syntax': [\n\t\t    'erf(x)'\n\t\t  ],\n\t\t  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',\n\t\t  'examples': [\n\t\t    'erf(0.2)',\n\t\t    'erf(-0.5)',\n\t\t    'erf(4)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28543,
            "description": "module.exports = {\n\t\t  'name': 'max',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'max(a, b, c, ...)',\n\t\t    'max(A)',\n\t\t    'max(A, dim)'\n\t\t  ],\n\t\t  'description': 'Compute the maximum value of a list of values.',\n\t\t  'examples': [\n\t\t    'max(2, 3, 4, 1)',\n\t\t    'max([2, 3, 4, 1])',\n\t\t    'max([2, 5; 4, 3])',\n\t\t    'max([2, 5; 4, 3], 1)',\n\t\t    'max([2, 5; 4, 3], 2)',\n\t\t    'max(2.7, 7.1, -4.5, 2.0, 4.1)',\n\t\t    'min(2.7, 7.1, -4.5, 2.0, 4.1)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'mean',\n\t\t    'median',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28577,
            "description": "module.exports = {\n\t\t  'name': 'mean',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'mean(a, b, c, ...)',\n\t\t    'mean(A)',\n\t\t    'mean(A, dim)'\n\t\t  ],\n\t\t  'description': 'Compute the arithmetic mean of a list of values.',\n\t\t  'examples': [\n\t\t    'mean(2, 3, 4, 1)',\n\t\t    'mean([2, 3, 4, 1])',\n\t\t    'mean([2, 5; 4, 3])',\n\t\t    'mean([2, 5; 4, 3], 1)',\n\t\t    'mean([2, 5; 4, 3], 2)',\n\t\t    'mean([1.0, 2.7, 3.2, 4.0])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'median',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28610,
            "description": "module.exports = {\n\t\t  'name': 'median',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'median(a, b, c, ...)',\n\t\t    'median(A)'\n\t\t  ],\n\t\t  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',\n\t\t  'examples': [\n\t\t    'median(5, 2, 7)',\n\t\t    'median([3, -1, 5, 7])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28638,
            "description": "module.exports = {\n\t\t  'name': 'min',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'min(a, b, c, ...)',\n\t\t    'min(A)',\n\t\t    'min(A, dim)'\n\t\t  ],\n\t\t  'description': 'Compute the minimum value of a list of values.',\n\t\t  'examples': [\n\t\t    'min(2, 3, 4, 1)',\n\t\t    'min([2, 3, 4, 1])',\n\t\t    'min([2, 5; 4, 3])',\n\t\t    'min([2, 5; 4, 3], 1)',\n\t\t    'min([2, 5; 4, 3], 2)',\n\t\t    'min(2.7, 7.1, -4.5, 2.0, 4.1)',\n\t\t    'max(2.7, 7.1, -4.5, 2.0, 4.1)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'median',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28672,
            "description": "module.exports = {\n\t\t  'name': 'mode',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'mode(a, b, c, ...)',\n\t\t    'mode(A)',\n\t\t    'mode(A, a, b, B, c, ...)'\n\t\t  ],\n\t\t  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',\n\t\t  'examples': [\n\t\t    'mode(5, 2, 7)',\n\t\t    'mode([3, -1, 5, 7])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'min',\n\t\t    'median',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28702,
            "description": "module.exports = {\n\t\t  'name': 'prod',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'prod(a, b, c, ...)',\n\t\t    'prod(A)'\n\t\t  ],\n\t\t  'description': 'Compute the product of all values.',\n\t\t  'examples': [\n\t\t    'prod(2, 3, 4)',\n\t\t    'prod([2, 3, 4])',\n\t\t    'prod([2, 5; 4, 3])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'min',\n\t\t    'median',\n\t\t    'min',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28732,
            "description": "module.exports = {\n\t\t  'name': 'quantileSeq',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'quantileSeq(A, prob[, sorted])',\n\t\t    'quantileSeq(A, [prob1, prob2, ...][, sorted])',\n\t\t    'quantileSeq(A, N[, sorted])'\n\t\t  ],\n\t\t  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \\n\\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',\n\t\t  'examples': [\n\t\t    'quantileSeq([3, -1, 5, 7], 0.5)',\n\t\t    'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',\n\t\t    'quantileSeq([3, -1, 5, 7], 2)',\n\t\t    'quantileSeq([-1, 3, 5, 7], 0.5, true)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'mean',\n\t\t    'median',\n\t\t    'min',\n\t\t    'max',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28763,
            "description": "module.exports = {\n\t\t  'name': 'std',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'std(a, b, c, ...)',\n\t\t    'std(A)',\n\t\t    'std(A, normalization)'\n\t\t  ],\n\t\t  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n\t\t  'examples': [\n\t\t    'std(2, 4, 6)',\n\t\t    'std([2, 4, 6, 8])',\n\t\t    'std([2, 4, 6, 8], \"uncorrected\")',\n\t\t    'std([2, 4, 6, 8], \"biased\")',\n\t\t    'std([1, 2, 3; 4, 5, 6])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'min',\n\t\t    'median',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28796,
            "description": "module.exports = {\n\t\t  'name': 'sum',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'sum(a, b, c, ...)',\n\t\t    'sum(A)'\n\t\t  ],\n\t\t  'description': 'Compute the sum of all values.',\n\t\t  'examples': [\n\t\t    'sum(2, 3, 4, 1)',\n\t\t    'sum([2, 3, 4, 1])',\n\t\t    'sum([2, 5; 4, 3])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'median',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28826,
            "description": "module.exports = {\n\t\t  'name': 'var',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'var(a, b, c, ...)',\n\t\t    'var(A)',\n\t\t    'var(A, normalization)'\n\t\t  ],\n\t\t  'description': 'Compute the variance of all values. Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n\t\t  'examples': [\n\t\t    'var(2, 4, 6)',\n\t\t    'var([2, 4, 6, 8])',\n\t\t    'var([2, 4, 6, 8], \"uncorrected\")',\n\t\t    'var([2, 4, 6, 8], \"biased\")',\n\t\t    'var([1, 2, 3; 4, 5, 6])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'min',\n\t\t    'median',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28859,
            "description": "module.exports = {\n\t\t  'name': 'acos',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acos(x)'\n\t\t  ],\n\t\t  'description': 'Compute the inverse cosine of a value in radians.',\n\t\t  'examples': [\n\t\t    'acos(0.5)',\n\t\t    'acos(cos(2.3))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'cos',\n\t\t    'atan',\n\t\t    'asin'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28882,
            "description": "module.exports = {\n\t\t  'name': 'acosh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acosh(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',\n\t\t  'examples': [\n\t\t    'acosh(1.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'cosh',\n\t\t    'asinh',\n\t\t    'atanh'\n\t\t  ]\n\t\t};\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28903,
            "description": "module.exports = {\n\t\t  'name': 'acot',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acot(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the inverse cotangent of a value.',\n\t\t  'examples': [\n\t\t    'acot(0.5)',\n\t\t    'acot(cot(0.5))',\n\t\t    'acot(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'cot',\n\t\t    'atan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28926,
            "description": "module.exports = {\n\t\t  'name': 'acoth',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acoth(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',\n\t\t  'examples': [\n\t\t    'acoth(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acsch',\n\t\t    'asech'\n\t\t  ]\n\t\t};\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28946,
            "description": "module.exports = {\n\t\t  'name': 'acsc',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acsc(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the inverse cotangent of a value.',\n\t\t  'examples': [\n\t\t    'acsc(0.5)',\n\t\t    'acsc(csc(0.5))',\n\t\t    'acsc(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'csc',\n\t\t    'asin',\n\t\t    'asec'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28970,
            "description": "module.exports = {\n\t\t  'name': 'acsch',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acsch(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',\n\t\t  'examples': [\n\t\t    'acsch(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'asech',\n\t\t    'acoth'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 28991,
            "description": "module.exports = {\n\t\t  'name': 'asec',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'asec(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the inverse secant of a value.',\n\t\t  'examples': [\n\t\t    'asec(0.5)',\n\t\t    'asec(sec(0.5))',\n\t\t    'asec(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acos',\n\t\t    'acot',\n\t\t    'acsc'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29015,
            "description": "module.exports = {\n\t\t  'name': 'asech',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'asech(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the inverse secant of a value.',\n\t\t  'examples': [\n\t\t    'asech(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acsch',\n\t\t    'acoth'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29036,
            "description": "module.exports = {\n\t\t  'name': 'asin',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'asin(x)'\n\t\t  ],\n\t\t  'description': 'Compute the inverse sine of a value in radians.',\n\t\t  'examples': [\n\t\t    'asin(0.5)',\n\t\t    'asin(sin(2.3))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sin',\n\t\t    'acos',\n\t\t    'atan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29059,
            "description": "module.exports = {\n\t\t  'name': 'asinh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'asinh(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',\n\t\t  'examples': [\n\t\t    'asinh(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acosh',\n\t\t    'atanh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29080,
            "description": "module.exports = {\n\t\t  'name': 'atan',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'atan(x)'\n\t\t  ],\n\t\t  'description': 'Compute the inverse tangent of a value in radians.',\n\t\t  'examples': [\n\t\t    'atan(0.5)',\n\t\t    'atan(tan(2.3))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'tan',\n\t\t    'acos',\n\t\t    'asin'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29103,
            "description": "module.exports = {\n\t\t  'name': 'atanh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'atanh(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',\n\t\t  'examples': [\n\t\t    'atanh(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acosh',\n\t\t    'asinh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29124,
            "description": "module.exports = {\n\t\t  'name': 'atan2',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'atan2(y, x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Computes the principal value of the arc tangent of y/x in radians.',\n\t\t  'examples': [\n\t\t    'atan2(2, 2) / pi',\n\t\t    'angle = 60 deg in rad',\n\t\t    'x = cos(angle)',\n\t\t    'y = sin(angle)',\n\t\t    'atan2(y, x)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sin',\n\t\t    'cos',\n\t\t    'tan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29151,
            "description": "module.exports = {\n\t\t  'name': 'cos',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'cos(x)'\n\t\t  ],\n\t\t  'description': 'Compute the cosine of x in radians.',\n\t\t  'examples': [\n\t\t    'cos(2)',\n\t\t    'cos(pi / 4) ^ 2',\n\t\t    'cos(180 deg)',\n\t\t    'cos(60 deg)',\n\t\t    'sin(0.2)^2 + cos(0.2)^2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acos',\n\t\t    'sin',\n\t\t    'tan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29177,
            "description": "module.exports = {\n\t\t  'name': 'cosh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'cosh(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic cosine of x in radians.',\n\t\t  'examples': [\n\t\t    'cosh(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sinh',\n\t\t    'tanh',\n\t\t    'coth'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29199,
            "description": "module.exports = {\n\t\t  'name': 'cot',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'cot(x)'\n\t\t  ],\n\t\t  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',\n\t\t  'examples': [\n\t\t    'cot(2)',\n\t\t    '1 / tan(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sec',\n\t\t    'csc',\n\t\t    'tan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29222,
            "description": "module.exports = {\n\t\t  'name': 'coth',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'coth(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic cotangent of x in radians.',\n\t\t  'examples': [\n\t\t    'coth(2)',\n\t\t    '1 / tanh(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sech',\n\t\t    'csch',\n\t\t    'tanh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29245,
            "description": "module.exports = {\n\t\t  'name': 'csc',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'csc(x)'\n\t\t  ],\n\t\t  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',\n\t\t  'examples': [\n\t\t    'csc(2)',\n\t\t    '1 / sin(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sec',\n\t\t    'cot',\n\t\t    'sin'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29268,
            "description": "module.exports = {\n\t\t  'name': 'csch',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'csch(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',\n\t\t  'examples': [\n\t\t    'csch(2)',\n\t\t    '1 / sinh(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sech',\n\t\t    'coth',\n\t\t    'sinh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29291,
            "description": "module.exports = {\n\t\t  'name': 'sec',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'sec(x)'\n\t\t  ],\n\t\t  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',\n\t\t  'examples': [\n\t\t    'sec(2)',\n\t\t    '1 / cos(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'cot',\n\t\t    'csc',\n\t\t    'cos'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29314,
            "description": "module.exports = {\n\t\t  'name': 'sech',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'sech(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',\n\t\t  'examples': [\n\t\t    'sech(2)',\n\t\t    '1 / cosh(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'coth',\n\t\t    'csch',\n\t\t    'cosh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29337,
            "description": "module.exports = {\n\t\t  'name': 'sin',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'sin(x)'\n\t\t  ],\n\t\t  'description': 'Compute the sine of x in radians.',\n\t\t  'examples': [\n\t\t    'sin(2)',\n\t\t    'sin(pi / 4) ^ 2',\n\t\t    'sin(90 deg)',\n\t\t    'sin(30 deg)',\n\t\t    'sin(0.2)^2 + cos(0.2)^2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'asin',\n\t\t    'cos',\n\t\t    'tan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29363,
            "description": "module.exports = {\n\t\t  'name': 'sinh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'sinh(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic sine of x in radians.',\n\t\t  'examples': [\n\t\t    'sinh(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'cosh',\n\t\t    'tanh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29384,
            "description": "module.exports = {\n\t\t  'name': 'tan',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'tan(x)'\n\t\t  ],\n\t\t  'description': 'Compute the tangent of x in radians.',\n\t\t  'examples': [\n\t\t    'tan(0.5)',\n\t\t    'sin(0.5) / cos(0.5)',\n\t\t    'tan(pi / 4)',\n\t\t    'tan(45 deg)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'atan',\n\t\t    'sin',\n\t\t    'cos'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29409,
            "description": "module.exports = {\n\t\t  'name': 'tanh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'tanh(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic tangent of x in radians.',\n\t\t  'examples': [\n\t\t    'tanh(0.5)',\n\t\t    'sinh(0.5) / cosh(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sinh',\n\t\t    'cosh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29431,
            "description": "module.exports = {\n\t\t  'name': 'to',\n\t\t  'category': 'Units',\n\t\t  'syntax': [\n\t\t    'x to unit',\n\t\t    'to(x, unit)'\n\t\t  ],\n\t\t  'description': 'Change the unit of a value.',\n\t\t  'examples': [\n\t\t    '5 inch to cm',\n\t\t    '3.2kg to g',\n\t\t    '16 bytes in bits'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29452,
            "description": "module.exports = {\n\t\t  'name': 'clone',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'clone(x)'\n\t\t  ],\n\t\t  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',\n\t\t  'examples': [\n\t\t    'clone(3.5)',\n\t\t    'clone(2 - 4i)',\n\t\t    'clone(45 deg)',\n\t\t    'clone([1, 2; 3, 4])',\n\t\t    'clone(\"hello world\")'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29474,
            "description": "module.exports = {\n\t\t  'name': 'format',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'format(value)',\n\t\t    'format(value, precision)'\n\t\t  ],\n\t\t  'description': 'Format a value of any type as string.',\n\t\t  'examples': [\n\t\t    'format(2.3)',\n\t\t    'format(3 - 4i)',\n\t\t    'format([])',\n\t\t    'format(pi, 3)'\n\t\t  ],\n\t\t  'seealso': ['print']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29496,
            "description": "module.exports = {\n\t\t  'name': 'isNaN',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isNaN(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is NaN (not a number)',\n\t\t  'examples': [\n\t\t    'isNaN(2)',\n\t\t    'isNaN(0 / 0)',\n\t\t    'isNaN(NaN)',\n\t\t    'isNaN(Infinity)'\n\t\t  ],\n\t\t  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29517,
            "description": "module.exports = {\n\t\t  'name': 'isInteger',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isInteger(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is an integer number.',\n\t\t  'examples': [\n\t\t    'isInteger(2)',\n\t\t    'isInteger(3.5)',\n\t\t    'isInteger([3, 0.5, -2])'\n\t\t  ],\n\t\t  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29537,
            "description": "module.exports = {\n\t\t  'name': 'isNegative',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isNegative(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is negative: smaller than zero.',\n\t\t  'examples': [\n\t\t    'isNegative(2)',\n\t\t    'isNegative(0)',\n\t\t    'isNegative(-4)',\n\t\t    'isNegative([3, 0.5, -2])'\n\t\t  ],\n\t\t  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29558,
            "description": "module.exports = {\n\t\t  'name': 'isNumeric',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isNumeric(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is a numeric value. ' +\n\t\t    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',\n\t\t  'examples': [\n\t\t    'isNumeric(2)',\n\t\t    'isNumeric(0)',\n\t\t    'isNumeric(bignumber(500))',\n\t\t    'isNumeric(fraction(0.125))',\n\t\t    'isNumeric(\"3\")',\n\t\t    'isNumeric(2 + 3i)',\n\t\t    'isNumeric([2.3, \"foo\", false])'\n\t\t  ],\n\t\t  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29583,
            "description": "module.exports = {\n\t\t  'name': 'isPositive',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isPositive(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is positive: larger than zero.',\n\t\t  'examples': [\n\t\t    'isPositive(2)',\n\t\t    'isPositive(0)',\n\t\t    'isPositive(-4)',\n\t\t    'isPositive([3, 0.5, -2])'\n\t\t  ],\n\t\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29604,
            "description": "module.exports = {\n\t\t  'name': 'isPrime',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isPrime(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is prime: has no divisors other than itself and one.',\n\t\t  'examples': [\n\t\t    'isPrime(3)',\n\t\t    'isPrime(-2)',\n\t\t    'isPrime([2, 17, 100])'\n\t\t  ],\n\t\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n\t\t};\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29623,
            "description": "module.exports = {\n\t\t  'name': 'isZero',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isZero(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is zero.',\n\t\t  'examples': [\n\t\t    'isZero(2)',\n\t\t    'isZero(0)',\n\t\t    'isZero(-4)',\n\t\t    'isZero([3, 0, -2, 0])'\n\t\t  ],\n\t\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29644,
            "description": "module.exports = {\n\t\t  'name': 'typeof',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'typeof(x)'\n\t\t  ],\n\t\t  'description': 'Get the type of a variable.',\n\t\t  'examples': [\n\t\t    'typeof(3.5)',\n\t\t    'typeof(2 - 4i)',\n\t\t    'typeof(45 deg)',\n\t\t    'typeof(\"hello world\")'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29665,
            "description": "module.exports = [\n\t\t  __webpack_require__(281),\n\t\t  __webpack_require__(304),\n\t\t  __webpack_require__(305),\n\t\t  __webpack_require__(306),\n\t\t  __webpack_require__(307)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29678,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var parse = load(__webpack_require__(282));\n  /**\n\t\t   * Parse and compile an expression.\n\t\t   * Returns a an object with a function `eval([scope])` to evaluate the\n\t\t   * compiled expression.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.compile(expr)                       // returns one node\n\t\t   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     var code = math.compile('sqrt(3^2 + 4^2)');\n\t\t   *     code.eval(); // 5\n\t\t   *\n\t\t   *     var scope = {a: 3, b: 4}\n\t\t   *     var code = math.compile('a * b'); // 12\n\t\t   *     code.eval(scope); // 12\n\t\t   *     scope.a = 5;\n\t\t   *     code.eval(scope); // 20\n\t\t   *\n\t\t   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);\n\t\t   *     nodes[2].eval(); // 12\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    parse, eval\n\t\t   *\n\t\t   * @param {string | string[] | Array | Matrix} expr\n\t\t   *            The expression to be compiled\n\t\t   * @return {{eval: Function} | Array.<{eval: Function}>} code\n\t\t   *            An object with the compiled expression\n\t\t   * @throws {Error}",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29738,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29740,
            "description": "'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\t\tvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var AccessorNode            = load(__webpack_require__(283));\n\t\t  var ArrayNode               = load(__webpack_require__(289));\n\t\t  var AssignmentNode          = load(__webpack_require__(290));\n\t\t  var BlockNode               = load(__webpack_require__(293));\n\t\t  var ConditionalNode         = load(__webpack_require__(294));\n\t\t  var ConstantNode            = load(__webpack_require__(295));\n\t\t  var FunctionAssignmentNode  = load(__webpack_require__(296));\n\t\t  var IndexNode               = load(__webpack_require__(297));\n\t\t  var ObjectNode              = load(__webpack_require__(300));\n\t\t  var OperatorNode            = load(__webpack_require__(301));\n\t\t  var ParenthesisNode         = load(__webpack_require__(303));\n\t\t  var FunctionNode            = load(__webpack_require__(302));\n\t\t  var RangeNode               = load(__webpack_require__(298));\n\t\t  var SymbolNode              = load(__webpack_require__(299));\n\n  /**\n\t\t   * Parse an expression. Returns a node tree, which can be evaluated by\n\t\t   * invoking node.eval();\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     parse(expr)\n\t\t   *     parse(expr, options)\n\t\t   *     parse([expr1, expr2, expr3, ...])\n\t\t   *     parse([expr1, expr2, expr3, ...], options)\n\t\t   *\n\t\t   * Example:\n\t\t   *\n\t\t   *     var node = parse('sqrt(3^2 + 4^2)');\n\t\t   *     node.compile(math).eval(); // 5\n\t\t   *\n\t\t   *     var scope = {a:3, b:4}\n\t\t   *     var node = parse('a * b'); // 12\n\t\t   *     var code = node.compile(math);\n\t\t   *     code.eval(scope); // 12\n\t\t   *     scope.a = 5;\n\t\t   *     code.eval(scope); // 20\n\t\t   *\n\t\t   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n\t\t   *     nodes[2].compile(math).eval(); // 12\n\t\t   *\n\t\t   * @param {string | string[] | Matrix} expr\n\t\t   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n\t\t   *                                                   - `nodes` a set of custom nodes\n\t\t   * @return {Node | Node[]} node\n\t\t   * @throws {Error}",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29897,
            "description": "Get the first character from the expression.\nThe character is stored into the char c. If the end of the expression is\nreached, the function puts an empty string in c.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29910,
            "description": "Get the next character from the expression.\nThe character is stored into the char c. If the end of the expression is\nreached, the function puts an empty string in c.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29921,
            "description": "Preview the previous character from the expression.",
            "return": {
                "description": "cNext",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29930,
            "description": "Preview the next character from the expression.",
            "return": {
                "description": "cNext",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29939,
            "description": "Preview the second next character from the expression.",
            "return": {
                "description": "cNext",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 29948,
            "description": "Get next token in the current string expr.\nThe token and token type are available as token and token_type",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30106,
            "description": "Get next token and skip newline tokens",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30116,
            "description": "Open parameters.\nNew line characters will be ignored until closeParams() is called",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30124,
            "description": "Close parameters.\nNew line characters will no longer be ignored",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30132,
            "description": "Checks whether the current character `c` is a valid alpha character:\n\n- A latin letter (upper or lower case) Ascii: a-z, A-Z\n- An underscore                         Ascii: _\n- A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n- A greek letter                       Unicode: \\u0370 - \\u03FF\n- A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n\nThe previous and next characters are needed to determine whether\nthis character is part of a unicode surrogate pair.",
            "params": [
                {
                    "name": "c",
                    "description": "Current character in the expression",
                    "type": "String"
                },
                {
                    "name": "cPrev",
                    "description": "Previous character",
                    "type": "String"
                },
                {
                    "name": "cNext",
                    "description": "Next character",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30155,
            "description": "Test whether a character is a valid latin, greek, or letter-like character",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30164,
            "description": "Test whether two given 16 bit characters form a surrogate pair of a\nunicode math symbol.\n\nhttp://unicode-table.com/en/\nhttp://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n\nNote: In ES6 will be unicode aware:\nhttp://stackoverflow.com/questions/280712/javascript-unicode-regexes\nhttps://mathiasbynens.be/notes/es6-unicode-regex",
            "params": [
                {
                    "name": "high",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "low",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30185,
            "description": "Check whether given character c is a white space character: space, tab, or enter",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "nestingLevel",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30196,
            "description": "Test whether the character c is a decimal mark (dot).\nThis is the case when it's not the start of a delimiter '.*', './', or '.^'",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cNext",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30207,
            "description": "checks if the given char c is a digit or dot",
            "params": [
                {
                    "name": "c",
                    "description": "a string with one character",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30216,
            "description": "checks if the given char c is a digit",
            "params": [
                {
                    "name": "c",
                    "description": "a string with one character",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30225,
            "description": "Start of the parse levels below, in order of precedence",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30255,
            "description": "Parse a block with expressions. Expressions can be separated by a newline\ncharacter '\\n', or by a semicolon ';'. In case of a semicolon, no output\nof the preceding line is returned.",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30310,
            "description": "Assignment of a function or variable,\n- can be a variable like 'a=2.3'\n- or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n- defining a function like 'f(x) = x^2'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30365,
            "description": "conditional operation\n\n    condition ? truePart : falsePart\n\nNote: conditional operator is right-associative",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30404,
            "description": "logical or, 'x or y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30420,
            "description": "logical exclusive or, 'x xor y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30436,
            "description": "logical and, 'x and y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30452,
            "description": "bitwise or, 'x | y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30468,
            "description": "bitwise exclusive or (xor), 'x ^| y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30484,
            "description": "bitwise and, 'x & y'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30500,
            "description": "relational operators",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30530,
            "description": "Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30558,
            "description": "conversion operators 'to' and 'in'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30593,
            "description": "parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30641,
            "description": "add or subtract",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30667,
            "description": "multiply, divide, modulus",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30720,
            "description": "Unary plus and minus, and logical and bitwise not",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30746,
            "description": "power\nNote: power operator is right associative",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30769,
            "description": "Left hand operators: factorial x!, transpose x'",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30798,
            "description": "Parse a custom node handler. A node handler can be used to process\nnodes in a custom way, for example for handling a plot.\n\nA handler must be passed as second argument of the parse function.\n- must extend math.expression.node.Node\n- must contain a function _compile(defs: Object) : string\n- must contain a function find(filter: Object) : Node[]\n- must contain a function toString() : string\n- the constructor is called with a single argument containing all parameters\n\nFor example:\n\n    nodes = {\n      'plot': PlotHandler\n    };\n\nThe constructor of the handler is called as:\n\n    node = new PlotHandler(params);\n\nThe handler will be invoked when evaluating an expression like:\n\n    node = math.parse('plot(sin(x), x)', nodes);",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30866,
            "description": "parse symbols: functions, variables, constants, units",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30889,
            "description": "parse accessors:\n- function invocation in round brackets (...), for example sqrt(2)\n- index enclosed in square brackets [...], for example A[2,3]\n- dot notation for properties, like foo.bar",
            "params": [
                {
                    "name": "node",
                    "description": "Node on which to apply the parameters. If there\n                      are no parameters in the expression, the node\n                      itself is returned",
                    "type": "Node"
                },
                {
                    "name": "[types]  Filter the types of notations\n                           can be ['(', '[', '.']",
                    "description": "",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 30981,
            "description": "parse a string.\nA string is enclosed by double quotes",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31005,
            "description": "Parse a string surrounded by double quotes \"...\"",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31032,
            "description": "parse the matrix",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31103,
            "description": "Parse a single comma-separated row from a matrix, like 'a, b, c'",
            "return": {
                "description": "node",
                "type": "ArrayNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31122,
            "description": "parse an object, enclosed in angle brackets{...}, for example {value: 2}",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31176,
            "description": "parse a number",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31195,
            "description": "parentheses",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31225,
            "description": "Evaluated when the expression is not yet ended but expected to end",
            "return": {
                "description": "res",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31239,
            "description": "Shortcut for getting the current row value (one based)\nReturns the line of the currently handled expression",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31250,
            "description": "Shortcut for getting the current col value (one based)\nReturns the column (position) where the last token starts",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31259,
            "description": "Create an error",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "instantiated error",
                "type": "SyntaxError"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31273,
            "description": "Create an error",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "instantiated error",
                "type": "Error"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31295,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31297,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n\t\t  var access = load(__webpack_require__(286));\n  /**\n\t\t   * @constructor AccessorNode\n\t\t   * @extends {Node}\n\t\t   * Access an object property or get a matrix subset\n\t\t   *\n\t\t   * @param {Node} object                 The object from which to retrieve\n\t\t   *                                      a property or subset.\n\t\t   * @param {IndexNode} index             IndexNode containing ranges",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31353,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31387,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31396,
            "description": "Create a new AccessorNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "AccessorNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31409,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "AccessorNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31417,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31431,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31445,
            "description": "Are parenthesis needed?",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31464,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31466,
            "description": "'use strict';\nvar keywords = __webpack_require__(285);\n\t\tvar extend = __webpack_require__(3).extend;\n\t\tvar deepEqual= __webpack_require__(3).deepEqual;\nfunction factory (type, config, load, typed, math) {\n\t\t  /**\n\t\t   * Node",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31484,
            "description": "Evaluate the node",
            "params": [
                {
                    "name": "scope",
                    "description": "Scope to read/write variables",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the result",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31499,
            "description": "Compile the node to javascript code",
            "return": {
                "description": "} expr  Returns an object with a function 'eval',\n                                 which can be invoked as expr.eval([scope]),\n                                 where scope is an optional object with\n                                 variables.",
                "type": "Eval: function"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31542,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         and constants globally available inside the closure\n                         of the compiled expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31559,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31568,
            "description": "Create a new Node having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "OperatorNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31579,
            "description": "Validate whether an object is a Node, for use with map",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "Returns the input if it's a node, else throws an Error",
                "type": "Node"
            },
            "access": "protected",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31593,
            "description": "Recursively traverse all nodes in a node tree. Executes given callback for\nthis node and each of its child nodes.",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback called for every node in the node tree.",
                    "type": "Function(node: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31614,
            "description": "Recursively transform a node tree via a transform function.\n\nFor example, to replace all nodes of type SymbolNode having name 'x' with a\nConstantNode with value 2:\n\n    var res = Node.transform(function (node, path, parent) {\n      if (node && node.isSymbolNode) && (node.name == 'x')) {\n        return new ConstantNode(2);\n      }\n      else {\n        return node;\n      }\n    });",
            "params": [
                {
                    "name": "callback",
                    "description": "A mapping function accepting a node, and returning\n         a replacement for the node or the original node.\n         Signature: callback(node: Node, index: string, parent: Node) : Node",
                    "type": "Function(node: Node, path: string, parent: Node) : Node"
                }
            ],
            "return": {
                "description": "Returns the original node or its replacement",
                "type": "Node"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31648,
            "description": "Find any node in the node tree matching given filter function. For example, to\nfind all nodes of type SymbolNode having name 'x':\n\n    var results = Node.filter(function (node) {\n      return (node && node.isSymbolNode) && (node.name == 'x');\n    });",
            "params": [
                {
                    "name": "callback",
                    "description": "A test function returning true when a node matches, and false\n           otherwise. Function signature:\n           callback(node: Node, index: string, parent: Node) : boolean",
                    "type": "Function(node: Node, path: string, parent: Node) : Node"
                }
            ],
            "return": {
                "description": "nodes       An array with nodes matching given filter criteria",
                "type": "Node[]"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31684,
            "description": "Create a shallow clone of this node",
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31693,
            "description": "Create a deep clone of this node",
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31703,
            "description": "Deep compare this node with another node.",
            "params": [
                {
                    "name": "other",
                    "description": "",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "Returns true when both nodes are of the same type and\n                  contain the same values (as do their childs)",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31715,
            "description": "Get string representation. (wrapper function)\n\nThis function can get an object of the following form:\n{\n   handler: //This can be a callback function of the form\n            // \"function callback(node, options)\"or\n            // a map that maps function names (used in FunctionNodes)\n            // to callbacks\n   parenthesis: \"keep\" //the parenthesis option (This is optional)\n}",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31752,
            "description": "Internal function to generate the string output.\nThis has to be implemented by every Node",
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31763,
            "description": "Get LaTeX representation. (wrapper function)\n\nThis function can get an object of the following form:\n{\n   handler: //This can be a callback function of the form\n            // \"function callback(node, options)\"or\n            // a map that maps function names (used in FunctionNodes)\n            // to callbacks\n   parenthesis: \"keep\" //the parenthesis option (This is optional)\n}",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31800,
            "description": "Internal function to generate the LaTeX output.\nThis has to be implemented by every Node",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31812,
            "description": "Get identifier.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31820,
            "description": "Get the content of the current Node.",
            "return": {
                "description": "node",
                "type": "Node"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31828,
            "description": "Validate the symbol names of a scope.\nThrows an error when the scope contains an illegal symbol.",
            "params": [
                {
                    "name": "scope",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31852,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31854,
            "description": "'use strict';\n// Reserved keywords not allowed to use in the parser\n\t\tmodule.exports = {\n\t\t  end: true\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31866,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\nfunction factory (type, config, load, typed) {\n\t\t  var subset = load(__webpack_require__(288));\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Retrieve part of an object:\n\t\t   *\n\t\t   * - Retrieve a property from an object\n\t\t   * - Retrieve a part of a string\n\t\t   * - Retrieve a matrix subset\n\t\t   *\n\t\t   * @param {Object | Array | Matrix | string} object\n\t\t   * @param {Index} index\n\t\t   * @return {Object | Array | Matrix | string} Returns the subset",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31918,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31920,
            "description": "var IndexError = __webpack_require__(43);\n/**\n\t\t * Transform zero-based indices to one-based indices in errors\n\t\t * @param {Error} err\n\t\t * @returns {Error} Returns the transformed error",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31941,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 31943,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar validateIndex = __webpack_require__(40).validateIndex;\n\t\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Get or set a subset of a matrix or string.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *     math.subset(value, index)                                // retrieve a subset\n\t\t   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     // get a subset\n\t\t   *     var d = [[1, 2], [3, 4]];\n\t\t   *     math.subset(d, math.index(1, 0));        // returns 3\n\t\t   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]\n\t\t   *\n\t\t   *     // replace a subset\n\t\t   *     var e = [];\n\t\t   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]\n\t\t   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     size, resize, squeeze, index\n\t\t   *\n\t\t   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n\t\t   * @param {Index} index                     An index containing ranges for each\n\t\t   *                                          dimension\n\t\t   * @param {*} [replacement]                 An array, matrix, or scalar.\n\t\t   *                                          If provided, the subset is replaced with replacement.\n\t\t   *                                          If not provided, the subset is returned\n\t\t   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n\t\t   *                                          the matrix is resized. If not provided,\n\t\t   *                                          math.matrix elements will be left undefined.\n\t\t   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32034,
            "description": "Retrieve a subset of a string",
            "params": [
                {
                    "name": "str",
                    "description": "string from which to get a substring",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "An index containing ranges for each dimension",
                    "type": "Index"
                }
            ],
            "return": {
                "description": "substring",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32065,
            "description": "Replace a substring in a string",
            "params": [
                {
                    "name": "str",
                    "description": "string to be replaced",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "An index containing ranges for each dimension",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "Replacement string",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "Default value to be uses when resizing\n                               the string. is ' ' by default",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "result",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32127,
            "description": "Retrieve a property from an object",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                }
            ],
            "return": {
                "description": "Returns the value of the property",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32147,
            "description": "Set a property on an object",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Index"
                },
                {
                    "name": "replacement",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns the updated object",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32176,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32178,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * @constructor ArrayNode\n\t\t   * @extends {Node}\n\t\t   * Holds an 1-dimensional array with items\n\t\t   * @param {Node[]} [items]   1 dimensional array with items",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32217,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32240,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32251,
            "description": "Create a new ArrayNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "ArrayNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32265,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "ArrayNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32273,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32286,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32319,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32321,
            "description": "'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n\t\t  var ArrayNode = load(__webpack_require__(289));\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var assign = load(__webpack_require__(291));\n\t\t  var access = load(__webpack_require__(286));\n  var keywords = __webpack_require__(285);\n\t\t  var operators = __webpack_require__(292);\n  /**\n\t\t   * @constructor AssignmentNode\n\t\t   * @extends {Node}\n\t\t   *\n\t\t   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n\t\t   * replace a subset of a matrix like `A[2,2]=42`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     new AssignmentNode(symbol, value)\n\t\t   *     new AssignmentNode(object, index, value)\n\t\t   *\n\t\t   * Usage:\n\t\t   *\n\t\t   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2\n\t\t   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n\t\t   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n\t\t   *\n\t\t   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n\t\t   * @param {IndexNode} [index=null]            Index, property name or matrix\n\t\t   *                                            index. Optional. If not provided\n\t\t   *                                            and `object` is a SymbolNode,\n\t\t   *                                            the property is assigned to the\n\t\t   *                                            global scope.\n\t\t   * @param {Node} value                        The value to be assigned",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32410,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32495,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32507,
            "description": "Create a new AssignmentNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "AssignmentNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32523,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "AssignmentNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32548,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32564,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32588,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32590,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\nfunction factory (type, config, load, typed) {\n\t\t  var subset = load(__webpack_require__(288));\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Replace part of an object:\n\t\t   *\n\t\t   * - Assign a property to an object\n\t\t   * - Replace a part of a string\n\t\t   * - Replace a matrix subset\n\t\t   *\n\t\t   * @param {Object | Array | Matrix | string} object\n\t\t   * @param {Index} index\n\t\t   * @param {*} value\n\t\t   * @return {Object | Array | Matrix | string} Returns the original object\n\t\t   *                                            except in case of a string",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32645,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32647,
            "description": "'use strict'\n//list of identifiers of nodes in order of their precedence\n\t\t//also contains information about left/right associativity\n\t\t//and which other operator the operator is associative with\n\t\t//Example:\n\t\t// addition is associative with addition and subtraction, because:\n\t\t// (a+b)+c=a+(b+c)\n\t\t// (a+b)-c=a+(b-c)\n\t\t//\n\t\t// postfix operators are left associative, prefix operators \n\t\t// are right associative\n\t\t//\n\t\t//It's also possible to set the following properties:\n\t\t// latexParens: if set to false, this node doesn't need to be enclosed\n\t\t//              in parentheses when using LaTeX\n\t\t// latexLeftParens: if set to false, this !OperatorNode's! \n\t\t//                  left argument doesn't need to be enclosed\n\t\t//                  in parentheses\n\t\t// latexRightParens: the same for the right argument\n\t\tvar properties = [\n\t\t  { //assignment\n\t\t    'AssignmentNode': {},\n\t\t    'FunctionAssignmentNode': {}\n\t\t  },\n\t\t  { //conditional expression\n\t\t    'ConditionalNode': {\n\t\t      latexLeftParens: false,\n\t\t      latexRightParens: false,\n\t\t      latexParens: false\n\t\t      //conditionals don't need parentheses in LaTeX because\n\t\t      //they are 2 dimensional\n\t\t    }\n\t\t  },\n\t\t  { //logical or\n\t\t    'OperatorNode:or': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n  },\n\t\t  { //logical xor\n\t\t    'OperatorNode:xor': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //logical and\n\t\t    'OperatorNode:and': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //bitwise or\n\t\t    'OperatorNode:bitOr': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //bitwise xor\n\t\t    'OperatorNode:bitXor': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //bitwise and\n\t\t    'OperatorNode:bitAnd': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //relational operators\n\t\t    'OperatorNode:equal': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:unequal': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:smaller': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:larger': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:smallerEq': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:largerEq': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //bitshift operators\n\t\t    'OperatorNode:leftShift': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:rightArithShift': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:rightLogShift': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //unit conversion\n\t\t    'OperatorNode:to': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //range\n\t\t    'RangeNode': {}\n\t\t  },\n\t\t  { //addition, subtraction\n\t\t    'OperatorNode:add': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']\n\t\t    },\n\t\t    'OperatorNode:subtract': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //multiply, divide, modulus\n\t\t    'OperatorNode:multiply': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: [\n\t\t        'OperatorNode:multiply',\n\t\t        'OperatorNode:divide',\n\t\t        'Operator:dotMultiply',\n\t\t        'Operator:dotDivide'\n\t\t      ]\n\t\t    },\n\t\t    'OperatorNode:divide': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: [],\n\t\t      latexLeftParens: false,\n\t\t      latexRightParens: false,\n\t\t      latexParens: false\n\t\t      //fractions don't require parentheses because\n\t\t      //they're 2 dimensional, so parens aren't needed\n\t\t      //in LaTeX\n\t\t    },\n\t\t    'OperatorNode:dotMultiply': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: [\n\t\t        'OperatorNode:multiply',\n\t\t        'OperatorNode:divide',\n\t\t        'OperatorNode:dotMultiply',\n\t\t        'OperatorNode:doDivide'\n\t\t      ]\n\t\t    },\n\t\t    'OperatorNode:dotDivide': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:mod': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //unary prefix operators\n\t\t    'OperatorNode:unaryPlus': {\n\t\t      associativity: 'right'\n\t\t    },\n\t\t    'OperatorNode:unaryMinus': {\n\t\t      associativity: 'right'\n\t\t    },\n\t\t    'OperatorNode:bitNot': {\n\t\t      associativity: 'right'\n\t\t    },\n\t\t    'OperatorNode:not': {\n\t\t      associativity: 'right'\n\t\t    }\n\t\t  },\n\t\t  { //exponentiation\n\t\t    'OperatorNode:pow': {\n\t\t      associativity: 'right',\n\t\t      associativeWith: [],\n\t\t      latexRightParens: false\n\t\t      //the exponent doesn't need parentheses in\n\t\t      //LaTeX because it's 2 dimensional\n\t\t      //(it's on top)\n\t\t    },\n\t\t    'OperatorNode:dotPow': {\n\t\t      associativity: 'right',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //factorial\n\t\t    'OperatorNode:factorial': {\n\t\t      associativity: 'left'\n\t\t    }\n\t\t  },\n\t\t  { //matrix transpose\n\t\t    'OperatorNode:transpose': {\n\t\t      associativity: 'left'\n\t\t    }\n\t\t  }\n\t\t];\n/**\n\t\t * Get the precedence of a Node.\n\t\t * Higher number for higher precedence, starting with 0.\n\t\t * Returns null if the precedence is undefined.\n\t\t *\n\t\t * @param {Node}\n\t\t * @param {string} parenthesis\n\t\t * @return {number|null}",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32881,
            "description": "Get the associativity of an operator (left or right).\nReturns a string containing 'left' or 'right' or null if\nthe associativity is not defined.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "parenthesis",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String|null"
            },
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32921,
            "description": "Check if an operator is associative with another operator.\nReturns either true or false or null if not defined.",
            "params": [
                {
                    "name": "nodeA",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "nodeB",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "parenthesis",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool|null"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32967,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 32969,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n\t\t  var ResultSet = load(__webpack_require__(72));\n  /**\n\t\t   * @constructor BlockNode\n\t\t   * @extends {Node}\n\t\t   * Holds a set with blocks\n\t\t   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n\t\t   *            An array with blocks, where a block is constructed as an Object\n\t\t   *            with properties block, which is a Node, and visible, which is\n\t\t   *            a boolean. The property visible is optional and is true by default",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33013,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33044,
            "description": "Execute a callback for each of the child blocks of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33054,
            "description": "Create a new BlockNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "BlockNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33073,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "BlockNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33088,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33100,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33119,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33121,
            "description": "'use strict';\nvar latex = __webpack_require__(32);\n\t\tvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n\t\t   *\n\t\t   * @param {Node} condition   Condition, must result in a boolean\n\t\t   * @param {Node} trueExpr    Expression evaluated when condition is true\n\t\t   * @param {Node} falseExpr   Expression evaluated when condition is true\n\t\t   *\n\t\t   * @constructor ConditionalNode\n\t\t   * @extends {Node}",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33160,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33173,
            "description": "Test whether a condition is met",
            "params": [
                {
                    "name": "condition",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "true if condition is true or non-zero, else false",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33213,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33223,
            "description": "Create a new ConditionalNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "ConditionalNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33237,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "ConditionalNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33245,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33284,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33305,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33307,
            "description": "'use strict';\nvar getType = __webpack_require__(41).type;\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * A ConstantNode holds a constant value like a number or string. A ConstantNode\n\t\t   * stores a stringified version of the value and uses this to compile to\n\t\t   * JavaScript.\n\t\t   *\n\t\t   * In case of a stringified number as input, this may be compiled to a BigNumber\n\t\t   * when the math instance is configured for BigNumbers.\n\t\t   *\n\t\t   * Usage:\n\t\t   *\n\t\t   *     // stringified values with type\n\t\t   *     new ConstantNode('2.3', 'number');\n\t\t   *     new ConstantNode('true', 'boolean');\n\t\t   *     new ConstantNode('hello', 'string');\n\t\t   *\n\t\t   *     // non-stringified values, type will be automatically detected\n\t\t   *     new ConstantNode(2.3);\n\t\t   *     new ConstantNode('hello');\n\t\t   *\n\t\t   * @param {string | number | boolean | null | undefined} value\n\t\t   *                            When valueType is provided, value must contain\n\t\t   *                            an uninterpreted string representing the value.\n\t\t   *                            When valueType is undefined, value can be a\n\t\t   *                            number, string, boolean, null, or undefined, and\n\t\t   *                            the type will be determined automatically.\n\t\t   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',\n\t\t   *                              'boolean', 'undefined', 'null'\n\t\t   * @constructor ConstantNode\n\t\t   * @extends {Node}",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33387,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33435,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33444,
            "description": "Create a new ConstantNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node) : Node"
                }
            ],
            "return": {
                "description": "Returns a clone of the node",
                "type": "ConstantNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33454,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "ConstantNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33462,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33477,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33510,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33512,
            "description": "'use strict';\nvar keywords = __webpack_require__(285);\n\t\tvar latex = __webpack_require__(32);\n\t\tvar operators = __webpack_require__(292);\nfunction isString (x) {\n\t\t  return typeof x === 'string';\n\t\t}\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * @constructor FunctionAssignmentNode\n\t\t   * @extends {Node}\n\t\t   * Function assignment\n\t\t   *\n\t\t   * @param {string} name           Function name\n\t\t   * @param {string[] | Array.<{name: string, type: string}>} params\n\t\t   *                                Array with function parameter names, or an\n\t\t   *                                array with objects containing the name\n\t\t   *                                and type of the parameter\n\t\t   * @param {Node} expr             The function expression",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33566,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33602,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33610,
            "description": "Create a new FunctionAssignmentNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "FunctionAssignmentNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33622,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "FunctionAssignmentNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33630,
            "description": "Is parenthesis needed?",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "parenthesis",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33644,
            "description": "get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33659,
            "description": "get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33682,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33684,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n\t\t  var RangeNode = load(__webpack_require__(298));\n\t\t  var SymbolNode = load(__webpack_require__(299));\n  var Range = load(__webpack_require__(67));\n  var isArray = Array.isArray;\n  /**\n\t\t   * @constructor IndexNode\n\t\t   * @extends Node\n\t\t   *\n\t\t   * Describes a subset of a matrix or an object property.\n\t\t   * Cannot be used on its own, needs to be used within an AccessorNode or\n\t\t   * AssignmentNode.\n\t\t   *\n\t\t   * @param {Node[]} dimensions\n\t\t   * @param {boolean} [dotNotation=false]  Optional property describing whether\n\t\t   *                                       this index was written using dot\n\t\t   *                                       notation like `a.b`, or using bracket\n\t\t   *                                       notation like `a[\"b\"]` (default).\n\t\t   *                                       Used to stringify an IndexNode.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33742,
            "description": "Compile all range nodes\n\nWhen some of the dimensions has `end` defined, the IndexNode requires\na variable `size` to be defined in the current closure, and must contain\nthe size of the matrix that's being handled. To check whether the `size`\nvariable is needed, call IndexNode.needsSize().",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                               or constants globally available for the\n                               compiled expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                               the name of the argument, and the value is `true`.\n                               The object may not be mutated, but must be\n                               extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "code",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33820,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33830,
            "description": "Create a new IndexNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "IndexNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33845,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "IndexNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33853,
            "description": "Test whether this IndexNode contains a single property name",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33863,
            "description": "Returns the property name if IndexNode contains a property.\nIf not, returns null.",
            "return": {
                "description": "",
                "type": "String | null"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33872,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33884,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33899,
            "description": "Test whether this IndexNode needs the object size, size of the Matrix",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33918,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33920,
            "description": "'use strict';\nvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * @constructor RangeNode\n\t\t   * @extends {Node}\n\t\t   * create a range\n\t\t   * @param {Node} start  included lower-bound\n\t\t   * @param {Node} end    included upper-bound\n\t\t   * @param {Node} [step] optional step",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33959,
            "description": "Check whether the RangeNode needs the `end` symbol to be defined.\nThis end is the size of the Matrix in current dimension.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 33973,
            "description": "Compile the node to javascript code\n\nWhen the range has a symbol `end` defined, the RangeNode requires\na variable `end` to be defined in the current closure, which must contain\nthe length of the of the matrix that's being handled in the range's\ndimension. To check whether the `end` variable is needed, call\nRangeNode.needsEnd().",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34000,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34012,
            "description": "Create a new RangeNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "RangeNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34026,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "RangeNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34034,
            "description": "Calculate the necessary parentheses",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "parenthesis",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "parentheses",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34062,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34097,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34136,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34138,
            "description": "'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed, math) {\n\t\t  var Node = load(__webpack_require__(284));\n  var Unit = load(__webpack_require__(75));\n  /**\n\t\t   * @constructor SymbolNode\n\t\t   * @extends {Node}\n\t\t   * A symbol node can hold and resolve a symbol\n\t\t   * @param {string} name\n\t\t   * @extends {Node}",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34173,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34208,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34216,
            "description": "Create a new SymbolNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node) : Node"
                }
            ],
            "return": {
                "description": "Returns a clone of the node",
                "type": "SymbolNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34226,
            "description": "Throws an error 'Undefined symbol {name}'",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34234,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "SymbolNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34242,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34252,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34281,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34283,
            "description": "'use strict';\nvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * @constructor ObjectNode\n\t\t   * @extends {Node}\n\t\t   * Holds an object with keys/values\n\t\t   * @param {Object.<string, Node>} [properties]   array with key/value pairs",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34321,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "code",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34343,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34355,
            "description": "Create a new ObjectNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "ObjectNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34371,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "ObjectNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34385,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34401,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34424,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34426,
            "description": "'use strict';\nvar latex = __webpack_require__(32);\n\t\tvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed, math) {\n\t\t  var Node         = load(__webpack_require__(284));\n\t\t  var ConstantNode = load(__webpack_require__(295));\n\t\t  var SymbolNode   = load(__webpack_require__(299));\n\t\t  var FunctionNode = load(__webpack_require__(302));\n  /**\n\t\t   * @constructor OperatorNode\n\t\t   * @extends {Node}\n\t\t   * An operator with two arguments, like 2+3\n\t\t   *\n\t\t   * @param {string} op           Operator name, for example '+'\n\t\t   * @param {string} fn           Function name, for example 'add'\n\t\t   * @param {Node[]} args         Operator arguments\n\t\t   * @param {boolean} [implicit]  Is this an implicit multiplication?",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34478,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34502,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34512,
            "description": "Create a new OperatorNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "OperatorNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34526,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "OperatorNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34534,
            "description": "Calculate which parentheses are necessary. Gets an OperatorNode\n(which is the root of the tree) and an Array of Nodes\n(this.args) and returns an array where 'true' means that an argument\nhas to be enclosed in parentheses whereas 'false' means the opposite.",
            "params": [
                {
                    "name": "root",
                    "description": "",
                    "type": "OperatorNode"
                },
                {
                    "name": "parenthesis",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Node[]"
                },
                {
                    "name": "latex",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean[]"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34718,
            "description": "Get string representation.",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34782,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34877,
            "description": "Get identifier.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34894,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34896,
            "description": "'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed, math) {\n\t\t  var Node = load(__webpack_require__(284));\n\t\t  var SymbolNode = load(__webpack_require__(299));\n  /**\n\t\t   * @constructor FunctionNode\n\t\t   * @extends {./Node}\n\t\t   * invoke a list with arguments on a node\n\t\t   * @param {./Node} fn       Node resolving with a function on which to invoke\n\t\t   *                          the arguments, typically a SymboNode or AccessorNode\n\t\t   * @param {./Node[]} args",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 34958,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35025,
            "description": "Get a unique name for a arguments to store in defs",
            "params": [
                {
                    "name": "defs",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A string like 'args1', 'args2', ...",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35044,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35054,
            "description": "Create a new FunctionNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node): Node"
                }
            ],
            "return": {
                "description": "Returns a transformed copy of the node",
                "type": "FunctionNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35069,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "FunctionNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35081,
            "description": "Get string representation. (wrapper function)\nThis overrides parts of Node's toString function.\nIf callback is an object containing callbacks, it\ncalls the correct callback for the current node,\notherwise it falls back to calling Node's toString\nfunction.",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35109,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35200,
            "description": "Get LaTeX representation. (wrapper function)\nThis overrides parts of Node's toTex function.\nIf callback is an object containing callbacks, it\ncalls the correct callback for the current node,\notherwise it falls back to calling Node's toTex\nfunction.",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35226,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35269,
            "description": "Get identifier.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35286,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35288,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * @constructor ParenthesisNode\n\t\t   * @extends {Node}\n\t\t   * A parenthesis node describes manual parenthesis from the user input\n\t\t   * @param {Node} content\n\t\t   * @extends {Node}",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35321,
            "description": "Compile the node to javascript code",
            "params": [
                {
                    "name": "defs",
                    "description": "Object which can be used to define functions\n                         or constants globally available for the compiled\n                         expression",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Object with local function arguments, the key is\n                         the name of the argument, and the value is `true`.\n                         The object may not be mutated, but must be\n                         extended instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "js",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35337,
            "description": "Get the content of the current Node.",
            "return": {
                "description": "content",
                "type": "Node"
            },
            "override": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35346,
            "description": "Execute a callback for each of the child nodes of this node",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node)"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35354,
            "description": "Create a new ParenthesisNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(child: Node, path: string, parent: Node) : Node"
                }
            ],
            "return": {
                "description": "Returns a clone of the node",
                "type": "ParenthesisNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35365,
            "description": "Create a clone of this node, a shallow copy",
            "return": {
                "description": "",
                "type": "ParenthesisNode"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35373,
            "description": "Get string representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35386,
            "description": "Get LaTeX representation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "str",
                "type": "String"
            },
            "override": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35407,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35409,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var parse = load(__webpack_require__(282));\n  /**\n\t\t   * Evaluate an expression.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.eval(expr)\n\t\t   *     math.eval(expr, scope)\n\t\t   *     math.eval([expr1, expr2, expr3, ...])\n\t\t   *     math.eval([expr1, expr2, expr3, ...], scope)\n\t\t   *\n\t\t   * Example:\n\t\t   *\n\t\t   *     math.eval('(2+3)/4');                // 1.25\n\t\t   *     math.eval('sqrt(3^2 + 4^2)');        // 5\n\t\t   *     math.eval('sqrt(-4)');               // 2i\n\t\t   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]\n\t\t   *\n\t\t   *     var scope = {a:3, b:4};\n\t\t   *     math.eval('a * b', scope);           // 12\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    parse, compile\n\t\t   *\n\t\t   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n\t\t   * @param {Object} [scope]                    Scope to read/write variables\n\t\t   * @return {*} The result of the expression\n\t\t   * @throws {Error}",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35475,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35477,
            "description": "'use strict';\nfunction factory (type, config, load, typed, math) {\n\t\t  var docs = load(__webpack_require__(103));\n  /**\n\t\t   * Retrieve help on a function or data type.\n\t\t   * Help files are retrieved from the documentation in math.expression.docs.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.help(search)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    console.log(math.help('sin').toString());\n\t\t   *    console.log(math.help(math.add).toString());\n\t\t   *    console.log(math.help(math.add).toJSON());\n\t\t   *\n\t\t   * @param {Function | string | Object} search   A function or function name\n\t\t   *                                              for which to get help\n\t\t   * @return {Help} A help object",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35545,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35547,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var parse = load(__webpack_require__(282));\n  /**\n\t\t   * Parse an expression. Returns a node tree, which can be evaluated by\n\t\t   * invoking node.eval();\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.parse(expr)\n\t\t   *     math.parse(expr, options)\n\t\t   *     math.parse([expr1, expr2, expr3, ...])\n\t\t   *     math.parse([expr1, expr2, expr3, ...], options)\n\t\t   *\n\t\t   * Example:\n\t\t   *\n\t\t   *     var node = math.parse('sqrt(3^2 + 4^2)');\n\t\t   *     node.compile().eval(); // 5\n\t\t   *\n\t\t   *     var scope = {a:3, b:4}\n\t\t   *     var node = math.parse('a * b'); // 12\n\t\t   *     var code = node.compile();\n\t\t   *     code.eval(scope); // 12\n\t\t   *     scope.a = 5;\n\t\t   *     code.eval(scope); // 20\n\t\t   *\n\t\t   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n\t\t   *     nodes[2].compile().eval(); // 12\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     eval, compile\n\t\t   *\n\t\t   * @param {string | string[] | Matrix} expr          Expression to be parsed\n\t\t   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n\t\t   *                                                   - `nodes` a set of custom nodes\n\t\t   * @return {Node | Node[]} node\n\t\t   * @throws {Error}",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35600,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35602,
            "description": "'use strict';\nfunction factory (type, config, load, typed, math) {\n\t\t  var Parser = load(__webpack_require__(308));\n  /**\n\t\t   * Create a parser. The function creates a new `math.expression.Parser` object.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.parser()\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     var parser = new math.parser();\n\t\t   *\n\t\t   *     // evaluate expressions\n\t\t   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5\n\t\t   *     var b = parser.eval('sqrt(-4)');        // 2i\n\t\t   *     var c = parser.eval('2 inch in cm');    // 5.08 cm\n\t\t   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476\n\t\t   *\n\t\t   *     // define variables and functions\n\t\t   *     parser.eval('x = 7 / 2');               // 3.5\n\t\t   *     parser.eval('x + 3');                   // 6.5\n\t\t   *     parser.eval('function f(x, y) = x^y');  // f(x, y)\n\t\t   *     parser.eval('f(2, 3)');                 // 8\n\t\t   *\n\t\t   *     // get and set variables and functions\n\t\t   *     var x = parser.get('x');                // 7\n\t\t   *     var f = parser.get('f');                // function\n\t\t   *     var g = f(3, 2);                        // 9\n\t\t   *     parser.set('h', 500);\n\t\t   *     var i = parser.eval('h / 2');           // 250\n\t\t   *     parser.set('hello', function (name) {\n\t\t   *       return 'hello, ' + name + '!';\n\t\t   *     });\n\t\t   *     parser.eval('hello(\"user\")');           // \"hello, user!\"\n\t\t   *\n\t\t   *     // clear defined functions and variables\n\t\t   *     parser.clear();\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    eval, compile, parse\n\t\t   *\n\t\t   * @return {Parser} Parser",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35664,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35666,
            "description": "'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed, math) {\n\t\t  var _parse = load(__webpack_require__(282));\n  /**\n\t\t   * @constructor Parser\n\t\t   * Parser contains methods to evaluate or parse expressions, and has a number\n\t\t   * of convenience methods to get, set, and remove variables from memory. Parser\n\t\t   * keeps a scope containing variables in memory, which is used for all\n\t\t   * evaluations.\n\t\t   *\n\t\t   * Methods:\n\t\t   *    var result = parser.eval(expr);    // evaluate an expression\n\t\t   *    var value = parser.get(name);      // retrieve a variable from the parser\n\t\t   *    var values = parser.getAll();      // retrieve all defined variables\n\t\t   *    parser.set(name, value);           // set a variable in the parser\n\t\t   *    parser.remove(name);               // clear a variable from the\n\t\t   *                                       // parsers scope\n\t\t   *    parser.clear();                    // clear the parsers scope\n\t\t   *\n\t\t   * Example usage:\n\t\t   *    var parser = new Parser();\n\t\t   *    // Note: there is a convenience method which can be used instead:\n\t\t   *    // var parser = new math.parser();\n\t\t   *\n\t\t   *    // evaluate expressions\n\t\t   *    parser.eval('sqrt(3^2 + 4^2)');         // 5\n\t\t   *    parser.eval('sqrt(-4)');                // 2i\n\t\t   *    parser.eval('2 inch in cm');            // 5.08 cm\n\t\t   *    parser.eval('cos(45 deg)');             // 0.7071067811865476\n\t\t   *\n\t\t   *    // define variables and functions\n\t\t   *    parser.eval('x = 7 / 2');               // 3.5\n\t\t   *    parser.eval('x + 3');                   // 6.5\n\t\t   *    parser.eval('function f(x, y) = x^y');  // f(x, y)\n\t\t   *    parser.eval('f(2, 3)');                 // 8\n\t\t   *\n\t\t   *    // get and set variables and functions\n\t\t   *    var x = parser.get('x');                // 7\n\t\t   *    var f = parser.get('f');                // function\n\t\t   *    var g = f(3, 2);                        // 9\n\t\t   *    parser.set('h', 500);\n\t\t   *    var i = parser.eval('h / 2');           // 250\n\t\t   *    parser.set('hello', function (name) {\n\t\t   *        return 'hello, ' + name + '!';\n\t\t   *    });\n\t\t   *    parser.eval('hello(\"user\")');           // \"hello, user!\"\n\t\t   *\n\t\t   *    // clear defined functions and variables\n\t\t   *    parser.clear();\n\t\t   *",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35731,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35737,
            "description": "Parse an expression and return the parsed function node.\nThe node tree can be compiled via `code = node.compile(math)`,\nand the compiled code can be executed as `code.eval([scope])`",
            "params": [
                {
                    "name": "expr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "Node"
            },
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35749,
            "description": "Parse and compile an expression, return the compiled javascript code.\nThe node can be evaluated via code.eval([scope])",
            "params": [
                {
                    "name": "expr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "} code",
                "type": "Eval: function"
            },
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35760,
            "description": "Parse and evaluate the given expression",
            "params": [
                {
                    "name": "expr",
                    "description": "A string containing an expression, for example \"2+3\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "result     The result, or undefined when the expression was empty",
                "type": "*"
            },
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35773,
            "description": "Get a variable (a function or variable) by name from the parsers scope.\nReturns undefined when not found",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value",
                "type": "* | undefined"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35784,
            "description": "Get a map with all defined variables",
            "return": {
                "description": "values",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35792,
            "description": "Set a symbol (a function or variable) by name from the parsers scope.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "* | undefined"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35802,
            "description": "Remove a variable from the parsers scope",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35811,
            "description": "Clear the scope with variables and functions",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35831,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35833,
            "description": "module.exports = [\n\t\t  __webpack_require__(283),\n\t\t  __webpack_require__(289),\n\t\t  __webpack_require__(290),\n\t\t  __webpack_require__(293),\n\t\t  __webpack_require__(294),\n\t\t  __webpack_require__(295),\n\t\t  __webpack_require__(297),\n\t\t  __webpack_require__(296),\n\t\t  __webpack_require__(302),\n\t\t  __webpack_require__(284),\n\t\t  __webpack_require__(300),\n\t\t  __webpack_require__(301),\n\t\t  __webpack_require__(303),\n\t\t  __webpack_require__(298),\n\t\t  __webpack_require__(299),\n\t\t  __webpack_require__(310)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35857,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * @constructor UpdateNode",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35878,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35880,
            "description": "module.exports = [\n\t\t  __webpack_require__(312),\n\t\t  __webpack_require__(314),\n\t\t  __webpack_require__(316),\n\t\t  __webpack_require__(318),\n\t\t  __webpack_require__(319),\n\t\t  __webpack_require__(321),\n\t\t  __webpack_require__(327),\n\t\t  __webpack_require__(332),\n\t\t  __webpack_require__(334),\n\t\t  __webpack_require__(336)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35898,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n/**\n\t\t * Attach a transform function to math.range\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform changed the last `dim` parameter of function concat\n\t\t * from one-based to zero based",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35942,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 35944,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar array = __webpack_require__(40);\n\t\tvar IndexError = __webpack_require__(43);\n\t\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Concatenate two or more matrices.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.concat(A, B, C, ...)\n\t\t   *     math.concat(A, B, C, ..., dim)\n\t\t   *\n\t\t   * Where:\n\t\t   *\n\t\t   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n\t\t   *   By default the last dimension of the matrices.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var A = [[1, 2], [5, 6]];\n\t\t   *    var B = [[3, 4], [7, 8]];\n\t\t   *\n\t\t   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n\t\t   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n\t\t   *    math.concat('hello', ' ', 'world'); // returns 'hello world'\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    size, squeeze, subset, transpose\n\t\t   *\n\t\t   * @param {... Array | Matrix} args     Two or more matrices\n\t\t   * @return {Array | Matrix} Concatenated matrix",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36059,
            "description": "Recursively concatenate two matrices.\nThe contents of the matrices is not cloned.",
            "params": [
                {
                    "name": "a",
                    "description": "Multi dimensional array",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "Multi dimensional array",
                    "type": "Array"
                },
                {
                    "name": "concatDim",
                    "description": "The dimension on which to concatenate (zero-based)",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "The current dim (zero-based)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "c            The concatenated matrix",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36092,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36094,
            "description": "'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t\t * Attach a transform function to math.filter\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform adds support for equations as test function for math.filter,\n\t\t * so you can do something like 'filter([3, -2, 5], x > 0)'.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36164,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36166,
            "description": "'use strict';\nvar size = __webpack_require__(40).size;\n\t\tvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  \n\t\t  /**\n\t\t   * Filter the items in an array or one dimensional matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.filter(x, test)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    function isPositive (x) {\n\t\t   *      return x > 0;\n\t\t   *    }\n\t\t   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]\n\t\t   *\n\t\t   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/); // returns [\"23\", \"100\", \"55\"]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    forEach, map, sort\n\t\t   *\n\t\t   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n\t\t   * @param {Function | RegExp} test\n\t\t   *        A function or regular expression to test items.\n\t\t   *        All entries for which `test` returns true are returned.\n\t\t   *        When `test` is a function, it is invoked with three parameters:\n\t\t   *        the value of the element, the index of the element, and the\n\t\t   *        matrix/array being traversed. The function must return a boolean.\n\t\t   * @return {Matrix | Array} Returns the filtered matrix.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36224,
            "description": "Filter values in a callback given a callback function",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the filtered array",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36253,
            "description": "Filter values in a callback given a regular expression",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the filtered array",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36274,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36276,
            "description": "'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t\t * Attach a transform function to math.forEach\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform creates a one-based index instead of a zero-based index",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36326,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36328,
            "description": "'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Iterate over all elements of a matrix/array, and executes the given callback function.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.forEach(x, callback)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.forEach([1, 2, 3], function(value) {\n\t\t   *      console.log(value);\n\t\t   *    });\n\t\t   *    // outputs 1, 2, 3\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    filter, map, sort\n\t\t   *\n\t\t   * @param {Matrix | Array} x    The matrix to iterate on.\n\t\t   * @param {Function} callback   The callback function is invoked with three\n\t\t   *                              parameters: the value of the element, the index\n\t\t   *                              of the element, and the Matrix/array being traversed.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36371,
            "description": "forEach for a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36408,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36410,
            "description": "'use strict';\n/**\n\t\t * Attach a transform function to math.index\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform creates a one-based index instead of a zero-based index",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36465,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36467,
            "description": "'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t\t * Attach a transform function to math.map\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform creates a one-based index instead of a zero-based index",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36494,
            "description": "Map for a multi dimensional array. One-based indexes",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "orig",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36535,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36537,
            "description": "'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a new matrix or array with the results of the callback function executed on\n\t\t   * each entry of the matrix/array.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.map(x, callback)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.map([1, 2, 3], function(value) {\n\t\t   *      return value * value;\n\t\t   *    });  // returns [1, 4, 9]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    filter, forEach, sort\n\t\t   *\n\t\t   * @param {Matrix | Array} x    The matrix to iterate on.\n\t\t   * @param {Function} callback   The callback method is invoked with three\n\t\t   *                              parameters: the value of the element, the index\n\t\t   *                              of the element, and the matrix being traversed.\n\t\t   * @return {Matrix | array}     Transformed map of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36581,
            "description": "Map for a multi dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36620,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36622,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\t\tvar isCollection = __webpack_require__(322);\n/**\n\t\t * Attach a transform function to math.max\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform changed the last `dim` parameter of function max\n\t\t * from one-based to zero based",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36667,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36669,
            "description": "'use strict';\n/**\n\t\t * Test whether a value is a collection: an Array or Matrix\n\t\t * @param {*} x\n\t\t * @returns {boolean} isCollection",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36683,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36685,
            "description": "'use strict';\nvar deepForEach = __webpack_require__(324);\n\t\tvar reduce = __webpack_require__(325);\n\t\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t\t  var larger = load(__webpack_require__(64));\n  /**\n\t\t   * Compute the maximum value of a matrix or a  list with values.\n\t\t   * In case of a multi dimensional array, the maximum of the flattened array\n\t\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.max(a, b, c, ...)\n\t\t   *     math.max(A)\n\t\t   *     math.max(A, dim)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.max(2, 1, 4, 3);                  // returns 4\n\t\t   *     math.max([2, 1, 4, 3]);                // returns 4\n\t\t   *\n\t\t   *     // maximum over a specified dimension (zero-based)\n\t\t   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]\n\t\t   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]\n\t\t   *\n\t\t   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n\t\t   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, min, prod, std, sum, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The maximum value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36750,
            "description": "Return the largest of two values",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns x when x is largest, or y when y is largest",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36761,
            "description": "Recursively calculate the maximum value in an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "max",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36788,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36790,
            "description": "'use strict';\n/**\n\t\t * Recursively loop over all elements in a given multi dimensional array\n\t\t * and invoke the callback on each of the elements.\n\t\t * @param {Array | Matrix} array\n\t\t * @param {Function} callback     The callback method is invoked with one\n\t\t *                                parameter: the current element in the array",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36819,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36821,
            "description": "'use strict';\nvar arraySize = __webpack_require__(40).size;\n\t\tvar IndexError = __webpack_require__(43);\n/**\n\t\t * Reduce a given matrix or array to a new matrix or\n\t\t * array with one less dimension, applying the given\n\t\t * callback in the selected dimension.\n\t\t * @param {Array | Matrix} mat\n\t\t * @param {number} dim\n\t\t * @param {Function} callback\n\t\t * @return {Array | Matrix} res",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36851,
            "description": "Recursively reduce a matrix",
            "params": [
                {
                    "name": "mat",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dim",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "ret",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36886,
            "description": "Transpose a matrix",
            "params": [
                {
                    "name": "mat",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "ret",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36908,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36910,
            "description": "'use strict';\nvar isCollection = __webpack_require__(322);\n/**\n\t\t * Test whether an array contains collections\n\t\t * @param {Array} array\n\t\t * @returns {boolean} Returns true when the array contains one or multiple\n\t\t *                    collections (Arrays or Matrices). Returns false otherwise.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36932,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36934,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\t\tvar isCollection = __webpack_require__(322);\n/**\n\t\t * Attach a transform function to math.mean\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform changed the last `dim` parameter of function mean\n\t\t * from one-based to zero based",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36979,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 36981,
            "description": "'use strict';\nvar size = __webpack_require__(40).size;\n\t\tvar deepForEach = __webpack_require__(324);\n\t\tvar reduce = __webpack_require__(325);\n\t\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var divide = load(__webpack_require__(329));\n  /**\n\t\t   * Compute the mean value of matrix or a list with values.\n\t\t   * In case of a multi dimensional array, the mean of the flattened array\n\t\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.mean(a, b, c, ...)\n\t\t   *     math.mean(A)\n\t\t   *     math.mean(A, dim)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.mean(2, 1, 4, 3);                     // returns 2.5\n\t\t   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725\n\t\t   *\n\t\t   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]\n\t\t   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     median, min, max, sum, prod, std, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The mean of all values",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37042,
            "description": "Calculate the mean value in an n-dimensional array, returning a\nn-1 dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dim",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "mean",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37056,
            "description": "Recursively calculate the mean value in an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "mean",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37083,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37085,
            "description": "'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed) {\n  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiply     = load(__webpack_require__(84));\n\t\t  var inv          = load(__webpack_require__(330));\n\t\t  var matrix       = load(__webpack_require__(52));\n  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Divide two values, `x / y`.\n\t\t   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.divide(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.divide(2, 3);            // returns number 0.6666666666666666\n\t\t   *\n\t\t   *    var a = math.complex(5, 14);\n\t\t   *    var b = math.complex(4, 1);\n\t\t   *    math.divide(a, b);            // returns Complex 2 + 3i\n\t\t   *\n\t\t   *    var c = [[7, -6], [13, -4]];\n\t\t   *    var d = [[1, 2], [4, 3]];\n\t\t   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]\n\t\t   *\n\t\t   *    var e = math.unit('18 km');\n\t\t   *    math.divide(e, 4.5);          // returns Unit 4 km\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37178,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37180,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix       = load(__webpack_require__(52));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var addScalar    = load(__webpack_require__(53));\n\t\t  var multiply     = load(__webpack_require__(84));\n\t\t  var unaryMinus   = load(__webpack_require__(78));\n\t\t  var det          = load(__webpack_require__(331));\n\t\t  var eye          = load(__webpack_require__(83));\n  /**\n\t\t   * Calculate the inverse of a square matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.inv(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]\n\t\t   *     math.inv(4);                 // returns 0.25\n\t\t   *     1 / 4;                       // returns 0.25\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     det, transpose\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n\t\t   * @return {number | Complex | Array | Matrix} The inverse of `x`.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37272,
            "description": "Calculate the inverse of a square matrix",
            "params": [
                {
                    "name": "mat",
                    "description": "A square matrix",
                    "type": "Array[]"
                },
                {
                    "name": "rows",
                    "description": "Number of rows",
                    "type": "Number"
                },
                {
                    "name": "cols",
                    "description": "Number of columns, must equal rows",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "inv    Inverse matrix",
                "type": "Array[]"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37391,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37393,
            "description": "'use strict';\nvar util = __webpack_require__(39);\n\t\tvar object = util.object;\n\t\tvar string = util.string;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var unaryMinus = load(__webpack_require__(78));\n  /**\n\t\t   * Calculate the determinant of a matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.det(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.det([[1, 2], [3, 4]]); // returns -2\n\t\t   *\n\t\t   *    var A = [\n\t\t   *      [-2, 2, 3],\n\t\t   *      [-1, 1, 3],\n\t\t   *      [2, 0, -1]\n\t\t   *    ]\n\t\t   *    math.det(A); // returns 6\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    inv\n\t\t   *\n\t\t   * @param {Array | Matrix} x  A matrix\n\t\t   * @return {number} The determinant of `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37491,
            "description": "Calculate the determinant of a matrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "A square, two dimensional matrix",
                    "type": "Array[]"
                },
                {
                    "name": "rows",
                    "description": "Number of rows of the matrix (zero-based)",
                    "type": "Number"
                },
                {
                    "name": "cols",
                    "description": "Number of columns of the matrix (zero-based)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "det",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37565,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37567,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\t\tvar isCollection = __webpack_require__(322);\n/**\n\t\t * Attach a transform function to math.min\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform changed the last `dim` parameter of function min\n\t\t * from one-based to zero based",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37612,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37614,
            "description": "'use strict';\nvar deepForEach = __webpack_require__(324);\n\t\tvar reduce = __webpack_require__(325);\n\t\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t\t  var smaller = load(__webpack_require__(60));\n\t\t  \n\t\t  /**\n\t\t   * Compute the maximum value of a matrix or a  list of values.\n\t\t   * In case of a multi dimensional array, the maximum of the flattened array\n\t\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.min(a, b, c, ...)\n\t\t   *     math.min(A)\n\t\t   *     math.min(A, dim)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.min(2, 1, 4, 3);                  // returns 1\n\t\t   *     math.min([2, 1, 4, 3]);                // returns 1\n\t\t   *\n\t\t   *     // maximum over a specified dimension (zero-based)\n\t\t   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]\n\t\t   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]\n\t\t   *\n\t\t   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n\t\t   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, max, prod, std, sum, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The minimum value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37679,
            "description": "Return the smallest of two values",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns x when x is smallest, or y when y is smallest",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37690,
            "description": "Recursively calculate the minimum value in an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "min",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37717,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37719,
            "description": "'use strict';\n/**\n\t\t * Attach a transform function to math.range\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform creates a range which includes the end value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37751,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37753,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  var ZERO = new type.BigNumber(0);\n\t\t  var ONE = new type.BigNumber(1);\n  /**\n\t\t   * Create an array from a range.\n\t\t   * By default, the range end is excluded. This can be customized by providing\n\t\t   * an extra parameter `includeEnd`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.range(str [, includeEnd])               // Create a range from a string,\n\t\t   *                                                  // where the string contains the\n\t\t   *                                                  // start, optional step, and end,\n\t\t   *                                                  // separated by a colon.\n\t\t   *     math.range(start, end [, includeEnd])        // Create a range with start and\n\t\t   *                                                  // end and a step size of 1.\n\t\t   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n\t\t   *                                                  // and end.\n\t\t   *\n\t\t   * Where:\n\t\t   *\n\t\t   * - `str: string`\n\t\t   *   A string 'start:end' or 'start:step:end'\n\t\t   * - `start: {number | BigNumber}`\n\t\t   *   Start of the range\n\t\t   * - `end: number | BigNumber`\n\t\t   *   End of the range, excluded by default, included when parameter includeEnd=true\n\t\t   * - `step: number | BigNumber`\n\t\t   *   Step size. Default value is 1.\n\t\t   * - `includeEnd: boolean`\n\t\t   *   Option to specify whether to include the end or not. False by default.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.range(2, 6);        // [2, 3, 4, 5]\n\t\t   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]\n\t\t   *     math.range('2:1:6');     // [2, 3, 4, 5]\n\t\t   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     ones, zeros, size, subset\n\t\t   *\n\t\t   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n\t\t   * @return {Array | Matrix} range",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37877,
            "description": "Create a range with numbers. End is excluded",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "step",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "range",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37904,
            "description": "Create a range with numbers. End is included",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "step",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "range",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37931,
            "description": "Create a range with big numbers. End is excluded",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "step",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "range",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37958,
            "description": "Create a range with big numbers. End is included",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "step",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "range",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 37985,
            "description": "Parse a string into a range,\nThe string contains the start, optional step, and end, separated by a colon.\nIf the string does not contain a valid range, null is returned.\nFor example str='0:2:11'.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "| null} range Object containing properties start, end, step",
                "type": "Start: number, end: number, step: number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38036,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38038,
            "description": "'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n/**\n\t\t * Attach a transform function to math.subset\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform creates a range which includes the end value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38070,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38072,
            "description": "'use strict';\nvar object = __webpack_require__(3);\n\t\tvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t\t  var parser = load(__webpack_require__(307))();\n  /**\n\t\t   * Documentation object\n\t\t   * @param {Object} doc  Object containing properties:\n\t\t   *                      {string} name\n\t\t   *                      {string} category\n\t\t   *                      {string} description\n\t\t   *                      {string[]} syntax\n\t\t   *                      {string[]} examples\n\t\t   *                      {string[]} seealso\n\t\t   * @constructor",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38103,
            "description": "Attach type information",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38109,
            "description": "Generate a string representation of the Help object",
            "return": {
                "description": "Returns a string",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38156,
            "description": "Export the help object to JSON",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38165,
            "description": "Instantiate a Help object from a JSON object",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new Help object",
                "type": "Help"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38180,
            "description": "Returns a string representation of the Help object",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38193,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38195,
            "description": "module.exports = [\n\t\t  __webpack_require__(339),\n\t\t  __webpack_require__(366),\n\t\t  __webpack_require__(397),\n\t\t  __webpack_require__(413),\n\t\t  __webpack_require__(422),\n\t\t  __webpack_require__(427),\n\t\t  __webpack_require__(430),\n\t\t  __webpack_require__(436),\n\t\t  __webpack_require__(448),\n\t\t  __webpack_require__(457),\n\t\t  __webpack_require__(461),\n\t\t  __webpack_require__(463),\n\t\t  __webpack_require__(470),\n\t\t  __webpack_require__(472),\n\t\t  __webpack_require__(498),\n\t\t  __webpack_require__(500)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38219,
            "description": "module.exports = [\n\t\t  // decomposition\n\t\t  __webpack_require__(340),\n\t\t  __webpack_require__(341),\n  // solver\n\t\t  __webpack_require__(361),\n\t\t  __webpack_require__(363),\n\t\t  __webpack_require__(365)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38235,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nvar object = util.object;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var abs = load(__webpack_require__(86));\n\t\t  var addScalar = load(__webpack_require__(53));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var larger = load(__webpack_require__(64));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var unaryMinus = load(__webpack_require__(78));\n\t\t  \n\t\t  var SparseMatrix = type.SparseMatrix;\n\t\t  var DenseMatrix = type.DenseMatrix;\n\t\t  var Spa = type.Spa;\n\t\t  \n\t\t  /**\n\t\t   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n\t\t   * row permutation vector `p` where `A[p,:] = L * U`\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.lup(A);\n\t\t   *\n\t\t   * Example:\n\t\t   *\n\t\t   *    var m = [[2, 1], [1, 4]];\n\t\t   *    var r = math.lup();\n\t\t   *    // r = {\n\t\t   *    //   L: [[1, 0], [0.5, 1]],\n\t\t   *    //   U: [[2, 1], [0, 3.5]],\n\t\t   *    //   P: [0, 1]\n\t\t   *    // }\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    slu, lsolve, lusolve, usolve\n\t\t   *\n\t\t   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n\t\t   *\n\t\t   * @return {Array<Matrix>}      The lower triangular matrix, the upper triangular matrix and the permutation matrix.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38626,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38628,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nvar number = util.number,\n\t\t    \n\t\t    isInteger = number.isInteger;\nfunction factory (type, config, load, typed) {\n  var cs_sqr = load(__webpack_require__(342));\n\t\t  var cs_lu = load(__webpack_require__(353));\n  /**\n\t\t   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where\n\t\t   *\n\t\t   * `P * A * Q = L * U`\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.slu(A, order, threshold);\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    lup, lsolve, usolve, lusolve\n\t\t   *\n\t\t   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.\n\t\t   * @param {Number}       order          The Symbolic Ordering and Analysis order:\n\t\t   *                                       0 - Natural ordering, no permutation vector q is returned\n\t\t   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'\n\t\t   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. \n\t\t   *                                           This is appropriatefor LU factorization of unsymmetric matrices.\n\t\t   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.\n\t\t   *                                           A dense row is a row with more than 10*sqr(columns) entries.\n\t\t   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)\n\t\t   *\n\t\t   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38704,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38706,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_amd = load(__webpack_require__(343));\n\t\t  var cs_permute = load(__webpack_require__(348));\n\t\t  var cs_etree = load(__webpack_require__(349));\n\t\t  var cs_post = load(__webpack_require__(350));\n\t\t  var cs_counts = load(__webpack_require__(351));\n  /**\n\t\t   * Symbolic ordering and analysis for QR and LU decompositions.\n\t\t   *\n\t\t   * @param {Number}  order           The ordering strategy (see cs_amd for more details)\n\t\t   * @param {Matrix}  a               The A matrix\n\t\t   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or\n\t\t   *                                  symbolic ordering and analysis for LU decomposition (false)\n\t\t   *\n\t\t   * @return {Object}                 The Symbolic ordering and analysis for matrix A\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38771,
            "description": "Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38873,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 38875,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n\t\t  var cs_fkeep = load(__webpack_require__(345));\n\t\t  var cs_tdfs = load(__webpack_require__(346));\n\t\t  \n\t\t  var add       = load(__webpack_require__(51));\n\t\t  var multiply  = load(__webpack_require__(84));\n\t\t  var transpose = load(__webpack_require__(347));\n  /**\n\t\t   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used \n\t\t   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n\t\t   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n\t\t   * of a right looking sparse Cholesky factorization.\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t\t   *\n\t\t   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n\t\t   * @param {Matrix} m        Sparse Matrix\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39283,
            "description": "Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\nvector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n\nOrder: 0\n  A natural ordering P=null matrix is returned.\n\nOrder: 1\n  Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n  P = M + M'\n\nOrder: 2\n  Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n  P = M' * M\n\nOrder: 3\n  This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n  P = M' * M",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39344,
            "description": "Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n\n - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39386,
            "description": "Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with \ndegree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\noutput permutation p.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39452,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39454,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t\t   * This function \"flips\" its input about the integer -1.\n\t\t   *\n\t\t   * @param {Number}  i               The value to flip\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39480,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39482,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t\t   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\n\t\t   *\n\t\t   * @param {Matrix}   a              The sparse matrix\n\t\t   * @param {function} callback       The callback function, function will be invoked with the following args:\n\t\t   *                                    - The entry row\n\t\t   *                                    - The entry column\n\t\t   *                                    - The entry value\n\t\t   *                                    - The state parameter\n\t\t   * @param {any}      other          The state\n\t\t   *\n\t\t   * @return                          The number of nonzero elements in the matrix\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39551,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39553,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t\t   * Depth-first search and postorder of a tree rooted at node j\n\t\t   *\n\t\t   * @param {Number}  j               The tree node\n\t\t   * @param {Number}  k               \n\t\t   * @param {Array}   w               The workspace array\n\t\t   * @param {Number}  head            The index offset within the workspace for the head array\n\t\t   * @param {Number}  next            The index offset within the workspace for the next array\n\t\t   * @param {Array}   post            The post ordering array\n\t\t   * @param {Number}  stack           The index offset within the workspace for the stack array\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39609,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39611,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var DenseMatrix = type.DenseMatrix,\n\t\t      SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Transpose a matrix. All values of the matrix are reflected over its\n\t\t   * main diagonal. Only applicable to two dimensional matrices containing\n\t\t   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n\t\t   * vectors and scalars return the input unchanged.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.transpose(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     var A = [[1, 2, 3], [4, 5, 6]];\n\t\t   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     diag, inv, subset, squeeze\n\t\t   *\n\t\t   * @param {Array | Matrix} x  Matrix to be transposed\n\t\t   * @return {Array | Matrix}   The transposed matrix",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39793,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39795,
            "description": "'use strict';\nfunction factory (type) {\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Permutes a sparse matrix C = P * A * Q\n\t\t   *\n\t\t   * @param {Matrix}  a               The Matrix A\n\t\t   * @param {Array}   pinv            The row permutation vector\n\t\t   * @param {Array}   q               The column permutation vector\n\t\t   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n\t\t   *\n\t\t   * @return {Matrix}                 C = P * A * Q, null on error\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39870,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39872,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t\t   * Computes the elimination tree of Matrix A (using triu(A)) or the \n\t\t   * elimination tree of A'A without forming A'A.\n\t\t   *\n\t\t   * @param {Matrix}  a               The A Matrix\n\t\t   * @param {boolean} ata             A value of true the function computes the etree of A'A\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39952,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 39954,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_tdfs = load(__webpack_require__(346));\n  /**\n\t\t   * Post order a tree of forest\n\t\t   *\n\t\t   * @param {Array}   parent          The tree or forest\n\t\t   * @param {Number}  n               Number of columns\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40017,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40019,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var transpose = load(__webpack_require__(347));\n\t\t  \n\t\t  var cs_leaf = load(__webpack_require__(352));\n  /**\n\t\t   * Computes the column counts using the upper triangular part of A.\n\t\t   * It transposes A internally, none of the input parameters are modified.\n\t\t   *\n\t\t   * @param {Matrix} a           The sparse matrix A\n\t\t   *\n\t\t   * @param {Matrix} ata         Count the columns of A'A instead\n\t\t   *\n\t\t   * @return                     An array of size n of the column counts or null on error\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40144,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40146,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t\t   * This function determines if j is a leaf of the ith row subtree.\n\t\t   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)\n\t\t   *\n\t\t   * @param {Number}  i               The ith row subtree\n\t\t   * @param {Number}  j               The node to test\n\t\t   * @param {Array}   w               The workspace array\n\t\t   * @param {Number}  first           The index offset within the workspace for the first array\n\t\t   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array\n\t\t   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array\n\t\t   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array\n\t\t   *\n\t\t   * @return {Object}\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40216,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40218,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var abs = load(__webpack_require__(86));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  \n\t\t  var larger = load(__webpack_require__(64));\n\t\t  var largerEq = load(__webpack_require__(354));\n\t\t  \n\t\t  var cs_spsolve = load(__webpack_require__(355));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n\t\t   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L \n\t\t   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n\t\t   * L * U = A(p, q), where p is the inverse of pinv.\n\t\t   *\n\t\t   * @param {Matrix}  m               The A Matrix to factorize\n\t\t   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing \n\t\t   *                                  column ordering q\n\t\t   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n\t\t   *\n\t\t   * @return {Number}                 The numeric LU factorization of A or null\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40400,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40402,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether value x is larger or equal to y.\n\t\t   *\n\t\t   * The function returns true when x is larger than y or the relative\n\t\t   * difference between x and y is smaller than the configured epsilon. The\n\t\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.largerEq(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.larger(2, 1 + 1);         // returns false\n\t\t   *    math.largerEq(2, 1 + 1);       // returns true\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal, smaller, smallerEq, larger, compare\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40581,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40583,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var subtract = load(__webpack_require__(77));\n  var cs_reach = load(__webpack_require__(356));\n  /**\n\t\t   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the\n\t\t   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the\n\t\t   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U \n\t\t   * is upper triangular with the diagonal entry as the last entry in each column.\n\t\t   *\n\t\t   * @param {Matrix}  g               The G matrix\n\t\t   * @param {Matrix}  b               The B matrix\n\t\t   * @param {Number}  k               The kth column in B\n\t\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t\t   * @param {Array}   x               The soluton to the linear system G * x = b\n\t\t   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n\t\t   * @param {boolean} lo              The lower (true) upper triangular (false) flag\n\t\t   *\n\t\t   * @return {Number}                 The index for the nonzero pattern\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40673,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40675,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_dfs = load(__webpack_require__(357));\n\t\t  var cs_marked = load(__webpack_require__(358));\n\t\t  var cs_mark = load(__webpack_require__(359));\n  /**\n\t\t   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 \n\t\t   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\n\t\t   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\n\t\t   *\n\t\t   * @param {Matrix}  g               The G matrix\n\t\t   * @param {Matrix}  b               The B matrix\n\t\t   * @param {Number}  k               The kth column in B\n\t\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t\t   * @param {Array}   pinv            The inverse row permutation vector\n\t\t   *\n\t\t   * @return {Number}                 The index for the nonzero pattern\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40740,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40742,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_marked = load(__webpack_require__(358));\n\t\t  var cs_mark   = load(__webpack_require__(359));\n\t\t  var cs_unflip = load(__webpack_require__(360));\n  /**\n\t\t   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting\n\t\t   * at nodes in B (see cs_reach()).\n\t\t   *\n\t\t   * @param {Number}  j               The starting node for the DFS algorithm\n\t\t   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored\n\t\t   * @param {Number}  top             Start index in stack xi[top..n-1]\n\t\t   * @param {Number}  k               The kth column in B\n\t\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t\t   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n\t\t   *\n\t\t   * @return {Number}                 New value of top\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40831,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40833,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t\t   * Checks if the node at w[j] is marked\n\t\t   *\n\t\t   * @param {Array}   w               The array\n\t\t   * @param {Number}  j               The array index\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40860,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40862,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n  /**\n\t\t   * Marks the node at w[j]\n\t\t   *\n\t\t   * @param {Array}   w               The array\n\t\t   * @param {Number}  j               The array index\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40891,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40893,
            "description": "'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n\t\t  \n\t\t  /**\n\t\t   * Flips the value if it is negative of returns the same value otherwise.\n\t\t   *\n\t\t   * @param {Number}  i               The value to flip\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40921,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 40923,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var equalScalar = load(__webpack_require__(48));\n  var solveValidation = load(__webpack_require__(362));\n  var DenseMatrix = type.DenseMatrix;\n  /** \n\t\t   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.\n\t\t   *\n\t\t   * `L * x = b`\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.lsolve(L, b);\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = [[-2, 3], [2, 1]];\n\t\t   *    var b = [11, 9];\n\t\t   *    var x = lsolve(a, b);  // [[-5.5], [20]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    lup, slu, usolve, lusolve\n\t\t   *\n\t\t   * @param {Matrix, Array} L       A N x N matrix or array (L)\n\t\t   * @param {Matrix, Array} b       A column vector with the b values\n\t\t   *\n\t\t   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41114,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41116,
            "description": "'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\n\t\tvar array = util.array;\nvar isArray = Array.isArray;\nfunction factory (type) {\n\t\t  \n\t\t  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Validates matrix and column vector b for backward/forward substitution algorithms.\n\t\t   *\n\t\t   * @param {Matrix} m            An N x N matrix\n\t\t   * @param {Array | Matrix} b    A column vector\n\t\t   * @param {Boolean} copy        Return a copy of vector b\n\t\t   *\n\t\t   * @return {DenseMatrix}        Dense column vector b",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41281,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41283,
            "description": "'use strict';\nvar isArray = Array.isArray;\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var lup = load(__webpack_require__(340));\n\t\t  var slu = load(__webpack_require__(341));\n\t\t  var cs_ipvec = load(__webpack_require__(364));\n  var solveValidation = load(__webpack_require__(362));\n  var usolve = load(__webpack_require__(365));\n\t\t  var lsolve = load(__webpack_require__(361));\n  /**\n\t\t   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n\t\t   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];\n\t\t   *\n\t\t   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n\t\t   *\n\t\t   *    var f = math.lup(m);\n\t\t   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n\t\t   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]\n\t\t   *\n\t\t   *    var a = [[-2, 3], [2, 1]];\n\t\t   *    var b = [11, 9];\n\t\t   *    var x = lusolve(a, b);  // [[-5.5], [20]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    lup, slu, lsolve, usolve\n\t\t   *\n\t\t   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n\t\t   * @param {Matrix | Array} b               Column Vector\n\t\t   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n\t\t   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n\t\t   *\n\t\t   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41412,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41414,
            "description": "'use strict';\nfunction factory () {\n  /**\n\t\t   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.\n\t\t   *\n\t\t   * @param {Array} p           The permutation vector of length n. null value denotes identity\n\t\t   * @param {Array} b           The input vector\n\t\t   *\n\t\t   * @return {Array}            The output vector x = P'b",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41459,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41461,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var equalScalar = load(__webpack_require__(48));\n  var solveValidation = load(__webpack_require__(362));\n\t\t  \n\t\t  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n\t\t   *\n\t\t   * `U * x = b`\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.usolve(U, b);\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = [[-2, 3], [2, 1]];\n\t\t   *    var b = [11, 9];\n\t\t   *    var x = usolve(a, b);  // [[8], [9]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    lup, slu, usolve, lusolve\n\t\t   *\n\t\t   * @param {Matrix, Array} U       A N x N matrix or array (U)\n\t\t   * @param {Matrix, Array} b       A column vector with the b values\n\t\t   *\n\t\t   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41653,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41655,
            "description": "module.exports = [\n\t\t  __webpack_require__(86),\n\t\t  __webpack_require__(51),\n\t\t  __webpack_require__(53),\n\t\t  __webpack_require__(367),\n\t\t  __webpack_require__(369),\n\t\t  __webpack_require__(370),\n\t\t  __webpack_require__(329),\n\t\t  __webpack_require__(371),\n\t\t  __webpack_require__(373),\n\t\t  __webpack_require__(375),\n\t\t  __webpack_require__(376),\n\t\t  __webpack_require__(87),\n\t\t  __webpack_require__(377),\n\t\t  __webpack_require__(378),\n\t\t  __webpack_require__(379),\n\t\t  __webpack_require__(382),\n\t\t  __webpack_require__(385),\n\t\t  __webpack_require__(386),\n\t\t  __webpack_require__(387),\n\t\t  __webpack_require__(84),\n\t\t  __webpack_require__(388),\n\t\t  __webpack_require__(390),\n\t\t  __webpack_require__(82),\n\t\t  __webpack_require__(391),\n\t\t  __webpack_require__(393),\n\t\t  __webpack_require__(380),\n\t\t  __webpack_require__(394),\n\t\t  __webpack_require__(77),\n\t\t  __webpack_require__(78),\n\t\t  __webpack_require__(395),\n\t\t  __webpack_require__(396)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41694,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var unaryMinus = load(__webpack_require__(78));\n\t\t  var isNegative = load(__webpack_require__(368));\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Calculate the cubic root of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cbrt(x)\n\t\t   *    math.cbrt(x, allRoots)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cbrt(27);                  // returns 3\n\t\t   *    math.cube(3);                   // returns 27\n\t\t   *    math.cbrt(-64);                 // returns -4\n\t\t   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m\n\t\t   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]\n\t\t   *\n\t\t   *    var x = math.complex('8i');\n\t\t   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i\n\t\t   *    math.cbrt(x, true);             // returns Matrix [\n\t\t   *                                    //    1.7320508075689 + i\n\t\t   *                                    //   -1.7320508075689 + i\n\t\t   *                                    //   -2i\n\t\t   *                                    // ]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    square, sqrt, cube\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x\n\t\t   *            Value for which to calculate the cubic root.\n\t\t   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n\t\t   *            when `x` is a number or complex number. If true, all complex\n\t\t   *            roots are returned, if false (default) the principal root is\n\t\t   *            returned.\n\t\t   * @return {number | BigNumber | Complex | Unit | Array | Matrix}\n\t\t   *            Returns the cubic root of `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41765,
            "description": "Calculate the cubic root for a complex number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Complex"
                },
                {
                    "name": "allRoots",
                    "description": "If true, the function will return an array\n                              with all three roots. If false or undefined,\n                              the principal root is returned.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the cubic root(s) of x",
                "type": "Complex | Array.<Complex> | Matrix.<Complex>"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41800,
            "description": "Calculate the cubic root for a Unit",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "Returns the cubic root of x",
                "type": "Unit"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41847,
            "description": "Calculate cbrt for a number\n\nCode from es6-shim.js:\n  https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the cubic root of x",
                "type": "Number | Complex"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41883,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41885,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is negative: smaller than zero.\n\t\t   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isNegative(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isNegative(3);                     // returns false\n\t\t   *    math.isNegative(-2);                    // returns true\n\t\t   *    math.isNegative(0);                     // returns false\n\t\t   *    math.isNegative(-0);                    // returns false\n\t\t   *    math.isNegative(math.bignumber(2));     // returns false\n\t\t   *    math.isNegative(math.fraction(-2, 5));  // returns true\n\t\t   *    math.isNegative('-2');                  // returns true\n\t\t   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isPositive, isZero, isInteger\n\t\t   *\n\t\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41951,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 41953,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Round a value towards plus infinity\n\t\t   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.ceil(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.ceil(3.2);               // returns number 4\n\t\t   *    math.ceil(3.8);               // returns number 4\n\t\t   *    math.ceil(-4.2);              // returns number -4\n\t\t   *    math.ceil(-4.7);              // returns number -4\n\t\t   *\n\t\t   *    var c = math.complex(3.2, -2.7);\n\t\t   *    math.ceil(c);                 // returns Complex 4 - 2i\n\t\t   *\n\t\t   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    floor, fix, round\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42018,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42020,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Compute the cube of a value, `x * x * x`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cube(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cube(2);            // returns number 8\n\t\t   *    math.pow(2, 3);          // returns number 8\n\t\t   *    math.cube(4);            // returns number 64\n\t\t   *    4 * 4 * 4;               // returns number 64\n\t\t   *\n\t\t   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply, square, pow, cbrt\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42088,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42090,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var latex = __webpack_require__(32);\n\t\t  \n\t\t  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Divide two matrices element wise. The function accepts both matrices and\n\t\t   * scalar values.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.dotDivide(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.dotDivide(2, 4);   // returns 0.5\n\t\t   *\n\t\t   *    a = [[9, 5], [6, 1]];\n\t\t   *    b = [[3, 2], [5, 2]];\n\t\t   *\n\t\t   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]\n\t\t   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    divide, multiply, dotMultiply\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42239,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42241,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n\t\t   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤\n\t\t   *          └  0            ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n\t\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42364,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42366,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n\t\t  var latex = __webpack_require__(32);\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm09 = load(__webpack_require__(374));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Multiply two matrices element wise. The function accepts both matrices and\n\t\t   * scalar values.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.dotMultiply(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.dotMultiply(2, 4); // returns 8\n\t\t   *\n\t\t   *    a = [[9, 5], [6, 1]];\n\t\t   *    b = [[3, 2], [5, 2]];\n\t\t   *\n\t\t   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]\n\t\t   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply, divide, dotDivide\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42513,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42515,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked NZA times, number of nonzero elements in A.\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  0            ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42668,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42670,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var pow = load(__webpack_require__(82));\n\t\t  var latex = __webpack_require__(32);\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Calculates the power of x to y element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.dotPow(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.dotPow(2, 3);            // returns number 8\n\t\t   *\n\t\t   *    var a = [[1, 2], [4, 3]];\n\t\t   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]\n\t\t   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    pow, sqrt, multiply\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n\t\t   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42815,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42817,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the exponent of a value.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.exp(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.exp(2);                  // returns number 7.3890560989306495\n\t\t   *    math.pow(math.e, 2);          // returns number 7.3890560989306495\n\t\t   *    math.log(math.exp(2));        // returns number 2\n\t\t   *\n\t\t   *    math.exp([1, 2, 3]);\n\t\t   *    // returns Array [\n\t\t   *    //   2.718281828459045,\n\t\t   *    //   7.3890560989306495,\n\t\t   *    //   20.085536923187668\n\t\t   *    // ]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    log, pow\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42878,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42880,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Round a value towards minus infinity.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.floor(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.floor(3.2);              // returns number 3\n\t\t   *    math.floor(3.8);              // returns number 3\n\t\t   *    math.floor(-4.2);             // returns number -5\n\t\t   *    math.floor(-4.7);             // returns number -5\n\t\t   *\n\t\t   *    var c = math.complex(3.2, -2.7);\n\t\t   *    math.floor(c);                // returns Complex 3 - 3i\n\t\t   *\n\t\t   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    ceil, fix, round\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42944,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 42946,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm04 = load(__webpack_require__(55));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Calculate the greatest common divisor for two or more values or arrays.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.gcd(a, b)\n\t\t   *    math.gcd(a, b, c, ...)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.gcd(8, 12);              // returns 4\n\t\t   *    math.gcd(-4, 6);              // returns 2\n\t\t   *    math.gcd(25, 15, -10);        // returns 5\n\t\t   *\n\t\t   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    lcm, xgcd\n\t\t   *\n\t\t   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n\t\t   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43100,
            "description": "Calculate gcd for BigNumbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "Returns greatest common denominator of a and b",
                "type": "BigNumber"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43123,
            "description": "Calculate gcd for numbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the greatest common denominator of a and b",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43149,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43151,
            "description": "'use strict';\nvar flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n\t\t  var abs = load(__webpack_require__(86));\n\t\t  var add = load(__webpack_require__(53));\n\t\t  var divide = load(__webpack_require__(81));\n\t\t  var multiply = load(__webpack_require__(80));\n\t\t  var sqrt = load(__webpack_require__(380));\n\t\t  var smaller = load(__webpack_require__(60));\n\t\t  var isPositive = load(__webpack_require__(381));\n  /**\n\t\t   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n\t\t   *\n\t\t   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n\t\t   *\n\t\t   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.hypot(a, b, ...)\n\t\t   *     math.hypot([a, b, c, ...])\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.hypot(3, 4);      // 5\n\t\t   *     math.hypot(3, 4, 5);   // 7.0710678118654755\n\t\t   *     math.hypot([3, 4, 5]); // 7.0710678118654755\n\t\t   *     math.hypot(-2);        // 2\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     abs, norm\n\t\t   *\n\t\t   * @param {... number | BigNumber} args\n\t\t   * @return {number | BigNumber} Returns the hypothenusa of the input values.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43204,
            "description": "Calculate the hypotenusa for an Array with values",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "type": "Array.<number | BigNumber>"
                }
            ],
            "return": {
                "description": "Returns the result",
                "type": "Number | BigNumber"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43239,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43241,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the square root of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sqrt(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sqrt(25);                // returns 5\n\t\t   *    math.square(5);               // returns 25\n\t\t   *    math.sqrt(-4);                // returns Complex 2i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    square, multiply, cube, cbrt\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n\t\t   *            Value for which to calculate the square root.\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n\t\t   *            Returns the square root of `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43301,
            "description": "Calculate sqrt for a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the square root of x",
                "type": "Number | Complex"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43325,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43327,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is positive: larger than zero.\n\t\t   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isPositive(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isPositive(3);                     // returns true\n\t\t   *    math.isPositive(-2);                    // returns false\n\t\t   *    math.isPositive(0);                     // returns false\n\t\t   *    math.isPositive(-0);                    // returns false\n\t\t   *    math.isPositive(0.5);                   // returns true\n\t\t   *    math.isPositive(math.bignumber(2));     // returns true\n\t\t   *    math.isPositive(math.fraction(-2, 5));  // returns false\n\t\t   *    math.isPositive(math.fraction(1,3));    // returns false\n\t\t   *    math.isPositive('2');                   // returns true\n\t\t   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isZero, isNegative, isInteger\n\t\t   *\n\t\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43395,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43397,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm06 = load(__webpack_require__(383));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Calculate the least common multiple for two or more values or arrays.\n\t\t   *\n\t\t   * lcm is defined as:\n\t\t   *\n\t\t   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.lcm(a, b)\n\t\t   *    math.lcm(a, b, c, ...)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.lcm(4, 6);               // returns 12\n\t\t   *    math.lcm(6, 21);              // returns 42\n\t\t   *    math.lcm(6, 21, 5);           // returns 210\n\t\t   *\n\t\t   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    gcd, xgcd\n\t\t   *\n\t\t   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n\t\t   * @return {number | BigNumber | Array | Matrix}                           The least common multiple",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43555,
            "description": "Calculate lcm for two BigNumbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "Returns the least common multiple of a and b",
                "type": "BigNumber"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43583,
            "description": "Calculate lcm for two numbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the least common multiple of a and b",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43615,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43617,
            "description": "'use strict';\nvar scatter = __webpack_require__(384);\n\t\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  0            ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43784,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43786,
            "description": "'use strict';\nmodule.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {\n\t\t  // a arrays\n\t\t  var avalues = a._values;\n\t\t  var aindex = a._index;\n\t\t  var aptr = a._ptr;\n\t\t  // c arrays\n\t\t  var cindex = c._index;\n  // vars\n\t\t  var k, k0, k1, i;\n  // check we need to process values (pattern matrix)\n\t\t  if (x) {\n\t\t    // values in j\n\t\t    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t\t      // row\n\t\t      i = aindex[k];\n\t\t      // check value exists in current j\n\t\t      if (w[i] !== mark) {\n\t\t        // i is new entry in j\n\t\t        w[i] = mark;\n\t\t        // add i to pattern of C\n\t\t        cindex.push(i);\n\t\t        // x(i) = A, check we need to call function this time\n\t\t        if (update) {\n\t\t          // copy value to workspace calling callback function\n\t\t          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);\n\t\t          // function was called on current row\n\t\t          u[i] = mark;\n\t\t        }\n\t\t        else {\n\t\t          // copy value to workspace\n\t\t          x[i] = avalues[k];\n\t\t        }\n\t\t      }\n\t\t      else {\n\t\t        // i exists in C already\n\t\t        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);\n\t\t        // function was called on current row\n\t\t        u[i] = mark;\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t  else {\n\t\t    // values in j\n\t\t    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t\t      // row\n\t\t      i = aindex[k];\n\t\t      // check value exists in current j\n\t\t      if (w[i] !== mark) {\n\t\t        // i is new entry in j\n\t\t        w[i] = mark;\n\t\t        // add i to pattern of C\n\t\t        cindex.push(i);\n\t\t      }\n\t\t      else {\n\t\t        // indicate function was called on current row\n\t\t        u[i] = mark;\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t};\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43856,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var divideScalar = load(__webpack_require__(81));\n  /**\n\t\t   * Calculate the logarithm of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.log(x)\n\t\t   *    math.log(x, base)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.log(3.5);                  // returns 1.252762968495368\n\t\t   *    math.exp(math.log(2.4));        // returns 2.4\n\t\t   *\n\t\t   *    math.pow(10, 4);                // returns 10000\n\t\t   *    math.log(10000, 10);            // returns 4\n\t\t   *    math.log(10000) / math.log(10); // returns 4\n\t\t   *\n\t\t   *    math.log(1024, 2);              // returns 10\n\t\t   *    math.pow(2, 10);                // returns 1024\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    exp, log10\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            Value for which to calculate the logarithm.\n\t\t   * @param {number | BigNumber | Complex} [base=e]\n\t\t   *            Optional base for the logarithm. If not provided, the natural\n\t\t   *            logarithm of `x` is calculated.\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t\t   *            Returns the logarithm of `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43946,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 43948,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.log10(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.log10(0.00001);            // returns -5\n\t\t   *    math.log10(10000);              // returns 4\n\t\t   *    math.log(10000) / math.log(10); // returns 4\n\t\t   *    math.pow(10, 4);                // returns 10000\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    exp, log\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            Value for which to calculate the logarithm.\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t\t   *            Returns the 10-base logarithm of `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44015,
            "description": "Calculate the 10-base logarithm of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44030,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44032,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var latex = __webpack_require__(32);\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm05 = load(__webpack_require__(79));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Calculates the modulus, the remainder of an integer division.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * The modulus is defined as:\n\t\t   *\n\t\t   *     x - y * floor(x / y)\n\t\t   *\n\t\t   * See http://en.wikipedia.org/wiki/Modulo_operation.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.mod(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.mod(8, 3);                // returns 2\n\t\t   *    math.mod(11, 2);               // returns 1\n\t\t   *\n\t\t   *    function isOdd(x) {\n\t\t   *      return math.mod(x, 2) != 0;\n\t\t   *    }\n\t\t   *\n\t\t   *    isOdd(2);                      // returns false\n\t\t   *    isOdd(3);                      // returns true\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    divide\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n\t\t   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n\t\t   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44192,
            "description": "Calculate the modulus of two numbers",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "res",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44220,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44222,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var abs         = load(__webpack_require__(86));\n\t\t  var add         = load(__webpack_require__(51));\n\t\t  var pow         = load(__webpack_require__(82));\n\t\t  var sqrt        = load(__webpack_require__(380));\n\t\t  var multiply    = load(__webpack_require__(84));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var larger      = load(__webpack_require__(64));\n\t\t  var smaller     = load(__webpack_require__(60));\n\t\t  var matrix      = load(__webpack_require__(52));\n\t\t  var trace       = load(__webpack_require__(389));\n\t\t  var transpose   = load(__webpack_require__(347));\n\n  /**\n\t\t   * Calculate the norm of a number, vector or matrix.\n\t\t   *\n\t\t   * The second parameter p is optional. If not provided, it defaults to 2.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.norm(x)\n\t\t   *    math.norm(x, p)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.abs(-3.5);                         // returns 3.5\n\t\t   *    math.norm(-3.5);                        // returns 3.5\n\t\t   *\n\t\t   *    math.norm(math.complex(3, -4));         // returns 5\n\t\t   *\n\t\t   *    math.norm([1, 2, -3], Infinity);        // returns 3\n\t\t   *    math.norm([1, 2, -3], -Infinity);       // returns 1\n\t\t   *\n\t\t   *    math.norm([3, 4], 2);                   // returns 5\n\t\t   *\n\t\t   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n\t\t   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7\n\t\t   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    abs, hypot\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            Value for which to calculate the norm\n\t\t   * @param  {number | BigNumber | string} [p=2]\n\t\t   *            Vector space.\n\t\t   *            Supported numbers include Infinity and -Infinity.\n\t\t   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n\t\t   * @return {number | BigNumber} the p-norm",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44318,
            "description": "Calculate the norm for an array",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "p",
                    "description": "",
                    "type": "Number | string"
                }
            ],
            "return": {
                "description": "Returns the norm",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44441,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44443,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var add = load(__webpack_require__(51));\n  /**\n\t\t   * Calculate the trace of a matrix: the sum of the elements on the main\n\t\t   * diagonal of a square matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.trace(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.trace([[1, 2], [3, 4]]); // returns 5\n\t\t   *\n\t\t   *    var A = [\n\t\t   *      [1, 2, 3],\n\t\t   *      [-1, 2, 3],\n\t\t   *      [2, 0, 3]\n\t\t   *    ]\n\t\t   *    math.trace(A); // returns 6\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    diag\n\t\t   *\n\t\t   * @param {Array | Matrix} x  A matrix\n\t\t   *\n\t\t   * @return {number} The trace of `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44594,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44596,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm06 = load(__webpack_require__(383));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Calculate the nth root of a value.\n\t\t   * The principal nth root of a positive real number A, is the positive real\n\t\t   * solution of the equation\n\t\t   *\n\t\t   *     x^root = A\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.nthRoot(a)\n\t\t   *     math.nthRoot(a, root)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9\n\t\t   *     math.sqrt(9);          // returns 3, as 3^2 == 9\n\t\t   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     sqrt, pow\n\t\t   *\n\t\t   * @param {number | BigNumber | Array | Matrix | Complex} a\n\t\t   *              Value for which to calculate the nth root\n\t\t   * @param {number | BigNumber} [root=2]    The root.\n\t\t   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44776,
            "description": "Calculate the nth root of a for BigNumbers, solve x^root == a\nhttp://rosettacode.org/wiki/Nth_root#JavaScript",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "root",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44817,
            "description": "Calculate the nth root of a, solve x^root == a\nhttp://rosettacode.org/wiki/Nth_root#JavaScript",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "root",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44875,
            "description": "Calculate the nth root of a Complex Number a using De Moviers Theorem.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Complex"
                },
                {
                    "name": "root",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "array or n Complex Roots in Polar Form.",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44899,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 44901,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar toFixed = __webpack_require__(6).toFixed;\n\t\tvar deepMap = __webpack_require__(19);\nvar NO_INT = 'Number of decimals in function round must be an integer';\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var zeros = load(__webpack_require__(392));\n  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Round a value towards the nearest integer.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.round(x)\n\t\t   *    math.round(x, n)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.round(3.2);              // returns number 3\n\t\t   *    math.round(3.8);              // returns number 4\n\t\t   *    math.round(-4.2);             // returns number -4\n\t\t   *    math.round(-4.7);             // returns number -5\n\t\t   *    math.round(math.pi, 3);       // returns number 3.142\n\t\t   *    math.round(123.45678, 2);     // returns number 123.46\n\t\t   *\n\t\t   *    var c = math.complex(3.2, -2.7);\n\t\t   *    math.round(c);                // returns Complex 3 - 3i\n\t\t   *\n\t\t   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    ceil, fix, floor\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t\t   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45063,
            "description": "round a number to the given number of decimals, or to zero if decimals is\nnot provided",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "decimals",
                    "description": "number of decimals, between 0 and 15 (0 by default)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "roundedValue",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45079,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45081,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar resize = __webpack_require__(40).resize;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Create a matrix filled with zeros. The created matrix can have one or\n\t\t   * multiple dimensions.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.zeros(m)\n\t\t   *    math.zeros(m, format)\n\t\t   *    math.zeros(m, n)\n\t\t   *    math.zeros(m, n, format)\n\t\t   *    math.zeros([m, n])\n\t\t   *    math.zeros([m, n], format)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.zeros(3);                  // returns [0, 0, 0]\n\t\t   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]\n\t\t   *    math.zeros(3, 'dense');         // returns [0, 0, 0]\n\t\t   *\n\t\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t\t   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    ones, eye, size, range\n\t\t   *\n\t\t   * @param {...number | Array} size    The size of each dimension of the matrix\n\t\t   * @param {string} [format]           The Matrix storage format\n\t\t   *\n\t\t   * @return {Array | Matrix}           A matrix filled with zeros",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45161,
            "description": "Create an Array or Matrix with zeros",
            "params": [
                {
                    "name": "size",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'default'"
                }
            ],
            "return": {
                "description": "",
                "type": "Array | Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45219,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45221,
            "description": "'use strict';\nvar number = __webpack_require__(6);\n\t\tvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the sign of a value. The sign of a value x is:\n\t\t   *\n\t\t   * -  1 when x > 1\n\t\t   * - -1 when x < 0\n\t\t   * -  0 when x == 0\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sign(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sign(3.5);               // returns 1\n\t\t   *    math.sign(-4.2);              // returns -1\n\t\t   *    math.sign(0);                 // returns 0\n\t\t   *\n\t\t   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    abs\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t\t   *            The number for which to determine the sign\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n\t\t   *            The sign of `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45294,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45296,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the square of a value, `x * x`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.square(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.square(2);           // returns number 4\n\t\t   *    math.square(3);           // returns number 9\n\t\t   *    math.pow(3, 2);           // returns number 9\n\t\t   *    math.multiply(3, 3);      // returns number 9\n\t\t   *\n\t\t   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply, cube, sqrt, pow\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t\t   *            Number for which to calculate the square\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n\t\t   *            Squared value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45365,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45367,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Unary plus operation.\n\t\t   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.unaryPlus(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.unaryPlus(3.5);      // returns 3.5\n\t\t   *    math.unaryPlus(1);     // returns 1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    unaryMinus, add, subtract\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n\t\t   *            Input value\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t\t   *            Returns the input value when numeric, converts to a number when input is non-numeric.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45443,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45445,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Calculate the extended greatest common divisor for two values.\n\t\t   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.xgcd(a, b)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.xgcd(8, 12);             // returns [4, -1, 1]\n\t\t   *    math.gcd(8, 12);              // returns 4\n\t\t   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    gcd, lcm\n\t\t   *\n\t\t   * @param {number | BigNumber} a  An integer number\n\t\t   * @param {number | BigNumber} b  An integer number\n\t\t   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n\t\t   *                              where `div = gcd(a, b)` and `a*m + b*n = div`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45487,
            "description": "Calculate xgcd for two numbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "result",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45532,
            "description": "Calculate xgcd for two BigNumbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "BigNumber"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "result",
                "type": "BigNumber[]"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45586,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45588,
            "description": "module.exports = [\n\t\t  __webpack_require__(398),\n\t\t  __webpack_require__(402),\n\t\t  __webpack_require__(403),\n\t\t  __webpack_require__(405),\n\t\t  __webpack_require__(407),\n\t\t  __webpack_require__(410),\n\t\t  __webpack_require__(412)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45603,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar bigBitAnd = __webpack_require__(399);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm06 = load(__webpack_require__(383));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Bitwise AND two values, `x & y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.bitAnd(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.bitAnd(53, 131);               // returns number 1\n\t\t   *\n\t\t   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x First value to and\n\t\t   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n\t\t   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45756,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45758,
            "description": "var bitwise = __webpack_require__(400);\n/**\n\t\t * Bitwise and for Bignumbers\n\t\t *\n\t\t * Special Cases:\n\t\t *   N &  n =  N\n\t\t *   n &  0 =  0\n\t\t *   n & -1 =  n\n\t\t *   n &  n =  n\n\t\t *   I &  I =  I\n\t\t *  -I & -I = -I\n\t\t *   I & -I =  0\n\t\t *   I &  n =  n\n\t\t *   I & -n =  I\n\t\t *  -I &  n =  0\n\t\t *  -I & -n = -I\n\t\t *\n\t\t * @param {BigNumber} x\n\t\t * @param {BigNumber} y\n\t\t * @return {BigNumber} Result of `x` & `y`, is fully precise\n\t\t * @private",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45830,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45832,
            "description": "var bitNot = __webpack_require__(401);\n/**\n\t\t * Applies bitwise function to numbers\n\t\t * @param {BigNumber} x\n\t\t * @param {BigNumber} y\n\t\t * @param {function (a, b)} func\n\t\t * @return {BigNumber}",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45960,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45962,
            "description": "/**\n\t\t * Bitwise not\n\t\t * @param {BigNumber} value\n\t\t * @return {BigNumber} Result of ~`x`, fully precise\n\t\t *",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45987,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 45989,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar bigBitNot = __webpack_require__(401);\n\t\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Bitwise NOT value, `~x`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * For units, the function is evaluated on the best prefix base.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.bitNot(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.bitNot(1);               // returns number -2\n\t\t   *\n\t\t   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x Value to not\n\t\t   * @return {number | BigNumber | Array | Matrix} NOT of `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46049,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46051,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar bigBitOr = __webpack_require__(404);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm04 = load(__webpack_require__(55));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Bitwise OR two values, `x | y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * For units, the function is evaluated on the lowest print base.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.bitOr(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.bitOr(1, 2);               // returns number 3\n\t\t   *\n\t\t   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x First value to or\n\t\t   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n\t\t   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46204,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46206,
            "description": "var bitwise = __webpack_require__(400);\n/**\n\t\t * Bitwise OR for BigNumbers\n\t\t *\n\t\t * Special Cases:\n\t\t *   N |  n =  N\n\t\t *   n |  0 =  n\n\t\t *   n | -1 = -1\n\t\t *   n |  n =  n\n\t\t *   I |  I =  I\n\t\t *  -I | -I = -I\n\t\t *   I | -n = -1\n\t\t *   I | -I = -1\n\t\t *   I |  n =  I\n\t\t *  -I |  n = -I\n\t\t *  -I | -n = -n\n\t\t *\n\t\t * @param {BigNumber} x\n\t\t * @param {BigNumber} y\n\t\t * @return {BigNumber} Result of `x` | `y`, fully precise",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46263,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46265,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar bigBitXor = __webpack_require__(406);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Bitwise XOR two values, `x ^ y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.bitXor(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.bitXor(1, 2);               // returns number 3\n\t\t   *\n\t\t   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x First value to xor\n\t\t   * @param  {number | BigNumber | Array | Matrix} y Second value to xor\n\t\t   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46418,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46420,
            "description": "var bitwise = __webpack_require__(400);\n\t\tvar bitNot = __webpack_require__(401);\n/**\n\t\t * Bitwise XOR for BigNumbers\n\t\t *\n\t\t * Special Cases:\n\t\t *   N ^  n =  N\n\t\t *   n ^  0 =  n\n\t\t *   n ^  n =  0\n\t\t *   n ^ -1 = ~n\n\t\t *   I ^  n =  I\n\t\t *   I ^ -n = -I\n\t\t *   I ^ -I = -1\n\t\t *  -I ^  n = -I\n\t\t *  -I ^ -n =  I\n\t\t *\n\t\t * @param {BigNumber} x\n\t\t * @param {BigNumber} y\n\t\t * @return {BigNumber} Result of `x` ^ `y`, fully precise\n\t\t *",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46484,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46486,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar bigLeftShift = __webpack_require__(408);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm08 = load(__webpack_require__(409));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * For units, the function is evaluated on the best prefix base.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.leftShift(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.leftShift(1, 2);               // returns number 4\n\t\t   *\n\t\t   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n\t\t   * @param  {number | BigNumber} y Amount of shifts\n\t\t   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46652,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46654,
            "description": "/**\n\t\t * Bitwise left shift\n\t\t *\n\t\t * Special Cases:\n\t\t *  n << -n = N\n\t\t *  n <<  N = N\n\t\t *  N <<  n = N\n\t\t *  n <<  0 = n\n\t\t *  0 <<  n = 0\n\t\t *  I <<  I = N\n\t\t *  I <<  n = I\n\t\t *  n <<  I = I\n\t\t *\n\t\t * @param {BigNumber} x\n\t\t * @param {BigNumber} y\n\t\t * @return {BigNumber} Result of `x` << `y`\n\t\t *",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46699,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46701,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t\t   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n\t\t   *          └  0            ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46865,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 46867,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar bigRightArithShift = __webpack_require__(411);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm08 = load(__webpack_require__(409));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * For units, the function is evaluated on the best prefix base.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.rightArithShift(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.rightArithShift(4, 2);               // returns number 1\n\t\t   *\n\t\t   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n\t\t   * @param  {number | BigNumber} y Amount of shifts\n\t\t   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47033,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47035,
            "description": "/*\n\t\t * Special Cases:\n\t\t *   n >> -n =  N\n\t\t *   n >>  N =  N\n\t\t *   N >>  n =  N\n\t\t *   I >>  I =  N\n\t\t *   n >>  0 =  n\n\t\t *   I >>  n =  I\n\t\t *  -I >>  n = -I\n\t\t *  -I >>  I = -I\n\t\t *   n >>  I =  I\n\t\t *  -n >>  I = -1\n\t\t *   0 >>  n =  0\n\t\t *\n\t\t * @param {BigNumber} value\n\t\t * @param {BigNumber} value\n\t\t * @return {BigNumber} Result of `x` >> `y`\n\t\t *",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47086,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47088,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm08 = load(__webpack_require__(409));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * For units, the function is evaluated on the best prefix base.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.rightLogShift(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.rightLogShift(4, 2);               // returns number 1\n\t\t   *\n\t\t   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | Array | Matrix} x Value to be shifted\n\t\t   * @param  {number} y Amount of shifts\n\t\t   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47254,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47256,
            "description": "module.exports = [\n\t\t  __webpack_require__(414),\n\t\t  __webpack_require__(420),\n\t\t  __webpack_require__(415),\n\t\t  __webpack_require__(421)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47268,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var stirlingS2 = load(__webpack_require__(415));\n\t\t  var isNegative = load(__webpack_require__(368));\n\t\t  var isInteger = load(__webpack_require__(419));\n  /**\n\t\t   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\n\t\t   * bellNumbers only takes integer arguments.\n\t\t   * The following condition must be enforced: n >= 0\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *   math.bellNumbers(n)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.bellNumbers(3); // returns 5;\n\t\t   *    math.bellNumbers(8); // returns 4140;\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    stirlingS2\n\t\t   *\n\t\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t\t   * @return {Number | BigNumber}     B(n)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47325,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47327,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var divide = load(__webpack_require__(329));\n\t\t  var pow = load(__webpack_require__(82));\n\t\t  var factorial = load(__webpack_require__(416));\n\t\t  var combinations = load(__webpack_require__(418));\n\t\t  var isNegative = load(__webpack_require__(368));\n\t\t  var isInteger = load(__webpack_require__(419));\n\t\t  var larger = load(__webpack_require__(64));\n  /**\n\t\t   * The Stirling numbers of the second kind, counts the number of ways to partition\n\t\t   * a set of n labelled objects into k nonempty unlabelled subsets.\n\t\t   * stirlingS2 only takes integer arguments.\n\t\t   * The following condition must be enforced: k <= n.\n\t\t   *\n\t\t   *  If n = k or k = 1, then s(n,k) = 1\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *   math.stirlingS2(n, k)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.stirlingS2(5, 3); //returns 25\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    Bell numbers\n\t\t   *\n\t\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t\t   * @param {Number | BigNumber} k    Number of objects in the subset\n\t\t   * @return {Number | BigNumber}     S(n,k)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47400,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47402,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var gamma = load(__webpack_require__(417));\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Compute the factorial of a value\n\t\t   *\n\t\t   * Factorial only supports an integer value as argument.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.factorial(n)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.factorial(5);    // returns 120\n\t\t   *    math.factorial(3);    // returns 6\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    combinations, gamma, permutations\n\t\t   *\n\t\t   * @param {number | BigNumber | Array | Matrix} n   An integer number\n\t\t   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47467,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47469,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var pow = load(__webpack_require__(82));\n  /**\n\t\t   * Compute the gamma function of a value using Lanczos approximation for\n\t\t   * small values, and an extended Stirling approximation for large values.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.gamma(n)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.gamma(5);       // returns 24\n\t\t   *    math.gamma(-0.5);    // returns -3.5449077018110335\n\t\t   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    combinations, factorial, permutations\n\t\t   *\n\t\t   * @param {number | Array | Matrix} n   A real or complex number\n\t\t   * @return {number | Array | Matrix}    The gamma of `n`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47621,
            "description": "Calculate factorial for a BigNumber",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "Returns the factorial of n",
                "type": "BigNumber"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47675,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47677,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the number of ways of picking `k` unordered outcomes from `n`\n\t\t   * possibilities.\n\t\t   *\n\t\t   * Combinations only takes integer arguments.\n\t\t   * The following condition must be enforced: k <= n.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.combinations(n, k)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.combinations(7, 5); // returns 21\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    permutations, factorial\n\t\t   *\n\t\t   * @param {number | BigNumber} n    Total number of objects in the set\n\t\t   * @param {number | BigNumber} k    Number of objects in the subset\n\t\t   * @return {number | BigNumber}     Number of possible combinations.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47759,
            "description": "Test whether BigNumber n is a positive integer",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "isPositiveInteger",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47772,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47774,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is an integer number.\n\t\t   * The function supports `number`, `BigNumber`, and `Fraction`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isInteger(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isInteger(2);                     // returns true\n\t\t   *    math.isInteger(0);                     // returns true\n\t\t   *    math.isInteger(0.5);                   // returns false\n\t\t   *    math.isInteger(math.bignumber(500));   // returns true\n\t\t   *    math.isInteger(math.fraction(4));      // returns true\n\t\t   *    math.isInteger('3');                   // returns true\n\t\t   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]\n\t\t   *    math.isInteger(math.complex('2-4i');   // throws an error\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isPositive, isNegative, isZero\n\t\t   *\n\t\t   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47834,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47836,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var combinations = load(__webpack_require__(418));\n\t\t  var add = load(__webpack_require__(53));\n\t\t  var isPositive = load(__webpack_require__(381));\n\t\t  var isInteger = load(__webpack_require__(419));\n\t\t  var larger = load(__webpack_require__(64));\n  /**\n\t\t   * The composition counts of n into k parts.\n\t\t   *\n\t\t   * composition only takes integer arguments.\n\t\t   * The following condition must be enforced: k <= n.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *   math.composition(n, k)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.composition(5, 3); // returns 6\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    combinations\n\t\t   *\n\t\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t\t   * @param {Number | BigNumber} k    Number of objects in the subset\n\t\t   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47891,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47893,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var divide = load(__webpack_require__(329));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var combinations = load(__webpack_require__(418));\n\t\t  var isNegative = load(__webpack_require__(368));\n\t\t  var isInteger = load(__webpack_require__(419));\n\n  /**\n\t\t   * The Catalan Numbers enumerate combinatorial structures of many different types.\n\t\t   * catalan only takes integer arguments.\n\t\t   * The following condition must be enforced: n >= 0\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *   math.catalan(n)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.catalan(3); // returns 5;\n\t\t   *    math.catalan(8); // returns 1430;\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bellNumbers\n\t\t   *\n\t\t   * @param {Number | BigNumber} n    nth Catalan number\n\t\t   * @return {Number | BigNumber}     Cn(n)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47948,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47950,
            "description": "module.exports = [\n\t\t  __webpack_require__(423),\n\t\t  __webpack_require__(424),\n\t\t  __webpack_require__(425),\n\t\t  __webpack_require__(426)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 47962,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the argument of a complex value.\n\t\t   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.arg(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = math.complex(2, 2);\n\t\t   *    math.arg(a) / math.pi;          // returns number 0.25\n\t\t   *\n\t\t   *    var b = math.complex('2 + 3i');\n\t\t   *    math.arg(b);                    // returns number 0.982793723247329\n\t\t   *    math.atan2(3, 2);               // returns number 0.982793723247329\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    re, im, conj, abs\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            A complex number or array with complex numbers\n\t\t   * @return {number | BigNumber | Array | Matrix} The argument of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48025,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48027,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the complex conjugate of a complex value.\n\t\t   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.conj(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i\n\t\t   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i\n\t\t   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    re, im, arg, abs\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            A complex number or array with complex numbers\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t\t   *            The complex conjugate of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48086,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48088,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Get the imaginary part of a complex number.\n\t\t   * For a complex number `a + bi`, the function returns `b`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.im(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    math.re(a);                     // returns number 2\n\t\t   *    math.im(a);                     // returns number 3\n\t\t   *\n\t\t   *    math.re(math.complex('-5.2i')); // returns number -5.2\n\t\t   *    math.re(math.complex(2.4));     // returns number 0\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    re, conj, abs, arg\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            A complex number or array with complex numbers\n\t\t   * @return {number | BigNumber | Array | Matrix} The imaginary part of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48149,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48151,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Get the real part of a complex number.\n\t\t   * For a complex number `a + bi`, the function returns `a`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.re(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    math.re(a);                     // returns number 2\n\t\t   *    math.im(a);                     // returns number 3\n\t\t   *\n\t\t   *    math.re(math.complex('-5.2i')); // returns number 0\n\t\t   *    math.re(math.complex(2.4));     // returns number 2.4\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    im, conj, abs, arg\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            A complex number or array with complex numbers\n\t\t   * @return {number | BigNumber | Array | Matrix} The real part of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48212,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48214,
            "description": "module.exports = [\n\t\t  __webpack_require__(428),\n\t\t  __webpack_require__(429)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48224,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var abs = load(__webpack_require__(86));\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var subtract = load(__webpack_require__(77));\n  /**\n\t\t   * Calculates the point of intersection of two lines in two or three dimensions\n\t\t   * and of a line and a plane in three dimensions. The inputs are in the form of\n\t\t   * arrays or 1 dimensional matrices. The line intersection functions return null\n\t\t   * if the lines do not meet.\n\t\t   *\n\t\t   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n\t\t   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]\n\t\t   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]\n\t\t   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]\n\t\t   *\n\t\t   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n\t\t   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n\t\t   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n\t\t   *                              OR Co-efficients of the plane's equation\n\t\t   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n\t\t   *                              OR null if the calculation is for line and plane\n\t\t   * @return {Array}              Returns the point of intersection of lines/lines-planes",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48370,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48372,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t    * Calculates:\n\t\t    *    The eucledian distance between two points in 2 and 3 dimensional spaces.\n\t\t    *    Distance between point and a line in 2 and 3 dimensional spaces.\n\t\t    *    Pairwise distance between a set of 2D or 3D points\n\t\t    * NOTE:\n\t\t    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n\t\t    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n\t\t    *\n\t\t    * Syntax:\n\t\t    *    math.distance([x1, y1], [x2, y2])\n\t\t    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n\t\t    *    math.distance([x1, y1, z1], [x2, y2, z2])\n\t\t    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n\t\t    *    math.distance([[A], [B], [C]...])\n\t\t    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n\t\t    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n\t\t    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n\t\t    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n\t\t    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n\t\t    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n\t\t    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n\t\t    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n\t\t    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n\t\t    *\n\t\t    * Examples:\n\t\t    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n\t\t    *    math.distance(\n\t\t    *     {pointOneX: 0, pointOneY: 0},\n\t\t    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n\t\t    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n\t\t    *    math.distance(\n\t\t    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n\t\t    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n\t\t    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n\t\t    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n\t\t    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n\t\t    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n\t\t    *    math.distance(\n\t\t    *     {pointX: 1, pointY: 4},\n\t\t    *     {lineOnePtX: 6, lineOnePtY: 3},\n\t\t    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n\t\t    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n\t\t    *    math.distance(\n\t\t    *     {pointX: 2, pointY: 3, pointZ: 1},\n\t\t    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n\t\t    *\n\t\t    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n\t\t    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n\t\t    * @return {Number | BigNumber} Returns the distance from two/three points",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48677,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48679,
            "description": "module.exports = [\n\t\t  __webpack_require__(431),\n\t\t  __webpack_require__(432),\n\t\t  __webpack_require__(434),\n\t\t  __webpack_require__(435)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48691,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t\t  var zeros = load(__webpack_require__(392));\n\t\t  var not = load(__webpack_require__(432));\n\t\t  var isZero = load(__webpack_require__(433));\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm06 = load(__webpack_require__(383));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.and(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.and(2, 4);   // returns true\n\t\t   *\n\t\t   *    a = [2, 0, 0];\n\t\t   *    b = [3, 7, 0];\n\t\t   *    c = 0;\n\t\t   *\n\t\t   *    math.and(a, b);   // returns [true, false, false]\n\t\t   *    math.and(a, c);   // returns [false, false, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    not, or, xor\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t\t   * @return {boolean | Array | Matrix}\n\t\t   *            Returns true when both inputs are defined with a nonzero/nonempty value.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48866,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48868,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Logical `not`. Flips boolean value of a given parameter.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.not(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.not(2);      // returns false\n\t\t   *    math.not(0);      // returns true\n\t\t   *    math.not(true);   // returns false\n\t\t   *\n\t\t   *    a = [2, -7, 0];\n\t\t   *    math.not(a);      // returns [false, false, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    and, or, xor\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t\t   * @return {boolean | Array | Matrix}\n\t\t   *            Returns true when input is a zero or empty value.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48935,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 48937,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is zero.\n\t\t   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n\t\t   * `Complex`, and `Unit`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isZero(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isZero(0);                     // returns true\n\t\t   *    math.isZero(2);                     // returns false\n\t\t   *    math.isZero(0.5);                   // returns false\n\t\t   *    math.isZero(math.bignumber(0));     // returns true\n\t\t   *    math.isZero(math.fraction(0));      // returns true\n\t\t   *    math.isZero(math.fraction(1,3));    // returns false\n\t\t   *    math.isZero(math.complex('2 - 4i'); // returns false\n\t\t   *    math.isZero(math.complex('0i');     // returns true\n\t\t   *    math.isZero('0');                   // returns true\n\t\t   *    math.isZero('2');                   // returns false\n\t\t   *    math.isZero([2, 0, -3]');           // returns [false, true, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isPositive, isNegative, isInteger\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is zero.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49011,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49013,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm05 = load(__webpack_require__(79));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.or(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.or(2, 4);   // returns true\n\t\t   *\n\t\t   *    a = [2, 5, 0];\n\t\t   *    b = [0, 22, 0];\n\t\t   *    c = 0;\n\t\t   *\n\t\t   *    math.or(a, b);   // returns [true, true, false]\n\t\t   *    math.or(b, c);   // returns [false, true, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    and, not, xor\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t\t   * @return {boolean | Array | Matrix}\n\t\t   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49175,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49177,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.xor(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.xor(2, 4);   // returns false\n\t\t   *\n\t\t   *    a = [2, 0, 0];\n\t\t   *    b = [2, 7, 0];\n\t\t   *    c = 0;\n\t\t   *\n\t\t   *    math.xor(a, b);   // returns [false, true, false]\n\t\t   *    math.xor(a, c);   // returns [true, false, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    and, not, or\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t\t   * @return {boolean | Array | Matrix}\n\t\t   *            Returns true when one and only one input is defined with a nonzero/nonempty value.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49339,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49341,
            "description": "module.exports = [\n\t\t  __webpack_require__(313),\n\t\t  __webpack_require__(437),\n\t\t  __webpack_require__(331),\n\t\t  __webpack_require__(438),\n\t\t  __webpack_require__(439),\n\t\t  __webpack_require__(83),\n\t\t  __webpack_require__(315),\n\t\t  __webpack_require__(440),\n\t\t  __webpack_require__(317),\n\t\t  __webpack_require__(330),\n\t\t  __webpack_require__(320),\n\t\t  __webpack_require__(441),\n\t\t  __webpack_require__(442),\n\t\t  __webpack_require__(335),\n\t\t  __webpack_require__(444),\n\t\t  __webpack_require__(445),\n\t\t  __webpack_require__(446),\n\t\t  __webpack_require__(447),\n\t\t  __webpack_require__(288),\n\t\t  __webpack_require__(389),\n\t\t  __webpack_require__(347),\n\t\t  __webpack_require__(392)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49371,
            "description": "'use strict';\nvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix   = load(__webpack_require__(52));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var multiply = load(__webpack_require__(84));\n  /**\n\t\t   * Calculate the cross product for two vectors in three dimensional space.\n\t\t   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n\t\t   * as:\n\t\t   *\n\t\t   *    cross(A, B) = [\n\t\t   *      a2 * b3 - a3 * b2,\n\t\t   *      a3 * b1 - a1 * b3,\n\t\t   *      a1 * b2 - a2 * b1\n\t\t   *    ]\n\t\t   *\n\t\t   * If one of the input vectors has a dimension greater than 1, the output\n\t\t   * vector will be a 1x3 (2-dimensional) matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cross(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cross([1, 1, 0],   [0, 1, 1]);       // Returns [1, -1, 1]\n\t\t   *    math.cross([3, -3, 1],  [4, 9, 2]);       // Returns [-15, -2, 39]\n\t\t   *    math.cross([2, 3, 4],   [5, 6, 7]);       // Returns [-3, 6, -3]\n\t\t   *    math.cross([[1, 2, 3]], [[4], [5], [6]]); // Returns [[-3, 6, -3]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    dot, multiply\n\t\t   *\n\t\t   * @param  {Array | Matrix} x   First vector\n\t\t   * @param  {Array | Matrix} y   Second vector\n\t\t   * @return {Array | Matrix}     Returns the cross product of `x` and `y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49437,
            "description": "Calculate the cross product for two arrays",
            "params": [
                {
                    "name": "x",
                    "description": "First vector",
                    "type": "Array"
                },
                {
                    "name": "y",
                    "description": "Second vector",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the cross product of x and y",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49476,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49478,
            "description": "'use strict';\nvar array     = __webpack_require__(40);\n\t\tvar clone     = __webpack_require__(3).clone;\n\t\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  \n\t\t  /**\n\t\t   * Create a diagonal matrix or retrieve the diagonal of a matrix\n\t\t   *\n\t\t   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n\t\t   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n\t\t   * When k is positive, the values are placed on the super diagonal.\n\t\t   * When k is negative, the values are placed on the sub diagonal.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.diag(X)\n\t\t   *     math.diag(X, format)\n\t\t   *     math.diag(X, k)\n\t\t   *     math.diag(X, k, format)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     // create a diagonal matrix\n\t\t   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\t\t   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n\t\t   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\t\t   *\n\t\t   *    // retrieve the diagonal from a matrix\n\t\t   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\t\t   *    math.diag(a);   // returns [1, 5, 9]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     ones, zeros, eye\n\t\t   *\n\t\t   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n\t\t   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n\t\t   *                                    in or retrieved.\n\t\t   * @param {string} [format='dense']   The matrix storage format.\n\t\t   *\n\t\t   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49583,
            "description": "Creeate diagonal matrix from a vector or vice versa",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Array | Matrix"
                },
                {
                    "name": "k",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "Storage format for matrix. If null,\n                         an Array is returned",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array | Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49652,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49654,
            "description": "'use strict';\nvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t\t  var add      = load(__webpack_require__(51));\n\t\t  var multiply = load(__webpack_require__(84));\n  /**\n\t\t   * Calculate the dot product of two vectors. The dot product of\n\t\t   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:\n\t\t   *\n\t\t   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.dot(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15\n\t\t   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply, cross\n\t\t   *\n\t\t   * @param  {Array | Matrix} x     First vector\n\t\t   * @param  {Array | Matrix} y     Second vector\n\t\t   * @return {number}               Returns the dot product of `x` and `y`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49707,
            "description": "Calculate the dot product for two arrays",
            "params": [
                {
                    "name": "x",
                    "description": "First vector",
                    "type": "Array"
                },
                {
                    "name": "y",
                    "description": "Second vector",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the dot product of x and y",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49737,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49739,
            "description": "'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar _flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Flatten a multi dimensional matrix into a single dimensional matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.flatten(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    concat, resize, size, squeeze\n\t\t   *\n\t\t   * @param {Matrix | Array} x   Matrix to be flattened\n\t\t   * @return {Matrix | Array} Returns the flattened matrix",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49788,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49790,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar resize = __webpack_require__(40).resize;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Create a matrix filled with ones. The created matrix can have one or\n\t\t   * multiple dimensions.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.ones(m)\n\t\t   *    math.ones(m, format)\n\t\t   *    math.ones(m, n)\n\t\t   *    math.ones(m, n, format)\n\t\t   *    math.ones([m, n])\n\t\t   *    math.ones([m, n], format)\n\t\t   *    math.ones([m, n, p, ...])\n\t\t   *    math.ones([m, n, p, ...], format)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.ones(3);                   // returns [1, 1, 1]\n\t\t   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]\n\t\t   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n\t\t   *\n\t\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t\t   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    zeros, eye, size, range\n\t\t   *\n\t\t   * @param {...number | Array} size    The size of each dimension of the matrix\n\t\t   * @param {string} [format]           The Matrix storage format\n\t\t   *\n\t\t   * @return {Array | Matrix | number}  A matrix filled with ones",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49872,
            "description": "Create an Array or Matrix with ones",
            "params": [
                {
                    "name": "size",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'default'"
                }
            ],
            "return": {
                "description": "",
                "type": "Array | Matrix"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49928,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 49930,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var asc = load(__webpack_require__(443));\n\t\t  function desc(a, b) {\n\t\t    return -asc(a, b);\n\t\t  }\n  /**\n\t\t   * Partition-based selection of an array or 1D matrix.\n\t\t   * Will find the kth smallest value, and mutates the input array.\n\t\t   * Uses Quickselect.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.partitionSelect(x, k)\n\t\t   *    math.partitionSelect(x, k, compare)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.partitionSelect([5, 10, 1], 2);           // returns 10\n\t\t   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'\n\t\t   *\n\t\t   *    function sortByLength (a, b) {\n\t\t   *      return a.length - b.length;\n\t\t   *    }\n\t\t   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sort\n\t\t   *\n\t\t   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n\t\t   * @param {Number} k            The kth smallest value to be retrieved; zero-based index\n\t\t   * @param {Function | 'asc' | 'desc'} [compare='asc']\n\t\t   *        An optional comparator function. The function is called as\n\t\t   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n\t\t   *        and 0 when a == b.\n\t\t   * @return {*} Returns the kth lowest value.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50012,
            "description": "Quickselect algorithm.\nCode adapted from:\nhttp://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "k",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "compare",
                    "description": "",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50070,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50072,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm05 = load(__webpack_require__(79));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n\t\t   *\n\t\t   * x and y are considered equal when the relative difference between x and y\n\t\t   * is smaller than the configured epsilon. The function cannot be used to\n\t\t   * compare values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.compare(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.compare(6, 1);           // returns 1\n\t\t   *    math.compare(2, 3);           // returns -1\n\t\t   *    math.compare(7, 7);           // returns 0\n\t\t   *\n\t\t   *    var a = math.unit('5 cm');\n\t\t   *    var b = math.unit('40 mm');\n\t\t   *    math.compare(a, b);           // returns 1\n\t\t   *\n\t\t   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal, smaller, smallerEq, larger, largerEq\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50258,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50260,
            "description": "'use strict';\nvar DimensionError = __webpack_require__(42);\n\t\tvar ArgumentsError = __webpack_require__(11);\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar format = __webpack_require__(23).format;\n\t\tvar clone = __webpack_require__(3).clone;\n\t\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Resize a matrix\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.resize(x, size)\n\t\t   *     math.resize(x, size, defaultValue)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]\n\t\t   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]\n\t\t   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n\t\t   *     math.resize(\"hello\", [8], \"!\");    // returns string 'hello!!!'\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     size, squeeze, subset\n\t\t   *\n\t\t   * @param {Array | Matrix | *} x             Matrix to be resized\n\t\t   * @param {Array | Matrix} size              One dimensional array with numbers\n\t\t   * @param {number | string} [defaultValue=0] Zero by default, except in\n\t\t   *                                           case of a string, in that case\n\t\t   *                                           defaultValue = ' '\n\t\t   * @return {* | Array | Matrix} A resized clone of matrix `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50356,
            "description": "Resize a string",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number[]"
                },
                {
                    "name": "defaultChar",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "' '"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50402,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50404,
            "description": "'use strict';\nvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Calculate the size of a matrix or scalar.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.size(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.size(2.3);                  // returns []\n\t\t   *     math.size('hello world');        // returns [11]\n\t\t   *\n\t\t   *     var A = [[1, 2, 3], [4, 5, 6]];\n\t\t   *     math.size(A);                    // returns [2, 3]\n\t\t   *     math.size(math.range(1,6));      // returns [5]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     resize, squeeze, subset\n\t\t   *\n\t\t   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\n\t\t   * @return {Array | Matrix} A vector with size of `x`.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50463,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50465,
            "description": "'use strict';\nvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var asc = load(__webpack_require__(443));\n\t\t  var desc = function (a, b) {\n\t\t    return -asc(a, b);\n\t\t  };\n  /**\n\t\t   * Sort the items in a matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sort(x)\n\t\t   *    math.sort(x, compare)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sort([5, 10, 1]); // returns [1, 5, 10]\n\t\t   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']\n\t\t   *\n\t\t   *    function sortByLength (a, b) {\n\t\t   *      return a.length - b.length;\n\t\t   *    }\n\t\t   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    filter, forEach, map\n\t\t   *\n\t\t   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n\t\t   * @param {Function | 'asc' | 'desc'} [compare='asc']\n\t\t   *        An optional _comparator function. The function is called as\n\t\t   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n\t\t   *        and 0 when a == b.\n\t\t   * @return {Matrix | Array} Returns the sorted matrix.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50541,
            "description": "Get the comparator for given order ('asc' or 'desc')",
            "params": [
                {
                    "name": "order",
                    "description": "",
                    "type": "'asc' | 'desc'"
                }
            ],
            "return": {
                "description": "Returns a _comparator function",
                "type": "Function"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50558,
            "description": "Validate whether an array is one dimensional\nThrows an error when this is not the case",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50570,
            "description": "Validate whether a matrix is one dimensional\nThrows an error when this is not the case",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50589,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50591,
            "description": "'use strict';\nvar object = __webpack_require__(3);\n\t\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.squeeze(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.squeeze([3]);           // returns 3\n\t\t   *     math.squeeze([[3]]);         // returns 3\n\t\t   *\n\t\t   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)\n\t\t   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)\n\t\t   *\n\t\t   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)\n\t\t   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)\n\t\t   *\n\t\t   *     // only inner and outer dimensions are removed\n\t\t   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n\t\t   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     subset\n\t\t   *\n\t\t   * @param {Matrix | Array} x      Matrix to be squeezed\n\t\t   * @return {Matrix | Array} Squeezed matrix",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50656,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50658,
            "description": "module.exports = [\n\t\t  //require('./distribution'), // TODO: rethink math.distribution\n\t\t  __webpack_require__(418),\n\t\t  __webpack_require__(416),\n\t\t  __webpack_require__(417),\n\t\t  __webpack_require__(449),\n\t\t  __webpack_require__(451),\n\t\t  __webpack_require__(452),\n\t\t  __webpack_require__(453),\n\t\t  __webpack_require__(455),\n\t\t  __webpack_require__(456)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50676,
            "description": "'use strict';\n\nfunction factory(type, config, load, typed) {\n\t\t    var matrix = load(__webpack_require__(52));\n\t\t    var divide = load(__webpack_require__(329));\n\t\t    var sum = load(__webpack_require__(450));\n\t\t    var multiply = load(__webpack_require__(84));\n\t\t    var dotDivide = load(__webpack_require__(371));\n\t\t    var log = load(__webpack_require__(385));\n\t\t    var isNumeric = load(__webpack_require__(89));\n    /**\n\t\t     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n\t\t     *\n\t\t     * Syntax:\n\t\t     *\n\t\t     *     math.kldivergence(x, y)\n\t\t     *\n\t\t     * Examples:\n\t\t     *\n\t\t     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153\n\t\t     *\n\t\t     *\n\t\t     * @param  {Array | Matrix} q    First vector\n\t\t     * @param  {Array | Matrix} p    Second vector\n\t\t     * @return {number}              Returns distance between q and p",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50771,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50773,
            "description": "'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(53));\n  /**\n\t\t   * Compute the sum of a matrix or a list with values.\n\t\t   * In case of a (multi dimensional) array or matrix, the sum of all\n\t\t   * elements will be calculated.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.sum(a, b, c, ...)\n\t\t   *     math.sum(A)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.sum(2, 1, 4, 3);               // returns 10\n\t\t   *     math.sum([2, 1, 4, 3]);             // returns 10\n\t\t   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, min, max, prod, std, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The sum of all values",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50827,
            "description": "Recursively calculate the sum of an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "sum",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50861,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50863,
            "description": "'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var divide = load(__webpack_require__(329));\n\t\t  var factorial = load(__webpack_require__(416));\n\t\t  var isInteger = load(__webpack_require__(419));\n\t\t  var isPositive = load(__webpack_require__(381));\n  /**\n\t\t   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n\t\t   *\n\t\t   * multinomial takes one array of integers as an argument.\n\t\t   * The following condition must be enforced: every ai <= 0\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.multinomial(a) // a is an array type\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.multinomial([1,2,1]); // returns 12\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    combinations, factorial\n\t\t   *\n\t\t   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n\t\t   * @return {Number | BigNumber}         Multinomial coefficient.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50920,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 50922,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var factorial = load(__webpack_require__(416));\n  /**\n\t\t   * Compute the number of ways of obtaining an ordered subset of `k` elements\n\t\t   * from a set of `n` elements.\n\t\t   *\n\t\t   * Permutations only takes integer arguments.\n\t\t   * The following condition must be enforced: k <= n.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.permutations(n)\n\t\t   *     math.permutations(n, k)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.permutations(5);     // 120\n\t\t   *    math.permutations(5, 3);  // 60\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    combinations, factorial\n\t\t   *\n\t\t   * @param {number | BigNumber} n   The number of objects in total\n\t\t   * @param {number | BigNumber} [k] The number of objects in the subset\n\t\t   * @return {number | BigNumber}    The number of permutations",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51007,
            "description": "Test whether BigNumber n is a positive integer",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "BigNumber"
                }
            ],
            "return": {
                "description": "isPositiveInteger",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51020,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51022,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var distribution = load(__webpack_require__(454));\n  /**\n\t\t   * Random pick one or more values from a one dimensional array.\n\t\t   * Array elements are picked using a random function with uniform or weighted distribution.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.pickRandom(array)\n\t\t   *     math.pickRandom(array, number)\n\t\t   *     math.pickRandom(array, weights)\n\t\t   *     math.pickRandom(array, number, weights)\n\t\t   *     math.pickRandom(array, weights, number)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.pickRandom([3, 6, 12, 2]);                  // returns one of the values in the array\n\t\t   *     math.pickRandom([3, 6, 12, 2], 2);               // returns an array of two of the values in the array\n\t\t   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1]);    // returns one of the values in the array with weighted distribution\n\t\t   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]); // returns an array of two of the values in the array with weighted distribution\n\t\t   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2); // returns an array of two of the values in the array with weighted distribution\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     random, randomInt\n\t\t   *\n\t\t   * @param {Array} array     A one dimensional array\n\t\t   * @param {Int} number      An int or float\n\t\t   * @param {Array} weights   An array of ints or floats\n\t\t   * @return {number} One of the elements of the provided input array\n\t\t   * @return {array} An array of elements of the provided input array",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51071,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51073,
            "description": "'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\t\tvar isCollection = __webpack_require__(322);\n\t\tvar isNumber = __webpack_require__(6).isNumber;\n// TODO: rethink math.distribution\n\t\t// TODO: rework to a typed function\n\t\tfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var array = __webpack_require__(40);\n  /**\n\t\t   * Create a distribution object with a set of random functions for given\n\t\t   * random distribution.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.distribution(name)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     var normalDist = math.distribution('normal'); // create a normal distribution\n\t\t   *     normalDist.random(0, 10);                     // get a random value between 0 and 10\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     random, randomInt, pickRandom\n\t\t   *\n\t\t   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.\n\t\t   * @return {Object}       Returns a distribution object containing functions:\n\t\t   *                        `random([size] [, min] [, max])`,\n\t\t   *                        `randomInt([min] [, max])`,\n\t\t   *                        `pickRandom(array)`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51373,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51375,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var distribution = load(__webpack_require__(454));\n  /**\n\t\t   * Return a random number larger or equal to `min` and smaller than `max`\n\t\t   * using a uniform distribution.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.random()                // generate a random number between 0 and 1\n\t\t   *     math.random(max)             // generate a random number between 0 and max\n\t\t   *     math.random(min, max)        // generate a random number between min and max\n\t\t   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n\t\t   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n\t\t   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.random();       // returns a random number between 0 and 1\n\t\t   *     math.random(100);    // returns a random number between 0 and 100\n\t\t   *     math.random(30, 40); // returns a random number between 30 and 40\n\t\t   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     randomInt, pickRandom\n\t\t   *\n\t\t   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n\t\t   *                                size and filled with random values is returned\n\t\t   * @param {number} [min]  Minimum boundary for the random value, included\n\t\t   * @param {number} [max]  Maximum boundary for the random value, excluded\n\t\t   * @return {number | Array | Matrix} A random number",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51424,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51426,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var distribution = load(__webpack_require__(454));\n  /**\n\t\t   * Return a random integer number larger or equal to `min` and smaller than `max`\n\t\t   * using a uniform distribution.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.randomInt(max)             // generate a random integer between 0 and max\n\t\t   *     math.randomInt(min, max)        // generate a random integer between min and max\n\t\t   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n\t\t   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n\t\t   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.randomInt(100);    // returns a random integer between 0 and 100\n\t\t   *     math.randomInt(30, 40); // returns a random integer between 30 and 40\n\t\t   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     random, pickRandom\n\t\t   *\n\t\t   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n\t\t   *                                size and filled with random values is returned\n\t\t   * @param {number} [min]  Minimum boundary for the random value, included\n\t\t   * @param {number} [max]  Maximum boundary for the random value, excluded\n\t\t   * @return {number | Array | Matrix} A random integer value",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51473,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51475,
            "description": "module.exports = [\n\t\t  __webpack_require__(443),\n\t\t  __webpack_require__(458),\n\t\t  __webpack_require__(88),\n\t\t  __webpack_require__(64),\n\t\t  __webpack_require__(354),\n\t\t  __webpack_require__(60),\n\t\t  __webpack_require__(459),\n\t\t  __webpack_require__(460)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51491,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var equal = load(__webpack_require__(88));\n  /**\n\t\t   * Test element wise whether two matrices are equal.\n\t\t   * The function accepts both matrices and scalar values.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.deepEqual(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.deepEqual(2, 4);   // returns false\n\t\t   *\n\t\t   *    a = [2, 5, 1];\n\t\t   *    b = [2, 7, 1];\n\t\t   *\n\t\t   *    math.deepEqual(a, b);   // returns false\n\t\t   *    math.equal(a, b);       // returns [true, false, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t\t   *            Returns true when the input matrices have the same size and each of their elements is equal.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51535,
            "description": "Test whether two arrays have the same size and all elements are equal",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Array | *"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Array | *"
                }
            ],
            "return": {
                "description": "Returns true if both arrays are deep equal",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51576,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51578,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether value x is smaller or equal to y.\n\t\t   *\n\t\t   * The function returns true when x is smaller than y or the relative\n\t\t   * difference between x and y is smaller than the configured epsilon. The\n\t\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.smallerEq(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.smaller(1 + 2, 3);        // returns false\n\t\t   *    math.smallerEq(1 + 2, 3);      // returns true\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal, smaller, larger, largerEq, compare\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51756,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51758,
            "description": "'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether two values are unequal.\n\t\t   *\n\t\t   * The function tests whether the relative difference between x and y is\n\t\t   * larger than the configured epsilon. The function cannot be used to compare\n\t\t   * values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n\t\t   *\n\t\t   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n\t\t   * with everything except `null`, and `undefined` is unequal with everying\n\t\t   * except. `undefined`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.unequal(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.unequal(2 + 2, 3);       // returns true\n\t\t   *    math.unequal(2 + 2, 4);       // returns false\n\t\t   *\n\t\t   *    var a = math.unit('50 cm');\n\t\t   *    var b = math.unit('5 m');\n\t\t   *    math.unequal(a, b);           // returns false\n\t\t   *\n\t\t   *    var c = [2, 5, 1];\n\t\t   *    var d = [2, 7, 1];\n\t\t   *\n\t\t   *    math.unequal(c, d);           // returns [false, true, false]\n\t\t   *    math.deepEqual(c, d);         // returns false\n\t\t   *\n\t\t   *    math.unequal(0, null);        // returns true\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51966,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51968,
            "description": "module.exports = [\n\t\t  __webpack_require__(462)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 51977,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar sign = __webpack_require__(6).sign;\n\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the erf function of a value using a rational Chebyshev\n\t\t   * approximations for different intervals of x.\n\t\t   *\n\t\t   * This is a translation of W. J. Cody's Fortran implementation from 1987\n\t\t   * ( http://www.netlib.org/specfun/erf ). See the AMS publication\n\t\t   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n\t\t   * for an explanation of this process.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.erf(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.erf(0.2);    // returns 0.22270258921047847\n\t\t   *    math.erf(-0.5);   // returns -0.5204998778130465\n\t\t   *    math.erf(4);      // returns 0.9999999845827421\n\t\t   *\n\t\t   * @param {number | Array | Matrix} x   A real number\n\t\t   * @return {number | Array | Matrix}    The erf of `x`",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52042,
            "description": "Approximates the error function erf() for x <= 0.46875 using this function:\n              n\nerf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n             j=0",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52061,
            "description": "Approximates the complement of the error function erfc() for\n0.46875 <= x <= 4.0 using this function:\n                      n\nerfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n                     j=0",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52083,
            "description": "Approximates the complement of the error function erfc() for x > 4.0 using\nthis function:\n\nerfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n              n\n   1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n             j=0",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52114,
            "description": "Upper bound for the first approximation interval, 0 <= x <= THRESH",
            "constant": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52120,
            "description": "Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)",
            "constant": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52126,
            "description": "Coefficients for each term of the numerator sum (p_j) for each approximation\ninterval (see W. J. Cody's paper for more details)",
            "constant": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52147,
            "description": "Coefficients for each term of the denominator sum (q_j) for each approximation\ninterval (see W. J. Cody's paper for more details)",
            "constant": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52166,
            "description": "Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\nNumber.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\nreturn 1",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52178,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52180,
            "description": "module.exports = [\n\t\t  __webpack_require__(323),\n\t\t  __webpack_require__(328),\n\t\t  __webpack_require__(464),\n\t\t  __webpack_require__(333),\n\t\t  __webpack_require__(465),\n\t\t  __webpack_require__(466),\n\t\t  __webpack_require__(467),\n\t\t  __webpack_require__(468),\n\t\t  __webpack_require__(450),\n\t\t  __webpack_require__(469)\n\t\t];\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52197,
            "description": "'use strict';\nvar flatten = __webpack_require__(40).flatten;\n\t\tvar reduce = __webpack_require__(325);\n\t\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(53));\n\t\t  var divide = load(__webpack_require__(81));\n\t\t  var compare = load(__webpack_require__(443));\n\t\t  var partitionSelect = load(__webpack_require__(442));\n  /**\n\t\t   * Compute the median of a matrix or a list with values. The values are\n\t\t   * sorted and the middle value is returned. In case of an even number of\n\t\t   * values, the average of the two middle values is returned.\n\t\t   * Supported types of values are: Number, BigNumber, Unit\n\t\t   *\n\t\t   * In case of a (multi dimensional) array or matrix, the median of all\n\t\t   * elements will be calculated.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.median(a, b, c, ...)\n\t\t   *     math.median(A)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.median(5, 2, 7);        // returns 5\n\t\t   *     math.median([3, -1, 5, 7]);  // returns 4\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     mean, min, max, sum, prod, std, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The median",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52259,
            "description": "Recursively calculate the median of an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "median",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52319,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52321,
            "description": "'use strict';\nvar flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n  /**\n\t\t  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n\t\t  * If there are more than one modes, it returns a list of those values.\n\t\t  *\n\t\t  * Syntax:\n\t\t  *\n\t\t  *     math.mode(a, b, c, ...)\n\t\t  *     math.mode(A)\n\t\t  *\n\t\t  * Examples:\n\t\t  *\n\t\t  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]\n\t\t  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]\n\t\t  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n\t\t  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n\t\t  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n\t\t  *\n\t\t  * See also:\n\t\t  *\n\t\t  *     median,\n\t\t  *     mean\n\t\t  *\n\t\t  * @param {... *} args  A single matrix\n\t\t  * @return {*} The mode of all values",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52365,
            "description": "Calculates the mode in an 1-dimensional array",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "mode",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52401,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52403,
            "description": "'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t\t  var multiply = load(__webpack_require__(80));\n  /**\n\t\t   * Compute the product of a matrix or a list with values.\n\t\t   * In case of a (multi dimensional) array or matrix, the sum of all\n\t\t   * elements will be calculated.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.prod(a, b, c, ...)\n\t\t   *     math.prod(A)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.multiply(2, 3);           // returns 6\n\t\t   *     math.prod(2, 3);               // returns 6\n\t\t   *     math.prod(2, 3, 4);            // returns 24\n\t\t   *     math.prod([2, 3, 4]);          // returns 24\n\t\t   *     math.prod([[2, 5], [4, 3]]);   // returns 120\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, min, max, sum, std, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The product of all values",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52458,
            "description": "Recursively calculate the product of an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "prod",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52483,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52485,
            "description": "'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar isNumber = __webpack_require__(6).isNumber;\n\t\tvar flatten = __webpack_require__(40).flatten;\n\t\tvar isCollection = __webpack_require__(322);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var partitionSelect = load(__webpack_require__(442));\n\t\t  var compare = load(__webpack_require__(443));\n  /**\n\t\t   * Compute the prob order quantile of a matrix or a list with values.\n\t\t   * The sequence is sorted and the middle value is returned.\n\t\t   * Supported types of sequence values are: Number, BigNumber, Unit\n\t\t   * Supported types of probability are: Number, BigNumber\n\t\t   *\n\t\t   * In case of a (multi dimensional) array or matrix, the prob order quantile\n\t\t   * of all elements will be calculated.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.quantileSeq(A, prob[, sorted])\n\t\t   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])\n\t\t   *     math.quantileSeq(A, N[, sorted])\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4\n\t\t   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]\n\t\t   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]\n\t\t   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     median, mean, min, max, sum, prod, std, var\n\t\t   *\n\t\t   * @param {Array, Matrix} data                A single matrix or Array\n\t\t   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is\n\t\t   *                                            the amount of evenly distributed steps of\n\t\t   *                                            probabilities; only one of these options can\n\t\t   *                                            be provided\n\t\t   * @param {Boolean} sorted=false              is data sorted in ascending order\n\t\t   * @return {Number, BigNumber, Unit, Array}   Quantile(s)",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52636,
            "description": "Calculate the prob order quantile of an n-dimensional array.",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "prob",
                    "description": "",
                    "type": "Number, BigNumber"
                },
                {
                    "name": "sorted",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "prob order quantile",
                "type": "Number, BigNumber, Unit"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52727,
            "description": "Check if array value types are valid, throw error otherwise.",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number | BigNumber | Unit"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number | BigNumber | Unit"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52746,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52748,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var sqrt       = load(__webpack_require__(380));\n\t\t  var variance   = load(__webpack_require__(469));\n  /**\n\t\t   * Compute the standard deviation of a matrix or a  list with values.\n\t\t   * The standard deviations is defined as the square root of the variance:\n\t\t   * `std(A) = sqrt(var(A))`.\n\t\t   * In case of a (multi dimensional) array or matrix, the standard deviation\n\t\t   * over all elements will be calculated.\n\t\t   *\n\t\t   * Optionally, the type of normalization can be specified as second\n\t\t   * parameter. The parameter `normalization` can be one of the following values:\n\t\t   *\n\t\t   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\t\t   * - 'uncorrected'        The sum of squared errors is divided by n\n\t\t   * - 'biased'             The sum of squared errors is divided by (n + 1)\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.std(a, b, c, ...)\n\t\t   *     math.std(A)\n\t\t   *     math.std(A, normalization)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.std(2, 4, 6);                     // returns 2\n\t\t   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611\n\t\t   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979\n\t\t   *     math.std([2, 4, 6, 8], 'biased');      // returns 2\n\t\t   *\n\t\t   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, max, min, prod, sum, var\n\t\t   *\n\t\t   * @param {Array | Matrix} array\n\t\t   *                        A single matrix or or multiple scalar values\n\t\t   * @param {string} [normalization='unbiased']\n\t\t   *                        Determines how to normalize the variance.\n\t\t   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n\t\t   * @return {*} The standard deviation",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52826,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52828,
            "description": "'use strict';\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(53));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var multiply = load(__webpack_require__(80));\n\t\t  var divide = load(__webpack_require__(81));\n  /**\n\t\t   * Compute the variance of a matrix or a  list with values.\n\t\t   * In case of a (multi dimensional) array or matrix, the variance over all\n\t\t   * elements will be calculated.\n\t\t   *\n\t\t   * Optionally, the type of normalization can be specified as second\n\t\t   * parameter. The parameter `normalization` can be one of the following values:\n\t\t   *\n\t\t   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\t\t   * - 'uncorrected'        The sum of squared errors is divided by n\n\t\t   * - 'biased'             The sum of squared errors is divided by (n + 1)\n\t\t   *\n\t\t   * Note that older browser may not like the variable name `var`. In that\n\t\t   * case, the function can be called as `math['var'](...)` instead of\n\t\t   * `math.var(...)`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.var(a, b, c, ...)\n\t\t   *     math.var(A)\n\t\t   *     math.var(A, normalization)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.var(2, 4, 6);                     // returns 4\n\t\t   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667\n\t\t   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5\n\t\t   *     math.var([2, 4, 6, 8], 'biased');      // returns 4\n\t\t   *\n\t\t   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, max, min, prod, std, sum\n\t\t   *\n\t\t   * @param {Array | Matrix} array\n\t\t   *                        A single matrix or or multiple scalar values\n\t\t   * @param {string} [normalization='unbiased']\n\t\t   *                        Determines how to normalize the variance.\n\t\t   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n\t\t   * @return {*} The variance",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52903,
            "description": "Recursively calculate the variance of an n-dimensional array",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "normalization",
                    "description": "Determines how to normalize the variance:\n                       - 'unbiased'    The sum of squared errors is divided by (n - 1)\n                       - 'uncorrected' The sum of squared errors is divided by n\n                       - 'biased'      The sum of squared errors is divided by (n + 1)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "variance",
                "type": "Number | BigNumber"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52960,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52962,
            "description": "module.exports = [\n\t\t  __webpack_require__(90),\n\t\t  __webpack_require__(471)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 52972,
            "description": "'use strict';\nvar isString = __webpack_require__(23).isString;\n\t\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Interpolate values into a string template.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.print(template, values)\n\t\t   *     math.print(template, values, precision)\n\t\t   *     math.print(template, values, options)\n\t\t   *\n\t\t   * Example usage:\n\t\t   *\n\t\t   *     // the following outputs: 'Lucy is 5 years old'\n\t\t   *     math.print('Lucy is $age years old', {age: 5});\n\t\t   *\n\t\t   *     // the following outputs: 'The value of pi is 3.141592654'\n\t\t   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);\n\t\t   *\n\t\t   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\n\t\t   *     math.print('Hello $user.name! The date is $date', {\n\t\t   *       user: {\n\t\t   *         name: 'Mary',\n\t\t   *       },\n\t\t   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\n\t\t   *     });\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     format\n\t\t   *\n\t\t   * @param {string} template     A string containing variable placeholders.\n\t\t   * @param {Object} values       An object containing variables which will\n\t\t   *                              be filled in in the template.\n\t\t   * @param {number | Object} [options]  Formatting options,\n\t\t   *                              or the number of digits to format numbers.\n\t\t   *                              See function math.format for a description\n\t\t   *                              of all options.\n\t\t   * @return {string} Interpolated string",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53028,
            "description": "Interpolate values into a string template.",
            "params": [
                {
                    "name": "template",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Number | Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Interpolated string",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53063,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53065,
            "description": "module.exports = [\n\t\t  __webpack_require__(473),\n\t\t  __webpack_require__(474),\n\t\t  __webpack_require__(475),\n\t\t  __webpack_require__(476),\n\t\t  __webpack_require__(477),\n\t\t  __webpack_require__(478),\n\t\t  __webpack_require__(479),\n\t\t  __webpack_require__(480),\n\t\t  __webpack_require__(481),\n\t\t  __webpack_require__(482),\n\t\t  __webpack_require__(483),\n\t\t  __webpack_require__(484),\n\t\t  __webpack_require__(485),\n\t\t  __webpack_require__(486),\n\t\t  __webpack_require__(487),\n\t\t  __webpack_require__(488),\n\t\t  __webpack_require__(489),\n\t\t  __webpack_require__(490),\n\t\t  __webpack_require__(491),\n\t\t  __webpack_require__(492),\n\t\t  __webpack_require__(493),\n\t\t  __webpack_require__(494),\n\t\t  __webpack_require__(495),\n\t\t  __webpack_require__(496),\n\t\t  __webpack_require__(497)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53098,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse cosine of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acos(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acos(0.5);           // returns number 1.0471975511965979\n\t\t   *    math.acos(math.cos(1.5)); // returns number 1.5\n\t\t   *\n\t\t   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cos, atan, asin\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53161,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53163,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the hyperbolic arccos of a value,\n\t\t   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acosh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acosh(1.5);       // returns 0.9624236501192069\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cosh, asinh, atanh\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53221,
            "description": "Calculate the hyperbolic arccos of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53235,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53237,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acot(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acot(0.5);           // returns number 0.4636476090008061\n\t\t   *    math.acot(math.cot(1.5)); // returns number 1.5\n\t\t   *\n\t\t   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cot, atan\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x   Function input\n\t\t   * @return {number | Complex | Array | Matrix} The arc cotangent of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53295,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53297,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the hyperbolic arccotangent of a value,\n\t\t   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acoth(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acoth(0.5);       // returns 0.8047189562170503\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    acsch, asech\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53356,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53358,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acsc(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acsc(0.5);           // returns number 0.5235987755982989\n\t\t   *    math.acsc(math.csc(1.5)); // returns number ~1.5\n\t\t   *\n\t\t   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    csc, asin, asec\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x   Function input\n\t\t   * @return {number | Complex | Array | Matrix} The arc cosecant of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53420,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53422,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the hyperbolic arccosecant of a value,\n\t\t   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acsch(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acsch(0.5);       // returns 1.4436354751788103\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    asech, acoth\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53479,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53481,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.asec(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.asec(0.5);           // returns 1.0471975511965979\n\t\t   *    math.asec(math.sec(1.5)); // returns 1.5\n\t\t   *\n\t\t   *    math.asec(2);             // returns 0 + 1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    acos, acot, acsc\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} The arc secant of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53542,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53544,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var acosh = typed.find(load(__webpack_require__(474)), ['Complex']);\n  /**\n\t\t   * Calculate the hyperbolic arcsecant of a value,\n\t\t   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.asech(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.asech(0.5);       // returns 1.3169578969248166\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    acsch, acoth\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53612,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53614,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse sine of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.asin(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.asin(0.5);           // returns number 0.5235987755982989\n\t\t   *    math.asin(math.sin(1.5)); // returns number ~1.5\n\t\t   *\n\t\t   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sin, atan, acos\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53678,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53680,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the hyperbolic arcsine of a value,\n\t\t   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.asinh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.asinh(0.5);       // returns 0.48121182505960347\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    acosh, atanh\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53737,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53739,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse tangent of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.atan(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.atan(0.5);           // returns number 0.4636476090008061\n\t\t   *    math.atan(math.tan(1.5)); // returns number 1.5\n\t\t   *\n\t\t   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    tan, asin, acos\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53798,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53800,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm09 = load(__webpack_require__(374));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Calculate the inverse tangent function with two arguments, y/x.\n\t\t   * By providing two arguments, the right quadrant of the computed angle can be\n\t\t   * determined.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.atan2(y, x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.atan2(2, 2) / math.pi;       // returns number 0.25\n\t\t   *\n\t\t   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg\n\t\t   *    var x = math.cos(angle);\n\t\t   *    var y = math.sin(angle);\n\t\t   *\n\t\t   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    tan, atan, sin, cos\n\t\t   *\n\t\t   * @param {number | Array | Matrix} y  Second dimension\n\t\t   * @param {number | Array | Matrix} x  First dimension\n\t\t   * @return {number | Array | Matrix} Four-quadrant inverse tangent",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53956,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 53958,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic arctangent of a value,\n\t\t   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.atanh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.atanh(0.5);       // returns 0.5493061443340549\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    acosh, asinh\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54013,
            "description": "Calculate the hyperbolic arctangent of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54027,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54029,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the cosine of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cos(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cos(2);                      // returns number -0.4161468365471422\n\t\t   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475\n\t\t   *    math.cos(math.unit(180, 'deg'));  // returns number -1\n\t\t   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5\n\t\t   *\n\t\t   *    var angle = 0.2;\n\t\t   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cos, tan\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54095,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54097,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic cosine of a value,\n\t\t   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cosh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cosh(0.5);       // returns number 1.1276259652063807\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sinh, tanh\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54153,
            "description": "Calculate the hyperbolic cosine of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54167,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54169,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cot(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cot(2);      // returns number -0.45765755436028577\n\t\t   *    1 / math.tan(2);  // returns number -0.45765755436028577\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    tan, sec, csc\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Cotangent of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54231,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54233,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic cotangent of a value,\n\t\t   * defined as `coth(x) = 1 / tanh(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.coth(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    // coth(x) = 1 / tanh(x)\n\t\t   *    math.coth(2);         // returns 1.0373147207275482\n\t\t   *    1 / math.tanh(2);     // returns 1.0373147207275482\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sinh, tanh, cosh\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54291,
            "description": "Calculate the hyperbolic cosine of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54306,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54308,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.csc(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.csc(2);      // returns number 1.099750170294617\n\t\t   *    1 / math.sin(2);  // returns number 1.099750170294617\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sin, sec, cot\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Cosecant of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54370,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54372,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar sign = __webpack_require__(6).sign;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic cosecant of a value,\n\t\t   * defined as `csch(x) = 1 / sinh(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.csch(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    // csch(x) = 1/ sinh(x)\n\t\t   *    math.csch(0.5);       // returns 1.9190347513349437\n\t\t   *    1 / math.sinh(0.5);   // returns 1.9190347513349437\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sinh, sech, coth\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54431,
            "description": "Calculate the hyperbolic cosecant of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54451,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54453,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sec(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sec(2);      // returns number -2.4029979617223822\n\t\t   *    1 / math.cos(2);  // returns number -2.4029979617223822\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cos, csc, cot\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Secant of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54515,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54517,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic secant of a value,\n\t\t   * defined as `sech(x) = 1 / cosh(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sech(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    // sech(x) = 1/ cosh(x)\n\t\t   *    math.sech(0.5);       // returns 0.886818883970074\n\t\t   *    1 / math.cosh(0.5);   // returns 0.886818883970074\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cosh, csch, coth\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54575,
            "description": "Calculate the hyperbolic secant of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54589,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54591,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the sine of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sin(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sin(2);                      // returns number 0.9092974268256813\n\t\t   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475\n\t\t   *    math.sin(math.unit(90, 'deg'));   // returns number 1\n\t\t   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5\n\t\t   *\n\t\t   *    var angle = 0.2;\n\t\t   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cos, tan\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54658,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54660,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic sine of a value,\n\t\t   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sinh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sinh(0.5);       // returns number 0.5210953054937474\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cosh, tanh\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54717,
            "description": "Calculate the hyperbolic sine of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54731,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54733,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.tan(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.tan(0.5);                    // returns number 0.5463024898437905\n\t\t   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905\n\t\t   *    math.tan(math.pi / 4);            // returns number 1\n\t\t   *    math.tan(math.unit(45, 'deg'));   // returns number 1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    atan, sin, cos\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54796,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54798,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic tangent of a value,\n\t\t   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.tanh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\n\t\t   *    math.tanh(0.5);                   // returns 0.46211715726000974\n\t\t   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974\n\t\t   *    1 / math.coth(0.5);               // returns 0.46211715726000974\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sinh, cosh, coth\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54858,
            "description": "Calculate the hyperbolic tangent of a number",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54873,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54875,
            "description": "module.exports = [\n\t\t  __webpack_require__(499)\n\t\t];\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54883,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Change the unit of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.to(x, unit)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm\n\t\t   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm\n\t\t   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    unit\n\t\t   *\n\t\t   * @param {Unit | Array | Matrix} x     The unit to be converted.\n\t\t   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n\t\t   *                                      or a unit without value.\n\t\t   * @return {Unit | Array | Matrix} value with changed, fixed unit.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54977,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54979,
            "description": "module.exports = [\n\t\t  __webpack_require__(501),\n\t\t  __webpack_require__(419),\n\t\t  __webpack_require__(368),\n\t\t  __webpack_require__(89),\n\t\t  __webpack_require__(381),\n\t\t  __webpack_require__(502),\n\t\t  __webpack_require__(433),\n\t\t  __webpack_require__(503),\n\t\t  __webpack_require__(91)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 54996,
            "description": "'use strict';\nvar object= __webpack_require__(3);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Clone an object.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.clone(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.clone(3.5);                   // returns number 3.5\n\t\t   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i\n\t\t   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg\n\t\t   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]\n\t\t   *    math.clone(\"hello world\");         // returns string \"hello world\"\n\t\t   *\n\t\t   * @param {*} x   Object to be cloned\n\t\t   * @return {*} A clone of object x",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 55034,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 55036,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is prime: has no divisors other than itself and one.\n\t\t   * The function supports type `number`, `bignumber`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isPrime(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isPrime(3);                     // returns true\n\t\t   *    math.isPrime(-2);                    // returns false\n\t\t   *    math.isPrime(0);                     // returns false\n\t\t   *    math.isPrime(-0);                    // returns false\n\t\t   *    math.isPrime(0.5);                   // returns false\n\t\t   *    math.isPrime('2');                   // returns true\n\t\t   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isZero, isNegative, isInteger\n\t\t   *\n\t\t   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 55121,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 55123,
            "description": "'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is NaN (not a number).\n\t\t   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isNaN(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isNaN(3);                     // returns false\n\t\t   *    math.isNaN(NaN);                   // returns true\n\t\t   *    math.isNaN(0);                     // returns false\n\t\t   *    math.isNaN(math.bignumber(NaN));   // returns true\n\t\t   *    math.isNaN(math.bignumber(0));     // returns false\n\t\t   *    math.isNaN(math.fraction(-2, 5));  // returns false\n\t\t   *    math.isNaN('-2');                  // returns false\n\t\t   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isNegative, isPositive, isZero, isInteger\n\t\t   *\n\t\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is NaN.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 55193,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 55195,
            "description": "module.exports = [\n\t\t  __webpack_require__(505)\n\t\t];\n\n\n\t/***/ },",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 55204,
            "description": "'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Instantiate mathjs data types from their JSON representation\n\t\t   * @param {string} key\n\t\t   * @param {*} value\n\t\t   * @returns {*} Returns the revived object",
            "class": ""
        },
        {
            "file": "util.js",
            "line": 55230,
            "class": ""
        },
        {
            "file": "util.js",
            "line": 55232,
            "description": "'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\t\tvar DimensionError = __webpack_require__(42);\n\t\tvar IndexError = __webpack_require__(43);\nmodule.exports = [\n\t\t  {\n\t\t    name: 'ArgumentsError', path: 'error',\n\t\t    factory: function () {\n\t\t      return ArgumentsError;\n\t\t    }\n\t\t  },\n\t\t  {\n\t\t    name: 'DimensionError',\n\t\t    path: 'error',\n\t\t    factory: function () {\n\t\t      return DimensionError;\n\t\t    }\n\t\t  },\n\t\t  {\n\t\t    name: 'IndexError',\n\t\t    path: 'error',\n\t\t    factory: function () {\n\t\t      return IndexError;\n\t\t    }\n\t\t  }\n\t\t];\n// TODO: implement an InvalidValueError?\n\n\n\t/***/ }\n\t/******/ ])\n\t});\n\t;\n\n/***/ }\n/******/ ]);",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " lib/math.js:1"
        },
        {
            "message": "unknown tag: date",
            "line": " lib/math.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " lib/math.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:211"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:330"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:364"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:412"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:490"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:732"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:856"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:875"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:944"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1037"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1047"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1056"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1071"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1140"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1205"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1304"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1336"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1360"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1456"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1490"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1756"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1831"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:1849"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:2124"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:2272"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:2284"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:3230"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:8544"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:8553"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:8562"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:8788"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:8976"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9093"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9308"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9467"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9488"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9502"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9516"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9530"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9549"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9597"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9663"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9695"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9712"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9731"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9754"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9764"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9779"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9794"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9810"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9826"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9842"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9858"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9879"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9900"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9930"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9954"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:9978"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10002"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10017"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10032"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10048"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10064"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10080"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10096"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10117"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10138"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10170"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10195"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10223"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10247"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10264"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10274"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10284"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10298"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10312"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10326"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10339"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10349"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10390"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10400"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10413"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:10708"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:11798"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:11833"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:11842"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:11851"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:11864"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:12105"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:12135"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:12161"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:12193"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12556"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12569"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12582"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12592"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12621"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12647"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12687"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12725"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12753"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12838"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12866"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12908"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12941"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12955"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:12955"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12964"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:12995"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13018"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:13018"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13027"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:13027"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13036"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:13036"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13049"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:13049"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13058"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:13058"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13072"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:13072"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13122"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:13122"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13247"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:13247"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13259"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13300"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13499"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13512"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13525"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13535"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13552"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13751"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13784"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:13892"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14046"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14062"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:14062"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14071"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14177"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14225"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:14225"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14234"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:14234"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14274"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:14274"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14307"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:14307"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14316"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:14316"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14332"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:14332"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14403"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:14403"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14415"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:14415"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:14556"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:15178"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:15916"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:15957"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:15965"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:15974"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:15982"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:16038"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:16052"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:16076"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:16103"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:16127"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17132"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17145"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17303"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17315"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17328"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17328"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17344"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17344"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17360"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17360"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17376"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17389"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17389"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17399"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17407"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17416"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17428"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17428"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17443"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17443"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17451"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17451"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17472"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17472"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17485"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17577"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17621"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17621"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17647"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17670"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17694"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17723"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17723"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17740"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17740"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17753"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17753"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17763"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17763"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17783"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17783"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17792"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:17792"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:17807"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18085"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:18085"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18094"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:18094"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18103"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:18103"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18116"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18461"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18647"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18673"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18685"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18726"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18774"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:18774"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18815"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18827"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18853"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18870"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18880"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18920"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:18961"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:18961"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:18999"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19014"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:19014"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19035"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:19035"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19077"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19088"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19109"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19118"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:19118"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19133"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19146"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19228"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19293"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19354"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:19354"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/math.js:19409"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:21468"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:21477"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:21486"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:22233"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:22265"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:22387"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:31350"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:31522"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:31533"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:31988"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:32019"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:32205"
        },
        {
            "message": "unknown tag: override",
            "line": " lib/math.js:32227"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:32461"
        },
        {
            "message": "param name missing: {Node}",
            "line": " lib/math.js:32835"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:33008"
        },
        {
            "message": "unknown tag: override",
            "line": " lib/math.js:33042"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:33127"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:33177"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:33398"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:33564"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:33784"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:33966"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " lib/math.js:34051"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:34170"
        },
        {
            "message": "unknown tag: override",
            "line": " lib/math.js:34196"
        },
        {
            "message": "unknown tag: override",
            "line": " lib/math.js:34206"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:34309"
        },
        {
            "message": "unknown tag: override",
            "line": " lib/math.js:34339"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:34466"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:35008"
        },
        {
            "message": "unknown tag: override",
            "line": " lib/math.js:35035"
        },
        {
            "message": "unknown tag: override",
            "line": " lib/math.js:35291"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:35308"
        },
        {
            "message": "unknown tag: override",
            "line": " lib/math.js:35327"
        },
        {
            "message": "unknown tag: override",
            "line": " lib/math.js:35340"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:36704"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:36805"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:36840"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:37445"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:37633"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:37831"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:37858"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:37885"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:37912"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:38119"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:41719"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:41801"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:43054"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:43077"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:43255"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:43509"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:43537"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:44146"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:44272"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:47575"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:47713"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:49391"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:49537"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:49661"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:50961"
        },
        {
            "message": "unknown tag: constant",
            "line": " lib/math.js:52068"
        },
        {
            "message": "unknown tag: constant",
            "line": " lib/math.js:52074"
        },
        {
            "message": "unknown tag: constant",
            "line": " lib/math.js:52080"
        },
        {
            "message": "unknown tag: constant",
            "line": " lib/math.js:52101"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:52982"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:54107"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:54245"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:54385"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:54529"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:54671"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/math.js:54812"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:620"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:638"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:673"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:697"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:898"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:920"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:936"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:949"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:962"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1132"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1149"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1169"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1297"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1321"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1497"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1579"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1598"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1617"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1634"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1665"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1701"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1731"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1848"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1871"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/q.js:1901"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:257"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:376"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:410"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:458"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:536"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:778"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:902"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:921"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:990"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1083"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1093"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1102"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1117"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1186"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1251"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1350"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1382"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1406"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1502"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1536"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1802"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1877"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:1895"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:2170"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:2318"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:2330"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:3276"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:8590"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:8599"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:8608"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:8834"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9022"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9139"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9354"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9513"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9534"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9548"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9562"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9576"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9595"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9643"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9709"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9741"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9758"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9777"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9800"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9810"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9825"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9840"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9856"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9872"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9888"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9904"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9925"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9946"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:9976"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10000"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10024"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10048"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10063"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10078"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10094"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10110"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10126"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10142"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10163"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10184"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10216"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10241"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10269"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10293"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10310"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10320"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10330"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10344"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10358"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10372"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10385"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10395"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10436"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10446"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10459"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:10754"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:11844"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:11879"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:11888"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:11897"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:11910"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:12151"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:12181"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:12207"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:12239"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12602"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12615"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12628"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12638"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12667"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12693"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12733"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12771"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12799"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12884"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12912"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12954"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:12987"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13001"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:13001"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13010"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13041"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13064"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:13064"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13073"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:13073"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13082"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:13082"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13095"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:13095"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13104"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:13104"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13118"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:13118"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13168"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:13168"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13293"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:13293"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13305"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13346"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13545"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13558"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13571"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13581"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13598"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13797"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13830"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:13938"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14092"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14108"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:14108"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14117"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14223"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14271"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:14271"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14280"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:14280"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14320"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:14320"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14353"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:14353"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14362"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:14362"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14378"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:14378"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14449"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:14449"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14461"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:14461"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:14602"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:15224"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:15962"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:16003"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:16011"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:16020"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:16028"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:16084"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:16098"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:16122"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:16149"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:16173"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17178"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17191"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17349"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17361"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17374"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17374"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17390"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17390"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17406"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17406"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17422"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17435"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17435"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17445"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17453"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17462"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17474"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17474"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17489"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17489"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17497"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17497"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17518"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17518"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17531"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17623"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17667"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17667"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17693"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17716"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17740"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17769"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17769"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17786"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17786"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17799"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17799"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17809"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17809"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17829"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17829"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17838"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:17838"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:17853"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18131"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:18131"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18140"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:18140"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18149"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:18149"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18162"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18507"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18693"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18719"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18731"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18772"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18820"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:18820"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18861"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18873"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18899"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18916"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18926"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:18966"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19007"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:19007"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:19045"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19060"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:19060"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19081"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:19081"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19123"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19134"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19155"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:19164"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19179"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19192"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19274"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19339"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19400"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:19400"
        },
        {
            "message": "unknown tag: memberof",
            "line": " util.js:19455"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:21514"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:21523"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:21532"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:22279"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:22311"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:22433"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:31396"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:31568"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:31579"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:32034"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:32065"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:32251"
        },
        {
            "message": "unknown tag: override",
            "line": " util.js:32273"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:32507"
        },
        {
            "message": "param name missing: {Node}",
            "line": " util.js:32881"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:33054"
        },
        {
            "message": "unknown tag: override",
            "line": " util.js:33088"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:33173"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:33223"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:33444"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:33610"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:33830"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:34012"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " util.js:34097"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:34216"
        },
        {
            "message": "unknown tag: override",
            "line": " util.js:34242"
        },
        {
            "message": "unknown tag: override",
            "line": " util.js:34252"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:34355"
        },
        {
            "message": "unknown tag: override",
            "line": " util.js:34385"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:34512"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:35054"
        },
        {
            "message": "unknown tag: override",
            "line": " util.js:35081"
        },
        {
            "message": "unknown tag: override",
            "line": " util.js:35337"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:35354"
        },
        {
            "message": "unknown tag: override",
            "line": " util.js:35373"
        },
        {
            "message": "unknown tag: override",
            "line": " util.js:35386"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:36750"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:36851"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:36886"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:37491"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:37679"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:37877"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:37904"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:37931"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:37958"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:38165"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:41765"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:41847"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:43100"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:43123"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:43301"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:43555"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:43583"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:44192"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:44318"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:47621"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:47759"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:49437"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:49583"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:49707"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:51007"
        },
        {
            "message": "unknown tag: constant",
            "line": " util.js:52114"
        },
        {
            "message": "unknown tag: constant",
            "line": " util.js:52120"
        },
        {
            "message": "unknown tag: constant",
            "line": " util.js:52126"
        },
        {
            "message": "unknown tag: constant",
            "line": " util.js:52147"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:53028"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:54153"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:54291"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:54431"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:54575"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:54717"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " util.js:54858"
        },
        {
            "message": "Missing item type\nmath.js\nhttps://github.com/josdejong/mathjs\n\nMath.js is an extensive math library for JavaScript and Node.js,\nIt features real and complex numbers, units, matrices, a large set of\nmathematical functions, and a flexible expression parser.",
            "line": " lib/math.js:1"
        },
        {
            "message": "Missing item type\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })",
            "line": " lib/math.js:39"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:80"
        },
        {
            "message": "Missing item type\nvar core = __webpack_require__(1);\n/**\n\t * math.js factory function. Creates a new instance of math.js\n\t *\n\t * @param {Object} [config] Available configuration options:\n\t *                            {number} epsilon\n\t *                              Minimum relative difference between two\n\t *                              compared values, used by all comparison functions.\n\t *                            {string} matrix\n\t *                              A string 'matrix' (default) or 'array'.\n\t *                            {string} number\n\t *                              A string 'number' (default), 'bignumber', or\n\t *                              'fraction'\n\t *                            {number} precision\n\t *                              The number of significant digits for BigNumbers.\n\t *                              Not applicable for Numbers.\n\t *                            {boolean} predictable\n\t *                              Predictable output type of functions. When true,\n\t *                              output type depends only on the input types. When\n\t *                              false (default), output type can vary depending\n\t *                              on input values. For example `math.sqrt(-2)`\n\t *                              returns `NaN` when predictable is false, and\n\t *                              returns `complex('2i')` when true.",
            "line": " lib/math.js:82"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:124"
        },
        {
            "message": "Missing item type\nmodule.exports = __webpack_require__(2);\n\n/***/ },",
            "line": " lib/math.js:126"
        },
        {
            "message": "Missing item type\nvar isFactory = __webpack_require__(3).isFactory;\n\tvar deepExtend = __webpack_require__(3).deepExtend;\n\tvar typedFactory = __webpack_require__(4);\n\tvar emitter = __webpack_require__(8);\nvar importFactory = __webpack_require__(10);\n\tvar configFactory = __webpack_require__(12);\n/**\n\t * Math.js core. Creates a new, empty math.js instance\n\t * @param {Object} [options] Available options:\n\t *                            {number} epsilon\n\t *                              Minimum relative difference between two\n\t *                              compared values, used by all comparison functions.\n\t *                            {string} matrix\n\t *                              A string 'Matrix' (default) or 'Array'.\n\t *                            {string} number\n\t *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n\t *                            {number} precision\n\t *                              The number of significant digits for BigNumbers.\n\t *                              Not applicable for Numbers.\n\t *                            {boolean} predictable\n\t *                              Predictable output type of functions. When true,\n\t *                              output type depends only on the input types. When\n\t *                              false (default), output type can vary depending\n\t *                              on input values. For example `math.sqrt(-2)`\n\t *                              returns `NaN` when predictable is false, and\n\t *                              returns `complex('2i')` when true.\n\t * @returns {Object} Returns a bare-bone math.js instance containing\n\t *                   functions:\n\t *                   - `import` to add new functions\n\t *                   - `config` to change configuration\n\t *                   - `on`, `off`, `once`, `emit` for events",
            "line": " lib/math.js:132"
        },
        {
            "message": "Missing item type\nLoad a function or data type from a factory.\nIf the function or data type already exists, the existing instance is\nreturned.",
            "line": " lib/math.js:211"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:260"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Clone an object\n\t *\n\t *     clone(x)\n\t *\n\t * Can clone any primitive type, array, and object.\n\t * If x has a function clone, this function will be invoked to clone the object.\n\t *\n\t * @param {*} x\n\t * @return {*} clone",
            "line": " lib/math.js:262"
        },
        {
            "message": "Missing item type\nExtend object a with the properties of object b",
            "line": " lib/math.js:315"
        },
        {
            "message": "Missing item type\nDeep extend an object a with the properties of object b",
            "line": " lib/math.js:330"
        },
        {
            "message": "Missing item type\nDeep test equality of all fields in two pairs of arrays or objects.",
            "line": " lib/math.js:364"
        },
        {
            "message": "Missing item type\nTest whether the current JavaScript engine supports Object.defineProperty",
            "line": " lib/math.js:412"
        },
        {
            "message": "Missing item type\nAttach a lazy loading property to a constant.\nThe given function `fn` is called once when the property is first requested.\nOn older browsers (<IE8), the function will fall back to direct evaluation\nof the properties value.",
            "line": " lib/math.js:428"
        },
        {
            "message": "Missing item type\nTraverse a path into an object.\nWhen a namespace is missing, it will be created",
            "line": " lib/math.js:466"
        },
        {
            "message": "Missing item type\nTest whether an object is a factory. a factory has fields:\n\n- factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n- name: string (optional)\n- path: string    A dot separated path (optional)\n- math: boolean   If true (false by default), the math namespace is passed\n                  as fifth argument of the factory function",
            "line": " lib/math.js:490"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:507"
        },
        {
            "message": "Missing item type\nvar typedFunction = __webpack_require__(5);\n\tvar digits = __webpack_require__(6).digits;\n// returns a new instance of typed-function\n\tvar createTyped = function () {\n\t  // initially, return the original instance of typed-function\n\t  // consecutively, return a new instance from typed.create.\n\t  createTyped = typedFunction.create;\n\t  return typedFunction;\n\t};\n/**\n\t * Factory function for creating a new typed instance\n\t * @param {Object} type   Object with data types like Complex and BigNumber\n\t * @returns {Function}",
            "line": " lib/math.js:509"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:702"
        },
        {
            "message": "Missing item type\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * typed-function\n\t *\n\t * Type checking for JavaScript functions\n\t *\n\t * https://github.com/josdejong/typed-function",
            "line": " lib/math.js:704"
        },
        {
            "message": "Missing item type\nGet a type test function for a specific data type",
            "line": " lib/math.js:732"
        },
        {
            "message": "Missing item type\nRetrieve the function name from a set of functions, and check\nwhether the name of all functions match (if given)",
            "line": " lib/math.js:764"
        },
        {
            "message": "Missing item type\nCreate an ArgumentsError. Creates messages like:\n\n  Unexpected type of argument (expected: ..., actual: ..., index: ...)\n  Too few arguments (expected: ..., index: ...)\n  Too many arguments (expected: ..., actual: ...)",
            "line": " lib/math.js:794"
        },
        {
            "message": "Missing item type\nCollection with function references (local shortcuts to functions)",
            "line": " lib/math.js:845"
        },
        {
            "message": "Missing item type\nAdd a function reference.",
            "line": " lib/math.js:856"
        },
        {
            "message": "Missing item type\nCreate code lines for all function references",
            "line": " lib/math.js:875"
        },
        {
            "message": "Missing item type\nA function parameter",
            "line": " lib/math.js:897"
        },
        {
            "message": "Missing item type\nOrder Params\nany type ('any') will be ordered last, and object as second last (as other\ntypes may be an object as well, like Array).",
            "line": " lib/math.js:944"
        },
        {
            "message": "Missing item type\nTest whether this parameters types overlap an other parameters types.\nWill not match ['any'] with ['number']",
            "line": " lib/math.js:1012"
        },
        {
            "message": "Missing item type\nTest whether this parameters types matches an other parameters types.\nWhen any of the two parameters contains `any`, true is returned",
            "line": " lib/math.js:1027"
        },
        {
            "message": "Missing item type\nCreate a clone of this param",
            "line": " lib/math.js:1037"
        },
        {
            "message": "Missing item type\nTest whether this parameter contains conversions",
            "line": " lib/math.js:1047"
        },
        {
            "message": "Missing item type\nTests whether this parameters contains any of the provided types",
            "line": " lib/math.js:1056"
        },
        {
            "message": "Missing item type\nReturn a string representation of this params types, like 'string' or\n'number | boolean' or '...number'",
            "line": " lib/math.js:1071"
        },
        {
            "message": "Missing item type\nA function signature",
            "line": " lib/math.js:1096"
        },
        {
            "message": "Missing item type\nCreate a clone of this signature",
            "line": " lib/math.js:1140"
        },
        {
            "message": "Missing item type\nExpand a signature: split params with union types in separate signatures\nFor example split a Signature \"string | number\" into two signatures.",
            "line": " lib/math.js:1148"
        },
        {
            "message": "Missing item type\nCompare two signatures.\n\nWhen two params are equal and contain conversions, they will be sorted\nby lowest index of the first conversions.",
            "line": " lib/math.js:1205"
        },
        {
            "message": "Missing item type\nTest whether any of the signatures parameters has conversions",
            "line": " lib/math.js:1243"
        },
        {
            "message": "Missing item type\nTest whether this signature should be ignored.\nChecks whether any of the parameters contains a type listed in\ntyped.ignore",
            "line": " lib/math.js:1257"
        },
        {
            "message": "Missing item type\nTest whether the path of this signature matches a given path.",
            "line": " lib/math.js:1280"
        },
        {
            "message": "Missing item type\nGenerate the code to invoke this signature",
            "line": " lib/math.js:1304"
        },
        {
            "message": "Missing item type\nReturn a string representation of the signature",
            "line": " lib/math.js:1336"
        },
        {
            "message": "Missing item type\nA group of signatures with the same parameter on given index",
            "line": " lib/math.js:1344"
        },
        {
            "message": "Missing item type\nGenerate code for this group of signatures",
            "line": " lib/math.js:1360"
        },
        {
            "message": "Missing item type\nGenerate inner code for this group of signatures.\nThis is a helper function of Node.prototype.toCode",
            "line": " lib/math.js:1456"
        },
        {
            "message": "Missing item type\nGenerate code to throw exceptions",
            "line": " lib/math.js:1490"
        },
        {
            "message": "Missing item type\nSplit all raw signatures into an array with expanded Signatures",
            "line": " lib/math.js:1529"
        },
        {
            "message": "Missing item type\nFilter all any type signatures",
            "line": " lib/math.js:1623"
        },
        {
            "message": "Missing item type\ncreate a map with normalized signatures as key and the function as value",
            "line": " lib/math.js:1640"
        },
        {
            "message": "Missing item type\nParse signatures recursively in a node tree.",
            "line": " lib/math.js:1661"
        },
        {
            "message": "Missing item type\nGenerate an array like ['arg0', 'arg1', 'arg2']",
            "line": " lib/math.js:1756"
        },
        {
            "message": "Missing item type\nCompose a function from sub-functions each handling a single type signature.\nSignatures:\n  typed(signature: string, fn: function)\n  typed(name: string, signature: string, fn: function)\n  typed(signatures: Object.<string, function>)\n  typed(name: string, signatures: Object.<string, function>)",
            "line": " lib/math.js:1771"
        },
        {
            "message": "Missing item type\nCalculate the maximum number of parameters in givens signatures",
            "line": " lib/math.js:1831"
        },
        {
            "message": "Missing item type\nGet the type of a value",
            "line": " lib/math.js:1849"
        },
        {
            "message": "Missing item type\nTest whether an array contains some item",
            "line": " lib/math.js:1875"
        },
        {
            "message": "Missing item type\nReturns the last item in the array",
            "line": " lib/math.js:1885"
        },
        {
            "message": "Missing item type\nConstruct the typed function itself with various signatures\n\nSignatures:\n\n  typed(signatures: Object.<string, function>)\n  typed(name: string, signatures: Object.<string, function>)",
            "line": " lib/math.js:1927"
        },
        {
            "message": "Missing item type\nFind a specific signature from a (composed) typed function, for\nexample:\n\n  typed.find(fn, ['number', 'string'])\n  typed.find(fn, 'number, string')\n\nFunction find only only works for exact matches.",
            "line": " lib/math.js:1986"
        },
        {
            "message": "Missing item type\nConvert a given value to another data type.",
            "line": " lib/math.js:2035"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:2095"
        },
        {
            "message": "Missing item type\n'use strict';\nvar NumberFormatter = __webpack_require__(7);\n/**\n\t * Test whether value is a number\n\t * @param {*} value\n\t * @return {boolean} isNumber",
            "line": " lib/math.js:2097"
        },
        {
            "message": "Missing item type\nCheck if a number is integer",
            "line": " lib/math.js:2112"
        },
        {
            "message": "Missing item type\nCalculate the sign of a number",
            "line": " lib/math.js:2124"
        },
        {
            "message": "Missing item type\nConvert a number to a formatted string representation.\n\nSyntax:\n\n   format(value)\n   format(value, options)\n   format(value, precision)\n   format(value, fn)\n\nWhere:\n\n   {number} value   The value to be formatted\n   {Object} options An object with formatting options. Available options:\n                    {string} notation\n                        Number notation. Choose from:\n                        'fixed'          Always use regular number notation.\n                                         For example '123.40' and '14000000'\n                        'exponential'    Always use exponential notation.\n                                         For example '1.234e+2' and '1.4e+7'\n                        'engineering'    Always use engineering notation.\n                                         For example '123.4e+0' and '14.0e+6'\n                        'auto' (default) Regular number notation for numbers\n                                         having an absolute value between\n                                         `lower` and `upper` bounds, and uses\n                                         exponential notation elsewhere.\n                                         Lower bound is included, upper bound\n                                         is excluded.\n                                         For example '123.4' and '1.4e7'.\n                    {number} precision   A number between 0 and 16 to round\n                                         the digits of the number.\n                                         In case of notations 'exponential' and\n                                         'auto', `precision` defines the total\n                                         number of significant digits returned\n                                         and is undefined by default.\n                                         In case of notation 'fixed',\n                                         `precision` defines the number of\n                                         significant digits after the decimal\n                                         point, and is 0 by default.\n                    {Object} exponential An object containing two parameters,\n                                         {number} lower and {number} upper,\n                                         used by notation 'auto' to determine\n                                         when to return exponential notation.\n                                         Default values are `lower=1e-3` and\n                                         `upper=1e5`.\n                                         Only applicable for notation `auto`.\n   {Function} fn    A custom formatting function. Can be used to override the\n                    built-in notations. Function `fn` is called with `value` as\n                    parameter and must return a string. Is useful for example to\n                    format all values inside a matrix in a particular way.\n\nExamples:\n\n   format(6.4);                                        // '6.4'\n   format(1240000);                                    // '1.24e6'\n   format(1/3);                                        // '0.3333333333333333'\n   format(1/3, 3);                                     // '0.333'\n   format(21385, 2);                                   // '21000'\n   format(12.071, {notation: 'fixed'});                // '12'\n   format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n   format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n   format(12345678, {notation: 'engineering'});        // '12.345678e+6'",
            "line": " lib/math.js:2141"
        },
        {
            "message": "Missing item type\nFormat a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "line": " lib/math.js:2272"
        },
        {
            "message": "Missing item type\nFormat a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'",
            "line": " lib/math.js:2284"
        },
        {
            "message": "Missing item type\nFormat a number with fixed notation.",
            "line": " lib/math.js:2296"
        },
        {
            "message": "Missing item type\nFormat a number with a certain precision",
            "line": " lib/math.js:2306"
        },
        {
            "message": "Missing item type\nCount the number of significant digits of a number.\n\nFor example:\n  2.34 returns 3\n  0.0034 returns 2\n  120.5e+30 returns 4",
            "line": " lib/math.js:2319"
        },
        {
            "message": "Missing item type\nMinimum number added to one that makes the result different than one",
            "line": " lib/math.js:2338"
        },
        {
            "message": "Missing item type\nCompares two floating point numbers.",
            "line": " lib/math.js:2343"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:2386"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Format a number using methods toPrecision, toFixed, toExponential.\n\t * @param {number | string} value\n\t * @constructor",
            "line": " lib/math.js:2388"
        },
        {
            "message": "Missing item type\nFormat a number with engineering notation.",
            "line": " lib/math.js:2434"
        },
        {
            "message": "Missing item type\nFormat a number with fixed notation.",
            "line": " lib/math.js:2474"
        },
        {
            "message": "Missing item type\nFormat a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "line": " lib/math.js:2504"
        },
        {
            "message": "Missing item type\nFormat a number with a certain precision",
            "line": " lib/math.js:2527"
        },
        {
            "message": "Missing item type\nCrete a clone of the NumberFormatter",
            "line": " lib/math.js:2573"
        },
        {
            "message": "Missing item type\nRound the number of digits of a number *",
            "line": " lib/math.js:2585"
        },
        {
            "message": "Missing item type\nCreate an array filled with zeros.",
            "line": " lib/math.js:2624"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:2640"
        },
        {
            "message": "Missing item type\nvar Emitter = __webpack_require__(9);\n/**\n\t * Extend given object with emitter functions `on`, `off`, `once`, `emit`\n\t * @param {Object} obj\n\t * @return {Object} obj",
            "line": " lib/math.js:2642"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:2665"
        },
        {
            "message": "Missing item type\nfunction E () {\n\t\t// Keep this empty so it's easier to inherit from\n\t  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n\t}\nE.prototype = {\n\t\ton: function (name, callback, ctx) {\n\t    var e = this.e || (this.e = {});\n    (e[name] || (e[name] = [])).push({\n\t      fn: callback,\n\t      ctx: ctx\n\t    });\n    return this;\n\t  },\n  once: function (name, callback, ctx) {\n\t    var self = this;\n\t    function listener () {\n\t      self.off(name, listener);\n\t      callback.apply(ctx, arguments);\n\t    };\n    listener._ = callback\n\t    return this.on(name, listener, ctx);\n\t  },\n  emit: function (name) {\n\t    var data = [].slice.call(arguments, 1);\n\t    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n\t    var i = 0;\n\t    var len = evtArr.length;\n    for (i; i < len; i++) {\n\t      evtArr[i].fn.apply(evtArr[i].ctx, data);\n\t    }\n    return this;\n\t  },\n  off: function (name, callback) {\n\t    var e = this.e || (this.e = {});\n\t    var evts = e[name];\n\t    var liveEvents = [];\n    if (evts && callback) {\n\t      for (var i = 0, len = evts.length; i < len; i++) {\n\t        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n\t          liveEvents.push(evts[i]);\n\t      }\n\t    }\n    // Remove event from queue to prevent memory leak\n\t    // Suggested by https://github.com/lazd\n\t    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n    (liveEvents.length)\n\t      ? e[name] = liveEvents\n\t      : delete e[name];\n    return this;\n\t  }\n\t};\nmodule.exports = E;\n\n\n/***/ },",
            "line": " lib/math.js:2667"
        },
        {
            "message": "Missing item type\n'use strict';\nvar lazy = __webpack_require__(3).lazy;\n\tvar isFactory = __webpack_require__(3).isFactory;\n\tvar traverse = __webpack_require__(3).traverse;\n\tvar extend = __webpack_require__(3).extend;\n\tvar ArgumentsError = __webpack_require__(11);\nfunction factory (type, config, load, typed, math) {\n\t  /**\n\t   * Import functions from an object or a module\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.import(object)\n\t   *    math.import(object, options)\n\t   *\n\t   * Where:\n\t   *\n\t   * - `object: Object`\n\t   *   An object with functions to be imported.\n\t   * - `options: Object` An object with import options. Available options:\n\t   *   - `override: boolean`\n\t   *     If true, existing functions will be overwritten. False by default.\n\t   *   - `silent: boolean`\n\t   *     If true, the function will not throw errors on duplicates or invalid\n\t   *     types. False by default.\n\t   *   - `wrap: boolean`\n\t   *     If true, the functions will be wrapped in a wrapper function\n\t   *     which converts data types like Matrix to primitive data types like Array.\n\t   *     The wrapper is needed when extending math.js with libraries which do not\n\t   *     support these data type. False by default.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    // define new functions and variables\n\t   *    math.import({\n\t   *      myvalue: 42,\n\t   *      hello: function (name) {\n\t   *        return 'hello, ' + name + '!';\n\t   *      }\n\t   *    });\n\t   *\n\t   *    // use the imported function and variable\n\t   *    math.myvalue * 2;               // 84\n\t   *    math.hello('user');             // 'hello, user!'\n\t   *\n\t   *    // import the npm module 'numbers'\n\t   *    // (must be installed first with `npm install numbers`)\n\t   *    math.import(require('numbers'), {wrap: true});\n\t   *\n\t   *    math.fibonacci(7); // returns 13\n\t   *\n\t   * @param {Object | Array} object   Object with functions to be imported.\n\t   * @param {Object} [options]        Import options.",
            "line": " lib/math.js:2739"
        },
        {
            "message": "Missing item type\nAdd a property to the math namespace and create a chain proxy for it.",
            "line": " lib/math.js:2840"
        },
        {
            "message": "Missing item type\nCreate a wrapper a round an function which converts the arguments\nto their primitive values (like convert a Matrix to Array)",
            "line": " lib/math.js:2891"
        },
        {
            "message": "Missing item type\nImport an instance of a factory into math.js",
            "line": " lib/math.js:2915"
        },
        {
            "message": "Missing item type\nCheck whether given object is a type which can be imported",
            "line": " lib/math.js:2967"
        },
        {
            "message": "Missing item type\nTest whether a given thing is a typed-function",
            "line": " lib/math.js:2987"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:3005"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Create a syntax error with the message:\n\t *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n\t * @param {string} fn     Function name\n\t * @param {number} count  Actual argument count\n\t * @param {number} min    Minimum required argument count\n\t * @param {number} [max]  Maximum required argument count\n\t * @extends Error",
            "line": " lib/math.js:3007"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:3045"
        },
        {
            "message": "Missing item type\n'use strict';\nvar object = __webpack_require__(3);\nfunction factory (type, config, load, typed, math) {\n\t  var MATRIX = ['Matrix', 'Array'];                   // valid values for option matrix\n\t  var NUMBER = ['number', 'BigNumber', 'Fraction'];   // valid values for option number\n  /**\n\t   * Set configuration options for math.js, and get current options.\n\t   * Will emit a 'config' event, with arguments (curr, prev).\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.config(config: Object): Object\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.config().number;                // outputs 'number'\n\t   *     math.eval('0.4');                    // outputs number 0.4\n\t   *     math.config({number: 'Fraction'});\n\t   *     math.eval('0.4');                    // outputs Fraction 2/5\n\t   *\n\t   * @param {Object} [options] Available options:\n\t   *                            {number} epsilon\n\t   *                              Minimum relative difference between two\n\t   *                              compared values, used by all comparison functions.\n\t   *                            {string} matrix\n\t   *                              A string 'Matrix' (default) or 'Array'.\n\t   *                            {string} number\n\t   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n\t   *                            {number} precision\n\t   *                              The number of significant digits for BigNumbers.\n\t   *                              Not applicable for Numbers.\n\t   *                            {string} parenthesis\n\t   *                              How to display parentheses in LaTeX and string\n\t   *                              output.\n\t   * @return {Object} Returns the current configuration",
            "line": " lib/math.js:3047"
        },
        {
            "message": "Missing item type\nTest whether an Array contains a specific item.",
            "line": " lib/math.js:3118"
        },
        {
            "message": "Missing item type\nFind a string in an array. Case insensitive search",
            "line": " lib/math.js:3128"
        },
        {
            "message": "Missing item type\nValidate an option",
            "line": " lib/math.js:3142"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:3170"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(14),        // data types (Matrix, Complex, Unit, ...)\n\t  __webpack_require__(100),   // constants\n\t  __webpack_require__(102),  // expression parsing\n\t  __webpack_require__(338),    // functions\n\t  __webpack_require__(504),        // serialization utility (math.json.reviver)\n\t  __webpack_require__(506)        // errors\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:3172"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(15),\n\t  __webpack_require__(20),\n\t  __webpack_require__(21),\n\t  __webpack_require__(26),\n\t  __webpack_require__(33),\n\t  __webpack_require__(37),\n\t  __webpack_require__(70),\n\t  __webpack_require__(71),\n\t  __webpack_require__(73),\n\t  __webpack_require__(74)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:3186"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  // type\n\t  __webpack_require__(16),\n  // construction function\n\t  __webpack_require__(18)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:3204"
        },
        {
            "message": "Missing item type\nvar Decimal = __webpack_require__(17);\nfunction factory (type, config, load, typed, math) {\n\t  var BigNumber = Decimal.clone({precision: config.precision});\n  /**\n\t   * Attach type information",
            "line": " lib/math.js:3217"
        },
        {
            "message": "Missing item type\nGet a JSON representation of a BigNumber containing\ntype information",
            "line": " lib/math.js:3230"
        },
        {
            "message": "Missing item type\nInstantiate a BigNumber from a JSON object",
            "line": " lib/math.js:3243"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:3268"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:3270"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:8295"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a BigNumber, which can store numbers with arbitrary precision.\n\t   * When a matrix is provided, all elements will be converted to BigNumber.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bignumber(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    0.1 + 0.2;                                  // returns number 0.30000000000000004\n\t   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3\n\t   *\n\t   *\n\t   *    7.2e500;                                    // returns number Infinity\n\t   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500\n\t   *\n\t   * See also:\n\t   *\n\t   *    boolean, complex, index, matrix, string, unit\n\t   *\n\t   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n\t   *                                                    0 by default.\n\t   * @returns {BigNumber} The created bignumber",
            "line": " lib/math.js:8297"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:8369"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Execute the callback function element wise for each element in array and any\n\t * nested array\n\t * Returns an array with the results\n\t * @param {Array | Matrix} array\n\t * @param {Function} callback   The callback is called with two parameters:\n\t *                              value1 and value2, which contain the current\n\t *                              element of both arrays.\n\t * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n\t *\n\t * @return {Array | Matrix} res",
            "line": " lib/math.js:8371"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:8400"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a boolean or convert a string or number to a boolean.\n\t   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n\t   * case of zero.\n\t   * Strings can be `'true'` or `'false'`, or can contain a number.\n\t   * When value is a matrix, all elements will be converted to boolean.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.boolean(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.boolean(0);     // returns false\n\t   *    math.boolean(1);     // returns true\n\t   *    math.boolean(-3);     // returns true\n\t   *    math.boolean('true');     // returns true\n\t   *    math.boolean('false');     // returns false\n\t   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, complex, index, matrix, string, unit\n\t   *\n\t   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n\t   * @return {boolean | Array | Matrix} The boolean value",
            "line": " lib/math.js:8402"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:8484"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  // type\n\t  __webpack_require__(22),\n  // construction function\n\t  __webpack_require__(25)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:8486"
        },
        {
            "message": "Missing item type\n'use strict';\nvar format = __webpack_require__(23).format;\n\tvar lazy = __webpack_require__(3).lazy;\nfunction factory (type, config, load, typed, math) {\n\t  /**\n\t   * @constructor Chain\n\t   * Wrap any value in a chain, allowing to perform chained operations on\n\t   * the value.\n\t   *\n\t   * All methods available in the math.js library can be called upon the chain,\n\t   * and then will be evaluated with the value itself as first argument.\n\t   * The chain can be closed by executing chain.done(), which will return\n\t   * the final value.\n\t   *\n\t   * The Chain has a number of special functions:\n\t   * - done()             Finalize the chained operation and return the\n\t   *                      chain's value.\n\t   * - valueOf()          The same as done()\n\t   * - toString()         Returns a string representation of the chain's value.\n\t   *\n\t   * @param {*} [value]",
            "line": " lib/math.js:8499"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:8538"
        },
        {
            "message": "Missing item type\nClose the chain. Returns the final value.\nDoes the same as method valueOf()",
            "line": " lib/math.js:8544"
        },
        {
            "message": "Missing item type\nClose the chain. Returns the final value.\nDoes the same as method done()",
            "line": " lib/math.js:8553"
        },
        {
            "message": "Missing item type\nGet a string representation of the value in the chain",
            "line": " lib/math.js:8562"
        },
        {
            "message": "Missing item type\nCreate a proxy method for the chain",
            "line": " lib/math.js:8570"
        },
        {
            "message": "Missing item type\nCreate a proxy method for the chain",
            "line": " lib/math.js:8583"
        },
        {
            "message": "Missing item type\nMake a function chainable",
            "line": " lib/math.js:8601"
        },
        {
            "message": "Missing item type\nCreate a proxy for a single method, or an object with multiple methods.\nExample usage:\n\n  Chain.createProxy('add', function add (x, y) {...});\n  Chain.createProxy({\n    add:      function add (x, y) {...},\n    subtract: function subtract (x, y) {...}\n  }",
            "line": " lib/math.js:8618"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:8668"
        },
        {
            "message": "Missing item type\n'use strict';\nvar formatNumber = __webpack_require__(6).format;\n\tvar formatBigNumber = __webpack_require__(24).format;\n/**\n\t * Test whether value is a string\n\t * @param {*} value\n\t * @return {boolean} isString",
            "line": " lib/math.js:8670"
        },
        {
            "message": "Missing item type\nCheck if a text ends with a certain string.",
            "line": " lib/math.js:8686"
        },
        {
            "message": "Missing item type\nFormat a value of any type into a string.\n\nUsage:\n    math.format(value)\n    math.format(value, precision)\n\nWhen value is a function:\n\n- When the function has a property `syntax`, it returns this\n  syntax description.\n- In other cases, a string `'function'` is returned.\n\nWhen `value` is an Object:\n\n- When the object contains a property `format` being a function, this\n  function is invoked as `value.format(options)` and the result is returned.\n- When the object has its own `toString` method, this method is invoked\n  and the result is returned.\n- In other cases the function will loop over all object properties and\n  return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n\nExample usage:\n    math.format(2/7);                // '0.2857142857142857'\n    math.format(math.pi, 3);         // '3.14'\n    math.format(new Complex(2, 3));  // '2 + 3i'\n    math.format('hello');            // '\"hello\"'",
            "line": " lib/math.js:8697"
        },
        {
            "message": "Missing item type\nRecursively format an n-dimensional matrix\nExample output: \"[[1, 2], [3, 4]]\"",
            "line": " lib/math.js:8788"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:8817"
        },
        {
            "message": "Missing item type\n/**\n\t * Convert a BigNumber to a formatted string representation.\n\t *\n\t * Syntax:\n\t *\n\t *    format(value)\n\t *    format(value, options)\n\t *    format(value, precision)\n\t *    format(value, fn)\n\t *\n\t * Where:\n\t *\n\t *    {number} value   The value to be formatted\n\t *    {Object} options An object with formatting options. Available options:\n\t *                     {string} notation\n\t *                         Number notation. Choose from:\n\t *                         'fixed'          Always use regular number notation.\n\t *                                          For example '123.40' and '14000000'\n\t *                         'exponential'    Always use exponential notation.\n\t *                                          For example '1.234e+2' and '1.4e+7'\n\t *                         'auto' (default) Regular number notation for numbers\n\t *                                          having an absolute value between\n\t *                                          `lower` and `upper` bounds, and uses\n\t *                                          exponential notation elsewhere.\n\t *                                          Lower bound is included, upper bound\n\t *                                          is excluded.\n\t *                                          For example '123.4' and '1.4e7'.\n\t *                     {number} precision   A number between 0 and 16 to round\n\t *                                          the digits of the number.\n\t *                                          In case of notations 'exponential' and\n\t *                                          'auto', `precision` defines the total\n\t *                                          number of significant digits returned\n\t *                                          and is undefined by default.\n\t *                                          In case of notation 'fixed',\n\t *                                          `precision` defines the number of\n\t *                                          significant digits after the decimal\n\t *                                          point, and is 0 by default.\n\t *                     {Object} exponential An object containing two parameters,\n\t *                                          {number} lower and {number} upper,\n\t *                                          used by notation 'auto' to determine\n\t *                                          when to return exponential notation.\n\t *                                          Default values are `lower=1e-3` and\n\t *                                          `upper=1e5`.\n\t *                                          Only applicable for notation `auto`.\n\t *    {Function} fn    A custom formatting function. Can be used to override the\n\t *                     built-in notations. Function `fn` is called with `value` as\n\t *                     parameter and must return a string. Is useful for example to\n\t *                     format all values inside a matrix in a particular way.\n\t *\n\t * Examples:\n\t *\n\t *    format(6.4);                                        // '6.4'\n\t *    format(1240000);                                    // '1.24e6'\n\t *    format(1/3);                                        // '0.3333333333333333'\n\t *    format(1/3, 3);                                     // '0.333'\n\t *    format(21385, 2);                                   // '21000'\n\t *    format(12.071, {notation: 'fixed'});                // '12'\n\t *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n\t *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n\t *\n\t * @param {BigNumber} value\n\t * @param {Object | Function | number} [options]\n\t * @return {string} str The formatted value",
            "line": " lib/math.js:8819"
        },
        {
            "message": "Missing item type\nFormat a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "line": " lib/math.js:8976"
        },
        {
            "message": "Missing item type\nFormat a number with fixed notation.",
            "line": " lib/math.js:8993"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:9006"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Wrap any value in a chain, allowing to perform chained operations on\n\t   * the value.\n\t   *\n\t   * All methods available in the math.js library can be called upon the chain,\n\t   * and then will be evaluated with the value itself as first argument.\n\t   * The chain can be closed by executing `chain.done()`, which returns\n\t   * the final value.\n\t   *\n\t   * The chain has a number of special functions:\n\t   *\n\t   * - `done()`     Finalize the chain and return the chain's value.\n\t   * - `valueOf()`  The same as `done()`\n\t   * - `toString()` Executes `math.format()` onto the chain's value, returning\n\t   *                a string representation of the value.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.chain(value)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.chain(3)\n\t   *         .add(4)\n\t   *         .subtract(2)\n\t   *         .done();     // 5\n\t   *\n\t   *     math.chain( [[1, 2], [3, 4]] )\n\t   *         .subset(math.index(0, 0), 8)\n\t   *         .multiply(3)\n\t   *         .done();     // [[24, 6], [9, 12]]\n\t   *\n\t   * @param {*} [value]   A value of any type on which to start a chained operation.\n\t   * @return {math.type.Chain} The created chain",
            "line": " lib/math.js:9008"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:9063"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  // type\n\t  __webpack_require__(27),\n  // construction function\n\t  __webpack_require__(31)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:9065"
        },
        {
            "message": "Missing item type\nvar Complex = __webpack_require__(28);\n\tvar format = __webpack_require__(6).format;\n\tvar isNumber = __webpack_require__(6).isNumber;\nfunction factory (type, config, load, typed, math) {\n  /**\n\t   * Attach type information",
            "line": " lib/math.js:9078"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the complex number",
            "line": " lib/math.js:9093"
        },
        {
            "message": "Missing item type\nGet a string representation of the complex number,\nwith optional formatting options.",
            "line": " lib/math.js:9118"
        },
        {
            "message": "Missing item type\nCreate a complex number from polar coordinates\n\nUsage:\n\n    Complex.fromPolar(r: number, phi: number) : Complex\n    Complex.fromPolar({r: number, phi: number}) : Complex",
            "line": " lib/math.js:9177"
        },
        {
            "message": "Missing item type\nCreate a Complex number from a JSON object",
            "line": " lib/math.js:9223"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:9254"
        },
        {
            "message": "Missing item type\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**\n\t * @license Complex.js v2.0.1 11/02/2016\n\t *\n\t * Copyright (c) 2016, Robert Eisele (robert@xarg.org)\n\t * Dual licensed under the MIT or GPL Version 2 licenses.",
            "line": " lib/math.js:9256"
        },
        {
            "message": "Missing item type\nThis class allows the manipilation of complex numbers.\n You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\nObject form\n { re: <real>, im: <imaginary> }\n { arg: <angle>, abs: <radius> }\n { phi: <angle>, r: <radius> }\nDouble form\n 99.3 - Single double value\nString form\n \"23.1337\" - Simple real number\n \"15+3i\" - a simple complex number\n \"3-i\" - a simple complex number\nExample:\nvar c = new Complex(\"99.3+8i\");\n c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);",
            "line": " lib/math.js:9265"
        },
        {
            "message": "Missing item type\nCalculates log(sqrt(a^2+b^2)) in a way to avoid overflows",
            "line": " lib/math.js:9308"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:9467"
        },
        {
            "message": "Missing item type\nCalculates the sign of a complex number",
            "line": " lib/math.js:9488"
        },
        {
            "message": "Missing item type\nAdds two complex numbers",
            "line": " lib/math.js:9502"
        },
        {
            "message": "Missing item type\nSubtracts two complex numbers",
            "line": " lib/math.js:9516"
        },
        {
            "message": "Missing item type\nMultiplies two complex numbers",
            "line": " lib/math.js:9530"
        },
        {
            "message": "Missing item type\nDivides two complex numbers",
            "line": " lib/math.js:9549"
        },
        {
            "message": "Missing item type\nCalculate the power of two complex numbers",
            "line": " lib/math.js:9597"
        },
        {
            "message": "Missing item type\nCalculate the complex square root",
            "line": " lib/math.js:9663"
        },
        {
            "message": "Missing item type\nCalculate the complex exponent",
            "line": " lib/math.js:9695"
        },
        {
            "message": "Missing item type\nCalculate the natural log",
            "line": " lib/math.js:9712"
        },
        {
            "message": "Missing item type\nCalculate the magniture of the complex number",
            "line": " lib/math.js:9731"
        },
        {
            "message": "Missing item type\nCalculate the angle of the complex number",
            "line": " lib/math.js:9754"
        },
        {
            "message": "Missing item type\nCalculate the sine of the complex number",
            "line": " lib/math.js:9764"
        },
        {
            "message": "Missing item type\nCalculate the cosine",
            "line": " lib/math.js:9779"
        },
        {
            "message": "Missing item type\nCalculate the tangent",
            "line": " lib/math.js:9794"
        },
        {
            "message": "Missing item type\nCalculate the cotangent",
            "line": " lib/math.js:9810"
        },
        {
            "message": "Missing item type\nCalculate the secant",
            "line": " lib/math.js:9826"
        },
        {
            "message": "Missing item type\nCalculate the cosecans",
            "line": " lib/math.js:9842"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus sinus",
            "line": " lib/math.js:9858"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus cosinus",
            "line": " lib/math.js:9879"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus tangent",
            "line": " lib/math.js:9900"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus cotangent",
            "line": " lib/math.js:9930"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus secant",
            "line": " lib/math.js:9954"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus cosecans",
            "line": " lib/math.js:9978"
        },
        {
            "message": "Missing item type\nCalculate the complex sinh",
            "line": " lib/math.js:10002"
        },
        {
            "message": "Missing item type\nCalculate the complex cosh",
            "line": " lib/math.js:10017"
        },
        {
            "message": "Missing item type\nCalculate the complex tanh",
            "line": " lib/math.js:10032"
        },
        {
            "message": "Missing item type\nCalculate the complex coth",
            "line": " lib/math.js:10048"
        },
        {
            "message": "Missing item type\nCalculate the complex coth",
            "line": " lib/math.js:10064"
        },
        {
            "message": "Missing item type\nCalculate the complex sech",
            "line": " lib/math.js:10080"
        },
        {
            "message": "Missing item type\nCalculate the complex asinh",
            "line": " lib/math.js:10096"
        },
        {
            "message": "Missing item type\nCalculate the complex asinh",
            "line": " lib/math.js:10117"
        },
        {
            "message": "Missing item type\nCalculate the complex atanh",
            "line": " lib/math.js:10138"
        },
        {
            "message": "Missing item type\nCalculate the complex acoth",
            "line": " lib/math.js:10170"
        },
        {
            "message": "Missing item type\nCalculate the complex acsch",
            "line": " lib/math.js:10195"
        },
        {
            "message": "Missing item type\nCalculate the complex asech",
            "line": " lib/math.js:10223"
        },
        {
            "message": "Missing item type\nCalculate the complex inverse 1/z",
            "line": " lib/math.js:10247"
        },
        {
            "message": "Missing item type\nReturns the complex conjugate",
            "line": " lib/math.js:10264"
        },
        {
            "message": "Missing item type\nGets the negated complex number",
            "line": " lib/math.js:10274"
        },
        {
            "message": "Missing item type\nCeils the actual complex number",
            "line": " lib/math.js:10284"
        },
        {
            "message": "Missing item type\nFloors the actual complex number",
            "line": " lib/math.js:10298"
        },
        {
            "message": "Missing item type\nCeils the actual complex number",
            "line": " lib/math.js:10312"
        },
        {
            "message": "Missing item type\nCompares two complex numbers",
            "line": " lib/math.js:10326"
        },
        {
            "message": "Missing item type\nClones the actual object",
            "line": " lib/math.js:10339"
        },
        {
            "message": "Missing item type\nGets a string of the actual complex number",
            "line": " lib/math.js:10349"
        },
        {
            "message": "Missing item type\nReturns the actual number as a vector",
            "line": " lib/math.js:10390"
        },
        {
            "message": "Missing item type\nReturns the actual real value of the current object",
            "line": " lib/math.js:10400"
        },
        {
            "message": "Missing item type\nChecks if the given complex number is not a number",
            "line": " lib/math.js:10413"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:10444"
        },
        {
            "message": "Missing item type\nmodule.exports = function(module) {\n\t\tif(!module.webpackPolyfill) {\n\t\t\tmodule.deprecate = function() {};\n\t\t\tmodule.paths = [];\n\t\t\t// module.parent = undefined by default\n\t\t\tmodule.children = [];\n\t\t\tmodule.webpackPolyfill = 1;\n\t\t}\n\t\treturn module;\n\t}\n\n\n/***/ },",
            "line": " lib/math.js:10446"
        },
        {
            "message": "Missing item type\nmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\n\n\n/***/ },",
            "line": " lib/math.js:10462"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Create a complex value or convert a value to a complex value.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.complex()                           // creates a complex value with zero\n\t   *                                              // as real and imaginary part.\n\t   *     math.complex(re : number, im : string)   // creates a complex value with provided\n\t   *                                              // values for real and imaginary part.\n\t   *     math.complex(re : number)                // creates a complex value with provided\n\t   *                                              // real value and zero imaginary part.\n\t   *     math.complex(complex : Complex)          // clones the provided complex value.\n\t   *     math.complex(arg : string)               // parses a string into a complex value.\n\t   *     math.complex(array : Array)              // converts the elements of the array\n\t   *                                              // or matrix element wise into a\n\t   *                                              // complex value.\n\t   *     math.complex({re: number, im: number})   // creates a complex value with provided\n\t   *                                              // values for real an imaginary part.\n\t   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n\t   *                                              // polar coordinates\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i\n\t   *    a.re = 5;                        // a = Complex 5 - 4i\n\t   *    var i = a.im;                    // Number -4;\n\t   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i\n\t   *    var c = math.complex();          // Complex 0 + 0i\n\t   *    var d = math.add(a, b);          // Complex 5 + 2i\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, index, matrix, number, string, unit\n\t   *\n\t   * @param {* | Array | Matrix} [args]\n\t   *            Arguments specifying the real and imaginary part of the complex number\n\t   * @return {Complex | Array | Matrix} Returns a complex value",
            "line": " lib/math.js:10469"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:10573"
        },
        {
            "message": "Missing item type\n'use strict';\nexports.symbols = {\n\t  // GREEK LETTERS\n\t  Alpha: 'A',     alpha: '\\\\alpha',\n\t  Beta: 'B',      beta: '\\\\beta',\n\t  Gamma: '\\\\Gamma',    gamma: '\\\\gamma',\n\t  Delta: '\\\\Delta',    delta: '\\\\delta',\n\t  Epsilon: 'E',   epsilon: '\\\\epsilon',  varepsilon: '\\\\varepsilon',\n\t  Zeta: 'Z',      zeta: '\\\\zeta',\n\t  Eta: 'H',       eta: '\\\\eta',\n\t  Theta: '\\\\Theta',    theta: '\\\\theta',    vartheta: '\\\\vartheta',\n\t  Iota: 'I',      iota: '\\\\iota',\n\t  Kappa: 'K',     kappa: '\\\\kappa',    varkappa: '\\\\varkappa',\n\t  Lambda: '\\\\Lambda',   lambda: '\\\\lambda',\n\t  Mu: 'M',        mu: '\\\\mu',\n\t  Nu: 'N',        nu: '\\\\nu',\n\t  Xi: '\\\\Xi',       xi: '\\\\xi',\n\t  Omicron: 'O',   omicron: 'o',\n\t  Pi: '\\\\Pi',       pi: '\\\\pi',       varpi: '\\\\varpi',\n\t  Rho: 'P',       rho: '\\\\rho',      varrho: '\\\\varrho',\n\t  Sigma: '\\\\Sigma',    sigma: '\\\\sigma',    varsigma: '\\\\varsigma',\n\t  Tau: 'T',       tau: '\\\\tau',\n\t  Upsilon: '\\\\Upsilon',  upsilon: '\\\\upsilon',\n\t  Phi: '\\\\Phi',      phi: '\\\\phi',      varphi: '\\\\varphi',\n\t  Chi: 'X',       chi: '\\\\chi',\n\t  Psi: '\\\\Psi',      psi: '\\\\psi',\n\t  Omega: '\\\\Omega',    omega: '\\\\omega',\n\t  //logic\n\t  'true': '\\\\mathrm{True}',\n\t  'false': '\\\\mathrm{False}',\n\t  //other\n\t  i: 'i', //TODO use \\i ??\n\t  inf: '\\\\infty',\n\t  Inf: '\\\\infty',\n\t  infinity: '\\\\infty',\n\t  Infinity: '\\\\infty',\n\t  oo: '\\\\infty',\n\t  lim: '\\\\lim',\n\t  'undefined': '\\\\mathbf{?}'\n\t};\nexports.operators = {\n\t  'transpose': '^\\\\top',\n\t  'factorial': '!',\n\t  'pow': '^',\n\t  'dotPow': '.^\\\\wedge', //TODO find ideal solution\n\t  'unaryPlus': '+',\n\t  'unaryMinus': '-',\n\t  'bitNot': '~', //TODO find ideal solution\n\t  'not': '\\\\neg',\n\t  'multiply': '\\\\cdot',\n\t  'divide': '\\\\frac', //TODO how to handle that properly?\n\t  'dotMultiply': '.\\\\cdot', //TODO find ideal solution\n\t  'dotDivide': '.:', //TODO find ideal solution\n\t  'mod': '\\\\mod',\n\t  'add': '+',\n\t  'subtract': '-',\n\t  'to': '\\\\rightarrow',\n\t  'leftShift': '<<',\n\t  'rightArithShift': '>>',\n\t  'rightLogShift': '>>>',\n\t  'equal': '=',\n\t  'unequal': '\\\\neq',\n\t  'smaller': '<',\n\t  'larger': '>',\n\t  'smallerEq': '\\\\leq',\n\t  'largerEq': '\\\\geq',\n\t  'bitAnd': '\\\\&',\n\t  'bitXor': '\\\\underline{|}',\n\t  'bitOr': '|',\n\t  'and': '\\\\wedge',\n\t  'xor': '\\\\veebar',\n\t  'or': '\\\\vee'\n\t};\nexports.defaultTemplate = '\\\\mathrm{${name}}\\\\left(${args}\\\\right)';\nvar units = {\n\t  deg: '^\\\\circ'\n\t};\n//@param {string} name\n\t//@param {boolean} isUnit\n\texports.toSymbol = function (name, isUnit) {\n\t  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n\t  if (isUnit) {\n\t    if (units.hasOwnProperty(name)) {\n\t      return units[name];\n\t    }\n\t    return '\\\\mathrm{' + name + '}';\n\t  }\n  if (exports.symbols.hasOwnProperty(name)) {\n\t    return exports.symbols[name];\n\t  }\n\t  else if (name.indexOf('_') !== -1) {\n\t    //symbol with index (eg. alpha_1)\n\t    var index = name.indexOf('_');\n\t    return exports.toSymbol(name.substring(0, index)) + '_{'\n\t      + exports.toSymbol(name.substring(index + 1)) + '}';\n\t  }\n\t  return name;\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:10575"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  // type\n\t  __webpack_require__(34),\n  // construction function\n\t  __webpack_require__(36)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:10685"
        },
        {
            "message": "Missing item type\nvar Fraction = __webpack_require__(35);\n/**\n\t * Attach type information",
            "line": " lib/math.js:10698"
        },
        {
            "message": "Missing item type\nGet a JSON representation of a Fraction containing type information",
            "line": " lib/math.js:10708"
        },
        {
            "message": "Missing item type\nInstantiate a Fraction from a JSON object",
            "line": " lib/math.js:10721"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:10741"
        },
        {
            "message": "Missing item type\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**\n\t * @license Fraction.js v3.3.1 09/09/2015\n\t * http://www.xarg.org/2014/03/precise-calculations-in-javascript/\n\t *\n\t * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n\t * Dual licensed under the MIT or GPL Version 2 licenses.",
            "line": " lib/math.js:10743"
        },
        {
            "message": "Missing item type\nThis class offers the possibility to calculate fractions.\n You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\nArray/Object form\n [ 0 => <nominator>, 1 => <denominator> ]\n [ n => <nominator>, d => <denominator> ]\nInteger form\n - Single integer value\nDouble form\n - Single double value\nString form\n 123.456 - a simple double\n 123/456 - a string fraction\n 123.'456' - a double with repeating decimal places\n 123.(456) - synonym\n 123.45'6' - a double with repeating last place\n 123.45(6) - synonym\nExample:\nvar f = new Fraction(\"9.4'31'\");\n f.mul([-4, 3]).div(4.9);",
            "line": " lib/math.js:10754"
        },
        {
            "message": "Missing item type\nModule constructor",
            "line": " lib/math.js:11044"
        },
        {
            "message": "Missing item type\nBoolean global variable to be able to disable automatic reduction of the fraction",
            "line": " lib/math.js:11070"
        },
        {
            "message": "Missing item type\nCalculates the absolute value\n\nEx: new Fraction(-4).abs() => 4",
            "line": " lib/math.js:11082"
        },
        {
            "message": "Missing item type\nInverts the sign of the current fraction\n\nEx: new Fraction(-4).neg() => 4",
            "line": " lib/math.js:11092"
        },
        {
            "message": "Missing item type\nAdds two rational numbers\n\nEx: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30",
            "line": " lib/math.js:11102"
        },
        {
            "message": "Missing item type\nSubtracts two rational numbers\n\nEx: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30",
            "line": " lib/math.js:11116"
        },
        {
            "message": "Missing item type\nMultiplies two rational numbers\n\nEx: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111",
            "line": " lib/math.js:11130"
        },
        {
            "message": "Missing item type\nDivides two rational numbers\n\nEx: new Fraction(\"-17.(345)\").inverse().div(3)",
            "line": " lib/math.js:11144"
        },
        {
            "message": "Missing item type\nClones the actual object\n\nEx: new Fraction(\"-17.(345)\").clone()",
            "line": " lib/math.js:11158"
        },
        {
            "message": "Missing item type\nCalculates the modulo of two rational numbers - a more precise fmod\n\nEx: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)",
            "line": " lib/math.js:11167"
        },
        {
            "message": "Missing item type\nCalculates the fractional gcd of two rational numbers\n\nEx: new Fraction(5,8).gcd(3,7) => 1/56",
            "line": " lib/math.js:11207"
        },
        {
            "message": "Missing item type\nCalculates the fractional lcm of two rational numbers\n\nEx: new Fraction(5,8).lcm(3,7) => 15",
            "line": " lib/math.js:11221"
        },
        {
            "message": "Missing item type\nCalculates the ceil of a rational number\n\nEx: new Fraction('4.(3)').ceil() => (5 / 1)",
            "line": " lib/math.js:11238"
        },
        {
            "message": "Missing item type\nCalculates the floor of a rational number\n\nEx: new Fraction('4.(3)').floor() => (4 / 1)",
            "line": " lib/math.js:11253"
        },
        {
            "message": "Missing item type\nRounds a rational numbers\n\nEx: new Fraction('4.(3)').round() => (4 / 1)",
            "line": " lib/math.js:11268"
        },
        {
            "message": "Missing item type\nGets the inverse of the fraction, means numerator and denumerator are exchanged\n\nEx: new Fraction([-3, 4]).inverse() => -4 / 3",
            "line": " lib/math.js:11283"
        },
        {
            "message": "Missing item type\nCalculates the fraction to some integer exponent\n\nEx: new Fraction(-1,2).pow(-3) => -8",
            "line": " lib/math.js:11293"
        },
        {
            "message": "Missing item type\nCheck if two rational numbers are the same\n\nEx: new Fraction(19.6).equals([98, 5]);",
            "line": " lib/math.js:11307"
        },
        {
            "message": "Missing item type\nCheck if two rational numbers are the same\n\nEx: new Fraction(19.6).equals([98, 5]);",
            "line": " lib/math.js:11318"
        },
        {
            "message": "Missing item type\nCheck if two rational numbers are divisible\n\nEx: new Fraction(19.6).divisible(1.5);",
            "line": " lib/math.js:11330"
        },
        {
            "message": "Missing item type\nReturns a decimal representation of the fraction\n\nEx: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183",
            "line": " lib/math.js:11341"
        },
        {
            "message": "Missing item type\nReturns a string-fraction representation of a Fraction object\n\nEx: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"",
            "line": " lib/math.js:11351"
        },
        {
            "message": "Missing item type\nReturns a latex representation of a Fraction object\n\nEx: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"",
            "line": " lib/math.js:11382"
        },
        {
            "message": "Missing item type\nReturns an array of continued fraction elements\n\nEx: new Fraction(\"7/8\").toContinued() => [0,1,7]",
            "line": " lib/math.js:11414"
        },
        {
            "message": "Missing item type\nCreates a string representation of a fraction with all digits\n\nEx: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"",
            "line": " lib/math.js:11436"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:11527"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a fraction convert a value to a fraction.\n\t   *\n\t   * Syntax:\n\t   *     math.fraction(numerator, denominator)\n\t   *     math.fraction({n: numerator, d: denominator})\n\t   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n\t   *                                                   into fractions\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.fraction(1, 3);\n\t   *     math.fraction('2/3');\n\t   *     math.fraction({n: 2, d: 3});\n\t   *     math.fraction([0.2, 0.25, 1.25]);\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, number, string, unit\n\t   *\n\t   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n\t   *            Arguments specifying the numerator and denominator of\n\t   *            the fraction\n\t   * @return {Fraction | Array | Matrix} Returns a fraction",
            "line": " lib/math.js:11529"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:11602"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  // types\n\t  __webpack_require__(38),\n\t  __webpack_require__(46),\n\t  __webpack_require__(47),\n\t  __webpack_require__(50),\n\t  __webpack_require__(59),\n\t  __webpack_require__(65),\n\t  __webpack_require__(66),\n\t  __webpack_require__(67),\n  // construction functions\n\t  __webpack_require__(68),\n\t  __webpack_require__(52),\n\t  __webpack_require__(69)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:11604"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\nvar isString = string.isString;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * @constructor Matrix\n\t   *\n\t   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n\t   * array. A matrix can be constructed as:\n\t   *     var matrix = math.matrix(data)\n\t   *\n\t   * Matrix contains the functions to resize, get and set values, get the size,\n\t   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n\t   * Furthermore, one can iterate over the matrix using map and forEach.\n\t   * The internal Array of the Matrix can be accessed using the function valueOf.\n\t   *\n\t   * Example usage:\n\t   *     var matrix = math.matrix([[1, 2], [3, 4]]);\n\t   *     matix.size();              // [2, 2]\n\t   *     matrix.resize([3, 2], 5);\n\t   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]\n\t   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n\t   *",
            "line": " lib/math.js:11626"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:11663"
        },
        {
            "message": "Missing item type\nGet the Matrix storage constructor for the given format.",
            "line": " lib/math.js:11669"
        },
        {
            "message": "Missing item type\nGet the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "line": " lib/math.js:11695"
        },
        {
            "message": "Missing item type\nGet the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "line": " lib/math.js:11708"
        },
        {
            "message": "Missing item type\nCreate a new Matrix With the type of the current matrix instance",
            "line": " lib/math.js:11721"
        },
        {
            "message": "Missing item type\nGet a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "line": " lib/math.js:11730"
        },
        {
            "message": "Missing item type\nGet a single element from the matrix.",
            "line": " lib/math.js:11748"
        },
        {
            "message": "Missing item type\nReplace a single element in the matrix.",
            "line": " lib/math.js:11758"
        },
        {
            "message": "Missing item type\nResize the matrix to the given size. Returns a copy of the matrix when \n`copy=true`, otherwise return the matrix itself (resize in place).",
            "line": " lib/math.js:11772"
        },
        {
            "message": "Missing item type\nCreate a clone of the matrix",
            "line": " lib/math.js:11789"
        },
        {
            "message": "Missing item type\nRetrieve the size of the matrix.",
            "line": " lib/math.js:11798"
        },
        {
            "message": "Missing item type\nCreate a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "line": " lib/math.js:11807"
        },
        {
            "message": "Missing item type\nExecute a callback function on each entry of the matrix.",
            "line": " lib/math.js:11822"
        },
        {
            "message": "Missing item type\nCreate an Array with a copy of the data of the Matrix",
            "line": " lib/math.js:11833"
        },
        {
            "message": "Missing item type\nGet the primitive value of the Matrix: a multidimensional array",
            "line": " lib/math.js:11842"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix, with optional formatting options.",
            "line": " lib/math.js:11851"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix",
            "line": " lib/math.js:11864"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:11882"
        },
        {
            "message": "Missing item type\n'use strict';\nexports.array = __webpack_require__(40);\n\texports['boolean'] = __webpack_require__(44);\n\texports['function'] = __webpack_require__(45);\n\texports.number = __webpack_require__(6);\n\texports.object = __webpack_require__(3);\n\texports.string = __webpack_require__(23);\n\texports.types = __webpack_require__(41);\n\texports.emitter = __webpack_require__(8);\n\n\n/***/ },",
            "line": " lib/math.js:11884"
        },
        {
            "message": "Missing item type\n'use strict';\nvar number = __webpack_require__(6);\n\tvar string = __webpack_require__(23);\n\tvar object = __webpack_require__(3);\n\tvar types = __webpack_require__(41);\nvar DimensionError = __webpack_require__(42);\n\tvar IndexError = __webpack_require__(43);\n/**\n\t * Calculate the size of a multi dimensional array.\n\t * This function checks the size of the first entry, it does not validate\n\t * whether all dimensions match. (use function `validate` for that)\n\t * @param {Array} x\n\t * @Return {Number[]} size",
            "line": " lib/math.js:11900"
        },
        {
            "message": "Missing item type\nRecursively validate whether each element in a multi dimensional array\nhas a size corresponding to the provided size array.",
            "line": " lib/math.js:11930"
        },
        {
            "message": "Missing item type\nValidate whether each element in a multi dimensional array has\na size corresponding to the provided size array.",
            "line": " lib/math.js:11968"
        },
        {
            "message": "Missing item type\nTest whether index is an integer number with index >= 0 and index < length\nwhen length is provided",
            "line": " lib/math.js:11989"
        },
        {
            "message": "Missing item type\nResize a multi dimensional array. The resized array is returned.",
            "line": " lib/math.js:12007"
        },
        {
            "message": "Missing item type\nRecursively resize a multi dimensional array",
            "line": " lib/math.js:12042"
        },
        {
            "message": "Missing item type\nSqueeze a multi dimensional array",
            "line": " lib/math.js:12105"
        },
        {
            "message": "Missing item type\nRecursively squeeze a multi dimensional array",
            "line": " lib/math.js:12135"
        },
        {
            "message": "Missing item type\nUnsqueeze a multi dimensional array: add dimensions when missing\n\nParamter `size` will be mutated to match the new, unqueezed matrix size.",
            "line": " lib/math.js:12161"
        },
        {
            "message": "Missing item type\nRecursively unsqueeze a multi dimensional array",
            "line": " lib/math.js:12193"
        },
        {
            "message": "Missing item type\nFlatten a multi dimensional array, put all elements in a one dimensional\narray",
            "line": " lib/math.js:12218"
        },
        {
            "message": "Missing item type\nTest whether an object is an array",
            "line": " lib/math.js:12243"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:12251"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Determine the type of a variable\n\t *\n\t *     type(x)\n\t *\n\t * The following types are recognized:\n\t *\n\t *     'undefined'\n\t *     'null'\n\t *     'boolean'\n\t *     'number'\n\t *     'string'\n\t *     'Array'\n\t *     'Function'\n\t *     'Date'\n\t *     'RegExp'\n\t *     'Object'\n\t *\n\t * @param {*} x\n\t * @return {string} Returns the name of the type. Primitive types are lower case,\n\t *                  non-primitive types are upper-camel-case.\n\t *                  For example 'number', 'string', 'Array', 'Date'.",
            "line": " lib/math.js:12253"
        },
        {
            "message": "Missing item type\nTest whether a value is a scalar",
            "line": " lib/math.js:12300"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:12311"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Create a range error with the message:\n\t *     'Dimension mismatch (<actual size> != <expected size>)'\n\t * @param {number | number[]} actual        The actual size\n\t * @param {number | number[]} expected      The expected size\n\t * @param {string} [relation='!=']          Optional relation between actual\n\t *                                          and expected size: '!=', '<', etc.\n\t * @extends RangeError",
            "line": " lib/math.js:12313"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:12352"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Create a range error with the message:\n\t *     'Index out of range (index < min)'\n\t *     'Index out of range (index < max)'\n\t *\n\t * @param {number} index     The actual index\n\t * @param {number} [min=0]   Minimum index (included)\n\t * @param {number} [max]     Maximum index (excluded)\n\t * @extends RangeError",
            "line": " lib/math.js:12354"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:12404"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Test whether value is a boolean\n\t * @param {*} value\n\t * @return {boolean} isBoolean",
            "line": " lib/math.js:12406"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:12420"
        },
        {
            "message": "Missing item type\n// function utils\n/*\n\t * Memoize a given function by caching the computed result.\n\t * The cache of a memoized function can be cleared by deleting the `cache`\n\t * property of the function.\n\t *\n\t * @param {function} fn                     The function to be memoized.\n\t *                                          Must be a pure function.\n\t * @param {function(args: Array)} [hasher]  A custom hash builder.\n\t *                                          Is JSON.stringify by default.\n\t * @return {function}                       Returns the memoized function",
            "line": " lib/math.js:12422"
        },
        {
            "message": "Missing item type\nFind the maximum number of arguments expected by a typed function.",
            "line": " lib/math.js:12456"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:12471"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\n\tvar DimensionError = __webpack_require__(42);\nvar string = util.string;\n\tvar array = util.array;\n\tvar object = util.object;\n\tvar number = util.number;\nvar isArray = Array.isArray;\n\tvar isNumber = number.isNumber;\n\tvar isInteger = number.isInteger;\n\tvar isString = string.isString;\nvar validateIndex = array.validateIndex;\nfunction factory (type, config, load, typed) {\n\t  var Matrix = load(__webpack_require__(38)); // force loading Matrix (do not use via type.Matrix)\n  /**\n\t   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n\t   * @class DenseMatrix",
            "line": " lib/math.js:12473"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:12550"
        },
        {
            "message": "Missing item type\nGet the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "line": " lib/math.js:12556"
        },
        {
            "message": "Missing item type\nGet the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "line": " lib/math.js:12569"
        },
        {
            "message": "Missing item type\nCreate a new DenseMatrix",
            "line": " lib/math.js:12582"
        },
        {
            "message": "Missing item type\nGet a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "line": " lib/math.js:12592"
        },
        {
            "message": "Missing item type\nGet a single element from the matrix.",
            "line": " lib/math.js:12621"
        },
        {
            "message": "Missing item type\nReplace a single element in the matrix.",
            "line": " lib/math.js:12647"
        },
        {
            "message": "Missing item type\nGet a submatrix of this matrix",
            "line": " lib/math.js:12687"
        },
        {
            "message": "Missing item type\nRecursively get a submatrix of a multi dimensional matrix.\nIndex is not checked for correct number or length of dimensions.",
            "line": " lib/math.js:12725"
        },
        {
            "message": "Missing item type\nReplace a submatrix in this matrix\nIndexes are zero-based.",
            "line": " lib/math.js:12753"
        },
        {
            "message": "Missing item type\nReplace a submatrix of a multi dimensional matrix.",
            "line": " lib/math.js:12838"
        },
        {
            "message": "Missing item type\nResize the matrix to the given size. Returns a copy of the matrix when\n`copy=true`, otherwise return the matrix itself (resize in place).",
            "line": " lib/math.js:12866"
        },
        {
            "message": "Missing item type\nEnlarge the matrix when it is smaller than given size.\nIf the matrix is larger or equal sized, nothing is done.",
            "line": " lib/math.js:12908"
        },
        {
            "message": "Missing item type\nCreate a clone of the matrix",
            "line": " lib/math.js:12941"
        },
        {
            "message": "Missing item type\nRetrieve the size of the matrix.",
            "line": " lib/math.js:12955"
        },
        {
            "message": "Missing item type\nCreate a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "line": " lib/math.js:12964"
        },
        {
            "message": "Missing item type\nExecute a callback function on each entry of the matrix.",
            "line": " lib/math.js:12995"
        },
        {
            "message": "Missing item type\nCreate an Array with a copy of the data of the DenseMatrix",
            "line": " lib/math.js:13018"
        },
        {
            "message": "Missing item type\nGet the primitive value of the DenseMatrix: a multidimensional array",
            "line": " lib/math.js:13027"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix, with optional formatting options.",
            "line": " lib/math.js:13036"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix",
            "line": " lib/math.js:13049"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the matrix",
            "line": " lib/math.js:13058"
        },
        {
            "message": "Missing item type\nGet the kth Matrix diagonal.",
            "line": " lib/math.js:13072"
        },
        {
            "message": "Missing item type\nCreate a diagonal matrix.",
            "line": " lib/math.js:13122"
        },
        {
            "message": "Missing item type\nGenerate a matrix from a JSON object",
            "line": " lib/math.js:13247"
        },
        {
            "message": "Missing item type\nSwap rows i and j in Matrix.",
            "line": " lib/math.js:13259"
        },
        {
            "message": "Missing item type\nSwap rows i and j in Dense Matrix data structure.",
            "line": " lib/math.js:13287"
        },
        {
            "message": "Missing item type\nPreprocess data, which can be an Array or DenseMatrix with nested Arrays and\nMatrices. Replaces all nested Matrices with Arrays",
            "line": " lib/math.js:13300"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:13334"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\n\tvar DimensionError = __webpack_require__(42);\nvar array = util.array;\n\tvar object = util.object;\n\tvar string = util.string;\n\tvar number = util.number;\nvar isArray = Array.isArray;\n\tvar isNumber = number.isNumber;\n\tvar isInteger = number.isInteger;\n\tvar isString = string.isString;\nvar validateIndex = array.validateIndex;\nfunction factory (type, config, load, typed) {\n\t  var Matrix = load(__webpack_require__(38)); // force loading Matrix (do not use via type.Matrix)\n\t  var equalScalar = load(__webpack_require__(48));\n  /**\n\t   * Sparse Matrix implementation. This type implements a Compressed Column Storage format\n\t   * for sparse matrices.\n\t   * @class SparseMatrix",
            "line": " lib/math.js:13336"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:13493"
        },
        {
            "message": "Missing item type\nGet the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "line": " lib/math.js:13499"
        },
        {
            "message": "Missing item type\nGet the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "line": " lib/math.js:13512"
        },
        {
            "message": "Missing item type\nCreate a new SparseMatrix",
            "line": " lib/math.js:13525"
        },
        {
            "message": "Missing item type\nGet the matrix density.\n\nUsage:\n    var density = matrix.density()                   // retrieve matrix density",
            "line": " lib/math.js:13535"
        },
        {
            "message": "Missing item type\nGet a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "line": " lib/math.js:13552"
        },
        {
            "message": "Missing item type\nGet a single element from the matrix.",
            "line": " lib/math.js:13751"
        },
        {
            "message": "Missing item type\nReplace a single element in the matrix.",
            "line": " lib/math.js:13784"
        },
        {
            "message": "Missing item type\nResize the matrix to the given size. Returns a copy of the matrix when \n`copy=true`, otherwise return the matrix itself (resize in place).",
            "line": " lib/math.js:13892"
        },
        {
            "message": "Missing item type\nCreate a clone of the matrix",
            "line": " lib/math.js:14046"
        },
        {
            "message": "Missing item type\nRetrieve the size of the matrix.",
            "line": " lib/math.js:14062"
        },
        {
            "message": "Missing item type\nCreate a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "line": " lib/math.js:14071"
        },
        {
            "message": "Missing item type\nCreate a new matrix with the results of the callback function executed on the interval\n[minRow..maxRow, minColumn..maxColumn].",
            "line": " lib/math.js:14100"
        },
        {
            "message": "Missing item type\nExecute a callback function on each entry of the matrix.",
            "line": " lib/math.js:14177"
        },
        {
            "message": "Missing item type\nCreate an Array with a copy of the data of the SparseMatrix",
            "line": " lib/math.js:14225"
        },
        {
            "message": "Missing item type\nGet the primitive value of the SparseMatrix: a two dimensions array",
            "line": " lib/math.js:14234"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix, with optional formatting options.",
            "line": " lib/math.js:14274"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix",
            "line": " lib/math.js:14307"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the matrix",
            "line": " lib/math.js:14316"
        },
        {
            "message": "Missing item type\nGet the kth Matrix diagonal.",
            "line": " lib/math.js:14332"
        },
        {
            "message": "Missing item type\nGenerate a matrix from a JSON object",
            "line": " lib/math.js:14403"
        },
        {
            "message": "Missing item type\nCreate a diagonal matrix.",
            "line": " lib/math.js:14415"
        },
        {
            "message": "Missing item type\nSwap rows i and j in Matrix.",
            "line": " lib/math.js:14556"
        },
        {
            "message": "Missing item type\nLoop rows with data in column j.",
            "line": " lib/math.js:14584"
        },
        {
            "message": "Missing item type\nSwap rows x and y in Sparse Matrix data structures.",
            "line": " lib/math.js:14604"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:14678"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t  \n\t  /**\n\t   * Test whether two values are equal.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n\t   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n\t   * @private",
            "line": " lib/math.js:14680"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:14737"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Compares two BigNumbers.\n\t * @param {BigNumber} x       First value to compare\n\t * @param {BigNumber} y       Second value to compare\n\t * @param {number} [epsilon]  The maximum relative difference between x and y\n\t *                            If epsilon is undefined or null, the function will\n\t *                            test whether x and y are exactly equal.\n\t * @return {boolean} whether the two numbers are nearly equal",
            "line": " lib/math.js:14739"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:14788"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n\t  \n\t  var add = load(__webpack_require__(51));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  \n\t  /**\n\t   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array \n\t   * of the vector elements and an ordered list of non-zero elements.",
            "line": " lib/math.js:14790"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:14812"
        },
        {
            "message": "Missing item type\nSet the value for index i.",
            "line": " lib/math.js:14818"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:14935"
        },
        {
            "message": "Missing item type\n'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var latex = __webpack_require__(32);\n\t  \n\t  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm04 = load(__webpack_require__(55));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Add two or more values, `x + y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.add(x, y)\n\t   *    math.add(x, y, z, ...)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.add(2, 3);               // returns number 5\n\t   *    math.add(2, 3, 4);            // returns number 9\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    var b = math.complex(-4, 1);\n\t   *    math.add(a, b);               // returns Complex -2 + 4i\n\t   *\n\t   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\t   *\n\t   *    var c = math.unit('5 cm');\n\t   *    var d = math.unit('2.1 mm');\n\t   *    math.add(c, d);               // returns Unit 52.1 mm\n\t   *\n\t   *    math.add(\"2.3\", \"4\");         // returns number 6.3\n\t   *\n\t   * See also:\n\t   *\n\t   *    subtract, sum\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`",
            "line": " lib/math.js:14937"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:15105"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a Matrix. The function creates a new `math.type.Matrix` object from\n\t   * an `Array`. A Matrix has utility functions to manipulate the data in the\n\t   * matrix, like getting the size and getting or setting values in the matrix.\n\t   * Supported storage formats are 'dense' and 'sparse'.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n\t   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n\t   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n\t   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n\t   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n\t   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var m = math.matrix([[1, 2], [3, 4]]);\n\t   *    m.size();                        // Array [2, 2]\n\t   *    m.resize([3, 2], 5);\n\t   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n\t   *    m.get([1, 0])                    // number 3\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, number, string, unit, sparse\n\t   *\n\t   * @param {Array | Matrix} [data]    A multi dimensional array\n\t   * @param {string} [format]          The Matrix storage format\n\t   *\n\t   * @return {Matrix} The created matrix",
            "line": " lib/math.js:15107"
        },
        {
            "message": "Missing item type\nCreate a new Matrix with given storage format",
            "line": " lib/math.js:15178"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:15199"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory(type, config, load, typed) {\n  /**\n\t   * Add two scalar values, `x + y`.\n\t   * This function is meant for internal use: it is used by the public function\n\t   * `add`\n\t   *\n\t   * This function does not support collections (Array or Matrix), and does\n\t   * not validate the number of of inputs.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n\t   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`\n\t   * @private",
            "line": " lib/math.js:15201"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:15256"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n\t   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n\t   *\n\t   *\n\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤\n\t   *          └  Dij          ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "line": " lib/math.js:15258"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:15376"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n\t   *          └  B(i,j)       ; B(i,j) !== 0\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " lib/math.js:15378"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:15569"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t   * Callback function invoked NZ times (number of nonzero items in S).\n\t   *\n\t   *\n\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  b          ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "line": " lib/math.js:15571"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:15685"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\n\tvar DimensionError = __webpack_require__(42);\nvar string = util.string,\n\t    isString = string.isString;\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   * C(i,j,...z) = f(Aij..z, Bij..z)\n\t   *\n\t   * @param {Matrix}   a                 The DenseMatrix instance (A)\n\t   * @param {Matrix}   b                 The DenseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658",
            "line": " lib/math.js:15687"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:15795"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   * C(i,j,...z) = f(Aij..z, b)\n\t   *\n\t   * @param {Matrix}   a                 The DenseMatrix instance (A)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042",
            "line": " lib/math.js:15797"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:15883"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  \n\t  var smaller = load(__webpack_require__(60));\n\t  var larger = load(__webpack_require__(64));\n\t  \n\t  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\t  \n\t  /**\n\t   * Fibonacci Heap implementation, used interally for Matrix math.\n\t   * @class FibonacciHeap\n\t   * @constructor FibonacciHeap",
            "line": " lib/math.js:15885"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:15910"
        },
        {
            "message": "Missing item type\nInserts a new data element into the heap. No heap consolidation is\nperformed at this time, the new node is simply inserted into the root\nlist of this heap. Running time: O(1) actual.",
            "line": " lib/math.js:15916"
        },
        {
            "message": "Missing item type\nReturns the number of nodes in heap. Running time: O(1) actual.",
            "line": " lib/math.js:15957"
        },
        {
            "message": "Missing item type\nRemoves all elements from this heap.",
            "line": " lib/math.js:15965"
        },
        {
            "message": "Missing item type\nReturns true if the heap is empty, otherwise false.",
            "line": " lib/math.js:15974"
        },
        {
            "message": "Missing item type\nExtracts the node with minimum key from heap. Amortized running \ntime: O(log n).",
            "line": " lib/math.js:15982"
        },
        {
            "message": "Missing item type\nRemoves a node from the heap given the reference to the node. The trees\nin the heap will be consolidated, if necessary. This operation may fail\nto remove the correct element if there are nodes with key value -Infinity.\nRunning time: O(log n) amortized.",
            "line": " lib/math.js:16038"
        },
        {
            "message": "Missing item type\nDecreases the key value for a heap node, given the new value to take on.\nThe structure of the heap may be changed and will not be consolidated. \nRunning time: O(1) amortized.",
            "line": " lib/math.js:16052"
        },
        {
            "message": "Missing item type\nThe reverse of the link operation: removes node from the child list of parent.\nThis method assumes that min is non-null. Running time: O(1).",
            "line": " lib/math.js:16076"
        },
        {
            "message": "Missing item type\nPerforms a cascading cut operation. This cuts node from its parent and then\ndoes the same for its parent, and so on up the tree.\nRunning time: O(log n); O(1) excluding the recursion.",
            "line": " lib/math.js:16103"
        },
        {
            "message": "Missing item type\nMake the first node a child of the second one. Running time: O(1) actual.",
            "line": " lib/math.js:16127"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:16238"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether value x is smaller than y.\n\t   *\n\t   * The function returns true when x is smaller than y and the relative\n\t   * difference between x and y is smaller than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.smaller(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.smaller(2, 3);            // returns true\n\t   *    math.smaller(5, 2 * 2);        // returns false\n\t   *\n\t   *    var a = math.unit('5 cm');\n\t   *    var b = math.unit('2 inch');\n\t   *    math.smaller(a, b);            // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false",
            "line": " lib/math.js:16240"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:16423"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n\t   * Callback function invoked M*N times.\n\t   *\n\t   *\n\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤\n\t   *          └  f(Dij, 0)    ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "line": " lib/math.js:16425"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:16554"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   * C(i,j) = f(Aij, Bij)\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " lib/math.js:16556"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:16684"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t   * Callback function invoked MxN times.\n\t   *\n\t   *\n\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  f(0, b)    ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t   *\n\t   * @return {Matrix}                    DenseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "line": " lib/math.js:16686"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:16800"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether value x is larger than y.\n\t   *\n\t   * The function returns true when x is larger than y and the relative\n\t   * difference between x and y is larger than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.larger(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.larger(2, 3);             // returns false\n\t   *    math.larger(5, 2 + 2);         // returns true\n\t   *\n\t   *    var a = math.unit('5 cm');\n\t   *    var b = math.unit('2 inch');\n\t   *    math.larger(a, b);             // returns false\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, smallerEq, largerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false",
            "line": " lib/math.js:16802"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:16985"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\n\tvar object = util.object;\nvar isArray = Array.isArray;\n\tvar isString = string.isString;\nfunction factory (type, config, load) {\n  var DenseMatrix = load(__webpack_require__(46));\n  var smaller = load(__webpack_require__(60));\n  function ImmutableDenseMatrix(data, datatype) {\n\t    if (!(this instanceof ImmutableDenseMatrix))\n\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t    if (datatype && !isString(datatype))\n\t      throw new Error('Invalid datatype: ' + datatype);\n    if ((data && data.isMatrix === true) || isArray(data)) {\n\t      // use DenseMatrix implementation\n\t      var matrix = new DenseMatrix(data, datatype);\n\t      // internal structures\n\t      this._data = matrix._data;\n\t      this._size = matrix._size;\n\t      this._datatype = matrix._datatype;\n\t      this._min = null;\n\t      this._max = null;\n\t    }\n\t    else if (data && isArray(data.data) && isArray(data.size)) {\n\t      // initialize fields from JSON representation\n\t      this._data = data.data;\n\t      this._size = data.size;\n\t      this._datatype = data.datatype;\n\t      this._min = typeof data.min !== 'undefined' ? data.min : null;\n\t      this._max = typeof data.max !== 'undefined' ? data.max : null;\n\t    }\n\t    else if (data) {\n\t      // unsupported type\n\t      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n\t    }\n\t    else {\n\t      // nothing provided\n\t      this._data = [];\n\t      this._size = [0];\n\t      this._datatype = datatype;\n\t      this._min = null;\n\t      this._max = null;\n\t    }\n\t  }\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n  /**\n\t   * Attach type information",
            "line": " lib/math.js:16987"
        },
        {
            "message": "Missing item type\nGet a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "line": " lib/math.js:17051"
        },
        {
            "message": "Missing item type\nReplace a single element in the matrix.",
            "line": " lib/math.js:17090"
        },
        {
            "message": "Missing item type\nResize the matrix to the given size. Returns a copy of the matrix when\n`copy=true`, otherwise return the matrix itself (resize in place).",
            "line": " lib/math.js:17103"
        },
        {
            "message": "Missing item type\nCreate a clone of the matrix",
            "line": " lib/math.js:17119"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the matrix",
            "line": " lib/math.js:17132"
        },
        {
            "message": "Missing item type\nGenerate a matrix from a JSON object",
            "line": " lib/math.js:17145"
        },
        {
            "message": "Missing item type\nSwap rows i and j in Matrix.",
            "line": " lib/math.js:17156"
        },
        {
            "message": "Missing item type\nCalculate the minimum value in the set",
            "line": " lib/math.js:17168"
        },
        {
            "message": "Missing item type\nCalculate the maximum value in the set",
            "line": " lib/math.js:17187"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:17215"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type) {\n\t  \n\t  /**\n\t   * Create an index. An Index can store ranges and sets for multiple dimensions.\n\t   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n\t   *\n\t   * Usage:\n\t   *     var index = new Index(range1, range2, matrix1, array1, ...);\n\t   *\n\t   * Where each parameter can be any of:\n\t   *     A number\n\t   *     A string (containing a name of an object property)\n\t   *     An instance of Range\n\t   *     An Array with the Set values\n\t   *     A Matrix with the Set values\n\t   *\n\t   * The parameters start, end, and step must be integer numbers.\n\t   *\n\t   * @class Index\n\t   * @Constructor Index\n\t   * @param {...*} ranges",
            "line": " lib/math.js:17217"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:17286"
        },
        {
            "message": "Missing item type\nCreate a clone of the index",
            "line": " lib/math.js:17303"
        },
        {
            "message": "Missing item type\nCreate an index from an array with ranges/numbers",
            "line": " lib/math.js:17315"
        },
        {
            "message": "Missing item type\nRetrieve the size of the index, the number of elements for each dimension.",
            "line": " lib/math.js:17328"
        },
        {
            "message": "Missing item type\nGet the maximum value for each of the indexes ranges.",
            "line": " lib/math.js:17344"
        },
        {
            "message": "Missing item type\nGet the minimum value for each of the indexes ranges.",
            "line": " lib/math.js:17360"
        },
        {
            "message": "Missing item type\nLoop over each of the ranges of the index",
            "line": " lib/math.js:17376"
        },
        {
            "message": "Missing item type\nRetrieve the dimension for the given index",
            "line": " lib/math.js:17389"
        },
        {
            "message": "Missing item type\nTest whether this index contains an object property",
            "line": " lib/math.js:17399"
        },
        {
            "message": "Missing item type\nReturns the object property name when the Index holds a single object property,\nelse returns null",
            "line": " lib/math.js:17407"
        },
        {
            "message": "Missing item type\nTest whether this index contains only a single value.\n\nThis is the case when the index is created with only scalar values as ranges,\nnot for ranges resolving into a single value.",
            "line": " lib/math.js:17416"
        },
        {
            "message": "Missing item type\nExpand the Index into an array.\nFor example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]",
            "line": " lib/math.js:17428"
        },
        {
            "message": "Missing item type\nGet the primitive value of the Index, a two dimensional array.\nEquivalent to Index.toArray().",
            "line": " lib/math.js:17443"
        },
        {
            "message": "Missing item type\nGet the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'",
            "line": " lib/math.js:17451"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the Index",
            "line": " lib/math.js:17472"
        },
        {
            "message": "Missing item type\nInstantiate an Index from a JSON object",
            "line": " lib/math.js:17485"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:17504"
        },
        {
            "message": "Missing item type\n'use strict';\nvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a range. A range has a start, step, and end, and contains functions\n\t   * to iterate over the range.\n\t   *\n\t   * A range can be constructed as:\n\t   *     var range = new Range(start, end);\n\t   *     var range = new Range(start, end, step);\n\t   *\n\t   * To get the result of the range:\n\t   *     range.forEach(function (x) {\n\t   *         console.log(x);\n\t   *     });\n\t   *     range.map(function (x) {\n\t   *         return math.sin(x);\n\t   *     });\n\t   *     range.toArray();\n\t   *\n\t   * Example usage:\n\t   *     var c = new Range(2, 6);         // 2:1:5\n\t   *     c.toArray();                     // [2, 3, 4, 5]\n\t   *     var d = new Range(2, -3, -1);    // 2:-1:-2\n\t   *     d.toArray();                     // [2, 1, 0, -1, -2]\n\t   *\n\t   * @class Range\n\t   * @constructor Range\n\t   * @param {number} start  included lower bound\n\t   * @param {number} end    excluded upper bound\n\t   * @param {number} [step] step size, default value is 1",
            "line": " lib/math.js:17506"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:17571"
        },
        {
            "message": "Missing item type\nParse a string into a range,\nThe string contains the start, optional step, and end, separated by a colon.\nIf the string does not contain a valid range, null is returned.\nFor example str='0:2:11'.",
            "line": " lib/math.js:17577"
        },
        {
            "message": "Missing item type\nCreate a clone of the range",
            "line": " lib/math.js:17613"
        },
        {
            "message": "Missing item type\nRetrieve the size of the range.\nReturns an array containing one number, the number of elements in the range.",
            "line": " lib/math.js:17621"
        },
        {
            "message": "Missing item type\nCalculate the minimum value in the range",
            "line": " lib/math.js:17647"
        },
        {
            "message": "Missing item type\nCalculate the maximum value in the range",
            "line": " lib/math.js:17670"
        },
        {
            "message": "Missing item type\nExecute a callback function for each value in the range.",
            "line": " lib/math.js:17694"
        },
        {
            "message": "Missing item type\nExecute a callback function for each value in the Range, and return the\nresults as an array",
            "line": " lib/math.js:17723"
        },
        {
            "message": "Missing item type\nCreate an Array with a copy of the Ranges data",
            "line": " lib/math.js:17740"
        },
        {
            "message": "Missing item type\nGet the primitive value of the Range, a one dimensional array",
            "line": " lib/math.js:17753"
        },
        {
            "message": "Missing item type\nGet a string representation of the range, with optional formatting options.\nOutput is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'",
            "line": " lib/math.js:17763"
        },
        {
            "message": "Missing item type\nGet a string representation of the range.",
            "line": " lib/math.js:17783"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the range",
            "line": " lib/math.js:17792"
        },
        {
            "message": "Missing item type\nInstantiate a Range from a JSON object",
            "line": " lib/math.js:17807"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:17826"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create an index. An Index can store ranges having start, step, and end\n\t   * for multiple dimensions.\n\t   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.index(range1, range2, ...)\n\t   *\n\t   * Where each range can be any of:\n\t   *\n\t   * - A number\n\t   * - A string for getting/setting an object property\n\t   * - An instance of `Range`\n\t   * - A one-dimensional Array or a Matrix with numbers\n\t   *\n\t   * Indexes must be zero-based, integer numbers.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var math = math.js\n\t   *\n\t   *    var b = [1, 2, 3, 4, 5];\n\t   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]\n\t   *\n\t   *    var a = math.matrix([[1, 2], [3, 4]]);\n\t   *    a.subset(math.index(0, 1));             // returns 2\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, matrix, number, string, unit\n\t   *\n\t   * @param {...*} ranges   Zero or more ranges or numbers.\n\t   * @return {Index}        Returns the created index",
            "line": " lib/math.js:17828"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:17896"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from\n\t   * an `Array`. A Matrix has utility functions to manipulate the data in the\n\t   * matrix, like getting the size and getting or setting values in the matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sparse()               // creates an empty sparse matrix.\n\t   *    math.sparse(data)           // creates a sparse matrix with initial data.\n\t   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var m = math.sparse([[1, 2], [3, 4]]);\n\t   *    m.size();                        // Array [2, 2]\n\t   *    m.resize([3, 2], 5);\n\t   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n\t   *    m.get([1, 0])                    // number 3\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, number, string, unit, matrix\n\t   *\n\t   * @param {Array | Matrix} [data]    A two dimensional array\n\t   *\n\t   * @return {Matrix} The created matrix",
            "line": " lib/math.js:17898"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:17963"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a number or convert a string, boolean, or unit to a number.\n\t   * When value is a matrix, all elements will be converted to number.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.number(value)\n\t   *    math.number(unit, valuelessUnit)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.number(2);                         // returns number 2\n\t   *    math.number('7.2');                     // returns number 7.2\n\t   *    math.number(true);                      // returns number 1\n\t   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]\n\t   *    math.number(math.unit('52cm'), 'm');    // returns 0.52\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, matrix, string, unit\n\t   *\n\t   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n\t   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n\t   * @return {number | Array | Matrix} The created number",
            "line": " lib/math.js:17965"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:18048"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  // type\n\t  __webpack_require__(72)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:18050"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * A ResultSet contains a list or results\n\t   * @class ResultSet\n\t   * @param {Array} entries\n\t   * @constructor ResultSet",
            "line": " lib/math.js:18060"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:18079"
        },
        {
            "message": "Missing item type\nReturns the array with results hold by this ResultSet",
            "line": " lib/math.js:18085"
        },
        {
            "message": "Missing item type\nReturns the stringified results of the ResultSet",
            "line": " lib/math.js:18094"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the ResultSet",
            "line": " lib/math.js:18103"
        },
        {
            "message": "Missing item type\nInstantiate a ResultSet from a JSON object",
            "line": " lib/math.js:18116"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:18135"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a string or convert any object into a string.\n\t   * Elements of Arrays and Matrices are processed element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.string(value)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.string(4.2);               // returns string '4.2'\n\t   *    math.string(math.complex(3, 2); // returns string '3 + 2i'\n\t   *\n\t   *    var u = math.unit(5, 'km');\n\t   *    math.string(u.to('m'));         // returns string '5000 m'\n\t   *\n\t   *    math.string([true, false]);     // returns ['true', 'false']\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, matrix, number, unit\n\t   *\n\t   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n\t   * @return {string | Array | Matrix} The created string",
            "line": " lib/math.js:18137"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:18210"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  // type\n\t  __webpack_require__(75),\n  // construction function\n\t  __webpack_require__(96),\n  // create new units\n\t  __webpack_require__(97),\n  // split units\n\t  __webpack_require__(98),\n  // physical constants\n\t  __webpack_require__(99)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:18212"
        },
        {
            "message": "Missing item type\n'use strict';\nvar endsWith = __webpack_require__(23).endsWith;\n\tvar clone = __webpack_require__(3).clone;\n\tvar constants = __webpack_require__(76);\nfunction factory (type, config, load, typed, math) {\n\t  var add       = load(__webpack_require__(53));\n\t  var subtract  = load(__webpack_require__(77));\n\t  var multiply  = load(__webpack_require__(80));\n\t  var divide    = load(__webpack_require__(81));\n\t  var pow       = load(__webpack_require__(82));\n\t  var abs       = load(__webpack_require__(86));\n\t  var fix       = load(__webpack_require__(87));\n\t  var equal     = load(__webpack_require__(88));\n\t  var isNumeric = load(__webpack_require__(89));\n\t  var format    = load(__webpack_require__(90));\n\t  var getTypeOf = load(__webpack_require__(91));\n\t  var toNumber  = load(__webpack_require__(70));\n\t  var Complex   = load(__webpack_require__(27));\n  /**\n\t   * A unit can be constructed in the following ways:\n\t   *     var a = new Unit(value, name);\n\t   *     var b = new Unit(null, name);\n\t   *     var c = Unit.parse(str);\n\t   *\n\t   * Example usage:\n\t   *     var a = new Unit(5, 'cm');               // 50 mm\n\t   *     var b = Unit.parse('23 kg');             // 23 kg\n\t   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m\n\t   *     var d = new Unit(9.81, \"m/s^2\");         // 9.81 m/s^2\n\t   *\n\t   * @class Unit\n\t   * @constructor Unit\n\t   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n\t   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.",
            "line": " lib/math.js:18234"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:18317"
        },
        {
            "message": "Missing item type\nParse a string into a unit. The value of the unit is parsed as number,\nBigNumber, or Fraction depending on the math.js config setting `number`.\n\nThrows an exception if the provided string does not contain a valid unit or\ncannot be parsed.",
            "line": " lib/math.js:18461"
        },
        {
            "message": "Missing item type\ncreate a copy of this unit",
            "line": " lib/math.js:18647"
        },
        {
            "message": "Missing item type\nReturn whether the unit is derived (such as m/s, or cm^2, but not N)",
            "line": " lib/math.js:18673"
        },
        {
            "message": "Missing item type\nNormalize a value, based on its currently set unit(s)",
            "line": " lib/math.js:18685"
        },
        {
            "message": "Missing item type\nDenormalize a value, based on its currently set unit(s)",
            "line": " lib/math.js:18726"
        },
        {
            "message": "Missing item type\nFind a unit from a string",
            "line": " lib/math.js:18774"
        },
        {
            "message": "Missing item type\nTest if the given expression is a unit.\nThe unit can have a prefix but cannot have a value.",
            "line": " lib/math.js:18815"
        },
        {
            "message": "Missing item type\ncheck if this unit has given base unit\nIf this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.",
            "line": " lib/math.js:18827"
        },
        {
            "message": "Missing item type\nCheck if this unit has a base or bases equal to another base or bases\nFor derived units, the exponent on each base also must match",
            "line": " lib/math.js:18853"
        },
        {
            "message": "Missing item type\nCheck if this unit equals another unit",
            "line": " lib/math.js:18870"
        },
        {
            "message": "Missing item type\nMultiply this unit with another one",
            "line": " lib/math.js:18880"
        },
        {
            "message": "Missing item type\nDivide this unit by another one",
            "line": " lib/math.js:18920"
        },
        {
            "message": "Missing item type\nCalculate the power of a unit",
            "line": " lib/math.js:18961"
        },
        {
            "message": "Missing item type\nReturn the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise",
            "line": " lib/math.js:18999"
        },
        {
            "message": "Missing item type\nCalculate the absolute value of a unit",
            "line": " lib/math.js:19014"
        },
        {
            "message": "Missing item type\nConvert the unit to a specific unit name.",
            "line": " lib/math.js:19035"
        },
        {
            "message": "Missing item type\nReturn the value of the unit when represented with given valueless unit",
            "line": " lib/math.js:19077"
        },
        {
            "message": "Missing item type\nReturn the value of the unit in the original numeric type",
            "line": " lib/math.js:19088"
        },
        {
            "message": "Missing item type\nGet a string representation of the unit.",
            "line": " lib/math.js:19109"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the unit",
            "line": " lib/math.js:19118"
        },
        {
            "message": "Missing item type\nInstantiate a Unit from a JSON object",
            "line": " lib/math.js:19133"
        },
        {
            "message": "Missing item type\nReturns the string representation of the unit.",
            "line": " lib/math.js:19146"
        },
        {
            "message": "Missing item type\nAttempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the \"best\" units for formatting.\nIntended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.",
            "line": " lib/math.js:19153"
        },
        {
            "message": "Missing item type\nGet a string representation of the units of this Unit, without the value.",
            "line": " lib/math.js:19228"
        },
        {
            "message": "Missing item type\nGet a string representation of the Unit, with optional formatting options.",
            "line": " lib/math.js:19293"
        },
        {
            "message": "Missing item type\nCalculate the best prefix using current value.",
            "line": " lib/math.js:19354"
        },
        {
            "message": "Missing item type\nReturns an array of units whose sum is equal to this unit",
            "line": " lib/math.js:19409"
        },
        {
            "message": "Missing item type\nCalculate the values for the angle units.\nValue is calculated as number or BigNumber depending on the configuration",
            "line": " lib/math.js:20993"
        },
        {
            "message": "Missing item type\nA unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\nA user perhaps could issue a command to select a preferred unit system, or use the default (see below).\nAuto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.",
            "line": " lib/math.js:21028"
        },
        {
            "message": "Missing item type\nSet a unit system for formatting derived units.",
            "line": " lib/math.js:21092"
        },
        {
            "message": "Missing item type\nReturn the current unit system.",
            "line": " lib/math.js:21105"
        },
        {
            "message": "Missing item type\nConverters to convert from number to an other numeric type like BigNumber\nor Fraction",
            "line": " lib/math.js:21117"
        },
        {
            "message": "Missing item type\nRetrieve the right convertor function corresponding with the type\nof provided exampleValue.",
            "line": " lib/math.js:21139"
        },
        {
            "message": "Missing item type\nWrapper around createUnitSingle.\nExample: \n createUnit({\n   foo: { },\n   bar: {\n     definition: 'kg/foo',\n     aliases: ['ba', 'barr', 'bars'],\n     offset: 200\n   },\n   baz: '4 bar'\n }, \n {\n   override: true;\n });",
            "line": " lib/math.js:21198"
        },
        {
            "message": "Missing item type\nCreate a user-defined unit and register it with the Unit type.\nExample: \n createUnitSingle('knot', '0.514444444 m/s')\n createUnitSingle('acre', new Unit(43560, 'ft^2'))",
            "line": " lib/math.js:21246"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:21453"
        },
        {
            "message": "Missing item type\nvar memoize = __webpack_require__(45).memoize;\n/**\n\t * Calculate BigNumber e\n\t * @param {function} BigNumber   BigNumber constructor\n\t * @returns {BigNumber} Returns e",
            "line": " lib/math.js:21455"
        },
        {
            "message": "Missing item type\nCalculate BigNumber golden ratio, phi = (1+sqrt(5))/2",
            "line": " lib/math.js:21468"
        },
        {
            "message": "Missing item type\nCalculate BigNumber pi.",
            "line": " lib/math.js:21477"
        },
        {
            "message": "Missing item type\nCalculate BigNumber tau, tau = 2 * pi",
            "line": " lib/math.js:21486"
        },
        {
            "message": "Missing item type\nCreate a hash for a BigNumber constructor function. The created has is\nthe configured precision",
            "line": " lib/math.js:21495"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:21508"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var unaryMinus = load(__webpack_require__(78));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  // TODO: split function subtract in two: subtract and subtractScalar\n  /**\n\t   * Subtract two values, `x - y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.subtract(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.subtract(5.3, 2);        // returns number 3.3\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    var b = math.complex(4, 1);\n\t   *    math.subtract(a, b);          // returns Complex -2 + 2i\n\t   *\n\t   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]\n\t   *\n\t   *    var c = math.unit('2.1 km');\n\t   *    var d = math.unit('500m');\n\t   *    math.subtract(c, d);          // returns Unit 1.6 km\n\t   *\n\t   * See also:\n\t   *\n\t   *    add\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n\t   *            Initial value\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n\t   *            Value to subtract from `x`\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t   *            Subtraction of `x` and `y`",
            "line": " lib/math.js:21510"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:21713"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Inverse the sign of a value, apply a unary minus operation.\n\t   *\n\t   * For matrices, the function is evaluated element wise. Boolean values and\n\t   * strings will be converted to a number. For complex numbers, both real and\n\t   * complex value are inverted.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.unaryMinus(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.unaryMinus(3.5);      // returns -3.5\n\t   *    math.unaryMinus(-4.2);     // returns 4.2\n\t   *\n\t   * See also:\n\t   *\n\t   *    add, subtract, unaryPlus\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.",
            "line": " lib/math.js:21715"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:21789"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n\t  \n\t  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " lib/math.js:21791"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:21971"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory(type, config, load, typed) {\n\t  \n\t  /**\n\t   * Multiply two scalar values, `x * y`.\n\t   * This function is meant for internal use: it is used by the public function\n\t   * `multiply`\n\t   *\n\t   * This function does not support collections (Array or Matrix), and does\n\t   * not validate the number of of inputs.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n\t   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`\n\t   * @private",
            "line": " lib/math.js:21973"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:22034"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory(type, config, load, typed) {\n\t  var multiplyScalar = load(__webpack_require__(80));\n  /**\n\t   * Divide two scalar values, `x / y`.\n\t   * This function is meant for internal use: it is used by the public functions\n\t   * `divide` and `inv`.\n\t   *\n\t   * This function does not support collections (Array or Matrix), and does\n\t   * not validate the number of of inputs.\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n\t   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`\n\t   * @private",
            "line": " lib/math.js:22036"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:22099"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\t  var eye = load(__webpack_require__(83));\n\t  var multiply = load(__webpack_require__(84));\n\t  var matrix = load(__webpack_require__(52));\n\t  var fraction = load(__webpack_require__(36));\n\t  var number = load(__webpack_require__(70));\n  /**\n\t   * Calculates the power of x to y, `x ^ y`.\n\t   * Matrix exponentiation is supported for square matrices `x`, and positive\n\t   * integer exponents `y`.\n\t   *\n\t   * For cubic roots of negative numbers, the function returns the principal\n\t   * root by default. In order to let the function return the real root,\n\t   * math.js can be configured with `math.config({predictable: true})`.\n\t   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.pow(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.pow(2, 3);               // returns number 8\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    math.pow(a, 2)                // returns Complex -5 + 12i\n\t   *\n\t   *    var b = [[1, 2], [4, 3]];\n\t   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, sqrt, cbrt, nthRoot\n\t   *\n\t   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base\n\t   * @param  {number | BigNumber | Complex} y                   The exponent\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`",
            "line": " lib/math.js:22101"
        },
        {
            "message": "Missing item type\nCalculates the power of x to y, x^y, for two numbers.",
            "line": " lib/math.js:22196"
        },
        {
            "message": "Missing item type\nCalculate the power of a 2d array",
            "line": " lib/math.js:22233"
        },
        {
            "message": "Missing item type\nCalculate the power of a 2d matrix",
            "line": " lib/math.js:22265"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:22289"
        },
        {
            "message": "Missing item type\n'use strict';\nvar array = __webpack_require__(40);\n\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  \n\t  /**\n\t   * Create a 2-dimensional identity matrix with size m x n or n x n.\n\t   * The matrix has ones on the diagonal and zeros elsewhere.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.eye(n)\n\t   *    math.eye(n, format)\n\t   *    math.eye(m, n)\n\t   *    math.eye(m, n, format)\n\t   *    math.eye([m, n])\n\t   *    math.eye([m, n], format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\t   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]\n\t   *\n\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    diag, ones, zeros, size, range\n\t   *\n\t   * @param {...number | Matrix | Array} size   The size for the matrix\n\t   * @param {string} [format]                   The Matrix storage format\n\t   *\n\t   * @return {Matrix | Array | number} A matrix with ones on the diagonal.",
            "line": " lib/math.js:22291"
        },
        {
            "message": "Missing item type\nCreate an identity matrix",
            "line": " lib/math.js:22387"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:22441"
        },
        {
            "message": "Missing item type\n'use strict';\nvar extend = __webpack_require__(3).extend;\n\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var equalScalar = load(__webpack_require__(48));\n  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  var DenseMatrix = type.DenseMatrix;\n\t  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Multiply two or more values, `x * y`.\n\t   * For matrices, the matrix product is calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.multiply(x, y)\n\t   *    math.multiply(x, y, z, ...)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.multiply(4, 5.2);        // returns number 20.8\n\t   *    math.multiply(2, 3, 4);       // returns number 24\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    var b = math.complex(4, 1);\n\t   *    math.multiply(a, b);          // returns Complex 5 + 14i\n\t   *\n\t   *    var c = [[1, 2], [4, 3]];\n\t   *    var d = [[1, 2, 3], [3, -4, 7]];\n\t   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]\n\t   *\n\t   *    var e = math.unit('2.1 km');\n\t   *    math.multiply(3, e);          // returns Unit 6.3 km\n\t   *\n\t   * See also:\n\t   *\n\t   *    divide, prod, cross, dot\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`",
            "line": " lib/math.js:22443"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " lib/math.js:22651"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " lib/math.js:22697"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " lib/math.js:22714"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " lib/math.js:22774"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " lib/math.js:22792"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " lib/math.js:22824"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " lib/math.js:22885"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " lib/math.js:22953"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " lib/math.js:23064"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " lib/math.js:23168"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " lib/math.js:23281"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:23417"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t   * Callback function invoked NZ times (number of nonzero items in S).\n\t   *\n\t   *\n\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0          ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t   * @param {Scalar}   b                 The Scalar value\n\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "line": " lib/math.js:23419"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:23532"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the absolute value of a number. For matrices, the function is\n\t   * evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.abs(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.abs(3.5);                // returns number 3.5\n\t   *    math.abs(-4.2);               // returns number 4.2\n\t   *\n\t   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]\n\t   *\n\t   * See also:\n\t   *\n\t   *    sign\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t   *            A number or matrix for which to get the absolute value\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n\t   *            Absolute value of `x`",
            "line": " lib/math.js:23534"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:23599"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Round a value towards zero.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.fix(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.fix(3.2);                // returns number 3\n\t   *    math.fix(3.8);                // returns number 3\n\t   *    math.fix(-4.2);               // returns number -4\n\t   *    math.fix(-4.7);               // returns number -4\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.fix(c);                  // returns Complex 3 - 2i\n\t   *\n\t   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ceil, floor, round\n\t   *\n\t   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value",
            "line": " lib/math.js:23601"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:23670"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether two values are equal.\n\t   *\n\t   * The function tests whether the relative difference between x and y is\n\t   * smaller than the configured epsilon. The function cannot be used to\n\t   * compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n\t   *\n\t   * Values `null` and `undefined` are compared strictly, thus `null` is only\n\t   * equal to `null` and nothing else, and `undefined` is only equal to\n\t   * `undefined` and nothing else.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.equal(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.equal(2 + 2, 3);         // returns false\n\t   *    math.equal(2 + 2, 4);         // returns true\n\t   *\n\t   *    var a = math.unit('50 cm');\n\t   *    var b = math.unit('5 m');\n\t   *    math.equal(a, b);             // returns true\n\t   *\n\t   *    var c = [2, 5, 1];\n\t   *    var d = [2, 7, 1];\n\t   *\n\t   *    math.equal(c, d);             // returns [true, false, true]\n\t   *    math.deepEqual(c, d);         // returns false\n\t   *\n\t   *    math.equal(0, null);          // returns false\n\t   *\n\t   * See also:\n\t   *\n\t   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual\n\t   *\n\t   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false",
            "line": " lib/math.js:23672"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:23845"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is an numeric value.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isNumeric(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isNumeric(2);                     // returns true\n\t   *    math.isNumeric(0);                     // returns true\n\t   *    math.isNumeric(math.bignumber(500));   // returns true\n\t   *    math.isNumeric(math.fraction(4));      // returns true\n\t   *    math.isNumeric(math.complex('2-4i');   // returns false\n\t   *    math.isNumeric('3');                   // returns false\n\t   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isZero, isPositive, isNegative, isInteger\n\t   *\n\t   * @param {*} x       Value to be tested\n\t   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n\t   *                    `Fraction`, or `boolean`. Returns false for other types.\n\t   *                    Throws an error in case of unknown types.",
            "line": " lib/math.js:23847"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:23904"
        },
        {
            "message": "Missing item type\n'use strict';\nvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Format a value of any type into a string.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.format(value)\n\t   *    math.format(value, options)\n\t   *    math.format(value, precision)\n\t   *    math.format(value, callback)\n\t   *\n\t   * Where:\n\t   *\n\t   *  - `value: *`\n\t   *    The value to be formatted\n\t   *  - `options: Object`\n\t   *    An object with formatting options. Available options:\n\t   *    - `notation: string`\n\t   *      Number notation. Choose from:\n\t   *      - 'fixed'\n\t   *        Always use regular number notation.\n\t   *        For example '123.40' and '14000000'\n\t   *      - 'exponential'\n\t   *        Always use exponential notation.\n\t   *        For example '1.234e+2' and '1.4e+7'\n\t   *      - 'engineering'\n\t   *        Always use engineering notation.\n\t   *        For example '123.4e+0' and '14.0e+6'\n\t   *      - 'auto' (default)\n\t   *        Regular number notation for numbers having an absolute value between\n\t   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\n\t   *        Lower bound is included, upper bound is excluded.\n\t   *        For example '123.4' and '1.4e7'.\n\t   *    - `precision: number`\n\t   *      A number between 0 and 16 to round the digits of the number. In case\n\t   *      of notations 'exponential' and 'auto', `precision` defines the total\n\t   *      number of significant digits returned and is undefined by default.\n\t   *      In case of notation 'fixed', `precision` defines the number of\n\t   *      significant digits after the decimal point, and is 0 by default.\n\t   *    - `exponential: Object`\n\t   *      An object containing two parameters, {number} lower and {number} upper,\n\t   *      used by notation 'auto' to determine when to return exponential\n\t   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only\n\t   *      applicable for notation `auto`.\n\t   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.\n\t   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is\n\t   *      configured, and will output `0.(3)` when 'decimal' is configured.\n\t   * - `callback: function`\n\t   *   A custom formatting function, invoked for all numeric elements in `value`,\n\t   *   for example all elements of a matrix, or the real and imaginary\n\t   *   parts of a complex number. This callback can be used to override the\n\t   *   built-in numeric notation with any type of formatting. Function `callback`\n\t   *   is called with `value` as parameter and must return a string.\n\t   *\n\t   * When `value` is an Object:\n\t   *\n\t   * - When the object contains a property `format` being a function, this function\n\t   *   is invoked as `value.format(options)` and the result is returned.\n\t   * - When the object has its own `toString` method, this method is invoked\n\t   *   and the result is returned.\n\t   * - In other cases the function will loop over all object properties and\n\t   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n\t   *\n\t   * When value is a function:\n\t   *\n\t   * - When the function has a property `syntax`, it returns this\n\t   *   syntax description.\n\t   * - In other cases, a string `'function'` is returned.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.format(6.4);                                        // returns '6.4'\n\t   *    math.format(1240000);                                    // returns '1.24e6'\n\t   *    math.format(1/3);                                        // returns '0.3333333333333333'\n\t   *    math.format(1/3, 3);                                     // returns '0.333'\n\t   *    math.format(21385, 2);                                   // returns '21000'\n\t   *    math.format(12.071, {notation: 'fixed'});                // returns '12'\n\t   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'\n\t   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'\n\t   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'\n\t   *\n\t   *    function formatCurrency(value) {\n\t   *      // return currency notation with two digits:\n\t   *      return '$' + value.toFixed(2);\n\t   *\n\t   *      // you could also use math.format inside the callback:\n\t   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});\n\t   *    }\n\t   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'\n\t   *\n\t   * See also:\n\t   *\n\t   *    print\n\t   *\n\t   * @param {*} value                               Value to be stringified\n\t   * @param {Object | Function | number} [options]  Formatting options\n\t   * @return {string} The formatted value",
            "line": " lib/math.js:23906"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:24024"
        },
        {
            "message": "Missing item type\n'use strict';\nvar types = __webpack_require__(41);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Determine the type of a variable.\n\t   *\n\t   * Function `typeof` recognizes the following types of objects:\n\t   *\n\t   * Object                 | Returns       | Example\n\t   * ---------------------- | ------------- | ------------------------------------------\n\t   * null                   | `'null'`      | `math.typeof(null)`\n\t   * number                 | `'number'`    | `math.typeof(3.5)`\n\t   * boolean                | `'boolean'`   | `math.typeof (true)`\n\t   * string                 | `'string'`    | `math.typeof ('hello world')`\n\t   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`\n\t   * Date                   | `'Date'`      | `math.typeof (new Date())`\n\t   * Function               | `'Function'`  | `math.typeof (function () {})`\n\t   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`\n\t   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`\n\t   * undefined              | `'undefined'` | `math.typeof(undefined)`\n\t   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`\n\t   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`\n\t   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`\n\t   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`\n\t   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`\n\t   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`\n\t   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`\n\t   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`\n\t   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.typeof(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.typeof(3.5);                     // returns 'number'\n\t   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'\n\t   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'\n\t   *    math.typeof('hello world');           // returns 'string'\n\t   *\n\t   * @param {*} x     The variable for which to test the type.\n\t   * @return {string} Returns the name of the type. Primitive types are lower case,\n\t   *                  non-primitive types are upper-camel-case.\n\t   *                  For example 'number', 'string', 'Array', 'Date'.",
            "line": " lib/math.js:24026"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:24107"
        },
        {
            "message": "Missing item type\n/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar formatRegExp = /%[sdj%]/g;\n\texports.format = function(f) {\n\t  if (!isString(f)) {\n\t    var objects = [];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t      objects.push(inspect(arguments[i]));\n\t    }\n\t    return objects.join(' ');\n\t  }\n  var i = 1;\n\t  var args = arguments;\n\t  var len = args.length;\n\t  var str = String(f).replace(formatRegExp, function(x) {\n\t    if (x === '%%') return '%';\n\t    if (i >= len) return x;\n\t    switch (x) {\n\t      case '%s': return String(args[i++]);\n\t      case '%d': return Number(args[i++]);\n\t      case '%j':\n\t        try {\n\t          return JSON.stringify(args[i++]);\n\t        } catch (_) {\n\t          return '[Circular]';\n\t        }\n\t      default:\n\t        return x;\n\t    }\n\t  });\n\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t    if (isNull(x) || !isObject(x)) {\n\t      str += ' ' + x;\n\t    } else {\n\t      str += ' ' + inspect(x);\n\t    }\n\t  }\n\t  return str;\n\t};\n\n// Mark that a method should not be used.\n\t// Returns a modified function which warns once by default.\n\t// If --no-deprecation is set, then it is a no-op.\n\texports.deprecate = function(fn, msg) {\n\t  // Allow for deprecating things in the process of starting up.\n\t  if (isUndefined(global.process)) {\n\t    return function() {\n\t      return exports.deprecate(fn, msg).apply(this, arguments);\n\t    };\n\t  }\n  if (process.noDeprecation === true) {\n\t    return fn;\n\t  }\n  var warned = false;\n\t  function deprecated() {\n\t    if (!warned) {\n\t      if (process.throwDeprecation) {\n\t        throw new Error(msg);\n\t      } else if (process.traceDeprecation) {\n\t        console.trace(msg);\n\t      } else {\n\t        console.error(msg);\n\t      }\n\t      warned = true;\n\t    }\n\t    return fn.apply(this, arguments);\n\t  }\n  return deprecated;\n\t};\n\nvar debugs = {};\n\tvar debugEnviron;\n\texports.debuglog = function(set) {\n\t  if (isUndefined(debugEnviron))\n\t    debugEnviron = process.env.NODE_DEBUG || '';\n\t  set = set.toUpperCase();\n\t  if (!debugs[set]) {\n\t    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n\t      var pid = process.pid;\n\t      debugs[set] = function() {\n\t        var msg = exports.format.apply(exports, arguments);\n\t        console.error('%s %d: %s', set, pid, msg);\n\t      };\n\t    } else {\n\t      debugs[set] = function() {};\n\t    }\n\t  }\n\t  return debugs[set];\n\t};\n\n/**\n\t * Echos the value of a value. Trys to print the value out\n\t * in the best way possible given the different types.\n\t *\n\t * @param {Object} obj The object to print out.\n\t * @param {Object} opts Optional options object that alters the output.",
            "line": " lib/math.js:24109"
        },
        {
            "message": "Missing item type\nInherit the prototype methods from one constructor into another.\n\nThe Function.prototype.inherits from lang.js rewritten as a standalone\nfunction (not on Function.prototype). NOTE: If this file is to be loaded\nduring bootstrapping this function needs to be rewritten using some native\nfunctions as prototype setup using normal JavaScript does not work as\nexpected during bootstrapping (see mirror.js in r114903).",
            "line": " lib/math.js:24667"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:24700"
        },
        {
            "message": "Missing item type\n// shim for using process in browser\nvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\nfunction cleanUpNextTick() {\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\nfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = setTimeout(cleanUpNextTick);\n\t    draining = true;\n    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    clearTimeout(timeout);\n\t}\nprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\nfunction noop() {}\nprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\nprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\nprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },",
            "line": " lib/math.js:24702"
        },
        {
            "message": "Missing item type\nmodule.exports = function isBuffer(arg) {\n\t  return arg && typeof arg === 'object'\n\t    && typeof arg.copy === 'function'\n\t    && typeof arg.fill === 'function'\n\t    && typeof arg.readUInt8 === 'function';\n\t}\n\n/***/ },",
            "line": " lib/math.js:24799"
        },
        {
            "message": "Missing item type\nif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ },",
            "line": " lib/math.js:24810"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a unit. Depending on the passed arguments, the function\n\t   * will create and return a new math.type.Unit object.\n\t   * When a matrix is provided, all elements will be converted to units.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.unit(unit : string)\n\t   *     math.unit(value : number, unit : string)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm\n\t   *    var b = math.unit('23 kg');    // returns Unit 23 kg\n\t   *    a.to('m');                     // returns Unit 0.05 m\n\t   *\n\t   * See also:\n\t   *\n\t   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n\t   *\n\t   * @param {* | Array | Matrix} args   A number and unit.\n\t   * @return {Unit | Array | Matrix}    The created unit",
            "line": " lib/math.js:24839"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:24904"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a user-defined unit and register it with the Unit type.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.createUnit({\n\t   *       baseUnit1: {\n\t   *         aliases: [string, ...]\n\t   *         prefixes: object\n\t   *       },\n\t   *       unit2: {\n\t   *         definition: string,\n\t   *         aliases: [string, ...]\n\t   *         prefixes: object,\n\t   *         offset: number\n\t   *       },\n\t   *       unit3: string    // Shortcut\n\t   *     })\n\t   *\n\t   *     // Another shortcut:\n\t   *     math.createUnit(string, unit : string, [object])\n\t   *\n\t   * Examples: \n\t   *\n\t   *     math.createUnit('foo');\n\t   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']});\n\t   *     math.createUnit('mph', '1 mile/hour');\n\t   *\n\t   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n\t   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n\t   * @param {Object} options   (optional) An object containing any of the following properties:\n\t   *     prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n\t   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n\t   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n\t   *\n\t   * See also:\n\t   *\n\t   *     unit\n\t   *\n\t   * @return {Unit} The new unit",
            "line": " lib/math.js:24906"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:24995"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Split a unit in an array of units whose sum is equal to the original unit.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n\t   *\n\t   * Example:\n\t   *\n\t   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch']);\n\t   *     // [ 3 feet, 3.3700787401575 inch ]\n\t   *\n\t   * See also:\n\t   *\n\t   *     unit\n\t   *\n\t   * @param {Array} [parts] An array of strings or valueless units.\n\t   * @return {Array} An array of units.",
            "line": " lib/math.js:24997"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:25038"
        },
        {
            "message": "Missing item type\nvar lazy = __webpack_require__(3).lazy;\n\nfunction factory (type, config, load, typed, math) {\n  // helper function to create a unit with a fixed prefix\n\t  function fixedUnit(str) {\n\t    var unit = type.Unit.parse(str);\n\t    unit.fixPrefix = true;\n\t    return unit;\n\t  }\n  // Source: http://www.wikiwand.com/en/Physical_constant\n  // Universal constants\n\t  lazy(math, 'speedOfLight',         function () {return fixedUnit('299792458 m s^-1')});\n\t  lazy(math, 'gravitationConstant',  function () {return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2')});\n\t  lazy(math, 'planckConstant',       function () {return fixedUnit('6.626069311e-34 J s')});\n\t  lazy(math, 'reducedPlanckConstant',function () {return fixedUnit('1.05457172647e-34 J s')});\n  // Electromagnetic constants\n\t  lazy(math, 'magneticConstant',          function () {return fixedUnit('1.2566370614e-6 N A^-2')});\n\t  lazy(math, 'electricConstant',          function () {return fixedUnit('8.854187817e-12 F m^-1')});\n\t  lazy(math, 'vacuumImpedance',           function () {return fixedUnit('376.730313461 ohm')});\n\t  lazy(math, 'coulomb',                   function () {return fixedUnit('8.9875517873681764e9 N m^2 C^-2')});\n\t  lazy(math, 'elementaryCharge',          function () {return fixedUnit('1.60217656535e-19 C')});\n\t  lazy(math, 'bohrMagneton',              function () {return fixedUnit('9.2740096820e-24 J T^-1')});\n\t  lazy(math, 'conductanceQuantum',        function () {return fixedUnit('7.748091734625e-5 S')});\n\t  lazy(math, 'inverseConductanceQuantum', function () {return fixedUnit('12906.403721742 ohm')});\n\t  lazy(math, 'magneticFluxQuantum',       function () {return fixedUnit('2.06783375846e-15 Wb')});\n\t  lazy(math, 'nuclearMagneton',           function () {return fixedUnit('5.0507835311e-27 J T^-1')});\n\t  lazy(math, 'klitzing',                  function () {return fixedUnit('25812.807443484 ohm')});\n\t  //lazy(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed\n  // Atomic and nuclear constants\n\t  lazy(math, 'bohrRadius',              function () {return fixedUnit('5.291772109217e-11 m')});\n\t  lazy(math, 'classicalElectronRadius', function () {return fixedUnit('2.817940326727e-15 m')});\n\t  lazy(math, 'electronMass',            function () {return fixedUnit('9.1093829140e-31 kg')});\n\t  lazy(math, 'fermiCoupling',           function () {return fixedUnit('1.1663645e-5 GeV^-2')});\n\t  lazy(math, 'fineStructure',           function () {return 7.297352569824e-3});\n\t  lazy(math, 'hartreeEnergy',           function () {return fixedUnit('4.3597443419e-18 J')});\n\t  lazy(math, 'protonMass',              function () {return fixedUnit('1.67262177774e-27 kg')});\n\t  lazy(math, 'deuteronMass',            function () {return fixedUnit('3.3435830926e-27 kg')});\n\t  lazy(math, 'neutronMass',             function () {return fixedUnit('1.6749271613e-27 kg')});\n\t  lazy(math, 'quantumOfCirculation',    function () {return fixedUnit('3.636947552024e-4 m^2 s^-1')});\n\t  lazy(math, 'rydberg',                 function () {return fixedUnit('10973731.56853955 m^-1')});\n\t  lazy(math, 'thomsonCrossSection',     function () {return fixedUnit('6.65245873413e-29 m^2')});\n\t  lazy(math, 'weakMixingAngle',         function () {return 0.222321});\n\t  lazy(math, 'efimovFactor',            function () {return 22.7});\n  // Physico-chemical constants\n\t  lazy(math, 'atomicMass',          function () {return fixedUnit('1.66053892173e-27 kg')});\n\t  lazy(math, 'avogadro',            function () {return fixedUnit('6.0221412927e23 mol^-1')});\n\t  lazy(math, 'boltzmann',           function () {return fixedUnit('1.380648813e-23 J K^-1')});\n\t  lazy(math, 'faraday',             function () {return fixedUnit('96485.336521 C mol^-1')});\n\t  lazy(math, 'firstRadiation',      function () {return fixedUnit('3.7417715317e-16 W m^2')});\n\t  // lazy(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance\n\t  lazy(math, 'loschmidt',           function () {return fixedUnit('2.686780524e25 m^-3')});\n\t  lazy(math, 'gasConstant',         function () {return fixedUnit('8.314462175 J K^-1 mol^-1')});\n\t  lazy(math, 'molarPlanckConstant', function () {return fixedUnit('3.990312717628e-10 J s mol^-1')});\n\t  lazy(math, 'molarVolume',         function () {return fixedUnit('2.241396820e-10 m^3 mol^-1')});\n\t  lazy(math, 'sackurTetrode',       function () {return -1.164870823});\n\t  lazy(math, 'secondRadiation',     function () {return fixedUnit('1.438777013e-2 m K')});\n\t  lazy(math, 'stefanBoltzmann',     function () {return fixedUnit('5.67037321e-8 W m^-2 K^-4')});\n\t  lazy(math, 'wienDisplacement',    function () {return fixedUnit('2.897772126e-3 m K')});\n  // Adopted values\n\t  lazy(math, 'molarMass',         function () {return fixedUnit('1e-3 kg mol^-1')});\n\t  lazy(math, 'molarMassC12',      function () {return fixedUnit('1.2e-2 kg mol^-1')});\n\t  lazy(math, 'gravity',           function () {return fixedUnit('9.80665 m s^-2')});\n\t  // atm is defined in Unit.js\n  // Natural units\n\t  lazy(math, 'planckLength',      function () {return fixedUnit('1.61619997e-35 m')});\n\t  lazy(math, 'planckMass',        function () {return fixedUnit('2.1765113e-8 kg')});\n\t  lazy(math, 'planckTime',        function () {return fixedUnit('5.3910632e-44 s')});\n\t  lazy(math, 'planckCharge',      function () {return fixedUnit('1.87554595641e-18 C')});\n\t  lazy(math, 'planckTemperature', function () {return fixedUnit('1.41683385e+32 K')});\n}\nexports.factory = factory;\n\texports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\n\texports.math = true;   // request access to the math namespace\n\n\n/***/ },",
            "line": " lib/math.js:25040"
        },
        {
            "message": "Missing item type\n'use strict';\nvar object = __webpack_require__(3);\n\tvar bigConstants = __webpack_require__(76);\nfunction factory (type, config, load, typed, math) {\n\t  // listen for changed in the configuration, automatically reload\n\t  // constants when needed\n\t  math.on('config', function (curr, prev) {\n\t    if (curr.number !== prev.number) {\n\t      factory(type, config, load, typed, math);\n\t    }\n\t  });\n  math['true']     = true;\n\t  math['false']    = false;\n\t  math['null']     = null;\n\t  math['uninitialized'] = __webpack_require__(40).UNINITIALIZED;\n  if (config.number === 'BigNumber') {\n\t    math['Infinity'] = new type.BigNumber(Infinity);\n\t    math['NaN']      = new type.BigNumber(NaN);\n    object.lazy(math, 'pi',  function () {return bigConstants.pi(type.BigNumber)});\n\t    object.lazy(math, 'tau', function () {return bigConstants.tau(type.BigNumber)});\n\t    object.lazy(math, 'e',   function () {return bigConstants.e(type.BigNumber)});\n\t    object.lazy(math, 'phi', function () {return bigConstants.phi(type.BigNumber)}); // golden ratio, (1+sqrt(5))/2\n    // uppercase constants (for compatibility with built-in Math)\n\t    object.lazy(math, 'E',       function () {return math.e;});\n\t    object.lazy(math, 'LN2',     function () {return new type.BigNumber(2).ln();});\n\t    object.lazy(math, 'LN10',    function () {return new type.BigNumber(10).ln()});\n\t    object.lazy(math, 'LOG2E',   function () {return new type.BigNumber(1).div(new type.BigNumber(2).ln());});\n\t    object.lazy(math, 'LOG10E',  function () {return new type.BigNumber(1).div(new type.BigNumber(10).ln())});\n\t    object.lazy(math, 'PI',      function () {return math.pi});\n\t    object.lazy(math, 'SQRT1_2', function () {return new type.BigNumber('0.5').sqrt()});\n\t    object.lazy(math, 'SQRT2',   function () {return new type.BigNumber(2).sqrt()});\n\t  }\n\t  else {\n\t    math['Infinity'] = Infinity;\n\t    math['NaN']      = NaN;\n    math.pi  = Math.PI;\n\t    math.tau = Math.PI * 2;\n\t    math.e   = Math.E;\n\t    math.phi = 1.61803398874989484820458683436563811772030917980576286213545; // golden ratio, (1+sqrt(5))/2\n    // uppercase constants (for compatibility with built-in Math)\n\t    math.E           = math.e;\n\t    math.LN2         = Math.LN2;\n\t    math.LN10        = Math.LN10;\n\t    math.LOG2E       = Math.LOG2E;\n\t    math.LOG10E      = Math.LOG10E;\n\t    math.PI          = math.pi;\n\t    math.SQRT1_2     = Math.SQRT1_2;\n\t    math.SQRT2       = Math.SQRT2;\n\t  }\n  // complex i\n\t  math.i = type.Complex.I;\n  // meta information\n\t  math.version = __webpack_require__(101);\n\t}\nexports.factory = factory;\n\texports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\n\texports.math = true;   // request access to the math namespace\n\n/***/ },",
            "line": " lib/math.js:25130"
        },
        {
            "message": "Missing item type\nmodule.exports = '3.8.0';\n\t// Note: This file is automatically generated when building math.js.\n\t// Changes made in this file will be overwritten.\n\n\n/***/ },",
            "line": " lib/math.js:25203"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(103),\n\t  __webpack_require__(280),\n\t  __webpack_require__(309),\n\t  __webpack_require__(311),\n  __webpack_require__(337),\n\t  __webpack_require__(282),\n\t  __webpack_require__(308)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:25212"
        },
        {
            "message": "Missing item type\nfunction factory (construction, config, load, typed) {\n\t  var docs = {};\n\n  // construction functions\n\t  docs.bignumber = __webpack_require__(104);\n\t  docs['boolean'] = __webpack_require__(105);\n\t  docs.complex = __webpack_require__(106);\n\t  docs.createUnit = __webpack_require__(107);\n\t  docs.fraction = __webpack_require__(108);\n\t  docs.index = __webpack_require__(109);\n\t  docs.matrix = __webpack_require__(110);\n\t  docs.number = __webpack_require__(111);\n\t  docs.sparse = __webpack_require__(112);\n\t  docs.splitUnit = __webpack_require__(113);\n\t  docs.string = __webpack_require__(114);\n\t  docs.unit = __webpack_require__(115);\n  // constants\n\t  docs.e = __webpack_require__(116);\n\t  docs.E = __webpack_require__(116);\n\t  docs['false'] = __webpack_require__(117);\n\t  docs.i = __webpack_require__(118);\n\t  docs['Infinity'] = __webpack_require__(119);\n\t  docs.LN2 = __webpack_require__(120);\n\t  docs.LN10 = __webpack_require__(121);\n\t  docs.LOG2E = __webpack_require__(122);\n\t  docs.LOG10E = __webpack_require__(123);\n\t  docs.NaN = __webpack_require__(124);\n\t  docs['null'] = __webpack_require__(125);\n\t  docs.pi = __webpack_require__(126);\n\t  docs.PI = __webpack_require__(126);\n\t  docs.phi = __webpack_require__(127);\n\t  docs.SQRT1_2 = __webpack_require__(128);\n\t  docs.SQRT2 = __webpack_require__(129);\n\t  docs.tau = __webpack_require__(130);\n\t  docs['true'] = __webpack_require__(131);\n\t  docs.version = __webpack_require__(132);\n  // physical constants\n\t  // TODO: more detailed docs for physical constants\n\t  docs.speedOfLight = {description: 'Speed of light in vacuum', examples: ['speedOfLight']};\n\t  docs.gravitationConstant = {description: 'Newtonian constant of gravitation', examples: ['gravitationConstant']};\n\t  docs.planckConstant = {description: 'Planck constant', examples: ['planckConstant']};\n\t  docs.reducedPlanckConstant = {description: 'Reduced Planck constant', examples: ['reducedPlanckConstant']};\n  docs.magneticConstant = {description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant']};\n\t  docs.electricConstant = {description: 'Electric constant (vacuum permeability)', examples: ['electricConstant']};\n\t  docs.vacuumImpedance = {description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance']};\n\t  docs.coulomb = {description: 'Coulomb\\'s constant', examples: ['coulomb']};\n\t  docs.elementaryCharge = {description: 'Elementary charge', examples: ['elementaryCharge']};\n\t  docs.bohrMagneton = {description: 'Borh magneton', examples: ['bohrMagneton']};\n\t  docs.conductanceQuantum = {description: 'Conductance quantum', examples: ['conductanceQuantum']};\n\t  docs.inverseConductanceQuantum = {description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']};\n\t  //docs.josephson = {description: 'Josephson constant', examples: ['josephson']};\n\t  docs.magneticFluxQuantum = {description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum']};\n\t  docs.nuclearMagneton = {description: 'Nuclear magneton', examples: ['nuclearMagneton']};\n\t  docs.klitzing = {description: 'Von Klitzing constant', examples: ['klitzing']};\n  docs.bohrRadius = {description: 'Borh radius', examples: ['bohrRadius']};\n\t  docs.classicalElectronRadius = {description: 'Classical electron radius', examples: ['classicalElectronRadius']};\n\t  docs.electronMass = {description: 'Electron mass', examples: ['electronMass']};\n\t  docs.fermiCoupling = {description: 'Fermi coupling constant', examples: ['fermiCoupling']};\n\t  docs.fineStructure = {description: 'Fine-structure constant', examples: ['fineStructure']};\n\t  docs.hartreeEnergy = {description: 'Hartree energy', examples: ['hartreeEnergy']};\n\t  docs.protonMass = {description: 'Proton mass', examples: ['protonMass']};\n\t  docs.deuteronMass = {description: 'Deuteron Mass', examples: ['deuteronMass']};\n\t  docs.neutronMass = {description: 'Neutron mass', examples: ['neutronMass']};\n\t  docs.quantumOfCirculation = {description: 'Quantum of circulation', examples: ['quantumOfCirculation']};\n\t  docs.rydberg = {description: 'Rydberg constant', examples: ['rydberg']};\n\t  docs.thomsonCrossSection = {description: 'Thomson cross section', examples: ['thomsonCrossSection']};\n\t  docs.weakMixingAngle = {description: 'Weak mixing angle', examples: ['weakMixingAngle']};\n\t  docs.efimovFactor = {description: 'Efimov factor', examples: ['efimovFactor']};\n  docs.atomicMass = {description: 'Atomic mass constant', examples: ['atomicMass']};\n\t  docs.avogadro = {description: 'Avogadro\\'s number', examples: ['avogadro']};\n\t  docs.boltzmann = {description: 'Boltzmann constant', examples: ['boltzmann']};\n\t  docs.faraday = {description: 'Faraday constant', examples: ['faraday']};\n\t  docs.firstRadiation = {description: 'First radiation constant', examples: ['firstRadiation']};\n\t  docs.loschmidt = {description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt']};\n\t  docs.gasConstant = {description: 'Gas constant', examples: ['gasConstant']};\n\t  docs.molarPlanckConstant = {description: 'Molar Planck constant', examples: ['molarPlanckConstant']};\n\t  docs.molarVolume = {description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume']};\n\t  docs.sackurTetrode = {description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode']};\n\t  docs.secondRadiation = {description: 'Second radiation constant', examples: ['secondRadiation']};\n\t  docs.stefanBoltzmann = {description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann']};\n\t  docs.wienDisplacement = {description: 'Wien displacement law constant', examples: ['wienDisplacement']};\n\t  //docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};\n  docs.molarMass = {description: 'Molar mass constant', examples: ['molarMass']};\n\t  docs.molarMassC12 = {description: 'Molar mass constant of carbon-12', examples: ['molarMassC12']};\n\t  docs.gravity = {description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity']};\n  docs.planckLength = {description: 'Planck length', examples: ['planckLength']};\n\t  docs.planckMass = {description: 'Planck mass', examples: ['planckMass']};\n\t  docs.planckTime = {description: 'Planck time', examples: ['planckTime']};\n\t  docs.planckCharge = {description: 'Planck charge', examples: ['planckCharge']};\n\t  docs.planckTemperature = {description: 'Planck temperature', examples: ['planckTemperature']};\n  // functions - algebra\n\t  docs.lsolve = __webpack_require__(133);\n\t  docs.lup = __webpack_require__(134);\n\t  docs.lusolve = __webpack_require__(135);\n\t  docs.slu = __webpack_require__(136);\n\t  docs.usolve = __webpack_require__(137);\n  // functions - arithmetic\n\t  docs.abs = __webpack_require__(138);\n\t  docs.add = __webpack_require__(139);\n\t  docs.cbrt = __webpack_require__(140);\n\t  docs.ceil = __webpack_require__(141);\n\t  docs.cube = __webpack_require__(142);\n\t  docs.divide = __webpack_require__(143);\n\t  docs.dotDivide = __webpack_require__(144);\n\t  docs.dotMultiply = __webpack_require__(145);\n\t  docs.dotPow = __webpack_require__(146);\n\t  docs.exp = __webpack_require__(147);\n\t  docs.fix = __webpack_require__(148);\n\t  docs.floor = __webpack_require__(149);\n\t  docs.gcd = __webpack_require__(150);\n\t  docs.hypot = __webpack_require__(151);\n\t  docs.lcm = __webpack_require__(152);\n\t  docs.log = __webpack_require__(153);\n\t  docs.log10 = __webpack_require__(154);\n\t  docs.mod = __webpack_require__(155);\n\t  docs.multiply = __webpack_require__(156);\n\t  docs.norm = __webpack_require__(157);\n\t  docs.nthRoot = __webpack_require__(158);\n\t  docs.pow = __webpack_require__(159);\n\t  docs.round = __webpack_require__(160);\n\t  docs.sign = __webpack_require__(161);\n\t  docs.sqrt = __webpack_require__(162);\n\t  docs.square = __webpack_require__(163);\n\t  docs.subtract = __webpack_require__(164);\n\t  docs.unaryMinus = __webpack_require__(165);\n\t  docs.unaryPlus = __webpack_require__(166);\n\t  docs.xgcd = __webpack_require__(167);\n  // functions - bitwise\n\t  docs.bitAnd = __webpack_require__(168);\n\t  docs.bitNot = __webpack_require__(169);\n\t  docs.bitOr = __webpack_require__(170);\n\t  docs.bitXor = __webpack_require__(171);\n\t  docs.leftShift = __webpack_require__(172);\n\t  docs.rightArithShift = __webpack_require__(173);\n\t  docs.rightLogShift = __webpack_require__(174);\n  // functions - combinatorics\n\t  docs.bellNumbers = __webpack_require__(175);\n\t  docs.catalan = __webpack_require__(176);\n\t  docs.composition = __webpack_require__(177);\n\t  docs.stirlingS2 = __webpack_require__(178);\n  // functions - core\n\t  docs['config'] =  __webpack_require__(179);\n\t  docs['import'] =  __webpack_require__(180);\n\t  docs['typed'] =  __webpack_require__(181);\n  // functions - complex\n\t  docs.arg = __webpack_require__(182);\n\t  docs.conj = __webpack_require__(183);\n\t  docs.re = __webpack_require__(184);\n\t  docs.im = __webpack_require__(185);\n  // functions - expression\n\t  docs['eval'] =  __webpack_require__(186);\n\t  docs.help =  __webpack_require__(187);\n  // functions - geometry\n\t  docs.distance = __webpack_require__(188);\n\t  docs.intersect = __webpack_require__(189);\n  // functions - logical\n\t  docs['and'] = __webpack_require__(190);\n\t  docs['not'] = __webpack_require__(191);\n\t  docs['or'] = __webpack_require__(192);\n\t  docs['xor'] = __webpack_require__(193);\n  // functions - matrix\n\t  docs['concat'] = __webpack_require__(194);\n\t  docs.cross = __webpack_require__(195);\n\t  docs.det = __webpack_require__(196);\n\t  docs.diag = __webpack_require__(197);\n\t  docs.dot = __webpack_require__(198);\n\t  docs.eye = __webpack_require__(199);\n\t  docs.filter =  __webpack_require__(200);\n\t  docs.flatten = __webpack_require__(201);\n\t  docs.forEach =  __webpack_require__(202);\n\t  docs.inv = __webpack_require__(203);\n\t  docs.map =  __webpack_require__(204);\n\t  docs.ones = __webpack_require__(205);\n\t  docs.partitionSelect =  __webpack_require__(206);\n\t  docs.range = __webpack_require__(207);\n\t  docs.resize = __webpack_require__(208);\n\t  docs.size = __webpack_require__(209);\n\t  docs.sort =  __webpack_require__(210);\n\t  docs.squeeze = __webpack_require__(211);\n\t  docs.subset = __webpack_require__(212);\n\t  docs.trace = __webpack_require__(213);\n\t  docs.transpose = __webpack_require__(214);\n\t  docs.zeros = __webpack_require__(215);\n  // functions - probability\n\t  docs.combinations = __webpack_require__(216);\n\t  //docs.distribution = require('./function/probability/distribution');\n\t  docs.factorial = __webpack_require__(217);\n\t  docs.gamma = __webpack_require__(218);\n\t  docs.kldivergence = __webpack_require__(219);\n\t  docs.multinomial = __webpack_require__(220);\n\t  docs.permutations = __webpack_require__(221);\n\t  docs.pickRandom = __webpack_require__(222);\n\t  docs.random = __webpack_require__(223);\n\t  docs.randomInt = __webpack_require__(224);\n  // functions - relational\n\t  docs.compare = __webpack_require__(225);\n\t  docs.deepEqual = __webpack_require__(226);\n\t  docs['equal'] = __webpack_require__(227);\n\t  docs.larger = __webpack_require__(228);\n\t  docs.largerEq = __webpack_require__(229);\n\t  docs.smaller = __webpack_require__(230);\n\t  docs.smallerEq = __webpack_require__(231);\n\t  docs.unequal = __webpack_require__(232);\n  // functions - special\n\t  docs.erf = __webpack_require__(233);\n  // functions - statistics\n\t  docs.max = __webpack_require__(234);\n\t  docs.mean = __webpack_require__(235);\n\t  docs.median = __webpack_require__(236);\n\t  docs.min = __webpack_require__(237);\n\t  docs.mode = __webpack_require__(238);\n\t  docs.prod = __webpack_require__(239);\n\t  docs.quantileSeq = __webpack_require__(240);\n\t  docs.std = __webpack_require__(241);\n\t  docs.sum = __webpack_require__(242);\n\t  docs['var'] = __webpack_require__(243);\n  // functions - trigonometry\n\t  docs.acos = __webpack_require__(244);\n\t  docs.acosh = __webpack_require__(245);\n\t  docs.acot = __webpack_require__(246);\n\t  docs.acoth = __webpack_require__(247);\n\t  docs.acsc = __webpack_require__(248);\n\t  docs.acsch = __webpack_require__(249);\n\t  docs.asec = __webpack_require__(250);\n\t  docs.asech = __webpack_require__(251);\n\t  docs.asin = __webpack_require__(252);\n\t  docs.asinh = __webpack_require__(253);\n\t  docs.atan = __webpack_require__(254);\n\t  docs.atanh = __webpack_require__(255);\n\t  docs.atan2 = __webpack_require__(256);\n\t  docs.cos = __webpack_require__(257);\n\t  docs.cosh = __webpack_require__(258);\n\t  docs.cot = __webpack_require__(259);\n\t  docs.coth = __webpack_require__(260);\n\t  docs.csc = __webpack_require__(261);\n\t  docs.csch = __webpack_require__(262);\n\t  docs.sec = __webpack_require__(263);\n\t  docs.sech = __webpack_require__(264);\n\t  docs.sin = __webpack_require__(265);\n\t  docs.sinh = __webpack_require__(266);\n\t  docs.tan = __webpack_require__(267);\n\t  docs.tanh = __webpack_require__(268);\n  // functions - units\n\t  docs.to = __webpack_require__(269);\n  // functions - utils\n\t  docs.clone = __webpack_require__(270);\n\t  docs.format = __webpack_require__(271);\n\t  docs.isNaN = __webpack_require__(272);\n\t  docs.isInteger = __webpack_require__(273);\n\t  docs.isNegative = __webpack_require__(274);\n\t  docs.isNumeric = __webpack_require__(275);\n\t  docs.isPositive = __webpack_require__(276);\n\t  docs.isPrime = __webpack_require__(277);\n\t  docs.isZero = __webpack_require__(278);\n\t  // docs.print = require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.\n\t  docs['typeof'] =  __webpack_require__(279);\n  return docs;\n\t}\nexports.name = 'docs';\n\texports.path = 'expression';\n\texports.factory = factory;\n\n\n/***/ },",
            "line": " lib/math.js:25228"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'bignumber',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'bignumber(x)'\n\t  ],\n\t  'description':\n\t      'Create a big number from a number or string.',\n\t  'examples': [\n\t    '0.1 + 0.2',\n\t    'bignumber(0.1) + bignumber(0.2)',\n\t    'bignumber(\"7.2\")',\n\t    'bignumber(\"7.2e500\")',\n\t    'bignumber([0.1, 0.2, 0.3])'\n\t  ],\n\t  'seealso': [\n\t    'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25522"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'boolean',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'x',\n\t    'boolean(x)'\n\t  ],\n\t  'description':\n\t      'Convert a string or number into a boolean.',\n\t  'examples': [\n\t    'boolean(0)',\n\t    'boolean(1)',\n\t    'boolean(3)',\n\t    'boolean(\"true\")',\n\t    'boolean(\"false\")',\n\t    'boolean([1, 0, 1, 1])'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25547"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'complex',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'complex()',\n\t    'complex(re, im)',\n\t    'complex(string)'\n\t  ],\n\t  'description':\n\t      'Create a complex number.',\n\t  'examples': [\n\t    'complex()',\n\t    'complex(2, 3)',\n\t    'complex(\"7 - 2i\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25574"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'createUnit',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'createUnit(definitions)',\n\t    'createUnit(name, definition)'\n\t  ],\n\t  'description':\n\t      'Create a user-defined unit and register it with the Unit type.',\n\t  'examples': [\n\t    'createUnit(\"foo\")',\n\t    'createUnit(\"knot\", {definition: \"0.514444444 m/s\", aliases: [\"knots\", \"kt\", \"kts\"]})',\n\t    'createUnit(\"mph\", \"1 mile/hour\")'\n\t  ],\n\t  'seealso': [\n\t    'unit', 'splitUnit'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25599"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'fraction',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'fraction(num)',\n\t    'fraction(num,den)'\n\t  ],\n\t  'description':\n\t    'Create a fraction from a number or from a numerator and denominator.',\n\t  'examples': [\n\t    'fraction(0.125)',\n\t    'fraction(1, 3) + fraction(2, 5)'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25623"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'index',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    '[start]',\n\t    '[start:end]',\n\t    '[start:step:end]',\n\t    '[start1, start 2, ...]',\n\t    '[start1:end1, start2:end2, ...]',\n\t    '[start1:step1:end1, start2:step2:end2, ...]'\n\t  ],\n\t  'description':\n\t      'Create an index to get or replace a subset of a matrix',\n\t  'examples': [\n\t    '[]',\n\t    '[1, 2, 3]',\n\t    'A = [1, 2, 3; 4, 5, 6]',\n\t    'A[1, :]',\n\t    'A[1, 2] = 50',\n\t    'A[0:2, 0:2] = ones(2, 2)'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25646"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'matrix',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    '[]',\n\t    '[a1, b1, ...; a2, b2, ...]',\n\t    'matrix()',\n\t    'matrix(\"dense\")',\n\t    'matrix([...])'\n\t  ],\n\t  'description':\n\t      'Create a matrix.',\n\t  'examples': [\n\t    '[]',\n\t    '[1, 2, 3]',\n\t    '[1, 2, 3; 4, 5, 6]',\n\t    'matrix()',\n\t    'matrix([3, 4])',\n\t    'matrix([3, 4; 5, 6], \"sparse\")',\n\t    'matrix([3, 4; 5, 6], \"sparse\", \"number\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25677"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'number',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'x',\n\t    'number(x)'\n\t  ],\n\t  'description':\n\t      'Create a number or convert a string or boolean into a number.',\n\t  'examples': [\n\t    '2',\n\t    '2e3',\n\t    '4.05',\n\t    'number(2)',\n\t    'number(\"7.2\")',\n\t    'number(true)',\n\t    'number([true, false, true, true])',\n\t    'number(\"52cm\", \"m\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25708"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'sparse',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'sparse()',\n\t    'sparse([a1, b1, ...; a1, b2, ...])',\n\t    'sparse([a1, b1, ...; a1, b2, ...], \"number\")'\n\t  ],\n\t  'description':\n\t  'Create a sparse matrix.',\n\t  'examples': [\n\t    'sparse()',\n\t    'sparse([3, 4; 5, 6])',\n\t    'sparse([3, 0; 5, 0], \"number\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25737"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'splitUnit',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'splitUnit(unit: Unit, parts: Unit[])'\n\t  ],\n\t  'description':\n\t      'Split a unit in an array of units whose sum is equal to the original unit.',\n\t  'examples': [\n\t    'splitUnit(1 m, [\"feet\", \"inch\"])'\n\t  ],\n\t  'seealso': [\n\t    'unit', 'createUnit'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25762"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'string',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    '\"text\"',\n\t    'string(x)'\n\t  ],\n\t  'description':\n\t      'Create a string or convert a value to a string',\n\t  'examples': [\n\t    '\"Hello World!\"',\n\t    'string(4.2)',\n\t    'string(3 + 2i)'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25783"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'unit',\n\t  'category': 'Construction',\n\t  'syntax': [\n\t    'value unit',\n\t    'unit(value, unit)',\n\t    'unit(string)'\n\t  ],\n\t  'description':\n\t      'Create a unit.',\n\t  'examples': [\n\t    '5.5 mm',\n\t    '3 inch',\n\t    'unit(7.1, \"kilogram\")',\n\t    'unit(\"23 deg\")'\n\t  ],\n\t  'seealso': [\n\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25807"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'e',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'e'\n\t  ],\n\t  'description': 'Euler\\'s number, the base of the natural logarithm. Approximately equal to 2.71828',\n\t  'examples': [\n\t    'e',\n\t    'e ^ 2',\n\t    'exp(2)',\n\t    'log(e)'\n\t  ],\n\t  'seealso': ['exp']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25833"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'false',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'false'\n\t  ],\n\t  'description': 'Boolean value false',\n\t  'examples': [\n\t    'false'\n\t  ],\n\t  'seealso': ['true']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25854"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'i',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'i'\n\t  ],\n\t  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',\n\t  'examples': [\n\t    'i',\n\t    'i * i',\n\t    'sqrt(-1)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25872"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'Infinity',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'Infinity'\n\t  ],\n\t  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',\n\t  'examples': [\n\t    'Infinity',\n\t    '1 / 0'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25892"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'LN2',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LN2'\n\t  ],\n\t  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',\n\t  'examples': [\n\t    'LN2',\n\t    'log(2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25911"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'LN10',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LN10'\n\t  ],\n\t  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',\n\t  'examples': [\n\t    'LN10',\n\t    'log(10)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25930"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'LOG2E',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LOG2E'\n\t  ],\n\t  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',\n\t  'examples': [\n\t    'LOG2E',\n\t    'log(e, 2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25949"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'LOG10E',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'LOG10E'\n\t  ],\n\t  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',\n\t  'examples': [\n\t    'LOG10E',\n\t    'log(e, 10)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25968"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'NaN',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'NaN'\n\t  ],\n\t  'description': 'Not a number',\n\t  'examples': [\n\t    'NaN',\n\t    '0 / 0'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:25987"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'null',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'null'\n\t  ],\n\t  'description': 'Value null',\n\t  'examples': [\n\t    'null'\n\t  ],\n\t  'seealso': ['true', 'false']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26006"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'pi',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'pi'\n\t  ],\n\t  'description': 'The number pi is a mathematical constant that is the ratio of a circle\\'s circumference to its diameter, and is approximately equal to 3.14159',\n\t  'examples': [\n\t    'pi',\n\t    'sin(pi/2)'\n\t  ],\n\t  'seealso': ['tau']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26024"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'phi',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'phi'\n\t  ],\n\t  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',\n\t  'examples': [\n\t    'tau'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26043"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'SQRT1_2',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'SQRT1_2'\n\t  ],\n\t  'description': 'Returns the square root of 1/2, approximately equal to 0.707',\n\t  'examples': [\n\t    'SQRT1_2',\n\t    'sqrt(1/2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26061"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'SQRT2',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'SQRT2'\n\t  ],\n\t  'description': 'Returns the square root of 2, approximately equal to 1.414',\n\t  'examples': [\n\t    'SQRT2',\n\t    'sqrt(2)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26080"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'tau',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'tau'\n\t  ],\n\t  'description': 'Tau is the ratio constant of a circle\\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',\n\t  'examples': [\n\t    'tau',\n\t    '2 * pi'\n\t  ],\n\t  'seealso': ['pi']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26099"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'true',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'true'\n\t  ],\n\t  'description': 'Boolean value true',\n\t  'examples': [\n\t    'true'\n\t  ],\n\t  'seealso': ['false']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26118"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'version',\n\t  'category': 'Constants',\n\t  'syntax': [\n\t    'version'\n\t  ],\n\t  'description': 'A string with the version number of math.js',\n\t  'examples': [\n\t    'version'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26136"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'lsolve',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'x=lsolve(L, b)'\n\t  ],\n\t  'description':\n\t  'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',\n\t  'examples': [\n\t    'a = [-2, 3; 2, 1]',\n\t    'b = [11, 9]',\n\t    'x = lsolve(a, b)'\n\t  ],\n\t  'seealso': [\n\t    'lup', 'lusolve', 'usolve', 'matrix', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26154"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'lup',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'lup(m)'\n\t  ],\n\t  'description':\n\t  'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',\n\t  'examples': [\n\t    'lup([[2, 1], [1, 4]])',\n\t    'lup(matrix([[2, 1], [1, 4]]))',\n\t    'lup(sparse([[2, 1], [1, 4]]))'\n\t  ],\n\t  'seealso': [\n\t    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26177"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'lusolve',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'x=lusolve(A, b)',\n\t    'x=lusolve(lu, b)'\n\t  ],\n\t  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',\n\t  'examples': [\n\t    'a = [-2, 3; 2, 1]',\n\t    'b = [11, 9]',\n\t    'x = lusolve(a, b)'\n\t  ],\n\t  'seealso': [\n\t    'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26200"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'slu',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'slu(A, order, threshold)'\n\t  ],\n\t  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',\n\t  'examples': [\n\t    'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'\n\t  ],\n\t  'seealso': [\n\t    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26223"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'usolve',\n\t  'category': 'Algebra',\n\t  'syntax': [\n\t    'x=usolve(U, b)'\n\t  ],\n\t  'description':\n\t  'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',\n\t  'examples': [\n\t    'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'\n\t  ],\n\t  'seealso': [\n\t    'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26243"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'abs',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'abs(x)'\n\t  ],\n\t  'description': 'Compute the absolute value.',\n\t  'examples': [\n\t    'abs(3.5)',\n\t    'abs(-4.2)'\n\t  ],\n\t  'seealso': ['sign']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26264"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'add',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x + y',\n\t    'add(x, y)'\n\t  ],\n\t  'description': 'Add two values.',\n\t  'examples': [\n\t    'a = 2.1 + 3.6',\n\t    'a - 3.6',\n\t    '3 + 2i',\n\t    '3 cm + 2 inch',\n\t    '\"2.3\" + \"4\"'\n\t  ],\n\t  'seealso': [\n\t    'subtract'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26283"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'cbrt',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'cbrt(x)',\n\t    'cbrt(x, allRoots)'\n\t  ],\n\t  'description':\n\t      'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',\n\t  'examples': [\n\t    'cbrt(64)',\n\t    'cube(4)',\n\t    'cbrt(-8)',\n\t    'cbrt(2 + 3i)',\n\t    'cbrt(8i)',\n\t    'cbrt(8i, true)',\n\t    'cbrt(27 m^3)'\n\t  ],\n\t  'seealso': [\n\t    'square',\n\t    'sqrt',\n\t    'cube',\n\t    'multiply'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26308"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'ceil',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'ceil(x)'\n\t  ],\n\t  'description':\n\t      'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',\n\t  'examples': [\n\t    'ceil(3.2)',\n\t    'ceil(3.8)',\n\t    'ceil(-4.2)'\n\t  ],\n\t  'seealso': ['floor', 'fix', 'round']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26339"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'cube',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'cube(x)'\n\t  ],\n\t  'description': 'Compute the cube of a value. The cube of x is x * x * x.',\n\t  'examples': [\n\t    'cube(2)',\n\t    '2^3',\n\t    '2 * 2 * 2'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'square',\n\t    'pow'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26360"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'divide',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x / y',\n\t    'divide(x, y)'\n\t  ],\n\t  'description': 'Divide two values.',\n\t  'examples': [\n\t    'a = 2 / 3',\n\t    'a * 3',\n\t    '4.5 / 2',\n\t    '3 + 4 / 2',\n\t    '(3 + 4) / 2',\n\t    '18 km / 4.5'\n\t  ],\n\t  'seealso': [\n\t    'multiply'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26384"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'dotDivide',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x ./ y',\n\t    'dotDivide(x, y)'\n\t  ],\n\t  'description': 'Divide two values element wise.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'b = [2, 1, 1; 3, 2, 5]',\n\t    'a ./ b'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'dotMultiply',\n\t    'divide'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26410"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'dotMultiply',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x .* y',\n\t    'dotMultiply(x, y)'\n\t  ],\n\t  'description': 'Multiply two values element wise.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'b = [2, 1, 1; 3, 2, 5]',\n\t    'a .* b'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'divide',\n\t    'dotDivide'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26435"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'dotpow',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x .^ y',\n\t    'dotpow(x, y)'\n\t  ],\n\t  'description':\n\t      'Calculates the power of x to y element wise.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'a .^ 2'\n\t  ],\n\t  'seealso': [\n\t    'pow'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26460"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'exp',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'exp(x)'\n\t  ],\n\t  'description': 'Calculate the exponent of a value.',\n\t  'examples': [\n\t    'exp(1.3)',\n\t    'e ^ 1.3',\n\t    'log(exp(1.3))',\n\t    'x = 2.4',\n\t    '(exp(i*x) == cos(x) + i*sin(x))   # Euler\\'s formula'\n\t  ],\n\t  'seealso': [\n\t    'pow',\n\t    'log'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26483"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'fix',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'fix(x)'\n\t  ],\n\t  'description':\n\t      'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',\n\t  'examples': [\n\t    'fix(3.2)',\n\t    'fix(3.8)',\n\t    'fix(-4.2)',\n\t    'fix(-4.8)'\n\t  ],\n\t  'seealso': ['ceil', 'floor', 'round']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26508"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'floor',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'floor(x)'\n\t  ],\n\t  'description':\n\t      'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',\n\t  'examples': [\n\t    'floor(3.2)',\n\t    'floor(3.8)',\n\t    'floor(-4.2)'\n\t  ],\n\t  'seealso': ['ceil', 'fix', 'round']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26530"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'gcd',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'gcd(a, b)',\n\t    'gcd(a, b, c, ...)'\n\t  ],\n\t  'description': 'Compute the greatest common divisor.',\n\t  'examples': [\n\t    'gcd(8, 12)',\n\t    'gcd(-4, 6)',\n\t    'gcd(25, 15, -10)'\n\t  ],\n\t  'seealso': [ 'lcm', 'xgcd' ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26551"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'hypot',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'hypot(a, b, c, ...)',\n\t    'hypot([a, b, c, ...])'\n\t  ],\n\t  'description': 'Calculate the hypotenusa of a list with values. ',\n\t  'examples': [\n\t    'hypot(3, 4)',\n\t    'sqrt(3^2 + 4^2)',\n\t    'hypot(-2)',\n\t    'hypot([3, 4, 5])'\n\t  ],\n\t  'seealso': [ 'abs', 'norm' ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26572"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'lcm',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'lcm(x, y)'\n\t  ],\n\t  'description': 'Compute the least common multiple.',\n\t  'examples': [\n\t    'lcm(4, 6)',\n\t    'lcm(6, 21)',\n\t    'lcm(6, 21, 5)'\n\t  ],\n\t  'seealso': [ 'gcd' ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26594"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'log',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'log(x)',\n\t    'log(x, base)'\n\t  ],\n\t  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',\n\t  'examples': [\n\t    'log(3.5)',\n\t    'a = log(2.4)',\n\t    'exp(a)',\n\t    '10 ^ 4',\n\t    'log(10000, 10)',\n\t    'log(10000) / log(10)',\n\t    'b = log(1024, 2)',\n\t    '2 ^ b'\n\t  ],\n\t  'seealso': [\n\t    'exp',\n\t    'log10'\n\t  ]\n\t};\n\n/***/ },",
            "line": " lib/math.js:26614"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'log10',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'log10(x)'\n\t  ],\n\t  'description': 'Compute the 10-base logarithm of a value.',\n\t  'examples': [\n\t    'log10(0.00001)',\n\t    'log10(10000)',\n\t    '10 ^ 4',\n\t    'log(10000) / log(10)',\n\t    'log(10000, 10)'\n\t  ],\n\t  'seealso': [\n\t    'exp',\n\t    'log'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26642"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'mod',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x % y',\n\t    'x mod y',\n\t    'mod(x, y)'\n\t  ],\n\t  'description':\n\t      'Calculates the modulus, the remainder of an integer division.',\n\t  'examples': [\n\t    '7 % 3',\n\t    '11 % 2',\n\t    '10 mod 4',\n\t    'function isOdd(x) = x % 2',\n\t    'isOdd(2)',\n\t    'isOdd(3)'\n\t  ],\n\t  'seealso': ['divide']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26667"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'multiply',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x * y',\n\t    'multiply(x, y)'\n\t  ],\n\t  'description': 'multiply two values.',\n\t  'examples': [\n\t    'a = 2.1 * 3.4',\n\t    'a / 3.4',\n\t    '2 * 3 + 4',\n\t    '2 * (3 + 4)',\n\t    '3 * 2.1 km'\n\t  ],\n\t  'seealso': [\n\t    'divide'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26693"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'norm',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'norm(x)',\n\t    'norm(x, p)'\n\t  ],\n\t  'description': 'Calculate the norm of a number, vector or matrix.',\n\t  'examples': [\n\t    'abs(-3.5)',\n\t    'norm(-3.5)',\n\t    'norm(3 - 4i))',\n\t    'norm([1, 2, -3], Infinity)',\n\t    'norm([1, 2, -3], -Infinity)',\n\t    'norm([3, 4], 2)',\n\t    'norm([[1, 2], [3, 4]], 1)',\n\t    'norm([[1, 2], [3, 4]], \\'inf\\')',\n\t    'norm([[1, 2], [3, 4]], \\'fro\\')'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26718"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'nthRoot',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'nthRoot(a)',\n\t    'nthRoot(a, root)'\n\t  ],\n\t  'description': 'Calculate the nth root of a value. ' +\n\t      'The principal nth root of a positive real number A, ' +\n\t      'is the positive real solution of the equation \"x^root = A\".',\n\t  'examples': [\n\t    '4 ^ 3',\n\t    'nthRoot(64, 3)',\n\t    'nthRoot(9, 2)',\n\t    'sqrt(9)'\n\t  ],\n\t  'seealso': [\n\t    'sqrt',\n\t    'pow'\n\t  ]\n\t};\n\n/***/ },",
            "line": " lib/math.js:26744"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'pow',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x ^ y',\n\t    'pow(x, y)'\n\t  ],\n\t  'description':\n\t      'Calculates the power of x to y, x^y.',\n\t  'examples': [\n\t    '2^3 = 8',\n\t    '2*2*2',\n\t    '1 + e ^ (pi * i)'\n\t  ],\n\t  'seealso': [ 'multiply' ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26770"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'round',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'round(x)',\n\t    'round(x, n)'\n\t  ],\n\t  'description':\n\t      'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',\n\t  'examples': [\n\t    'round(3.2)',\n\t    'round(3.8)',\n\t    'round(-4.2)',\n\t    'round(-4.8)',\n\t    'round(pi, 3)',\n\t    'round(123.45678, 2)'\n\t  ],\n\t  'seealso': ['ceil', 'floor', 'fix']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26792"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'sign',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'sign(x)'\n\t  ],\n\t  'description':\n\t      'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',\n\t  'examples': [\n\t    'sign(3.5)',\n\t    'sign(-4.2)',\n\t    'sign(0)'\n\t  ],\n\t  'seealso': [\n\t    'abs'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26817"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'sqrt',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'sqrt(x)'\n\t  ],\n\t  'description':\n\t      'Compute the square root value. If x = y * y, then y is the square root of x.',\n\t  'examples': [\n\t    'sqrt(25)',\n\t    '5 * 5',\n\t    'sqrt(-1)'\n\t  ],\n\t  'seealso': [\n\t    'square',\n\t    'multiply'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26840"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'square',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'square(x)'\n\t  ],\n\t  'description':\n\t      'Compute the square of a value. The square of x is x * x.',\n\t  'examples': [\n\t    'square(3)',\n\t    'sqrt(9)',\n\t    '3^2',\n\t    '3 * 3'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'pow',\n\t    'sqrt',\n\t    'cube'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26864"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'subtract',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    'x - y',\n\t    'subtract(x, y)'\n\t  ],\n\t  'description': 'subtract two values.',\n\t  'examples': [\n\t    'a = 5.3 - 2',\n\t    'a + 2',\n\t    '2/3 - 1/6',\n\t    '2 * 3 - 3',\n\t    '2.1 km - 500m'\n\t  ],\n\t  'seealso': [\n\t    'add'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26891"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'unaryMinus',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    '-x',\n\t    'unaryMinus(x)'\n\t  ],\n\t  'description':\n\t      'Inverse the sign of a value. Converts booleans and strings to numbers.',\n\t  'examples': [\n\t    '-4.5',\n\t    '-(-5.6)',\n\t    '-\"22\"'\n\t  ],\n\t  'seealso': [\n\t    'add', 'subtract', 'unaryPlus'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26916"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'unaryPlus',\n\t  'category': 'Operators',\n\t  'syntax': [\n\t    '+x',\n\t    'unaryPlus(x)'\n\t  ],\n\t  'description':\n\t      'Converts booleans and strings to numbers.',\n\t  'examples': [\n\t    '+true',\n\t    '+\"2\"'\n\t  ],\n\t  'seealso': [\n\t    'add', 'subtract', 'unaryMinus'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26940"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'xgcd',\n\t  'category': 'Arithmetic',\n\t  'syntax': [\n\t    'xgcd(a, b)'\n\t  ],\n\t  'description': 'Calculate the extended greatest common divisor for two values',\n\t  'examples': [\n\t    'xgcd(8, 12)',\n\t    'gcd(8, 12)',\n\t    'xgcd(36163, 21199)'\n\t  ],\n\t  'seealso': [ 'gcd', 'lcm' ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26963"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'bitAnd',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x & y',\n\t    'bitAnd(x, y)'\n\t  ],\n\t  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',\n\t  'examples': [\n\t    '5 & 3',\n\t    'bitAnd(53, 131)',\n\t    '[1, 12, 31] & 42'\n\t  ],\n\t  'seealso': [\n\t    'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:26983"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'bitNot',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    '~x',\n\t    'bitNot(x)'\n\t  ],\n\t  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',\n\t  'examples': [\n\t    '~1',\n\t    '~2',\n\t    'bitNot([2, -3, 4])'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27006"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'bitOr',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x | y',\n\t    'bitOr(x, y)'\n\t  ],\n\t  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',\n\t  'examples': [\n\t    '5 | 3',\n\t    'bitOr([1, 2, 3], 4)'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27029"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'bitXor',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'bitXor(x, y)'\n\t  ],\n\t  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',\n\t  'examples': [\n\t    'bitOr(1, 2)',\n\t    'bitXor([2, 3, 4], 4)'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27051"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'leftShift',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x << y',\n\t    'leftShift(x, y)'\n\t  ],\n\t  'description': 'Bitwise left logical shift of a value x by y number of bits.',\n\t  'examples': [\n\t    '4 << 1',\n\t    '8 >> 1'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27072"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'rightArithShift',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x >> y',\n\t    'leftShift(x, y)'\n\t  ],\n\t  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',\n\t  'examples': [\n\t    '8 >> 1',\n\t    '4 << 1',\n\t    '-12 >> 2'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27094"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'rightLogShift',\n\t  'category': 'Bitwise',\n\t  'syntax': [\n\t    'x >> y',\n\t    'leftShift(x, y)'\n\t  ],\n\t  'description': 'Bitwise right logical shift of a value x by y number of bits.',\n\t  'examples': [\n\t    '8 >>> 1',\n\t    '4 << 1',\n\t    '-12 >>> 2'\n\t  ],\n\t  'seealso': [\n\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27117"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'bellNumbers',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'bellNumbers(n)'\n\t  ],\n\t  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',\n\t  'examples': [\n\t    'bellNumbers(3)',\n\t    'bellNumbers(8)'\n\t  ],\n\t  'seealso': ['stirlingS2']\n\t};\n\n/***/ },",
            "line": " lib/math.js:27140"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'catalan',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'catalan(n)'\n\t  ],\n\t  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',\n\t  'examples': [\n\t    'catalan(3)',\n\t    'catalan(8)'\n\t  ],\n\t  'seealso': ['bellNumbers']\n\t};\n\n/***/ },",
            "line": " lib/math.js:27158"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'composition',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'composition(n, k)'\n\t  ],\n\t  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',\n\t  'examples': [\n\t    'composition(5, 3)'\n\t  ],\n\t  'seealso': ['combinations']\n\t};\n\n/***/ },",
            "line": " lib/math.js:27176"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'stirlingS2',\n\t  'category': 'Combinatorics',\n\t  'syntax': [\n\t    'stirlingS2(n, k)'\n\t  ],\n\t  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',\n\t  'examples': [\n\t    'stirlingS2(5, 3)'\n\t  ],\n\t  'seealso': ['bellNumbers']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27193"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'config',\n\t  'category': 'Core',\n\t  'syntax': [\n\t    'config()',\n\t    'config(options)'\n\t  ],\n\t  'description': 'Get configuration or change configuration.',\n\t  'examples': [\n\t    'config()',\n\t    '1/3 + 1/4',\n\t    'config({number: \"Fraction\"})',\n\t    '1/3 + 1/4'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27211"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'import',\n\t  'category': 'Core',\n\t  'syntax': [\n\t    'import(functions)',\n\t    'import(functions, options)'\n\t  ],\n\t  'description': 'Import functions or constants from an object.',\n\t  'examples': [\n\t    'import({myFn: f(x)=x^2, myConstant: 32 })',\n\t    'myFn(2)',\n\t    'myConstant'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27233"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'typed',\n\t  'category': 'Core',\n\t  'syntax': [\n\t    'typed(signatures)',\n\t    'typed(name, signatures)'\n\t  ],\n\t  'description': 'Create a typed function.',\n\t  'examples': [\n\t    'double = typed({ \"number, number\": f(x)=x+x })',\n\t    'double(2)',\n\t    'double(\"hello\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27254"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'arg',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    'arg(x)'\n\t  ],\n\t  'description':\n\t      'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',\n\t  'examples': [\n\t    'arg(2 + 2i)',\n\t    'atan2(3, 2)',\n\t    'arg(2 + 3i)'\n\t  ],\n\t  'seealso': [\n\t    're',\n\t    'im',\n\t    'conj',\n\t    'abs'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27275"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'conj',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    'conj(x)'\n\t  ],\n\t  'description':\n\t      'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',\n\t  'examples': [\n\t    'conj(2 + 3i)',\n\t    'conj(2 - 3i)',\n\t    'conj(-5.2i)'\n\t  ],\n\t  'seealso': [\n\t    're',\n\t    'im',\n\t    'abs',\n\t    'arg'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27301"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 're',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    're(x)'\n\t  ],\n\t  'description': 'Get the real part of a complex number.',\n\t  'examples': [\n\t    're(2 + 3i)',\n\t    'im(2 + 3i)',\n\t    're(-5.2i)',\n\t    're(2.4)'\n\t  ],\n\t  'seealso': [\n\t    'im',\n\t    'conj',\n\t    'abs',\n\t    'arg'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27327"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'im',\n\t  'category': 'Complex',\n\t  'syntax': [\n\t    'im(x)'\n\t  ],\n\t  'description': 'Get the imaginary part of a complex number.',\n\t  'examples': [\n\t    'im(2 + 3i)',\n\t    're(2 + 3i)',\n\t    'im(-5.2i)',\n\t    'im(2.4)'\n\t  ],\n\t  'seealso': [\n\t    're',\n\t    'conj',\n\t    'abs',\n\t    'arg'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27353"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'eval',\n\t  'category': 'Expression',\n\t  'syntax': [\n\t    'eval(expression)',\n\t    'eval([expr1, expr2, expr3, ...])'\n\t  ],\n\t  'description': 'Evaluate an expression or an array with expressions.',\n\t  'examples': [\n\t    'eval(\"2 + 3\")',\n\t    'eval(\"sqrt(\" + 4 + \")\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27379"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'help',\n\t  'category': 'Expression',\n\t  'syntax': [\n\t    'help(object)',\n\t    'help(string)'\n\t  ],\n\t  'description': 'Display documentation on a function or data type.',\n\t  'examples': [\n\t    'help(sqrt)',\n\t    'help(\"complex\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27399"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'distance',\n\t  'category': 'Geometry',\n\t  'syntax': [\n\t    'distance([x1, y1], [x2, y2])',\n\t    'distance([[x1, y1], [x2, y2])'\n\t  ],\n\t  'description': 'Calculates the Euclidean distance between two points.',\n\t  'examples': [\n\t    'distance([0,0], [4,4])',\n\t    'distance([[0,0], [4,4]])'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27419"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'intersect',\n\t  'category': 'Geometry',\n\t  'syntax': [\n\t    'intersect(expr1, expr2, expr3, expr4)',\n\t    'intersect(expr1, expr2, expr3)'\n\t  ],\n\t  'description': 'Computes the intersection point of lines and/or planes.',\n\t  'examples': [\n\t    'intersect([0, 0], [10, 10], [10, 0], [0, 10])',\n\t    'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27439"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'and',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'x and y',\n\t    'and(x, y)'\n\t  ],\n\t  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',\n\t  'examples': [\n\t    'true and false',\n\t    'true and true',\n\t    '2 and 4'\n\t  ],\n\t  'seealso': [\n\t    'not', 'or', 'xor'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27459"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'not',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'not x',\n\t    'not(x)'\n\t  ],\n\t  'description': 'Logical not. Flips the boolean value of given argument.',\n\t  'examples': [\n\t    'not true',\n\t    'not false',\n\t    'not 2',\n\t    'not 0'\n\t  ],\n\t  'seealso': [\n\t    'and', 'or', 'xor'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27482"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'or',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'x or y',\n\t    'or(x, y)'\n\t  ],\n\t  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',\n\t  'examples': [\n\t    'true or false',\n\t    'false or false',\n\t    '0 or 4'\n\t  ],\n\t  'seealso': [\n\t    'not', 'and', 'xor'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27506"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'xor',\n\t  'category': 'Logical',\n\t  'syntax': [\n\t    'x or y',\n\t    'or(x, y)'\n\t  ],\n\t  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',\n\t  'examples': [\n\t    'true xor false',\n\t    'false xor false',\n\t    'true xor true',\n\t    '0 or 4'\n\t  ],\n\t  'seealso': [\n\t    'not', 'and', 'or'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27529"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'concat',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'concat(A, B, C, ...)',\n\t    'concat(A, B, C, ..., dim)'\n\t  ],\n\t  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',\n\t  'examples': [\n\t    'A = [1, 2; 5, 6]',\n\t    'B = [3, 4; 7, 8]',\n\t    'concat(A, B)',\n\t    'concat(A, B, 1)',\n\t    'concat(A, B, 2)'\n\t  ],\n\t  'seealso': [\n\t    'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27553"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'cross',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'cross(A, B)'\n\t  ],\n\t  'description': 'Calculate the cross product for two vectors in three dimensional space.',\n\t  'examples': [\n\t    'cross([1, 1, 0],  [0, 1, 1])',\n\t    'cross([3, -3, 1], [4, 9, 2])',\n\t    'cross([2, 3, 4],  [5, 6, 7])'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'dot'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27578"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'det',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'det(x)'\n\t  ],\n\t  'description': 'Calculate the determinant of a matrix',\n\t  'examples': [\n\t    'det([1, 2; 3, 4])',\n\t    'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27601"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'diag',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'diag(x)',\n\t    'diag(x, k)'\n\t  ],\n\t  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',\n\t  'examples': [\n\t    'diag(1:3)',\n\t    'diag(1:3, 1)',\n\t    'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',\n\t    'diag(a)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27622"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'dot',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'dot(A, B)'\n\t  ],\n\t  'description': 'Calculate the dot product of two vectors. ' +\n\t      'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +\n\t      'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',\n\t  'examples': [\n\t    'dot([2, 4, 1], [2, 2, 3])',\n\t    '[2, 4, 1] * [2, 2, 3]'\n\t  ],\n\t  'seealso': [\n\t    'multiply',\n\t    'cross'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27646"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'eye',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'eye(n)',\n\t    'eye(m, n)',\n\t    'eye([m, n])',\n\t    'eye'\n\t  ],\n\t  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',\n\t  'examples': [\n\t    'eye(3)',\n\t    'eye(3, 5)',\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'eye(size(a))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27670"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'filter',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'filter(x, test)'\n\t  ],\n\t  'description': 'Filter items in a matrix.',\n\t  'examples': [\n\t    'isPositive(x) = x > 0',\n\t    'filter([6, -2, -1, 4, 3], isPositive)',\n\t    'filter([6, -2, 0, 1, 0], x != 0)'\n\t  ],\n\t  'seealso': ['sort', 'map', 'forEach']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27696"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'flatten',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'flatten(x)'\n\t  ],\n\t  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'size(a)',\n\t    'b = flatten(a)',\n\t    'size(b)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'resize', 'size', 'squeeze'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27716"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'forEach',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'forEach(x, callback)'\n\t  ],\n\t  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',\n\t  'examples': [\n\t    'forEach([1, 2, 3], function(val) { console.log(val) })'\n\t  ],\n\t  'seealso': ['map', 'sort', 'filter']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27739"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'inv',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'inv(x)'\n\t  ],\n\t  'description': 'Calculate the inverse of a matrix',\n\t  'examples': [\n\t    'inv([1, 2; 3, 4])',\n\t    'inv(4)',\n\t    '1 / 4'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27757"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'map',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'map(x, callback)'\n\t  ],\n\t  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',\n\t  'examples': [\n\t    'map([1, 2, 3], function(val) { return value * value })'\n\t  ],\n\t  'seealso': ['filter', 'forEach']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27779"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'ones',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'ones(m)',\n\t    'ones(m, n)',\n\t    'ones(m, n, p, ...)',\n\t    'ones([m])',\n\t    'ones([m, n])',\n\t    'ones([m, n, p, ...])',\n\t    'ones'\n\t  ],\n\t  'description': 'Create a matrix containing ones.',\n\t  'examples': [\n\t    'ones(3)',\n\t    'ones(3, 5)',\n\t    'ones([2,3]) * 4.5',\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'ones(size(a))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27797"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'partitionSelect',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'partitionSelect(x, k)',\n\t    'partitionSelect(x, k, compare)'\n\t  ],\n\t  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',\n\t  'examples': [\n\t    'partitionSelect([5, 10, 1], 2)',\n\t    'partitionSelect([\"C\", \"B\", \"A\", \"D\"], 1)'\n\t  ],\n\t  'seealso': ['sort']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27827"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'range',\n\t  'category': 'Type',\n\t  'syntax': [\n\t    'start:end',\n\t    'start:step:end',\n\t    'range(start, end)',\n\t    'range(start, end, step)',\n\t    'range(string)'\n\t  ],\n\t  'description':\n\t      'Create a range. Lower bound of the range is included, upper bound is excluded.',\n\t  'examples': [\n\t    '1:5',\n\t    '3:-1:-3',\n\t    'range(3, 7)',\n\t    'range(0, 12, 2)',\n\t    'range(\"4:10\")',\n\t    'a = [1, 2, 3, 4; 5, 6, 7, 8]',\n\t    'a[1:2, 1:2]'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27847"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'resize',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'resize(x, size)',\n\t    'resize(x, size, defaultValue)'\n\t  ],\n\t  'description': 'Resize a matrix.',\n\t  'examples': [\n\t    'resize([1,2,3,4,5], [3])',\n\t    'resize([1,2,3], [5])',\n\t    'resize([1,2,3], [5], -1)',\n\t    'resize(2, [2, 3])',\n\t    'resize(\"hello\", [8], \"!\")'\n\t  ],\n\t  'seealso': [\n\t    'size', 'subset', 'squeeze'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27878"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'size',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'size(x)'\n\t  ],\n\t  'description': 'Calculate the size of a matrix.',\n\t  'examples': [\n\t    'size(2.3)',\n\t    'size(\"hello world\")',\n\t    'a = [1, 2; 3, 4; 5, 6]',\n\t    'size(a)',\n\t    'size(1:6)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27903"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'sort',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'sort(x)',\n\t    'sort(x, compare)'\n\t  ],\n\t  'description': 'Sort the items in a matrix. Compare can be a string \"asc\" or \"desc\", or a custom sort function.',\n\t  'examples': [\n\t    'sort([5, 10, 1])',\n\t    'sort([\"C\", \"B\", \"A\", \"D\"])',\n\t    'sortByLength(a, b) = size(a)[1] - size(b)[1]',\n\t    'sort([\"Langdon\", \"Tom\", \"Sara\"], sortByLength)'\n\t  ],\n\t  'seealso': ['map', 'filter', 'forEach']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27927"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'squeeze',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'squeeze(x)'\n\t  ],\n\t  'description': 'Remove inner and outer singleton dimensions from a matrix.',\n\t  'examples': [\n\t    'a = zeros(3,2,1)',\n\t    'size(squeeze(a))',\n\t    'b = zeros(1,1,3)',\n\t    'size(squeeze(b))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27949"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'subset',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'value(index)',\n\t    'value(index) = replacement',\n\t    'subset(value, [index])',\n\t    'subset(value, [index], replacement)'\n\t  ],\n\t  'description': 'Get or set a subset of a matrix or string. ' +\n\t      'Indexes are one-based. ' +\n\t      'Both the ranges lower-bound and upper-bound are included.',\n\t  'examples': [\n\t    'd = [1, 2; 3, 4]',\n\t    'e = []',\n\t    'e[1, 1:2] = [5, 6]',\n\t    'e[2, :] = [7, 8]',\n\t    'f = d * e',\n\t    'f[2, 1]',\n\t    'f[:, 1]'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:27972"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'trace',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'trace(A)'\n\t  ],\n\t  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',\n\t  'examples': [\n\t    'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',\n\t    'trace(A)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28003"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'transpose',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'x\\'',\n\t    'transpose(x)'\n\t  ],\n\t  'description': 'Transpose a matrix',\n\t  'examples': [\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'a\\'',\n\t    'transpose(a)'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28024"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'zeros',\n\t  'category': 'Matrix',\n\t  'syntax': [\n\t    'zeros(m)',\n\t    'zeros(m, n)',\n\t    'zeros(m, n, p, ...)',\n\t    'zeros([m])',\n\t    'zeros([m, n])',\n\t    'zeros([m, n, p, ...])',\n\t    'zeros'\n\t  ],\n\t  'description': 'Create a matrix containing zeros.',\n\t  'examples': [\n\t    'zeros(3)',\n\t    'zeros(3, 5)',\n\t    'a = [1, 2, 3; 4, 5, 6]',\n\t    'zeros(size(a))'\n\t  ],\n\t  'seealso': [\n\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28047"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'combinations',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'combinations(n, k)'\n\t  ],\n\t  'description': 'Compute the number of combinations of n items taken k at a time',\n\t  'examples': [\n\t    'combinations(7, 5)'\n\t  ],\n\t  'seealso': ['permutations', 'factorial']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28076"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'factorial',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'kldivergence(x, y)'\n\t  ],\n\t  'description': 'Compute the factorial of a value',\n\t  'examples': [\n\t    '5!',\n\t    '5 * 4 * 3 * 2 * 1',\n\t    '3!'\n\t  ],\n\t  'seealso': ['combinations', 'permutations', 'gamma']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28094"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'gamma',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'gamma(n)'\n\t  ],\n\t  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',\n\t  'examples': [\n\t    'gamma(4)',\n\t    '3!',\n\t    'gamma(1/2)',\n\t    'sqrt(pi)'\n\t  ],\n\t  'seealso': ['factorial']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28114"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'kldivergence',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'n!',\n\t    'factorial(n)'\n\t  ],\n\t  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',\n\t  'examples': [\n\t    'math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28135"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'multinomial',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'multinomial(A)'\n\t  ],\n\t  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',\n\t  'examples': [\n\t    'multinomial([1, 2, 1])'\n\t  ],\n\t  'seealso': ['combinations', 'factorial']\n\t};\n\n/***/ },",
            "line": " lib/math.js:28154"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'permutations',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'permutations(n)',\n\t    'permutations(n, k)'\n\t  ],\n\t  'description': 'Compute the number of permutations of n items taken k at a time',\n\t  'examples': [\n\t    'permutations(5)',\n\t    'permutations(5, 3)'\n\t  ],\n\t  'seealso': ['combinations', 'factorial']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28171"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'pickRandom',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'pickRandom(array)',\n\t    'pickRandom(array, number)',\n\t    'pickRandom(array, weights)',\n\t    'pickRandom(array, number, weights)',\n\t    'pickRandom(array, weights, number)'\n\t  ],\n\t  'description':\n\t      'Pick a random entry from a given array.',\n\t  'examples': [\n\t    'pickRandom(0:10)',\n\t    'pickRandom([1, 3, 1, 6])',\n\t    'pickRandom([1, 3, 1, 6], 2)',\n\t    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])',\n\t    'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])',\n\t    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'\n\t  ],\n\t  'seealso': ['random', 'randomInt']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28191"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'random',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'random()',\n\t    'random(max)',\n\t    'random(min, max)',\n\t    'random(size)',\n\t    'random(size, max)',\n\t    'random(size, min, max)'\n\t  ],\n\t  'description':\n\t      'Return a random number.',\n\t  'examples': [\n\t    'random()',\n\t    'random(10, 20)',\n\t    'random([2, 3])'\n\t  ],\n\t  'seealso': ['pickRandom', 'randomInt']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28219"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'randInt',\n\t  'category': 'Probability',\n\t  'syntax': [\n\t    'randInt(max)',\n\t    'randInt(min, max)',\n\t    'randInt(size)',\n\t    'randInt(size, max)',\n\t    'randInt(size, min, max)'\n\t  ],\n\t  'description':\n\t      'Return a random integer number',\n\t  'examples': [\n\t    'randInt(10, 20)',\n\t    'randInt([2, 3], 10)'\n\t  ],\n\t  'seealso': ['pickRandom', 'random']\n\t};\n\n/***/ },",
            "line": " lib/math.js:28245"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'compare',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'compare(x, y)'\n\t  ],\n\t  'description':\n\t      'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',\n\t  'examples': [\n\t    'compare(2, 3)',\n\t    'compare(3, 2)',\n\t    'compare(2, 2)',\n\t    'compare(5cm, 40mm)',\n\t    'compare(2, [1, 2, 3])'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28268"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'deepEqual',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'deepEqual(x, y)'\n\t  ],\n\t  'description':\n\t      'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',\n\t  'examples': [\n\t    '[1,3,4] == [1,3,4]',\n\t    '[1,3,4] == [1,3]'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28293"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'equal',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x == y',\n\t    'equal(x, y)'\n\t  ],\n\t  'description':\n\t      'Check equality of two values. Returns true if the values are equal, and false if not.',\n\t  'examples': [\n\t    '2+2 == 3',\n\t    '2+2 == 4',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    'a == b',\n\t    '50cm == 0.5m'\n\t  ],\n\t  'seealso': [\n\t    'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28315"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'larger',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x > y',\n\t    'larger(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',\n\t  'examples': [\n\t    '2 > 3',\n\t    '5 > 2*2',\n\t    'a = 3.3',\n\t    'b = 6-2.8',\n\t    '(a > b)',\n\t    '(b < a)',\n\t    '5 cm > 2 inch'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28342"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'largerEq',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x >= y',\n\t    'largerEq(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',\n\t  'examples': [\n\t    '2 > 1+1',\n\t    '2 >= 1+1',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    '(a > b)'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28370"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'smaller',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x < y',\n\t    'smaller(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',\n\t  'examples': [\n\t    '2 < 3',\n\t    '5 < 2*2',\n\t    'a = 3.3',\n\t    'b = 6-2.8',\n\t    '(a < b)',\n\t    '5 cm < 2 inch'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28396"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'smallerEq',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x <= y',\n\t    'smallerEq(x, y)'\n\t  ],\n\t  'description':\n\t      'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',\n\t  'examples': [\n\t    '2 < 1+1',\n\t    '2 <= 1+1',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    '(a < b)'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28423"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'unequal',\n\t  'category': 'Relational',\n\t  'syntax': [\n\t    'x != y',\n\t    'unequal(x, y)'\n\t  ],\n\t  'description':\n\t      'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',\n\t  'examples': [\n\t    '2+2 != 3',\n\t    '2+2 != 4',\n\t    'a = 3.2',\n\t    'b = 6-2.8',\n\t    'a != b',\n\t    '50cm != 0.5m',\n\t    '5 cm != 2 inch'\n\t  ],\n\t  'seealso': [\n\t    'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28449"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'erf',\n\t  'category': 'Special',\n\t  'syntax': [\n\t    'erf(x)'\n\t  ],\n\t  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',\n\t  'examples': [\n\t    'erf(0.2)',\n\t    'erf(-0.5)',\n\t    'erf(4)'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28477"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'max',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'max(a, b, c, ...)',\n\t    'max(A)',\n\t    'max(A, dim)'\n\t  ],\n\t  'description': 'Compute the maximum value of a list of values.',\n\t  'examples': [\n\t    'max(2, 3, 4, 1)',\n\t    'max([2, 3, 4, 1])',\n\t    'max([2, 5; 4, 3])',\n\t    'max([2, 5; 4, 3], 1)',\n\t    'max([2, 5; 4, 3], 2)',\n\t    'max(2.7, 7.1, -4.5, 2.0, 4.1)',\n\t    'min(2.7, 7.1, -4.5, 2.0, 4.1)'\n\t  ],\n\t  'seealso': [\n\t    'mean',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28497"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'mean',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'mean(a, b, c, ...)',\n\t    'mean(A)',\n\t    'mean(A, dim)'\n\t  ],\n\t  'description': 'Compute the arithmetic mean of a list of values.',\n\t  'examples': [\n\t    'mean(2, 3, 4, 1)',\n\t    'mean([2, 3, 4, 1])',\n\t    'mean([2, 5; 4, 3])',\n\t    'mean([2, 5; 4, 3], 1)',\n\t    'mean([2, 5; 4, 3], 2)',\n\t    'mean([1.0, 2.7, 3.2, 4.0])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28531"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'median',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'median(a, b, c, ...)',\n\t    'median(A)'\n\t  ],\n\t  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',\n\t  'examples': [\n\t    'median(5, 2, 7)',\n\t    'median([3, -1, 5, 7])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28564"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'min',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'min(a, b, c, ...)',\n\t    'min(A)',\n\t    'min(A, dim)'\n\t  ],\n\t  'description': 'Compute the minimum value of a list of values.',\n\t  'examples': [\n\t    'min(2, 3, 4, 1)',\n\t    'min([2, 3, 4, 1])',\n\t    'min([2, 5; 4, 3])',\n\t    'min([2, 5; 4, 3], 1)',\n\t    'min([2, 5; 4, 3], 2)',\n\t    'min(2.7, 7.1, -4.5, 2.0, 4.1)',\n\t    'max(2.7, 7.1, -4.5, 2.0, 4.1)'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'median',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28592"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'mode',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'mode(a, b, c, ...)',\n\t    'mode(A)',\n\t    'mode(A, a, b, B, c, ...)'\n\t  ],\n\t  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',\n\t  'examples': [\n\t    'mode(5, 2, 7)',\n\t    'mode([3, -1, 5, 7])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28626"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'prod',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'prod(a, b, c, ...)',\n\t    'prod(A)'\n\t  ],\n\t  'description': 'Compute the product of all values.',\n\t  'examples': [\n\t    'prod(2, 3, 4)',\n\t    'prod([2, 3, 4])',\n\t    'prod([2, 5; 4, 3])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'min',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28656"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'quantileSeq',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'quantileSeq(A, prob[, sorted])',\n\t    'quantileSeq(A, [prob1, prob2, ...][, sorted])',\n\t    'quantileSeq(A, N[, sorted])'\n\t  ],\n\t  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \\n\\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',\n\t  'examples': [\n\t    'quantileSeq([3, -1, 5, 7], 0.5)',\n\t    'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',\n\t    'quantileSeq([3, -1, 5, 7], 2)',\n\t    'quantileSeq([-1, 3, 5, 7], 0.5, true)'\n\t  ],\n\t  'seealso': [\n\t    'mean',\n\t    'median',\n\t    'min',\n\t    'max',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n/***/ },",
            "line": " lib/math.js:28686"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'std',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'std(a, b, c, ...)',\n\t    'std(A)',\n\t    'std(A, normalization)'\n\t  ],\n\t  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n\t  'examples': [\n\t    'std(2, 4, 6)',\n\t    'std([2, 4, 6, 8])',\n\t    'std([2, 4, 6, 8], \"uncorrected\")',\n\t    'std([2, 4, 6, 8], \"biased\")',\n\t    'std([1, 2, 3; 4, 5, 6])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28717"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'sum',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'sum(a, b, c, ...)',\n\t    'sum(A)'\n\t  ],\n\t  'description': 'Compute the sum of all values.',\n\t  'examples': [\n\t    'sum(2, 3, 4, 1)',\n\t    'sum([2, 3, 4, 1])',\n\t    'sum([2, 5; 4, 3])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum',\n\t    'var'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28750"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'var',\n\t  'category': 'Statistics',\n\t  'syntax': [\n\t    'var(a, b, c, ...)',\n\t    'var(A)',\n\t    'var(A, normalization)'\n\t  ],\n\t  'description': 'Compute the variance of all values. Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n\t  'examples': [\n\t    'var(2, 4, 6)',\n\t    'var([2, 4, 6, 8])',\n\t    'var([2, 4, 6, 8], \"uncorrected\")',\n\t    'var([2, 4, 6, 8], \"biased\")',\n\t    'var([1, 2, 3; 4, 5, 6])'\n\t  ],\n\t  'seealso': [\n\t    'max',\n\t    'mean',\n\t    'min',\n\t    'median',\n\t    'min',\n\t    'prod',\n\t    'std',\n\t    'sum'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28780"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'acos',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acos(x)'\n\t  ],\n\t  'description': 'Compute the inverse cosine of a value in radians.',\n\t  'examples': [\n\t    'acos(0.5)',\n\t    'acos(cos(2.3))'\n\t  ],\n\t  'seealso': [\n\t    'cos',\n\t    'atan',\n\t    'asin'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28813"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'acosh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acosh(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',\n\t  'examples': [\n\t    'acosh(1.5)'\n\t  ],\n\t  'seealso': [\n\t    'cosh',\n\t    'asinh',\n\t    'atanh'\n\t  ]\n\t};\n\n/***/ },",
            "line": " lib/math.js:28836"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'acot',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acot(x)'\n\t  ],\n\t  'description': 'Calculate the inverse cotangent of a value.',\n\t  'examples': [\n\t    'acot(0.5)',\n\t    'acot(cot(0.5))',\n\t    'acot(2)'\n\t  ],\n\t  'seealso': [\n\t    'cot',\n\t    'atan'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28857"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'acoth',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acoth(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',\n\t  'examples': [\n\t    'acoth(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acsch',\n\t    'asech'\n\t  ]\n\t};\n\n/***/ },",
            "line": " lib/math.js:28880"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'acsc',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acsc(x)'\n\t  ],\n\t  'description': 'Calculate the inverse cotangent of a value.',\n\t  'examples': [\n\t    'acsc(0.5)',\n\t    'acsc(csc(0.5))',\n\t    'acsc(2)'\n\t  ],\n\t  'seealso': [\n\t    'csc',\n\t    'asin',\n\t    'asec'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28900"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'acsch',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'acsch(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',\n\t  'examples': [\n\t    'acsch(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'asech',\n\t    'acoth'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28924"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'asec',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asec(x)'\n\t  ],\n\t  'description': 'Calculate the inverse secant of a value.',\n\t  'examples': [\n\t    'asec(0.5)',\n\t    'asec(sec(0.5))',\n\t    'asec(2)'\n\t  ],\n\t  'seealso': [\n\t    'acos',\n\t    'acot',\n\t    'acsc'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28945"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'asech',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asech(x)'\n\t  ],\n\t  'description': 'Calculate the inverse secant of a value.',\n\t  'examples': [\n\t    'asech(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acsch',\n\t    'acoth'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28969"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'asin',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asin(x)'\n\t  ],\n\t  'description': 'Compute the inverse sine of a value in radians.',\n\t  'examples': [\n\t    'asin(0.5)',\n\t    'asin(sin(2.3))'\n\t  ],\n\t  'seealso': [\n\t    'sin',\n\t    'acos',\n\t    'atan'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:28990"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'asinh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'asinh(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',\n\t  'examples': [\n\t    'asinh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acosh',\n\t    'atanh'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29013"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'atan',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'atan(x)'\n\t  ],\n\t  'description': 'Compute the inverse tangent of a value in radians.',\n\t  'examples': [\n\t    'atan(0.5)',\n\t    'atan(tan(2.3))'\n\t  ],\n\t  'seealso': [\n\t    'tan',\n\t    'acos',\n\t    'asin'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29034"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'atanh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'atanh(x)'\n\t  ],\n\t  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',\n\t  'examples': [\n\t    'atanh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'acosh',\n\t    'asinh'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29057"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'atan2',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'atan2(y, x)'\n\t  ],\n\t  'description':\n\t      'Computes the principal value of the arc tangent of y/x in radians.',\n\t  'examples': [\n\t    'atan2(2, 2) / pi',\n\t    'angle = 60 deg in rad',\n\t    'x = cos(angle)',\n\t    'y = sin(angle)',\n\t    'atan2(y, x)'\n\t  ],\n\t  'seealso': [\n\t    'sin',\n\t    'cos',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29078"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'cos',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'cos(x)'\n\t  ],\n\t  'description': 'Compute the cosine of x in radians.',\n\t  'examples': [\n\t    'cos(2)',\n\t    'cos(pi / 4) ^ 2',\n\t    'cos(180 deg)',\n\t    'cos(60 deg)',\n\t    'sin(0.2)^2 + cos(0.2)^2'\n\t  ],\n\t  'seealso': [\n\t    'acos',\n\t    'sin',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29105"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'cosh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'cosh(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic cosine of x in radians.',\n\t  'examples': [\n\t    'cosh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'sinh',\n\t    'tanh',\n\t    'coth'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29131"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'cot',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'cot(x)'\n\t  ],\n\t  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',\n\t  'examples': [\n\t    'cot(2)',\n\t    '1 / tan(2)'\n\t  ],\n\t  'seealso': [\n\t    'sec',\n\t    'csc',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29153"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'coth',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'coth(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic cotangent of x in radians.',\n\t  'examples': [\n\t    'coth(2)',\n\t    '1 / tanh(2)'\n\t  ],\n\t  'seealso': [\n\t    'sech',\n\t    'csch',\n\t    'tanh'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29176"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'csc',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'csc(x)'\n\t  ],\n\t  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',\n\t  'examples': [\n\t    'csc(2)',\n\t    '1 / sin(2)'\n\t  ],\n\t  'seealso': [\n\t    'sec',\n\t    'cot',\n\t    'sin'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29199"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'csch',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'csch(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',\n\t  'examples': [\n\t    'csch(2)',\n\t    '1 / sinh(2)'\n\t  ],\n\t  'seealso': [\n\t    'sech',\n\t    'coth',\n\t    'sinh'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29222"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'sec',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'sec(x)'\n\t  ],\n\t  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',\n\t  'examples': [\n\t    'sec(2)',\n\t    '1 / cos(2)'\n\t  ],\n\t  'seealso': [\n\t    'cot',\n\t    'csc',\n\t    'cos'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29245"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'sech',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'sech(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',\n\t  'examples': [\n\t    'sech(2)',\n\t    '1 / cosh(2)'\n\t  ],\n\t  'seealso': [\n\t    'coth',\n\t    'csch',\n\t    'cosh'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29268"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'sin',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'sin(x)'\n\t  ],\n\t  'description': 'Compute the sine of x in radians.',\n\t  'examples': [\n\t    'sin(2)',\n\t    'sin(pi / 4) ^ 2',\n\t    'sin(90 deg)',\n\t    'sin(30 deg)',\n\t    'sin(0.2)^2 + cos(0.2)^2'\n\t  ],\n\t  'seealso': [\n\t    'asin',\n\t    'cos',\n\t    'tan'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29291"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'sinh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'sinh(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic sine of x in radians.',\n\t  'examples': [\n\t    'sinh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'cosh',\n\t    'tanh'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29317"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'tan',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'tan(x)'\n\t  ],\n\t  'description': 'Compute the tangent of x in radians.',\n\t  'examples': [\n\t    'tan(0.5)',\n\t    'sin(0.5) / cos(0.5)',\n\t    'tan(pi / 4)',\n\t    'tan(45 deg)'\n\t  ],\n\t  'seealso': [\n\t    'atan',\n\t    'sin',\n\t    'cos'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29338"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'tanh',\n\t  'category': 'Trigonometry',\n\t  'syntax': [\n\t    'tanh(x)'\n\t  ],\n\t  'description': 'Compute the hyperbolic tangent of x in radians.',\n\t  'examples': [\n\t    'tanh(0.5)',\n\t    'sinh(0.5) / cosh(0.5)'\n\t  ],\n\t  'seealso': [\n\t    'sinh',\n\t    'cosh'\n\t  ]\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29363"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'to',\n\t  'category': 'Units',\n\t  'syntax': [\n\t    'x to unit',\n\t    'to(x, unit)'\n\t  ],\n\t  'description': 'Change the unit of a value.',\n\t  'examples': [\n\t    '5 inch to cm',\n\t    '3.2kg to g',\n\t    '16 bytes in bits'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29385"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'clone',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'clone(x)'\n\t  ],\n\t  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',\n\t  'examples': [\n\t    'clone(3.5)',\n\t    'clone(2 - 4i)',\n\t    'clone(45 deg)',\n\t    'clone([1, 2; 3, 4])',\n\t    'clone(\"hello world\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29406"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'format',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'format(value)',\n\t    'format(value, precision)'\n\t  ],\n\t  'description': 'Format a value of any type as string.',\n\t  'examples': [\n\t    'format(2.3)',\n\t    'format(3 - 4i)',\n\t    'format([])',\n\t    'format(pi, 3)'\n\t  ],\n\t  'seealso': ['print']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29428"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'isNaN',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isNaN(x)'\n\t  ],\n\t  'description': 'Test whether a value is NaN (not a number)',\n\t  'examples': [\n\t    'isNaN(2)',\n\t    'isNaN(0 / 0)',\n\t    'isNaN(NaN)',\n\t    'isNaN(Infinity)'\n\t  ],\n\t  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29450"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'isInteger',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isInteger(x)'\n\t  ],\n\t  'description': 'Test whether a value is an integer number.',\n\t  'examples': [\n\t    'isInteger(2)',\n\t    'isInteger(3.5)',\n\t    'isInteger([3, 0.5, -2])'\n\t  ],\n\t  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29471"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'isNegative',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isNegative(x)'\n\t  ],\n\t  'description': 'Test whether a value is negative: smaller than zero.',\n\t  'examples': [\n\t    'isNegative(2)',\n\t    'isNegative(0)',\n\t    'isNegative(-4)',\n\t    'isNegative([3, 0.5, -2])'\n\t  ],\n\t  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29491"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'isNumeric',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isNumeric(x)'\n\t  ],\n\t  'description': 'Test whether a value is a numeric value. ' +\n\t    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',\n\t  'examples': [\n\t    'isNumeric(2)',\n\t    'isNumeric(0)',\n\t    'isNumeric(bignumber(500))',\n\t    'isNumeric(fraction(0.125))',\n\t    'isNumeric(\"3\")',\n\t    'isNumeric(2 + 3i)',\n\t    'isNumeric([2.3, \"foo\", false])'\n\t  ],\n\t  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29512"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'isPositive',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isPositive(x)'\n\t  ],\n\t  'description': 'Test whether a value is positive: larger than zero.',\n\t  'examples': [\n\t    'isPositive(2)',\n\t    'isPositive(0)',\n\t    'isPositive(-4)',\n\t    'isPositive([3, 0.5, -2])'\n\t  ],\n\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29537"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'isPrime',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isPrime(x)'\n\t  ],\n\t  'description': 'Test whether a value is prime: has no divisors other than itself and one.',\n\t  'examples': [\n\t    'isPrime(3)',\n\t    'isPrime(-2)',\n\t    'isPrime([2, 17, 100])'\n\t  ],\n\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n\t};\n\n/***/ },",
            "line": " lib/math.js:29558"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'isZero',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'isZero(x)'\n\t  ],\n\t  'description': 'Test whether a value is zero.',\n\t  'examples': [\n\t    'isZero(2)',\n\t    'isZero(0)',\n\t    'isZero(-4)',\n\t    'isZero([3, 0, -2, 0])'\n\t  ],\n\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29577"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t  'name': 'typeof',\n\t  'category': 'Utils',\n\t  'syntax': [\n\t    'typeof(x)'\n\t  ],\n\t  'description': 'Get the type of a variable.',\n\t  'examples': [\n\t    'typeof(3.5)',\n\t    'typeof(2 - 4i)',\n\t    'typeof(45 deg)',\n\t    'typeof(\"hello world\")'\n\t  ],\n\t  'seealso': []\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:29598"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(281),\n\t  __webpack_require__(304),\n\t  __webpack_require__(305),\n\t  __webpack_require__(306),\n\t  __webpack_require__(307)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:29619"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var parse = load(__webpack_require__(282));\n  /**\n\t   * Parse and compile an expression.\n\t   * Returns a an object with a function `eval([scope])` to evaluate the\n\t   * compiled expression.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.compile(expr)                       // returns one node\n\t   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var code = math.compile('sqrt(3^2 + 4^2)');\n\t   *     code.eval(); // 5\n\t   *\n\t   *     var scope = {a: 3, b: 4}\n\t   *     var code = math.compile('a * b'); // 12\n\t   *     code.eval(scope); // 12\n\t   *     scope.a = 5;\n\t   *     code.eval(scope); // 20\n\t   *\n\t   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);\n\t   *     nodes[2].eval(); // 12\n\t   *\n\t   * See also:\n\t   *\n\t   *    parse, eval\n\t   *\n\t   * @param {string | string[] | Array | Matrix} expr\n\t   *            The expression to be compiled\n\t   * @return {{eval: Function} | Array.<{eval: Function}>} code\n\t   *            An object with the compiled expression\n\t   * @throws {Error}",
            "line": " lib/math.js:29632"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:29692"
        },
        {
            "message": "Missing item type\n'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\tvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var AccessorNode            = load(__webpack_require__(283));\n\t  var ArrayNode               = load(__webpack_require__(289));\n\t  var AssignmentNode          = load(__webpack_require__(290));\n\t  var BlockNode               = load(__webpack_require__(293));\n\t  var ConditionalNode         = load(__webpack_require__(294));\n\t  var ConstantNode            = load(__webpack_require__(295));\n\t  var FunctionAssignmentNode  = load(__webpack_require__(296));\n\t  var IndexNode               = load(__webpack_require__(297));\n\t  var ObjectNode              = load(__webpack_require__(300));\n\t  var OperatorNode            = load(__webpack_require__(301));\n\t  var ParenthesisNode         = load(__webpack_require__(303));\n\t  var FunctionNode            = load(__webpack_require__(302));\n\t  var RangeNode               = load(__webpack_require__(298));\n\t  var SymbolNode              = load(__webpack_require__(299));\n\n  /**\n\t   * Parse an expression. Returns a node tree, which can be evaluated by\n\t   * invoking node.eval();\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     parse(expr)\n\t   *     parse(expr, options)\n\t   *     parse([expr1, expr2, expr3, ...])\n\t   *     parse([expr1, expr2, expr3, ...], options)\n\t   *\n\t   * Example:\n\t   *\n\t   *     var node = parse('sqrt(3^2 + 4^2)');\n\t   *     node.compile(math).eval(); // 5\n\t   *\n\t   *     var scope = {a:3, b:4}\n\t   *     var node = parse('a * b'); // 12\n\t   *     var code = node.compile(math);\n\t   *     code.eval(scope); // 12\n\t   *     scope.a = 5;\n\t   *     code.eval(scope); // 20\n\t   *\n\t   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n\t   *     nodes[2].compile(math).eval(); // 12\n\t   *\n\t   * @param {string | string[] | Matrix} expr\n\t   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n\t   *                                                   - `nodes` a set of custom nodes\n\t   * @return {Node | Node[]} node\n\t   * @throws {Error}",
            "line": " lib/math.js:29694"
        },
        {
            "message": "Missing item type\nGet the first character from the expression.\nThe character is stored into the char c. If the end of the expression is\nreached, the function puts an empty string in c.",
            "line": " lib/math.js:29851"
        },
        {
            "message": "Missing item type\nGet the next character from the expression.\nThe character is stored into the char c. If the end of the expression is\nreached, the function puts an empty string in c.",
            "line": " lib/math.js:29864"
        },
        {
            "message": "Missing item type\nPreview the previous character from the expression.",
            "line": " lib/math.js:29875"
        },
        {
            "message": "Missing item type\nPreview the next character from the expression.",
            "line": " lib/math.js:29884"
        },
        {
            "message": "Missing item type\nPreview the second next character from the expression.",
            "line": " lib/math.js:29893"
        },
        {
            "message": "Missing item type\nGet next token in the current string expr.\nThe token and token type are available as token and token_type",
            "line": " lib/math.js:29902"
        },
        {
            "message": "Missing item type\nGet next token and skip newline tokens",
            "line": " lib/math.js:30060"
        },
        {
            "message": "Missing item type\nOpen parameters.\nNew line characters will be ignored until closeParams() is called",
            "line": " lib/math.js:30070"
        },
        {
            "message": "Missing item type\nClose parameters.\nNew line characters will no longer be ignored",
            "line": " lib/math.js:30078"
        },
        {
            "message": "Missing item type\nChecks whether the current character `c` is a valid alpha character:\n\n- A latin letter (upper or lower case) Ascii: a-z, A-Z\n- An underscore                         Ascii: _\n- A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n- A greek letter                       Unicode: \\u0370 - \\u03FF\n- A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n\nThe previous and next characters are needed to determine whether\nthis character is part of a unicode surrogate pair.",
            "line": " lib/math.js:30086"
        },
        {
            "message": "Missing item type\nTest whether a character is a valid latin, greek, or letter-like character",
            "line": " lib/math.js:30109"
        },
        {
            "message": "Missing item type\nTest whether two given 16 bit characters form a surrogate pair of a\nunicode math symbol.\n\nhttp://unicode-table.com/en/\nhttp://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n\nNote: In ES6 will be unicode aware:\nhttp://stackoverflow.com/questions/280712/javascript-unicode-regexes\nhttps://mathiasbynens.be/notes/es6-unicode-regex",
            "line": " lib/math.js:30118"
        },
        {
            "message": "Missing item type\nCheck whether given character c is a white space character: space, tab, or enter",
            "line": " lib/math.js:30139"
        },
        {
            "message": "Missing item type\nTest whether the character c is a decimal mark (dot).\nThis is the case when it's not the start of a delimiter '.*', './', or '.^'",
            "line": " lib/math.js:30150"
        },
        {
            "message": "Missing item type\nchecks if the given char c is a digit or dot",
            "line": " lib/math.js:30161"
        },
        {
            "message": "Missing item type\nchecks if the given char c is a digit",
            "line": " lib/math.js:30170"
        },
        {
            "message": "Missing item type\nStart of the parse levels below, in order of precedence",
            "line": " lib/math.js:30179"
        },
        {
            "message": "Missing item type\nParse a block with expressions. Expressions can be separated by a newline\ncharacter '\\n', or by a semicolon ';'. In case of a semicolon, no output\nof the preceding line is returned.",
            "line": " lib/math.js:30209"
        },
        {
            "message": "Missing item type\nAssignment of a function or variable,\n- can be a variable like 'a=2.3'\n- or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n- defining a function like 'f(x) = x^2'",
            "line": " lib/math.js:30264"
        },
        {
            "message": "Missing item type\nconditional operation\n\n    condition ? truePart : falsePart\n\nNote: conditional operator is right-associative",
            "line": " lib/math.js:30319"
        },
        {
            "message": "Missing item type\nlogical or, 'x or y'",
            "line": " lib/math.js:30358"
        },
        {
            "message": "Missing item type\nlogical exclusive or, 'x xor y'",
            "line": " lib/math.js:30374"
        },
        {
            "message": "Missing item type\nlogical and, 'x and y'",
            "line": " lib/math.js:30390"
        },
        {
            "message": "Missing item type\nbitwise or, 'x | y'",
            "line": " lib/math.js:30406"
        },
        {
            "message": "Missing item type\nbitwise exclusive or (xor), 'x ^| y'",
            "line": " lib/math.js:30422"
        },
        {
            "message": "Missing item type\nbitwise and, 'x & y'",
            "line": " lib/math.js:30438"
        },
        {
            "message": "Missing item type\nrelational operators",
            "line": " lib/math.js:30454"
        },
        {
            "message": "Missing item type\nBitwise left shift, bitwise right arithmetic shift, bitwise right logical shift",
            "line": " lib/math.js:30484"
        },
        {
            "message": "Missing item type\nconversion operators 'to' and 'in'",
            "line": " lib/math.js:30512"
        },
        {
            "message": "Missing item type\nparse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc",
            "line": " lib/math.js:30547"
        },
        {
            "message": "Missing item type\nadd or subtract",
            "line": " lib/math.js:30595"
        },
        {
            "message": "Missing item type\nmultiply, divide, modulus",
            "line": " lib/math.js:30621"
        },
        {
            "message": "Missing item type\nUnary plus and minus, and logical and bitwise not",
            "line": " lib/math.js:30674"
        },
        {
            "message": "Missing item type\npower\nNote: power operator is right associative",
            "line": " lib/math.js:30700"
        },
        {
            "message": "Missing item type\nLeft hand operators: factorial x!, transpose x'",
            "line": " lib/math.js:30723"
        },
        {
            "message": "Missing item type\nParse a custom node handler. A node handler can be used to process\nnodes in a custom way, for example for handling a plot.\n\nA handler must be passed as second argument of the parse function.\n- must extend math.expression.node.Node\n- must contain a function _compile(defs: Object) : string\n- must contain a function find(filter: Object) : Node[]\n- must contain a function toString() : string\n- the constructor is called with a single argument containing all parameters\n\nFor example:\n\n    nodes = {\n      'plot': PlotHandler\n    };\n\nThe constructor of the handler is called as:\n\n    node = new PlotHandler(params);\n\nThe handler will be invoked when evaluating an expression like:\n\n    node = math.parse('plot(sin(x), x)', nodes);",
            "line": " lib/math.js:30752"
        },
        {
            "message": "Missing item type\nparse symbols: functions, variables, constants, units",
            "line": " lib/math.js:30820"
        },
        {
            "message": "Missing item type\nparse accessors:\n- function invocation in round brackets (...), for example sqrt(2)\n- index enclosed in square brackets [...], for example A[2,3]\n- dot notation for properties, like foo.bar",
            "line": " lib/math.js:30843"
        },
        {
            "message": "Missing item type\nparse a string.\nA string is enclosed by double quotes",
            "line": " lib/math.js:30935"
        },
        {
            "message": "Missing item type\nParse a string surrounded by double quotes \"...\"",
            "line": " lib/math.js:30959"
        },
        {
            "message": "Missing item type\nparse the matrix",
            "line": " lib/math.js:30986"
        },
        {
            "message": "Missing item type\nParse a single comma-separated row from a matrix, like 'a, b, c'",
            "line": " lib/math.js:31057"
        },
        {
            "message": "Missing item type\nparse an object, enclosed in angle brackets{...}, for example {value: 2}",
            "line": " lib/math.js:31076"
        },
        {
            "message": "Missing item type\nparse a number",
            "line": " lib/math.js:31130"
        },
        {
            "message": "Missing item type\nparentheses",
            "line": " lib/math.js:31149"
        },
        {
            "message": "Missing item type\nEvaluated when the expression is not yet ended but expected to end",
            "line": " lib/math.js:31179"
        },
        {
            "message": "Missing item type\nShortcut for getting the current row value (one based)\nReturns the line of the currently handled expression",
            "line": " lib/math.js:31193"
        },
        {
            "message": "Missing item type\nShortcut for getting the current col value (one based)\nReturns the column (position) where the last token starts",
            "line": " lib/math.js:31204"
        },
        {
            "message": "Missing item type\nCreate an error",
            "line": " lib/math.js:31213"
        },
        {
            "message": "Missing item type\nCreate an error",
            "line": " lib/math.js:31227"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:31249"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n\t  var access = load(__webpack_require__(286));\n  /**\n\t   * @constructor AccessorNode\n\t   * @extends {Node}\n\t   * Access an object property or get a matrix subset\n\t   *\n\t   * @param {Node} object                 The object from which to retrieve\n\t   *                                      a property or subset.\n\t   * @param {IndexNode} index             IndexNode containing ranges",
            "line": " lib/math.js:31251"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:31307"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:31341"
        },
        {
            "message": "Missing item type\nCreate a new AccessorNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:31350"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:31363"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:31371"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:31385"
        },
        {
            "message": "Missing item type\nAre parenthesis needed?",
            "line": " lib/math.js:31399"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:31418"
        },
        {
            "message": "Missing item type\n'use strict';\nvar keywords = __webpack_require__(285);\n\tvar extend = __webpack_require__(3).extend;\n\tvar deepEqual= __webpack_require__(3).deepEqual;\nfunction factory (type, config, load, typed, math) {\n\t  /**\n\t   * Node",
            "line": " lib/math.js:31420"
        },
        {
            "message": "Missing item type\nEvaluate the node",
            "line": " lib/math.js:31438"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:31453"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:31496"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:31513"
        },
        {
            "message": "Missing item type\nCreate a new Node having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:31522"
        },
        {
            "message": "Missing item type\nValidate whether an object is a Node, for use with map",
            "line": " lib/math.js:31533"
        },
        {
            "message": "Missing item type\nRecursively traverse all nodes in a node tree. Executes given callback for\nthis node and each of its child nodes.",
            "line": " lib/math.js:31547"
        },
        {
            "message": "Missing item type\nRecursively transform a node tree via a transform function.\n\nFor example, to replace all nodes of type SymbolNode having name 'x' with a\nConstantNode with value 2:\n\n    var res = Node.transform(function (node, path, parent) {\n      if (node && node.isSymbolNode) && (node.name == 'x')) {\n        return new ConstantNode(2);\n      }\n      else {\n        return node;\n      }\n    });",
            "line": " lib/math.js:31568"
        },
        {
            "message": "Missing item type\nFind any node in the node tree matching given filter function. For example, to\nfind all nodes of type SymbolNode having name 'x':\n\n    var results = Node.filter(function (node) {\n      return (node && node.isSymbolNode) && (node.name == 'x');\n    });",
            "line": " lib/math.js:31602"
        },
        {
            "message": "Missing item type\nCreate a shallow clone of this node",
            "line": " lib/math.js:31638"
        },
        {
            "message": "Missing item type\nCreate a deep clone of this node",
            "line": " lib/math.js:31647"
        },
        {
            "message": "Missing item type\nDeep compare this node with another node.",
            "line": " lib/math.js:31657"
        },
        {
            "message": "Missing item type\nGet string representation. (wrapper function)\n\nThis function can get an object of the following form:\n{\n   handler: //This can be a callback function of the form\n            // \"function callback(node, options)\"or\n            // a map that maps function names (used in FunctionNodes)\n            // to callbacks\n   parenthesis: \"keep\" //the parenthesis option (This is optional)\n}",
            "line": " lib/math.js:31669"
        },
        {
            "message": "Missing item type\nInternal function to generate the string output.\nThis has to be implemented by every Node",
            "line": " lib/math.js:31706"
        },
        {
            "message": "Missing item type\nGet LaTeX representation. (wrapper function)\n\nThis function can get an object of the following form:\n{\n   handler: //This can be a callback function of the form\n            // \"function callback(node, options)\"or\n            // a map that maps function names (used in FunctionNodes)\n            // to callbacks\n   parenthesis: \"keep\" //the parenthesis option (This is optional)\n}",
            "line": " lib/math.js:31717"
        },
        {
            "message": "Missing item type\nInternal function to generate the LaTeX output.\nThis has to be implemented by every Node",
            "line": " lib/math.js:31754"
        },
        {
            "message": "Missing item type\nGet identifier.",
            "line": " lib/math.js:31766"
        },
        {
            "message": "Missing item type\nGet the content of the current Node.",
            "line": " lib/math.js:31774"
        },
        {
            "message": "Missing item type\nValidate the symbol names of a scope.\nThrows an error when the scope contains an illegal symbol.",
            "line": " lib/math.js:31782"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:31806"
        },
        {
            "message": "Missing item type\n'use strict';\n// Reserved keywords not allowed to use in the parser\n\tmodule.exports = {\n\t  end: true\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:31808"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\nfunction factory (type, config, load, typed) {\n\t  var subset = load(__webpack_require__(288));\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Retrieve part of an object:\n\t   *\n\t   * - Retrieve a property from an object\n\t   * - Retrieve a part of a string\n\t   * - Retrieve a matrix subset\n\t   *\n\t   * @param {Object | Array | Matrix | string} object\n\t   * @param {Index} index\n\t   * @return {Object | Array | Matrix | string} Returns the subset",
            "line": " lib/math.js:31820"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:31872"
        },
        {
            "message": "Missing item type\nvar IndexError = __webpack_require__(43);\n/**\n\t * Transform zero-based indices to one-based indices in errors\n\t * @param {Error} err\n\t * @returns {Error} Returns the transformed error",
            "line": " lib/math.js:31874"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:31895"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar validateIndex = __webpack_require__(40).validateIndex;\n\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Get or set a subset of a matrix or string.\n\t   *\n\t   * Syntax:\n\t   *     math.subset(value, index)                                // retrieve a subset\n\t   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n\t   *\n\t   * Examples:\n\t   *\n\t   *     // get a subset\n\t   *     var d = [[1, 2], [3, 4]];\n\t   *     math.subset(d, math.index(1, 0));        // returns 3\n\t   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]\n\t   *\n\t   *     // replace a subset\n\t   *     var e = [];\n\t   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]\n\t   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]\n\t   *\n\t   * See also:\n\t   *\n\t   *     size, resize, squeeze, index\n\t   *\n\t   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n\t   * @param {Index} index                     An index containing ranges for each\n\t   *                                          dimension\n\t   * @param {*} [replacement]                 An array, matrix, or scalar.\n\t   *                                          If provided, the subset is replaced with replacement.\n\t   *                                          If not provided, the subset is returned\n\t   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n\t   *                                          the matrix is resized. If not provided,\n\t   *                                          math.matrix elements will be left undefined.\n\t   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.",
            "line": " lib/math.js:31897"
        },
        {
            "message": "Missing item type\nRetrieve a subset of a string",
            "line": " lib/math.js:31988"
        },
        {
            "message": "Missing item type\nReplace a substring in a string",
            "line": " lib/math.js:32019"
        },
        {
            "message": "Missing item type\nRetrieve a property from an object",
            "line": " lib/math.js:32081"
        },
        {
            "message": "Missing item type\nSet a property on an object",
            "line": " lib/math.js:32101"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:32130"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * @constructor ArrayNode\n\t   * @extends {Node}\n\t   * Holds an 1-dimensional array with items\n\t   * @param {Node[]} [items]   1 dimensional array with items",
            "line": " lib/math.js:32132"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:32171"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:32194"
        },
        {
            "message": "Missing item type\nCreate a new ArrayNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:32205"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:32219"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:32227"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:32240"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:32273"
        },
        {
            "message": "Missing item type\n'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n\t  var ArrayNode = load(__webpack_require__(289));\n\t  var matrix = load(__webpack_require__(52));\n\t  var assign = load(__webpack_require__(291));\n\t  var access = load(__webpack_require__(286));\n  var keywords = __webpack_require__(285);\n\t  var operators = __webpack_require__(292);\n  /**\n\t   * @constructor AssignmentNode\n\t   * @extends {Node}\n\t   *\n\t   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n\t   * replace a subset of a matrix like `A[2,2]=42`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     new AssignmentNode(symbol, value)\n\t   *     new AssignmentNode(object, index, value)\n\t   *\n\t   * Usage:\n\t   *\n\t   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2\n\t   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n\t   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n\t   *\n\t   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n\t   * @param {IndexNode} [index=null]            Index, property name or matrix\n\t   *                                            index. Optional. If not provided\n\t   *                                            and `object` is a SymbolNode,\n\t   *                                            the property is assigned to the\n\t   *                                            global scope.\n\t   * @param {Node} value                        The value to be assigned",
            "line": " lib/math.js:32275"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:32364"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:32449"
        },
        {
            "message": "Missing item type\nCreate a new AssignmentNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:32461"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:32477"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:32502"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:32518"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:32542"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\nfunction factory (type, config, load, typed) {\n\t  var subset = load(__webpack_require__(288));\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Replace part of an object:\n\t   *\n\t   * - Assign a property to an object\n\t   * - Replace a part of a string\n\t   * - Replace a matrix subset\n\t   *\n\t   * @param {Object | Array | Matrix | string} object\n\t   * @param {Index} index\n\t   * @param {*} value\n\t   * @return {Object | Array | Matrix | string} Returns the original object\n\t   *                                            except in case of a string",
            "line": " lib/math.js:32544"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:32599"
        },
        {
            "message": "Missing item type\n'use strict'\n//list of identifiers of nodes in order of their precedence\n\t//also contains information about left/right associativity\n\t//and which other operator the operator is associative with\n\t//Example:\n\t// addition is associative with addition and subtraction, because:\n\t// (a+b)+c=a+(b+c)\n\t// (a+b)-c=a+(b-c)\n\t//\n\t// postfix operators are left associative, prefix operators \n\t// are right associative\n\t//\n\t//It's also possible to set the following properties:\n\t// latexParens: if set to false, this node doesn't need to be enclosed\n\t//              in parentheses when using LaTeX\n\t// latexLeftParens: if set to false, this !OperatorNode's! \n\t//                  left argument doesn't need to be enclosed\n\t//                  in parentheses\n\t// latexRightParens: the same for the right argument\n\tvar properties = [\n\t  { //assignment\n\t    'AssignmentNode': {},\n\t    'FunctionAssignmentNode': {}\n\t  },\n\t  { //conditional expression\n\t    'ConditionalNode': {\n\t      latexLeftParens: false,\n\t      latexRightParens: false,\n\t      latexParens: false\n\t      //conditionals don't need parentheses in LaTeX because\n\t      //they are 2 dimensional\n\t    }\n\t  },\n\t  { //logical or\n\t    'OperatorNode:or': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n  },\n\t  { //logical xor\n\t    'OperatorNode:xor': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //logical and\n\t    'OperatorNode:and': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitwise or\n\t    'OperatorNode:bitOr': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitwise xor\n\t    'OperatorNode:bitXor': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitwise and\n\t    'OperatorNode:bitAnd': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //relational operators\n\t    'OperatorNode:equal': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:unequal': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:smaller': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:larger': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:smallerEq': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:largerEq': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //bitshift operators\n\t    'OperatorNode:leftShift': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:rightArithShift': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:rightLogShift': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //unit conversion\n\t    'OperatorNode:to': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //range\n\t    'RangeNode': {}\n\t  },\n\t  { //addition, subtraction\n\t    'OperatorNode:add': {\n\t      associativity: 'left',\n\t      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']\n\t    },\n\t    'OperatorNode:subtract': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //multiply, divide, modulus\n\t    'OperatorNode:multiply': {\n\t      associativity: 'left',\n\t      associativeWith: [\n\t        'OperatorNode:multiply',\n\t        'OperatorNode:divide',\n\t        'Operator:dotMultiply',\n\t        'Operator:dotDivide'\n\t      ]\n\t    },\n\t    'OperatorNode:divide': {\n\t      associativity: 'left',\n\t      associativeWith: [],\n\t      latexLeftParens: false,\n\t      latexRightParens: false,\n\t      latexParens: false\n\t      //fractions don't require parentheses because\n\t      //they're 2 dimensional, so parens aren't needed\n\t      //in LaTeX\n\t    },\n\t    'OperatorNode:dotMultiply': {\n\t      associativity: 'left',\n\t      associativeWith: [\n\t        'OperatorNode:multiply',\n\t        'OperatorNode:divide',\n\t        'OperatorNode:dotMultiply',\n\t        'OperatorNode:doDivide'\n\t      ]\n\t    },\n\t    'OperatorNode:dotDivide': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    },\n\t    'OperatorNode:mod': {\n\t      associativity: 'left',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //unary prefix operators\n\t    'OperatorNode:unaryPlus': {\n\t      associativity: 'right'\n\t    },\n\t    'OperatorNode:unaryMinus': {\n\t      associativity: 'right'\n\t    },\n\t    'OperatorNode:bitNot': {\n\t      associativity: 'right'\n\t    },\n\t    'OperatorNode:not': {\n\t      associativity: 'right'\n\t    }\n\t  },\n\t  { //exponentiation\n\t    'OperatorNode:pow': {\n\t      associativity: 'right',\n\t      associativeWith: [],\n\t      latexRightParens: false\n\t      //the exponent doesn't need parentheses in\n\t      //LaTeX because it's 2 dimensional\n\t      //(it's on top)\n\t    },\n\t    'OperatorNode:dotPow': {\n\t      associativity: 'right',\n\t      associativeWith: []\n\t    }\n\t  },\n\t  { //factorial\n\t    'OperatorNode:factorial': {\n\t      associativity: 'left'\n\t    }\n\t  },\n\t  { //matrix transpose\n\t    'OperatorNode:transpose': {\n\t      associativity: 'left'\n\t    }\n\t  }\n\t];\n/**\n\t * Get the precedence of a Node.\n\t * Higher number for higher precedence, starting with 0.\n\t * Returns null if the precedence is undefined.\n\t *\n\t * @param {Node}\n\t * @param {string} parenthesis\n\t * @return {number|null}",
            "line": " lib/math.js:32601"
        },
        {
            "message": "Missing item type\nGet the associativity of an operator (left or right).\nReturns a string containing 'left' or 'right' or null if\nthe associativity is not defined.",
            "line": " lib/math.js:32835"
        },
        {
            "message": "Missing item type\nCheck if an operator is associative with another operator.\nReturns either true or false or null if not defined.",
            "line": " lib/math.js:32875"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:32921"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n\t  var ResultSet = load(__webpack_require__(72));\n  /**\n\t   * @constructor BlockNode\n\t   * @extends {Node}\n\t   * Holds a set with blocks\n\t   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n\t   *            An array with blocks, where a block is constructed as an Object\n\t   *            with properties block, which is a Node, and visible, which is\n\t   *            a boolean. The property visible is optional and is true by default",
            "line": " lib/math.js:32923"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:32967"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child blocks of this node",
            "line": " lib/math.js:32998"
        },
        {
            "message": "Missing item type\nCreate a new BlockNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:33008"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:33027"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:33042"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:33054"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:33073"
        },
        {
            "message": "Missing item type\n'use strict';\nvar latex = __webpack_require__(32);\n\tvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n\t   *\n\t   * @param {Node} condition   Condition, must result in a boolean\n\t   * @param {Node} trueExpr    Expression evaluated when condition is true\n\t   * @param {Node} falseExpr   Expression evaluated when condition is true\n\t   *\n\t   * @constructor ConditionalNode\n\t   * @extends {Node}",
            "line": " lib/math.js:33075"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:33114"
        },
        {
            "message": "Missing item type\nTest whether a condition is met",
            "line": " lib/math.js:33127"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:33167"
        },
        {
            "message": "Missing item type\nCreate a new ConditionalNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:33177"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:33191"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:33199"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:33238"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:33259"
        },
        {
            "message": "Missing item type\n'use strict';\nvar getType = __webpack_require__(41).type;\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * A ConstantNode holds a constant value like a number or string. A ConstantNode\n\t   * stores a stringified version of the value and uses this to compile to\n\t   * JavaScript.\n\t   *\n\t   * In case of a stringified number as input, this may be compiled to a BigNumber\n\t   * when the math instance is configured for BigNumbers.\n\t   *\n\t   * Usage:\n\t   *\n\t   *     // stringified values with type\n\t   *     new ConstantNode('2.3', 'number');\n\t   *     new ConstantNode('true', 'boolean');\n\t   *     new ConstantNode('hello', 'string');\n\t   *\n\t   *     // non-stringified values, type will be automatically detected\n\t   *     new ConstantNode(2.3);\n\t   *     new ConstantNode('hello');\n\t   *\n\t   * @param {string | number | boolean | null | undefined} value\n\t   *                            When valueType is provided, value must contain\n\t   *                            an uninterpreted string representing the value.\n\t   *                            When valueType is undefined, value can be a\n\t   *                            number, string, boolean, null, or undefined, and\n\t   *                            the type will be determined automatically.\n\t   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',\n\t   *                              'boolean', 'undefined', 'null'\n\t   * @constructor ConstantNode\n\t   * @extends {Node}",
            "line": " lib/math.js:33261"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:33341"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:33389"
        },
        {
            "message": "Missing item type\nCreate a new ConstantNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:33398"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:33408"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:33416"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:33431"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:33464"
        },
        {
            "message": "Missing item type\n'use strict';\nvar keywords = __webpack_require__(285);\n\tvar latex = __webpack_require__(32);\n\tvar operators = __webpack_require__(292);\nfunction isString (x) {\n\t  return typeof x === 'string';\n\t}\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * @constructor FunctionAssignmentNode\n\t   * @extends {Node}\n\t   * Function assignment\n\t   *\n\t   * @param {string} name           Function name\n\t   * @param {string[] | Array.<{name: string, type: string}>} params\n\t   *                                Array with function parameter names, or an\n\t   *                                array with objects containing the name\n\t   *                                and type of the parameter\n\t   * @param {Node} expr             The function expression",
            "line": " lib/math.js:33466"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:33520"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:33556"
        },
        {
            "message": "Missing item type\nCreate a new FunctionAssignmentNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:33564"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:33576"
        },
        {
            "message": "Missing item type\nIs parenthesis needed?",
            "line": " lib/math.js:33584"
        },
        {
            "message": "Missing item type\nget string representation",
            "line": " lib/math.js:33598"
        },
        {
            "message": "Missing item type\nget LaTeX representation",
            "line": " lib/math.js:33613"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:33636"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n\t  var RangeNode = load(__webpack_require__(298));\n\t  var SymbolNode = load(__webpack_require__(299));\n  var Range = load(__webpack_require__(67));\n  var isArray = Array.isArray;\n  /**\n\t   * @constructor IndexNode\n\t   * @extends Node\n\t   *\n\t   * Describes a subset of a matrix or an object property.\n\t   * Cannot be used on its own, needs to be used within an AccessorNode or\n\t   * AssignmentNode.\n\t   *\n\t   * @param {Node[]} dimensions\n\t   * @param {boolean} [dotNotation=false]  Optional property describing whether\n\t   *                                       this index was written using dot\n\t   *                                       notation like `a.b`, or using bracket\n\t   *                                       notation like `a[\"b\"]` (default).\n\t   *                                       Used to stringify an IndexNode.",
            "line": " lib/math.js:33638"
        },
        {
            "message": "Missing item type\nCompile all range nodes\n\nWhen some of the dimensions has `end` defined, the IndexNode requires\na variable `size` to be defined in the current closure, and must contain\nthe size of the matrix that's being handled. To check whether the `size`\nvariable is needed, call IndexNode.needsSize().",
            "line": " lib/math.js:33696"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:33774"
        },
        {
            "message": "Missing item type\nCreate a new IndexNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:33784"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:33799"
        },
        {
            "message": "Missing item type\nTest whether this IndexNode contains a single property name",
            "line": " lib/math.js:33807"
        },
        {
            "message": "Missing item type\nReturns the property name if IndexNode contains a property.\nIf not, returns null.",
            "line": " lib/math.js:33817"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:33826"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:33838"
        },
        {
            "message": "Missing item type\nTest whether this IndexNode needs the object size, size of the Matrix",
            "line": " lib/math.js:33853"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:33872"
        },
        {
            "message": "Missing item type\n'use strict';\nvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * @constructor RangeNode\n\t   * @extends {Node}\n\t   * create a range\n\t   * @param {Node} start  included lower-bound\n\t   * @param {Node} end    included upper-bound\n\t   * @param {Node} [step] optional step",
            "line": " lib/math.js:33874"
        },
        {
            "message": "Missing item type\nCheck whether the RangeNode needs the `end` symbol to be defined.\nThis end is the size of the Matrix in current dimension.",
            "line": " lib/math.js:33913"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code\n\nWhen the range has a symbol `end` defined, the RangeNode requires\na variable `end` to be defined in the current closure, which must contain\nthe length of the of the matrix that's being handled in the range's\ndimension. To check whether the `end` variable is needed, call\nRangeNode.needsEnd().",
            "line": " lib/math.js:33927"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:33954"
        },
        {
            "message": "Missing item type\nCreate a new RangeNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:33966"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:33980"
        },
        {
            "message": "Missing item type\nCalculate the necessary parentheses",
            "line": " lib/math.js:33988"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:34016"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:34051"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:34090"
        },
        {
            "message": "Missing item type\n'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed, math) {\n\t  var Node = load(__webpack_require__(284));\n  var Unit = load(__webpack_require__(75));\n  /**\n\t   * @constructor SymbolNode\n\t   * @extends {Node}\n\t   * A symbol node can hold and resolve a symbol\n\t   * @param {string} name\n\t   * @extends {Node}",
            "line": " lib/math.js:34092"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:34127"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:34162"
        },
        {
            "message": "Missing item type\nCreate a new SymbolNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:34170"
        },
        {
            "message": "Missing item type\nThrows an error 'Undefined symbol {name}'",
            "line": " lib/math.js:34180"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:34188"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:34196"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:34206"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:34235"
        },
        {
            "message": "Missing item type\n'use strict';\nvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * @constructor ObjectNode\n\t   * @extends {Node}\n\t   * Holds an object with keys/values\n\t   * @param {Object.<string, Node>} [properties]   array with key/value pairs",
            "line": " lib/math.js:34237"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:34275"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:34297"
        },
        {
            "message": "Missing item type\nCreate a new ObjectNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:34309"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:34325"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:34339"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:34355"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:34378"
        },
        {
            "message": "Missing item type\n'use strict';\nvar latex = __webpack_require__(32);\n\tvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed, math) {\n\t  var Node         = load(__webpack_require__(284));\n\t  var ConstantNode = load(__webpack_require__(295));\n\t  var SymbolNode   = load(__webpack_require__(299));\n\t  var FunctionNode = load(__webpack_require__(302));\n  /**\n\t   * @constructor OperatorNode\n\t   * @extends {Node}\n\t   * An operator with two arguments, like 2+3\n\t   *\n\t   * @param {string} op           Operator name, for example '+'\n\t   * @param {string} fn           Function name, for example 'add'\n\t   * @param {Node[]} args         Operator arguments\n\t   * @param {boolean} [implicit]  Is this an implicit multiplication?",
            "line": " lib/math.js:34380"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:34432"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:34456"
        },
        {
            "message": "Missing item type\nCreate a new OperatorNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:34466"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:34480"
        },
        {
            "message": "Missing item type\nCalculate which parentheses are necessary. Gets an OperatorNode\n(which is the root of the tree) and an Array of Nodes\n(this.args) and returns an array where 'true' means that an argument\nhas to be enclosed in parentheses whereas 'false' means the opposite.",
            "line": " lib/math.js:34488"
        },
        {
            "message": "Missing item type\nGet string representation.",
            "line": " lib/math.js:34672"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:34736"
        },
        {
            "message": "Missing item type\nGet identifier.",
            "line": " lib/math.js:34831"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:34848"
        },
        {
            "message": "Missing item type\n'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed, math) {\n\t  var Node = load(__webpack_require__(284));\n\t  var SymbolNode = load(__webpack_require__(299));\n  /**\n\t   * @constructor FunctionNode\n\t   * @extends {./Node}\n\t   * invoke a list with arguments on a node\n\t   * @param {./Node} fn       Node resolving with a function on which to invoke\n\t   *                          the arguments, typically a SymboNode or AccessorNode\n\t   * @param {./Node[]} args",
            "line": " lib/math.js:34850"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:34912"
        },
        {
            "message": "Missing item type\nGet a unique name for a arguments to store in defs",
            "line": " lib/math.js:34979"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:34998"
        },
        {
            "message": "Missing item type\nCreate a new FunctionNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:35008"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:35023"
        },
        {
            "message": "Missing item type\nGet string representation. (wrapper function)\nThis overrides parts of Node's toString function.\nIf callback is an object containing callbacks, it\ncalls the correct callback for the current node,\notherwise it falls back to calling Node's toString\nfunction.",
            "line": " lib/math.js:35035"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:35063"
        },
        {
            "message": "Missing item type\nGet LaTeX representation. (wrapper function)\nThis overrides parts of Node's toTex function.\nIf callback is an object containing callbacks, it\ncalls the correct callback for the current node,\notherwise it falls back to calling Node's toTex\nfunction.",
            "line": " lib/math.js:35154"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:35180"
        },
        {
            "message": "Missing item type\nGet identifier.",
            "line": " lib/math.js:35223"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:35240"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var Node = load(__webpack_require__(284));\n  /**\n\t   * @constructor ParenthesisNode\n\t   * @extends {Node}\n\t   * A parenthesis node describes manual parenthesis from the user input\n\t   * @param {Node} content\n\t   * @extends {Node}",
            "line": " lib/math.js:35242"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " lib/math.js:35275"
        },
        {
            "message": "Missing item type\nGet the content of the current Node.",
            "line": " lib/math.js:35291"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " lib/math.js:35300"
        },
        {
            "message": "Missing item type\nCreate a new ParenthesisNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " lib/math.js:35308"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " lib/math.js:35319"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " lib/math.js:35327"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " lib/math.js:35340"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:35361"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var parse = load(__webpack_require__(282));\n  /**\n\t   * Evaluate an expression.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.eval(expr)\n\t   *     math.eval(expr, scope)\n\t   *     math.eval([expr1, expr2, expr3, ...])\n\t   *     math.eval([expr1, expr2, expr3, ...], scope)\n\t   *\n\t   * Example:\n\t   *\n\t   *     math.eval('(2+3)/4');                // 1.25\n\t   *     math.eval('sqrt(3^2 + 4^2)');        // 5\n\t   *     math.eval('sqrt(-4)');               // 2i\n\t   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]\n\t   *\n\t   *     var scope = {a:3, b:4};\n\t   *     math.eval('a * b', scope);           // 12\n\t   *\n\t   * See also:\n\t   *\n\t   *    parse, compile\n\t   *\n\t   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n\t   * @param {Object} [scope]                    Scope to read/write variables\n\t   * @return {*} The result of the expression\n\t   * @throws {Error}",
            "line": " lib/math.js:35363"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:35429"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed, math) {\n\t  var docs = load(__webpack_require__(103));\n  /**\n\t   * Retrieve help on a function or data type.\n\t   * Help files are retrieved from the documentation in math.expression.docs.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.help(search)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    console.log(math.help('sin').toString());\n\t   *    console.log(math.help(math.add).toString());\n\t   *    console.log(math.help(math.add).toJSON());\n\t   *\n\t   * @param {Function | string | Object} search   A function or function name\n\t   *                                              for which to get help\n\t   * @return {Help} A help object",
            "line": " lib/math.js:35431"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:35499"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var parse = load(__webpack_require__(282));\n  /**\n\t   * Parse an expression. Returns a node tree, which can be evaluated by\n\t   * invoking node.eval();\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.parse(expr)\n\t   *     math.parse(expr, options)\n\t   *     math.parse([expr1, expr2, expr3, ...])\n\t   *     math.parse([expr1, expr2, expr3, ...], options)\n\t   *\n\t   * Example:\n\t   *\n\t   *     var node = math.parse('sqrt(3^2 + 4^2)');\n\t   *     node.compile().eval(); // 5\n\t   *\n\t   *     var scope = {a:3, b:4}\n\t   *     var node = math.parse('a * b'); // 12\n\t   *     var code = node.compile();\n\t   *     code.eval(scope); // 12\n\t   *     scope.a = 5;\n\t   *     code.eval(scope); // 20\n\t   *\n\t   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n\t   *     nodes[2].compile().eval(); // 12\n\t   *\n\t   * See also:\n\t   *\n\t   *     eval, compile\n\t   *\n\t   * @param {string | string[] | Matrix} expr          Expression to be parsed\n\t   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n\t   *                                                   - `nodes` a set of custom nodes\n\t   * @return {Node | Node[]} node\n\t   * @throws {Error}",
            "line": " lib/math.js:35501"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:35554"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed, math) {\n\t  var Parser = load(__webpack_require__(308));\n  /**\n\t   * Create a parser. The function creates a new `math.expression.Parser` object.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.parser()\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var parser = new math.parser();\n\t   *\n\t   *     // evaluate expressions\n\t   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5\n\t   *     var b = parser.eval('sqrt(-4)');        // 2i\n\t   *     var c = parser.eval('2 inch in cm');    // 5.08 cm\n\t   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476\n\t   *\n\t   *     // define variables and functions\n\t   *     parser.eval('x = 7 / 2');               // 3.5\n\t   *     parser.eval('x + 3');                   // 6.5\n\t   *     parser.eval('function f(x, y) = x^y');  // f(x, y)\n\t   *     parser.eval('f(2, 3)');                 // 8\n\t   *\n\t   *     // get and set variables and functions\n\t   *     var x = parser.get('x');                // 7\n\t   *     var f = parser.get('f');                // function\n\t   *     var g = f(3, 2);                        // 9\n\t   *     parser.set('h', 500);\n\t   *     var i = parser.eval('h / 2');           // 250\n\t   *     parser.set('hello', function (name) {\n\t   *       return 'hello, ' + name + '!';\n\t   *     });\n\t   *     parser.eval('hello(\"user\")');           // \"hello, user!\"\n\t   *\n\t   *     // clear defined functions and variables\n\t   *     parser.clear();\n\t   *\n\t   * See also:\n\t   *\n\t   *    eval, compile, parse\n\t   *\n\t   * @return {Parser} Parser",
            "line": " lib/math.js:35556"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:35618"
        },
        {
            "message": "Missing item type\n'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed, math) {\n\t  var _parse = load(__webpack_require__(282));\n  /**\n\t   * @constructor Parser\n\t   * Parser contains methods to evaluate or parse expressions, and has a number\n\t   * of convenience methods to get, set, and remove variables from memory. Parser\n\t   * keeps a scope containing variables in memory, which is used for all\n\t   * evaluations.\n\t   *\n\t   * Methods:\n\t   *    var result = parser.eval(expr);    // evaluate an expression\n\t   *    var value = parser.get(name);      // retrieve a variable from the parser\n\t   *    var values = parser.getAll();      // retrieve all defined variables\n\t   *    parser.set(name, value);           // set a variable in the parser\n\t   *    parser.remove(name);               // clear a variable from the\n\t   *                                       // parsers scope\n\t   *    parser.clear();                    // clear the parsers scope\n\t   *\n\t   * Example usage:\n\t   *    var parser = new Parser();\n\t   *    // Note: there is a convenience method which can be used instead:\n\t   *    // var parser = new math.parser();\n\t   *\n\t   *    // evaluate expressions\n\t   *    parser.eval('sqrt(3^2 + 4^2)');         // 5\n\t   *    parser.eval('sqrt(-4)');                // 2i\n\t   *    parser.eval('2 inch in cm');            // 5.08 cm\n\t   *    parser.eval('cos(45 deg)');             // 0.7071067811865476\n\t   *\n\t   *    // define variables and functions\n\t   *    parser.eval('x = 7 / 2');               // 3.5\n\t   *    parser.eval('x + 3');                   // 6.5\n\t   *    parser.eval('function f(x, y) = x^y');  // f(x, y)\n\t   *    parser.eval('f(2, 3)');                 // 8\n\t   *\n\t   *    // get and set variables and functions\n\t   *    var x = parser.get('x');                // 7\n\t   *    var f = parser.get('f');                // function\n\t   *    var g = f(3, 2);                        // 9\n\t   *    parser.set('h', 500);\n\t   *    var i = parser.eval('h / 2');           // 250\n\t   *    parser.set('hello', function (name) {\n\t   *        return 'hello, ' + name + '!';\n\t   *    });\n\t   *    parser.eval('hello(\"user\")');           // \"hello, user!\"\n\t   *\n\t   *    // clear defined functions and variables\n\t   *    parser.clear();\n\t   *",
            "line": " lib/math.js:35620"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:35685"
        },
        {
            "message": "Missing item type\nParse an expression and return the parsed function node.\nThe node tree can be compiled via `code = node.compile(math)`,\nand the compiled code can be executed as `code.eval([scope])`",
            "line": " lib/math.js:35691"
        },
        {
            "message": "Missing item type\nParse and compile an expression, return the compiled javascript code.\nThe node can be evaluated via code.eval([scope])",
            "line": " lib/math.js:35703"
        },
        {
            "message": "Missing item type\nParse and evaluate the given expression",
            "line": " lib/math.js:35714"
        },
        {
            "message": "Missing item type\nGet a variable (a function or variable) by name from the parsers scope.\nReturns undefined when not found",
            "line": " lib/math.js:35727"
        },
        {
            "message": "Missing item type\nGet a map with all defined variables",
            "line": " lib/math.js:35738"
        },
        {
            "message": "Missing item type\nSet a symbol (a function or variable) by name from the parsers scope.",
            "line": " lib/math.js:35746"
        },
        {
            "message": "Missing item type\nRemove a variable from the parsers scope",
            "line": " lib/math.js:35756"
        },
        {
            "message": "Missing item type\nClear the scope with variables and functions",
            "line": " lib/math.js:35765"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:35785"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(283),\n\t  __webpack_require__(289),\n\t  __webpack_require__(290),\n\t  __webpack_require__(293),\n\t  __webpack_require__(294),\n\t  __webpack_require__(295),\n\t  __webpack_require__(297),\n\t  __webpack_require__(296),\n\t  __webpack_require__(302),\n\t  __webpack_require__(284),\n\t  __webpack_require__(300),\n\t  __webpack_require__(301),\n\t  __webpack_require__(303),\n\t  __webpack_require__(298),\n\t  __webpack_require__(299),\n\t  __webpack_require__(310)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:35787"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * @constructor UpdateNode",
            "line": " lib/math.js:35811"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:35832"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(312),\n\t  __webpack_require__(314),\n\t  __webpack_require__(316),\n\t  __webpack_require__(318),\n\t  __webpack_require__(319),\n\t  __webpack_require__(321),\n\t  __webpack_require__(327),\n\t  __webpack_require__(332),\n\t  __webpack_require__(334),\n\t  __webpack_require__(336)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:35834"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n/**\n\t * Attach a transform function to math.range\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function concat\n\t * from one-based to zero based",
            "line": " lib/math.js:35852"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:35896"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar isInteger = __webpack_require__(6).isInteger;\n\tvar array = __webpack_require__(40);\n\tvar IndexError = __webpack_require__(43);\n\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Concatenate two or more matrices.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.concat(A, B, C, ...)\n\t   *     math.concat(A, B, C, ..., dim)\n\t   *\n\t   * Where:\n\t   *\n\t   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n\t   *   By default the last dimension of the matrices.\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var A = [[1, 2], [5, 6]];\n\t   *    var B = [[3, 4], [7, 8]];\n\t   *\n\t   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n\t   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n\t   *    math.concat('hello', ' ', 'world'); // returns 'hello world'\n\t   *\n\t   * See also:\n\t   *\n\t   *    size, squeeze, subset, transpose\n\t   *\n\t   * @param {... Array | Matrix} args     Two or more matrices\n\t   * @return {Array | Matrix} Concatenated matrix",
            "line": " lib/math.js:35898"
        },
        {
            "message": "Missing item type\nRecursively concatenate two matrices.\nThe contents of the matrices is not cloned.",
            "line": " lib/math.js:36013"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36046"
        },
        {
            "message": "Missing item type\n'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t * Attach a transform function to math.filter\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform adds support for equations as test function for math.filter,\n\t * so you can do something like 'filter([3, -2, 5], x > 0)'.",
            "line": " lib/math.js:36048"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36118"
        },
        {
            "message": "Missing item type\n'use strict';\nvar size = __webpack_require__(40).size;\n\tvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  \n\t  /**\n\t   * Filter the items in an array or one dimensional matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.filter(x, test)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    function isPositive (x) {\n\t   *      return x > 0;\n\t   *    }\n\t   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]\n\t   *\n\t   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/); // returns [\"23\", \"100\", \"55\"]\n\t   *\n\t   * See also:\n\t   *\n\t   *    forEach, map, sort\n\t   *\n\t   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n\t   * @param {Function | RegExp} test\n\t   *        A function or regular expression to test items.\n\t   *        All entries for which `test` returns true are returned.\n\t   *        When `test` is a function, it is invoked with three parameters:\n\t   *        the value of the element, the index of the element, and the\n\t   *        matrix/array being traversed. The function must return a boolean.\n\t   * @return {Matrix | Array} Returns the filtered matrix.",
            "line": " lib/math.js:36120"
        },
        {
            "message": "Missing item type\nFilter values in a callback given a callback function",
            "line": " lib/math.js:36178"
        },
        {
            "message": "Missing item type\nFilter values in a callback given a regular expression",
            "line": " lib/math.js:36207"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36228"
        },
        {
            "message": "Missing item type\n'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t * Attach a transform function to math.forEach\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a one-based index instead of a zero-based index",
            "line": " lib/math.js:36230"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36280"
        },
        {
            "message": "Missing item type\n'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Iterate over all elements of a matrix/array, and executes the given callback function.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.forEach(x, callback)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.forEach([1, 2, 3], function(value) {\n\t   *      console.log(value);\n\t   *    });\n\t   *    // outputs 1, 2, 3\n\t   *\n\t   * See also:\n\t   *\n\t   *    filter, map, sort\n\t   *\n\t   * @param {Matrix | Array} x    The matrix to iterate on.\n\t   * @param {Function} callback   The callback function is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the Matrix/array being traversed.",
            "line": " lib/math.js:36282"
        },
        {
            "message": "Missing item type\nforEach for a multi dimensional array",
            "line": " lib/math.js:36325"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36362"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Attach a transform function to math.index\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a one-based index instead of a zero-based index",
            "line": " lib/math.js:36364"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36419"
        },
        {
            "message": "Missing item type\n'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t * Attach a transform function to math.map\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a one-based index instead of a zero-based index",
            "line": " lib/math.js:36421"
        },
        {
            "message": "Missing item type\nMap for a multi dimensional array. One-based indexes",
            "line": " lib/math.js:36448"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36489"
        },
        {
            "message": "Missing item type\n'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Create a new matrix or array with the results of the callback function executed on\n\t   * each entry of the matrix/array.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.map(x, callback)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.map([1, 2, 3], function(value) {\n\t   *      return value * value;\n\t   *    });  // returns [1, 4, 9]\n\t   *\n\t   * See also:\n\t   *\n\t   *    filter, forEach, sort\n\t   *\n\t   * @param {Matrix | Array} x    The matrix to iterate on.\n\t   * @param {Function} callback   The callback method is invoked with three\n\t   *                              parameters: the value of the element, the index\n\t   *                              of the element, and the matrix being traversed.\n\t   * @return {Matrix | array}     Transformed map of x",
            "line": " lib/math.js:36491"
        },
        {
            "message": "Missing item type\nMap for a multi dimensional array",
            "line": " lib/math.js:36535"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36574"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\tvar isCollection = __webpack_require__(322);\n/**\n\t * Attach a transform function to math.max\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function max\n\t * from one-based to zero based",
            "line": " lib/math.js:36576"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36621"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Test whether a value is a collection: an Array or Matrix\n\t * @param {*} x\n\t * @returns {boolean} isCollection",
            "line": " lib/math.js:36623"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36637"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepForEach = __webpack_require__(324);\n\tvar reduce = __webpack_require__(325);\n\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t  var larger = load(__webpack_require__(64));\n  /**\n\t   * Compute the maximum value of a matrix or a  list with values.\n\t   * In case of a multi dimensional array, the maximum of the flattened array\n\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.max(a, b, c, ...)\n\t   *     math.max(A)\n\t   *     math.max(A, dim)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.max(2, 1, 4, 3);                  // returns 4\n\t   *     math.max([2, 1, 4, 3]);                // returns 4\n\t   *\n\t   *     // maximum over a specified dimension (zero-based)\n\t   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]\n\t   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]\n\t   *\n\t   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n\t   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, min, prod, std, sum, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The maximum value",
            "line": " lib/math.js:36639"
        },
        {
            "message": "Missing item type\nReturn the largest of two values",
            "line": " lib/math.js:36704"
        },
        {
            "message": "Missing item type\nRecursively calculate the maximum value in an n-dimensional array",
            "line": " lib/math.js:36715"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36742"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Recursively loop over all elements in a given multi dimensional array\n\t * and invoke the callback on each of the elements.\n\t * @param {Array | Matrix} array\n\t * @param {Function} callback     The callback method is invoked with one\n\t *                                parameter: the current element in the array",
            "line": " lib/math.js:36744"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36773"
        },
        {
            "message": "Missing item type\n'use strict';\nvar arraySize = __webpack_require__(40).size;\n\tvar IndexError = __webpack_require__(43);\n/**\n\t * Reduce a given matrix or array to a new matrix or\n\t * array with one less dimension, applying the given\n\t * callback in the selected dimension.\n\t * @param {Array | Matrix} mat\n\t * @param {number} dim\n\t * @param {Function} callback\n\t * @return {Array | Matrix} res",
            "line": " lib/math.js:36775"
        },
        {
            "message": "Missing item type\nRecursively reduce a matrix",
            "line": " lib/math.js:36805"
        },
        {
            "message": "Missing item type\nTranspose a matrix",
            "line": " lib/math.js:36840"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36862"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isCollection = __webpack_require__(322);\n/**\n\t * Test whether an array contains collections\n\t * @param {Array} array\n\t * @returns {boolean} Returns true when the array contains one or multiple\n\t *                    collections (Arrays or Matrices). Returns false otherwise.",
            "line": " lib/math.js:36864"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36886"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\tvar isCollection = __webpack_require__(322);\n/**\n\t * Attach a transform function to math.mean\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function mean\n\t * from one-based to zero based",
            "line": " lib/math.js:36888"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:36933"
        },
        {
            "message": "Missing item type\n'use strict';\nvar size = __webpack_require__(40).size;\n\tvar deepForEach = __webpack_require__(324);\n\tvar reduce = __webpack_require__(325);\n\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var divide = load(__webpack_require__(329));\n  /**\n\t   * Compute the mean value of matrix or a list with values.\n\t   * In case of a multi dimensional array, the mean of the flattened array\n\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.mean(a, b, c, ...)\n\t   *     math.mean(A)\n\t   *     math.mean(A, dim)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.mean(2, 1, 4, 3);                     // returns 2.5\n\t   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725\n\t   *\n\t   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]\n\t   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]\n\t   *\n\t   * See also:\n\t   *\n\t   *     median, min, max, sum, prod, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The mean of all values",
            "line": " lib/math.js:36935"
        },
        {
            "message": "Missing item type\nCalculate the mean value in an n-dimensional array, returning a\nn-1 dimensional array",
            "line": " lib/math.js:36996"
        },
        {
            "message": "Missing item type\nRecursively calculate the mean value in an n-dimensional array",
            "line": " lib/math.js:37010"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:37037"
        },
        {
            "message": "Missing item type\n'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed) {\n  var divideScalar = load(__webpack_require__(81));\n\t  var multiply     = load(__webpack_require__(84));\n\t  var inv          = load(__webpack_require__(330));\n\t  var matrix       = load(__webpack_require__(52));\n  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Divide two values, `x / y`.\n\t   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.divide(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.divide(2, 3);            // returns number 0.6666666666666666\n\t   *\n\t   *    var a = math.complex(5, 14);\n\t   *    var b = math.complex(4, 1);\n\t   *    math.divide(a, b);            // returns Complex 2 + 3i\n\t   *\n\t   *    var c = [[7, -6], [13, -4]];\n\t   *    var d = [[1, 2], [4, 3]];\n\t   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]\n\t   *\n\t   *    var e = math.unit('18 km');\n\t   *    math.divide(e, 4.5);          // returns Unit 4 km\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`",
            "line": " lib/math.js:37039"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:37132"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nfunction factory (type, config, load, typed) {\n\t  var matrix       = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var addScalar    = load(__webpack_require__(53));\n\t  var multiply     = load(__webpack_require__(84));\n\t  var unaryMinus   = load(__webpack_require__(78));\n\t  var det          = load(__webpack_require__(331));\n\t  var eye          = load(__webpack_require__(83));\n  /**\n\t   * Calculate the inverse of a square matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.inv(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]\n\t   *     math.inv(4);                 // returns 0.25\n\t   *     1 / 4;                       // returns 0.25\n\t   *\n\t   * See also:\n\t   *\n\t   *     det, transpose\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n\t   * @return {number | Complex | Array | Matrix} The inverse of `x`.",
            "line": " lib/math.js:37134"
        },
        {
            "message": "Missing item type\nCalculate the inverse of a square matrix",
            "line": " lib/math.js:37226"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:37345"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\n\tvar object = util.object;\n\tvar string = util.string;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var add = load(__webpack_require__(51));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(84));\n\t  var unaryMinus = load(__webpack_require__(78));\n  /**\n\t   * Calculate the determinant of a matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.det(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.det([[1, 2], [3, 4]]); // returns -2\n\t   *\n\t   *    var A = [\n\t   *      [-2, 2, 3],\n\t   *      [-1, 1, 3],\n\t   *      [2, 0, -1]\n\t   *    ]\n\t   *    math.det(A); // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    inv\n\t   *\n\t   * @param {Array | Matrix} x  A matrix\n\t   * @return {number} The determinant of `x`",
            "line": " lib/math.js:37347"
        },
        {
            "message": "Missing item type\nCalculate the determinant of a matrix",
            "line": " lib/math.js:37445"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:37519"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\tvar isCollection = __webpack_require__(322);\n/**\n\t * Attach a transform function to math.min\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform changed the last `dim` parameter of function min\n\t * from one-based to zero based",
            "line": " lib/math.js:37521"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:37566"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepForEach = __webpack_require__(324);\n\tvar reduce = __webpack_require__(325);\n\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t  var smaller = load(__webpack_require__(60));\n\t  \n\t  /**\n\t   * Compute the maximum value of a matrix or a  list of values.\n\t   * In case of a multi dimensional array, the maximum of the flattened array\n\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.min(a, b, c, ...)\n\t   *     math.min(A)\n\t   *     math.min(A, dim)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.min(2, 1, 4, 3);                  // returns 1\n\t   *     math.min([2, 1, 4, 3]);                // returns 1\n\t   *\n\t   *     // maximum over a specified dimension (zero-based)\n\t   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]\n\t   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]\n\t   *\n\t   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n\t   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, max, prod, std, sum, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The minimum value",
            "line": " lib/math.js:37568"
        },
        {
            "message": "Missing item type\nReturn the smallest of two values",
            "line": " lib/math.js:37633"
        },
        {
            "message": "Missing item type\nRecursively calculate the minimum value in an n-dimensional array",
            "line": " lib/math.js:37644"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:37671"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t * Attach a transform function to math.range\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a range which includes the end value",
            "line": " lib/math.js:37673"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:37705"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  var ZERO = new type.BigNumber(0);\n\t  var ONE = new type.BigNumber(1);\n  /**\n\t   * Create an array from a range.\n\t   * By default, the range end is excluded. This can be customized by providing\n\t   * an extra parameter `includeEnd`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.range(str [, includeEnd])               // Create a range from a string,\n\t   *                                                  // where the string contains the\n\t   *                                                  // start, optional step, and end,\n\t   *                                                  // separated by a colon.\n\t   *     math.range(start, end [, includeEnd])        // Create a range with start and\n\t   *                                                  // end and a step size of 1.\n\t   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n\t   *                                                  // and end.\n\t   *\n\t   * Where:\n\t   *\n\t   * - `str: string`\n\t   *   A string 'start:end' or 'start:step:end'\n\t   * - `start: {number | BigNumber}`\n\t   *   Start of the range\n\t   * - `end: number | BigNumber`\n\t   *   End of the range, excluded by default, included when parameter includeEnd=true\n\t   * - `step: number | BigNumber`\n\t   *   Step size. Default value is 1.\n\t   * - `includeEnd: boolean`\n\t   *   Option to specify whether to include the end or not. False by default.\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.range(2, 6);        // [2, 3, 4, 5]\n\t   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]\n\t   *     math.range('2:1:6');     // [2, 3, 4, 5]\n\t   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]\n\t   *\n\t   * See also:\n\t   *\n\t   *     ones, zeros, size, subset\n\t   *\n\t   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n\t   * @return {Array | Matrix} range",
            "line": " lib/math.js:37707"
        },
        {
            "message": "Missing item type\nCreate a range with numbers. End is excluded",
            "line": " lib/math.js:37831"
        },
        {
            "message": "Missing item type\nCreate a range with numbers. End is included",
            "line": " lib/math.js:37858"
        },
        {
            "message": "Missing item type\nCreate a range with big numbers. End is excluded",
            "line": " lib/math.js:37885"
        },
        {
            "message": "Missing item type\nCreate a range with big numbers. End is included",
            "line": " lib/math.js:37912"
        },
        {
            "message": "Missing item type\nParse a string into a range,\nThe string contains the start, optional step, and end, separated by a colon.\nIf the string does not contain a valid range, null is returned.\nFor example str='0:2:11'.",
            "line": " lib/math.js:37939"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:37990"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n/**\n\t * Attach a transform function to math.subset\n\t * Adds a property transform containing the transform function.\n\t *\n\t * This transform creates a range which includes the end value",
            "line": " lib/math.js:37992"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:38024"
        },
        {
            "message": "Missing item type\n'use strict';\nvar object = __webpack_require__(3);\n\tvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t  var parser = load(__webpack_require__(307))();\n  /**\n\t   * Documentation object\n\t   * @param {Object} doc  Object containing properties:\n\t   *                      {string} name\n\t   *                      {string} category\n\t   *                      {string} description\n\t   *                      {string[]} syntax\n\t   *                      {string[]} examples\n\t   *                      {string[]} seealso\n\t   * @constructor",
            "line": " lib/math.js:38026"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " lib/math.js:38057"
        },
        {
            "message": "Missing item type\nGenerate a string representation of the Help object",
            "line": " lib/math.js:38063"
        },
        {
            "message": "Missing item type\nExport the help object to JSON",
            "line": " lib/math.js:38110"
        },
        {
            "message": "Missing item type\nInstantiate a Help object from a JSON object",
            "line": " lib/math.js:38119"
        },
        {
            "message": "Missing item type\nReturns a string representation of the Help object",
            "line": " lib/math.js:38134"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:38147"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(339),\n\t  __webpack_require__(366),\n\t  __webpack_require__(397),\n\t  __webpack_require__(413),\n\t  __webpack_require__(422),\n\t  __webpack_require__(427),\n\t  __webpack_require__(430),\n\t  __webpack_require__(436),\n\t  __webpack_require__(448),\n\t  __webpack_require__(457),\n\t  __webpack_require__(461),\n\t  __webpack_require__(463),\n\t  __webpack_require__(470),\n\t  __webpack_require__(472),\n\t  __webpack_require__(498),\n\t  __webpack_require__(500)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:38149"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  // decomposition\n\t  __webpack_require__(340),\n\t  __webpack_require__(341),\n  // solver\n\t  __webpack_require__(361),\n\t  __webpack_require__(363),\n\t  __webpack_require__(365)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:38173"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nvar object = util.object;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var abs = load(__webpack_require__(86));\n\t  var addScalar = load(__webpack_require__(53));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var subtract = load(__webpack_require__(77));\n\t  var larger = load(__webpack_require__(64));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var unaryMinus = load(__webpack_require__(78));\n\t  \n\t  var SparseMatrix = type.SparseMatrix;\n\t  var DenseMatrix = type.DenseMatrix;\n\t  var Spa = type.Spa;\n\t  \n\t  /**\n\t   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n\t   * row permutation vector `p` where `A[p,:] = L * U`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lup(A);\n\t   *\n\t   * Example:\n\t   *\n\t   *    var m = [[2, 1], [1, 4]];\n\t   *    var r = math.lup();\n\t   *    // r = {\n\t   *    //   L: [[1, 0], [0.5, 1]],\n\t   *    //   U: [[2, 1], [0, 3.5]],\n\t   *    //   P: [0, 1]\n\t   *    // }\n\t   *\n\t   * See also:\n\t   *\n\t   *    slu, lsolve, lusolve, usolve\n\t   *\n\t   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n\t   *\n\t   * @return {Array<Matrix>}      The lower triangular matrix, the upper triangular matrix and the permutation matrix.",
            "line": " lib/math.js:38189"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:38580"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nvar number = util.number,\n\t    \n\t    isInteger = number.isInteger;\nfunction factory (type, config, load, typed) {\n  var cs_sqr = load(__webpack_require__(342));\n\t  var cs_lu = load(__webpack_require__(353));\n  /**\n\t   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where\n\t   *\n\t   * `P * A * Q = L * U`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.slu(A, order, threshold);\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, lsolve, usolve, lusolve\n\t   *\n\t   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.\n\t   * @param {Number}       order          The Symbolic Ordering and Analysis order:\n\t   *                                       0 - Natural ordering, no permutation vector q is returned\n\t   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'\n\t   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. \n\t   *                                           This is appropriatefor LU factorization of unsymmetric matrices.\n\t   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.\n\t   *                                           A dense row is a row with more than 10*sqr(columns) entries.\n\t   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)\n\t   *\n\t   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.",
            "line": " lib/math.js:38582"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:38658"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_amd = load(__webpack_require__(343));\n\t  var cs_permute = load(__webpack_require__(348));\n\t  var cs_etree = load(__webpack_require__(349));\n\t  var cs_post = load(__webpack_require__(350));\n\t  var cs_counts = load(__webpack_require__(351));\n  /**\n\t   * Symbolic ordering and analysis for QR and LU decompositions.\n\t   *\n\t   * @param {Number}  order           The ordering strategy (see cs_amd for more details)\n\t   * @param {Matrix}  a               The A matrix\n\t   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or\n\t   *                                  symbolic ordering and analysis for LU decomposition (false)\n\t   *\n\t   * @return {Object}                 The Symbolic ordering and analysis for matrix A\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:38660"
        },
        {
            "message": "Missing item type\nCompute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent",
            "line": " lib/math.js:38725"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:38827"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n\t  var cs_fkeep = load(__webpack_require__(345));\n\t  var cs_tdfs = load(__webpack_require__(346));\n\t  \n\t  var add       = load(__webpack_require__(51));\n\t  var multiply  = load(__webpack_require__(84));\n\t  var transpose = load(__webpack_require__(347));\n  /**\n\t   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used \n\t   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n\t   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n\t   * of a right looking sparse Cholesky factorization.\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t   *\n\t   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n\t   * @param {Matrix} m        Sparse Matrix\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:38829"
        },
        {
            "message": "Missing item type\nCreates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\nvector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n\nOrder: 0\n  A natural ordering P=null matrix is returned.\n\nOrder: 1\n  Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n  P = M + M'\n\nOrder: 2\n  Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n  P = M' * M\n\nOrder: 3\n  This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n  P = M' * M",
            "line": " lib/math.js:39237"
        },
        {
            "message": "Missing item type\nInitialize quotient graph. There are four kind of nodes and elements that must be represented:\n\n - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).",
            "line": " lib/math.js:39298"
        },
        {
            "message": "Missing item type\nInitialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with \ndegree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\noutput permutation p.",
            "line": " lib/math.js:39340"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:39406"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t   * This function \"flips\" its input about the integer -1.\n\t   *\n\t   * @param {Number}  i               The value to flip\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:39408"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:39434"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\n\t   *\n\t   * @param {Matrix}   a              The sparse matrix\n\t   * @param {function} callback       The callback function, function will be invoked with the following args:\n\t   *                                    - The entry row\n\t   *                                    - The entry column\n\t   *                                    - The entry value\n\t   *                                    - The state parameter\n\t   * @param {any}      other          The state\n\t   *\n\t   * @return                          The number of nonzero elements in the matrix\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:39436"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:39505"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t   * Depth-first search and postorder of a tree rooted at node j\n\t   *\n\t   * @param {Number}  j               The tree node\n\t   * @param {Number}  k               \n\t   * @param {Array}   w               The workspace array\n\t   * @param {Number}  head            The index offset within the workspace for the head array\n\t   * @param {Number}  next            The index offset within the workspace for the next array\n\t   * @param {Array}   post            The post ordering array\n\t   * @param {Number}  stack           The index offset within the workspace for the stack array\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:39507"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:39563"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var DenseMatrix = type.DenseMatrix,\n\t      SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Transpose a matrix. All values of the matrix are reflected over its\n\t   * main diagonal. Only applicable to two dimensional matrices containing\n\t   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n\t   * vectors and scalars return the input unchanged.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.transpose(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var A = [[1, 2, 3], [4, 5, 6]];\n\t   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]\n\t   *\n\t   * See also:\n\t   *\n\t   *     diag, inv, subset, squeeze\n\t   *\n\t   * @param {Array | Matrix} x  Matrix to be transposed\n\t   * @return {Array | Matrix}   The transposed matrix",
            "line": " lib/math.js:39565"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:39747"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type) {\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Permutes a sparse matrix C = P * A * Q\n\t   *\n\t   * @param {Matrix}  a               The Matrix A\n\t   * @param {Array}   pinv            The row permutation vector\n\t   * @param {Array}   q               The column permutation vector\n\t   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n\t   *\n\t   * @return {Matrix}                 C = P * A * Q, null on error\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:39749"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:39824"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t   * Computes the elimination tree of Matrix A (using triu(A)) or the \n\t   * elimination tree of A'A without forming A'A.\n\t   *\n\t   * @param {Matrix}  a               The A Matrix\n\t   * @param {boolean} ata             A value of true the function computes the etree of A'A\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:39826"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:39906"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_tdfs = load(__webpack_require__(346));\n  /**\n\t   * Post order a tree of forest\n\t   *\n\t   * @param {Array}   parent          The tree or forest\n\t   * @param {Number}  n               Number of columns\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:39908"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:39971"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var transpose = load(__webpack_require__(347));\n\t  \n\t  var cs_leaf = load(__webpack_require__(352));\n  /**\n\t   * Computes the column counts using the upper triangular part of A.\n\t   * It transposes A internally, none of the input parameters are modified.\n\t   *\n\t   * @param {Matrix} a           The sparse matrix A\n\t   *\n\t   * @param {Matrix} ata         Count the columns of A'A instead\n\t   *\n\t   * @return                     An array of size n of the column counts or null on error\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:39973"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:40098"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t   * This function determines if j is a leaf of the ith row subtree.\n\t   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)\n\t   *\n\t   * @param {Number}  i               The ith row subtree\n\t   * @param {Number}  j               The node to test\n\t   * @param {Array}   w               The workspace array\n\t   * @param {Number}  first           The index offset within the workspace for the first array\n\t   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array\n\t   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array\n\t   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array\n\t   *\n\t   * @return {Object}\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:40100"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:40170"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var abs = load(__webpack_require__(86));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiply = load(__webpack_require__(84));\n\t  \n\t  var larger = load(__webpack_require__(64));\n\t  var largerEq = load(__webpack_require__(354));\n\t  \n\t  var cs_spsolve = load(__webpack_require__(355));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n\t   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L \n\t   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n\t   * L * U = A(p, q), where p is the inverse of pinv.\n\t   *\n\t   * @param {Matrix}  m               The A Matrix to factorize\n\t   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing \n\t   *                                  column ordering q\n\t   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n\t   *\n\t   * @return {Number}                 The numeric LU factorization of A or null\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:40172"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:40354"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether value x is larger or equal to y.\n\t   *\n\t   * The function returns true when x is larger than y or the relative\n\t   * difference between x and y is smaller than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.largerEq(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.larger(2, 1 + 1);         // returns false\n\t   *    math.largerEq(2, 1 + 1);       // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, smallerEq, larger, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false",
            "line": " lib/math.js:40356"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:40535"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var divideScalar = load(__webpack_require__(81));\n\t  var multiply = load(__webpack_require__(84));\n\t  var subtract = load(__webpack_require__(77));\n  var cs_reach = load(__webpack_require__(356));\n  /**\n\t   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the\n\t   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the\n\t   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U \n\t   * is upper triangular with the diagonal entry as the last entry in each column.\n\t   *\n\t   * @param {Matrix}  g               The G matrix\n\t   * @param {Matrix}  b               The B matrix\n\t   * @param {Number}  k               The kth column in B\n\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t   * @param {Array}   x               The soluton to the linear system G * x = b\n\t   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n\t   * @param {boolean} lo              The lower (true) upper triangular (false) flag\n\t   *\n\t   * @return {Number}                 The index for the nonzero pattern\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:40537"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:40627"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_dfs = load(__webpack_require__(357));\n\t  var cs_marked = load(__webpack_require__(358));\n\t  var cs_mark = load(__webpack_require__(359));\n  /**\n\t   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 \n\t   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\n\t   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\n\t   *\n\t   * @param {Matrix}  g               The G matrix\n\t   * @param {Matrix}  b               The B matrix\n\t   * @param {Number}  k               The kth column in B\n\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t   * @param {Array}   pinv            The inverse row permutation vector\n\t   *\n\t   * @return {Number}                 The index for the nonzero pattern\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:40629"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:40694"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_marked = load(__webpack_require__(358));\n\t  var cs_mark   = load(__webpack_require__(359));\n\t  var cs_unflip = load(__webpack_require__(360));\n  /**\n\t   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting\n\t   * at nodes in B (see cs_reach()).\n\t   *\n\t   * @param {Number}  j               The starting node for the DFS algorithm\n\t   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored\n\t   * @param {Number}  top             Start index in stack xi[top..n-1]\n\t   * @param {Number}  k               The kth column in B\n\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n\t   *\n\t   * @return {Number}                 New value of top\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:40696"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:40785"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t   * Checks if the node at w[j] is marked\n\t   *\n\t   * @param {Array}   w               The array\n\t   * @param {Number}  j               The array index\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:40787"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:40814"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n  /**\n\t   * Marks the node at w[j]\n\t   *\n\t   * @param {Array}   w               The array\n\t   * @param {Number}  j               The array index\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:40816"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:40845"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n\t  \n\t  /**\n\t   * Flips the value if it is negative of returns the same value otherwise.\n\t   *\n\t   * @param {Number}  i               The value to flip\n\t   *\n\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " lib/math.js:40847"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:40875"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var subtract = load(__webpack_require__(77));\n\t  var equalScalar = load(__webpack_require__(48));\n  var solveValidation = load(__webpack_require__(362));\n  var DenseMatrix = type.DenseMatrix;\n  /** \n\t   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.\n\t   *\n\t   * `L * x = b`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lsolve(L, b);\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = [[-2, 3], [2, 1]];\n\t   *    var b = [11, 9];\n\t   *    var x = lsolve(a, b);  // [[-5.5], [20]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, slu, usolve, lusolve\n\t   *\n\t   * @param {Matrix, Array} L       A N x N matrix or array (L)\n\t   * @param {Matrix, Array} b       A column vector with the b values\n\t   *\n\t   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)",
            "line": " lib/math.js:40877"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:41068"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\n\tvar array = util.array;\nvar isArray = Array.isArray;\nfunction factory (type) {\n\t  \n\t  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Validates matrix and column vector b for backward/forward substitution algorithms.\n\t   *\n\t   * @param {Matrix} m            An N x N matrix\n\t   * @param {Array | Matrix} b    A column vector\n\t   * @param {Boolean} copy        Return a copy of vector b\n\t   *\n\t   * @return {DenseMatrix}        Dense column vector b",
            "line": " lib/math.js:41070"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:41235"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isArray = Array.isArray;\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var lup = load(__webpack_require__(340));\n\t  var slu = load(__webpack_require__(341));\n\t  var cs_ipvec = load(__webpack_require__(364));\n  var solveValidation = load(__webpack_require__(362));\n  var usolve = load(__webpack_require__(365));\n\t  var lsolve = load(__webpack_require__(361));\n  /**\n\t   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n\t   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];\n\t   *\n\t   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n\t   *\n\t   *    var f = math.lup(m);\n\t   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n\t   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]\n\t   *\n\t   *    var a = [[-2, 3], [2, 1]];\n\t   *    var b = [11, 9];\n\t   *    var x = lusolve(a, b);  // [[-5.5], [20]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, slu, lsolve, usolve\n\t   *\n\t   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n\t   * @param {Matrix | Array} b               Column Vector\n\t   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n\t   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n\t   *\n\t   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b",
            "line": " lib/math.js:41237"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:41366"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.\n\t   *\n\t   * @param {Array} p           The permutation vector of length n. null value denotes identity\n\t   * @param {Array} b           The input vector\n\t   *\n\t   * @return {Array}            The output vector x = P'b",
            "line": " lib/math.js:41368"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:41413"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var subtract = load(__webpack_require__(77));\n\t  var equalScalar = load(__webpack_require__(48));\n  var solveValidation = load(__webpack_require__(362));\n\t  \n\t  var DenseMatrix = type.DenseMatrix;\n  /**\n\t   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n\t   *\n\t   * `U * x = b`\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.usolve(U, b);\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = [[-2, 3], [2, 1]];\n\t   *    var b = [11, 9];\n\t   *    var x = usolve(a, b);  // [[8], [9]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lup, slu, usolve, lusolve\n\t   *\n\t   * @param {Matrix, Array} U       A N x N matrix or array (U)\n\t   * @param {Matrix, Array} b       A column vector with the b values\n\t   *\n\t   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)",
            "line": " lib/math.js:41415"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:41607"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(86),\n\t  __webpack_require__(51),\n\t  __webpack_require__(53),\n\t  __webpack_require__(367),\n\t  __webpack_require__(369),\n\t  __webpack_require__(370),\n\t  __webpack_require__(329),\n\t  __webpack_require__(371),\n\t  __webpack_require__(373),\n\t  __webpack_require__(375),\n\t  __webpack_require__(376),\n\t  __webpack_require__(87),\n\t  __webpack_require__(377),\n\t  __webpack_require__(378),\n\t  __webpack_require__(379),\n\t  __webpack_require__(382),\n\t  __webpack_require__(385),\n\t  __webpack_require__(386),\n\t  __webpack_require__(387),\n\t  __webpack_require__(84),\n\t  __webpack_require__(388),\n\t  __webpack_require__(390),\n\t  __webpack_require__(82),\n\t  __webpack_require__(391),\n\t  __webpack_require__(393),\n\t  __webpack_require__(380),\n\t  __webpack_require__(394),\n\t  __webpack_require__(77),\n\t  __webpack_require__(78),\n\t  __webpack_require__(395),\n\t  __webpack_require__(396)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:41609"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var unaryMinus = load(__webpack_require__(78));\n\t  var isNegative = load(__webpack_require__(368));\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Calculate the cubic root of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cbrt(x)\n\t   *    math.cbrt(x, allRoots)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cbrt(27);                  // returns 3\n\t   *    math.cube(3);                   // returns 27\n\t   *    math.cbrt(-64);                 // returns -4\n\t   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m\n\t   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]\n\t   *\n\t   *    var x = math.complex('8i');\n\t   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i\n\t   *    math.cbrt(x, true);             // returns Matrix [\n\t   *                                    //    1.7320508075689 + i\n\t   *                                    //   -1.7320508075689 + i\n\t   *                                    //   -2i\n\t   *                                    // ]\n\t   *\n\t   * See also:\n\t   *\n\t   *    square, sqrt, cube\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x\n\t   *            Value for which to calculate the cubic root.\n\t   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n\t   *            when `x` is a number or complex number. If true, all complex\n\t   *            roots are returned, if false (default) the principal root is\n\t   *            returned.\n\t   * @return {number | BigNumber | Complex | Unit | Array | Matrix}\n\t   *            Returns the cubic root of `x`",
            "line": " lib/math.js:41648"
        },
        {
            "message": "Missing item type\nCalculate the cubic root for a complex number",
            "line": " lib/math.js:41719"
        },
        {
            "message": "Missing item type\nCalculate the cubic root for a Unit",
            "line": " lib/math.js:41754"
        },
        {
            "message": "Missing item type\nCalculate cbrt for a number\n\nCode from es6-shim.js:\n  https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577",
            "line": " lib/math.js:41801"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:41837"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is negative: smaller than zero.\n\t   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isNegative(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isNegative(3);                     // returns false\n\t   *    math.isNegative(-2);                    // returns true\n\t   *    math.isNegative(0);                     // returns false\n\t   *    math.isNegative(-0);                    // returns false\n\t   *    math.isNegative(math.bignumber(2));     // returns false\n\t   *    math.isNegative(math.fraction(-2, 5));  // returns true\n\t   *    math.isNegative('-2');                  // returns true\n\t   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isPositive, isZero, isInteger\n\t   *\n\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t   *                    Throws an error in case of an unknown data type.",
            "line": " lib/math.js:41839"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:41905"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Round a value towards plus infinity\n\t   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.ceil(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.ceil(3.2);               // returns number 4\n\t   *    math.ceil(3.8);               // returns number 4\n\t   *    math.ceil(-4.2);              // returns number -4\n\t   *    math.ceil(-4.7);              // returns number -4\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.ceil(c);                 // returns Complex 4 - 2i\n\t   *\n\t   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]\n\t   *\n\t   * See also:\n\t   *\n\t   *    floor, fix, round\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "line": " lib/math.js:41907"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:41972"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Compute the cube of a value, `x * x * x`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cube(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cube(2);            // returns number 8\n\t   *    math.pow(2, 3);          // returns number 8\n\t   *    math.cube(4);            // returns number 64\n\t   *    4 * 4 * 4;               // returns number 64\n\t   *\n\t   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, square, pow, cbrt\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x",
            "line": " lib/math.js:41974"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:42042"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var divideScalar = load(__webpack_require__(81));\n\t  var latex = __webpack_require__(32);\n\t  \n\t  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Divide two matrices element wise. The function accepts both matrices and\n\t   * scalar values.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dotDivide(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dotDivide(2, 4);   // returns 0.5\n\t   *\n\t   *    a = [[9, 5], [6, 1]];\n\t   *    b = [[3, 2], [5, 2]];\n\t   *\n\t   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]\n\t   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    divide, multiply, dotMultiply\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`",
            "line": " lib/math.js:42044"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:42193"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n\t   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n\t   *\n\t   *\n\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t   * C(i,j) = ┤\n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "line": " lib/math.js:42195"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:42318"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var multiplyScalar = load(__webpack_require__(80));\n\t  var latex = __webpack_require__(32);\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm09 = load(__webpack_require__(374));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Multiply two matrices element wise. The function accepts both matrices and\n\t   * scalar values.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dotMultiply(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dotMultiply(2, 4); // returns 8\n\t   *\n\t   *    a = [[9, 5], [6, 1]];\n\t   *    b = [[3, 2], [5, 2]];\n\t   *\n\t   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]\n\t   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, divide, dotDivide\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`",
            "line": " lib/math.js:42320"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:42467"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked NZA times, number of nonzero elements in A.\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " lib/math.js:42469"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:42622"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var pow = load(__webpack_require__(82));\n\t  var latex = __webpack_require__(32);\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Calculates the power of x to y element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dotPow(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dotPow(2, 3);            // returns number 8\n\t   *\n\t   *    var a = [[1, 2], [4, 3]];\n\t   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]\n\t   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    pow, sqrt, multiply\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n\t   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`",
            "line": " lib/math.js:42624"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:42769"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the exponent of a value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.exp(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.exp(2);                  // returns number 7.3890560989306495\n\t   *    math.pow(math.e, 2);          // returns number 7.3890560989306495\n\t   *    math.log(math.exp(2));        // returns number 2\n\t   *\n\t   *    math.exp([1, 2, 3]);\n\t   *    // returns Array [\n\t   *    //   2.718281828459045,\n\t   *    //   7.3890560989306495,\n\t   *    //   20.085536923187668\n\t   *    // ]\n\t   *\n\t   * See also:\n\t   *\n\t   *    log, pow\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`",
            "line": " lib/math.js:42771"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:42832"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Round a value towards minus infinity.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.floor(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.floor(3.2);              // returns number 3\n\t   *    math.floor(3.8);              // returns number 3\n\t   *    math.floor(-4.2);             // returns number -5\n\t   *    math.floor(-4.7);             // returns number -5\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.floor(c);                // returns Complex 3 - 3i\n\t   *\n\t   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ceil, fix, round\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "line": " lib/math.js:42834"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:42898"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm04 = load(__webpack_require__(55));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Calculate the greatest common divisor for two or more values or arrays.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.gcd(a, b)\n\t   *    math.gcd(a, b, c, ...)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.gcd(8, 12);              // returns 4\n\t   *    math.gcd(-4, 6);              // returns 2\n\t   *    math.gcd(25, 15, -10);        // returns 5\n\t   *\n\t   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]\n\t   *\n\t   * See also:\n\t   *\n\t   *    lcm, xgcd\n\t   *\n\t   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n\t   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor",
            "line": " lib/math.js:42900"
        },
        {
            "message": "Missing item type\nCalculate gcd for BigNumbers",
            "line": " lib/math.js:43054"
        },
        {
            "message": "Missing item type\nCalculate gcd for numbers",
            "line": " lib/math.js:43077"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:43103"
        },
        {
            "message": "Missing item type\n'use strict';\nvar flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n\t  var abs = load(__webpack_require__(86));\n\t  var add = load(__webpack_require__(53));\n\t  var divide = load(__webpack_require__(81));\n\t  var multiply = load(__webpack_require__(80));\n\t  var sqrt = load(__webpack_require__(380));\n\t  var smaller = load(__webpack_require__(60));\n\t  var isPositive = load(__webpack_require__(381));\n  /**\n\t   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n\t   *\n\t   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n\t   *\n\t   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.hypot(a, b, ...)\n\t   *     math.hypot([a, b, c, ...])\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.hypot(3, 4);      // 5\n\t   *     math.hypot(3, 4, 5);   // 7.0710678118654755\n\t   *     math.hypot([3, 4, 5]); // 7.0710678118654755\n\t   *     math.hypot(-2);        // 2\n\t   *\n\t   * See also:\n\t   *\n\t   *     abs, norm\n\t   *\n\t   * @param {... number | BigNumber} args\n\t   * @return {number | BigNumber} Returns the hypothenusa of the input values.",
            "line": " lib/math.js:43105"
        },
        {
            "message": "Missing item type\nCalculate the hypotenusa for an Array with values",
            "line": " lib/math.js:43158"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:43193"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the square root of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sqrt(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sqrt(25);                // returns 5\n\t   *    math.square(5);               // returns 25\n\t   *    math.sqrt(-4);                // returns Complex 2i\n\t   *\n\t   * See also:\n\t   *\n\t   *    square, multiply, cube, cbrt\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n\t   *            Value for which to calculate the square root.\n\t   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n\t   *            Returns the square root of `x`",
            "line": " lib/math.js:43195"
        },
        {
            "message": "Missing item type\nCalculate sqrt for a number",
            "line": " lib/math.js:43255"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:43279"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is positive: larger than zero.\n\t   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isPositive(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isPositive(3);                     // returns true\n\t   *    math.isPositive(-2);                    // returns false\n\t   *    math.isPositive(0);                     // returns false\n\t   *    math.isPositive(-0);                    // returns false\n\t   *    math.isPositive(0.5);                   // returns true\n\t   *    math.isPositive(math.bignumber(2));     // returns true\n\t   *    math.isPositive(math.fraction(-2, 5));  // returns false\n\t   *    math.isPositive(math.fraction(1,3));    // returns false\n\t   *    math.isPositive('2');                   // returns true\n\t   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isZero, isNegative, isInteger\n\t   *\n\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t   *                    Throws an error in case of an unknown data type.",
            "line": " lib/math.js:43281"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:43349"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm06 = load(__webpack_require__(383));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Calculate the least common multiple for two or more values or arrays.\n\t   *\n\t   * lcm is defined as:\n\t   *\n\t   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.lcm(a, b)\n\t   *    math.lcm(a, b, c, ...)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.lcm(4, 6);               // returns 12\n\t   *    math.lcm(6, 21);              // returns 42\n\t   *    math.lcm(6, 21, 5);           // returns 210\n\t   *\n\t   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]\n\t   *\n\t   * See also:\n\t   *\n\t   *    gcd, xgcd\n\t   *\n\t   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n\t   * @return {number | BigNumber | Array | Matrix}                           The least common multiple",
            "line": " lib/math.js:43351"
        },
        {
            "message": "Missing item type\nCalculate lcm for two BigNumbers",
            "line": " lib/math.js:43509"
        },
        {
            "message": "Missing item type\nCalculate lcm for two numbers",
            "line": " lib/math.js:43537"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:43569"
        },
        {
            "message": "Missing item type\n'use strict';\nvar scatter = __webpack_require__(384);\n\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t   * C(i,j) = ┤  \n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " lib/math.js:43571"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:43738"
        },
        {
            "message": "Missing item type\n'use strict';\nmodule.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {\n\t  // a arrays\n\t  var avalues = a._values;\n\t  var aindex = a._index;\n\t  var aptr = a._ptr;\n\t  // c arrays\n\t  var cindex = c._index;\n  // vars\n\t  var k, k0, k1, i;\n  // check we need to process values (pattern matrix)\n\t  if (x) {\n\t    // values in j\n\t    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t      // row\n\t      i = aindex[k];\n\t      // check value exists in current j\n\t      if (w[i] !== mark) {\n\t        // i is new entry in j\n\t        w[i] = mark;\n\t        // add i to pattern of C\n\t        cindex.push(i);\n\t        // x(i) = A, check we need to call function this time\n\t        if (update) {\n\t          // copy value to workspace calling callback function\n\t          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);\n\t          // function was called on current row\n\t          u[i] = mark;\n\t        }\n\t        else {\n\t          // copy value to workspace\n\t          x[i] = avalues[k];\n\t        }\n\t      }\n\t      else {\n\t        // i exists in C already\n\t        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);\n\t        // function was called on current row\n\t        u[i] = mark;\n\t      }\n\t    }\n\t  }\n\t  else {\n\t    // values in j\n\t    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t      // row\n\t      i = aindex[k];\n\t      // check value exists in current j\n\t      if (w[i] !== mark) {\n\t        // i is new entry in j\n\t        w[i] = mark;\n\t        // add i to pattern of C\n\t        cindex.push(i);\n\t      }\n\t      else {\n\t        // indicate function was called on current row\n\t        u[i] = mark;\n\t      }\n\t    }\n\t  }\n\t};\n\n\n/***/ },",
            "line": " lib/math.js:43740"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var divideScalar = load(__webpack_require__(81));\n  /**\n\t   * Calculate the logarithm of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.log(x)\n\t   *    math.log(x, base)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.log(3.5);                  // returns 1.252762968495368\n\t   *    math.exp(math.log(2.4));        // returns 2.4\n\t   *\n\t   *    math.pow(10, 4);                // returns 10000\n\t   *    math.log(10000, 10);            // returns 4\n\t   *    math.log(10000) / math.log(10); // returns 4\n\t   *\n\t   *    math.log(1024, 2);              // returns 10\n\t   *    math.pow(2, 10);                // returns 1024\n\t   *\n\t   * See also:\n\t   *\n\t   *    exp, log10\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            Value for which to calculate the logarithm.\n\t   * @param {number | BigNumber | Complex} [base=e]\n\t   *            Optional base for the logarithm. If not provided, the natural\n\t   *            logarithm of `x` is calculated.\n\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t   *            Returns the logarithm of `x`",
            "line": " lib/math.js:43810"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:43900"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.log10(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.log10(0.00001);            // returns -5\n\t   *    math.log10(10000);              // returns 4\n\t   *    math.log(10000) / math.log(10); // returns 4\n\t   *    math.pow(10, 4);                // returns 10000\n\t   *\n\t   * See also:\n\t   *\n\t   *    exp, log\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            Value for which to calculate the logarithm.\n\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t   *            Returns the 10-base logarithm of `x`",
            "line": " lib/math.js:43902"
        },
        {
            "message": "Missing item type\nCalculate the 10-base logarithm of a number",
            "line": " lib/math.js:43969"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:43984"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  var latex = __webpack_require__(32);\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Calculates the modulus, the remainder of an integer division.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * The modulus is defined as:\n\t   *\n\t   *     x - y * floor(x / y)\n\t   *\n\t   * See http://en.wikipedia.org/wiki/Modulo_operation.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.mod(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.mod(8, 3);                // returns 2\n\t   *    math.mod(11, 2);               // returns 1\n\t   *\n\t   *    function isOdd(x) {\n\t   *      return math.mod(x, 2) != 0;\n\t   *    }\n\t   *\n\t   *    isOdd(2);                      // returns false\n\t   *    isOdd(3);                      // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    divide\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n\t   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n\t   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.",
            "line": " lib/math.js:43986"
        },
        {
            "message": "Missing item type\nCalculate the modulus of two numbers",
            "line": " lib/math.js:44146"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:44174"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  \n\t  var abs         = load(__webpack_require__(86));\n\t  var add         = load(__webpack_require__(51));\n\t  var pow         = load(__webpack_require__(82));\n\t  var sqrt        = load(__webpack_require__(380));\n\t  var multiply    = load(__webpack_require__(84));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var larger      = load(__webpack_require__(64));\n\t  var smaller     = load(__webpack_require__(60));\n\t  var matrix      = load(__webpack_require__(52));\n\t  var trace       = load(__webpack_require__(389));\n\t  var transpose   = load(__webpack_require__(347));\n\n  /**\n\t   * Calculate the norm of a number, vector or matrix.\n\t   *\n\t   * The second parameter p is optional. If not provided, it defaults to 2.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.norm(x)\n\t   *    math.norm(x, p)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.abs(-3.5);                         // returns 3.5\n\t   *    math.norm(-3.5);                        // returns 3.5\n\t   *\n\t   *    math.norm(math.complex(3, -4));         // returns 5\n\t   *\n\t   *    math.norm([1, 2, -3], Infinity);        // returns 3\n\t   *    math.norm([1, 2, -3], -Infinity);       // returns 1\n\t   *\n\t   *    math.norm([3, 4], 2);                   // returns 5\n\t   *\n\t   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n\t   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7\n\t   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661\n\t   *\n\t   * See also:\n\t   *\n\t   *    abs, hypot\n\t   *\n\t   * @param  {number | BigNumber | Complex | Array | Matrix} x\n\t   *            Value for which to calculate the norm\n\t   * @param  {number | BigNumber | string} [p=2]\n\t   *            Vector space.\n\t   *            Supported numbers include Infinity and -Infinity.\n\t   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n\t   * @return {number | BigNumber} the p-norm",
            "line": " lib/math.js:44176"
        },
        {
            "message": "Missing item type\nCalculate the norm for an array",
            "line": " lib/math.js:44272"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:44395"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var add = load(__webpack_require__(51));\n  /**\n\t   * Calculate the trace of a matrix: the sum of the elements on the main\n\t   * diagonal of a square matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.trace(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.trace([[1, 2], [3, 4]]); // returns 5\n\t   *\n\t   *    var A = [\n\t   *      [1, 2, 3],\n\t   *      [-1, 2, 3],\n\t   *      [2, 0, 3]\n\t   *    ]\n\t   *    math.trace(A); // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    diag\n\t   *\n\t   * @param {Array | Matrix} x  A matrix\n\t   *\n\t   * @return {number} The trace of `x`",
            "line": " lib/math.js:44397"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:44548"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm06 = load(__webpack_require__(383));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Calculate the nth root of a value.\n\t   * The principal nth root of a positive real number A, is the positive real\n\t   * solution of the equation\n\t   *\n\t   *     x^root = A\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.nthRoot(a)\n\t   *     math.nthRoot(a, root)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9\n\t   *     math.sqrt(9);          // returns 3, as 3^2 == 9\n\t   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64\n\t   *\n\t   * See also:\n\t   *\n\t   *     sqrt, pow\n\t   *\n\t   * @param {number | BigNumber | Array | Matrix | Complex} a\n\t   *              Value for which to calculate the nth root\n\t   * @param {number | BigNumber} [root=2]    The root.\n\t   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`",
            "line": " lib/math.js:44550"
        },
        {
            "message": "Missing item type\nCalculate the nth root of a for BigNumbers, solve x^root == a\nhttp://rosettacode.org/wiki/Nth_root#JavaScript",
            "line": " lib/math.js:44730"
        },
        {
            "message": "Missing item type\nCalculate the nth root of a, solve x^root == a\nhttp://rosettacode.org/wiki/Nth_root#JavaScript",
            "line": " lib/math.js:44771"
        },
        {
            "message": "Missing item type\nCalculate the nth root of a Complex Number a using De Moviers Theorem.",
            "line": " lib/math.js:44829"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:44853"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar toFixed = __webpack_require__(6).toFixed;\n\tvar deepMap = __webpack_require__(19);\nvar NO_INT = 'Number of decimals in function round must be an integer';\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(392));\n  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Round a value towards the nearest integer.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.round(x)\n\t   *    math.round(x, n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.round(3.2);              // returns number 3\n\t   *    math.round(3.8);              // returns number 4\n\t   *    math.round(-4.2);             // returns number -4\n\t   *    math.round(-4.7);             // returns number -5\n\t   *    math.round(math.pi, 3);       // returns number 3.142\n\t   *    math.round(123.45678, 2);     // returns number 123.46\n\t   *\n\t   *    var c = math.complex(3.2, -2.7);\n\t   *    math.round(c);                // returns Complex 3 - 3i\n\t   *\n\t   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ceil, fix, floor\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "line": " lib/math.js:44855"
        },
        {
            "message": "Missing item type\nround a number to the given number of decimals, or to zero if decimals is\nnot provided",
            "line": " lib/math.js:45017"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:45033"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar resize = __webpack_require__(40).resize;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Create a matrix filled with zeros. The created matrix can have one or\n\t   * multiple dimensions.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.zeros(m)\n\t   *    math.zeros(m, format)\n\t   *    math.zeros(m, n)\n\t   *    math.zeros(m, n, format)\n\t   *    math.zeros([m, n])\n\t   *    math.zeros([m, n], format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.zeros(3);                  // returns [0, 0, 0]\n\t   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]\n\t   *    math.zeros(3, 'dense');         // returns [0, 0, 0]\n\t   *\n\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    ones, eye, size, range\n\t   *\n\t   * @param {...number | Array} size    The size of each dimension of the matrix\n\t   * @param {string} [format]           The Matrix storage format\n\t   *\n\t   * @return {Array | Matrix}           A matrix filled with zeros",
            "line": " lib/math.js:45035"
        },
        {
            "message": "Missing item type\nCreate an Array or Matrix with zeros",
            "line": " lib/math.js:45115"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:45173"
        },
        {
            "message": "Missing item type\n'use strict';\nvar number = __webpack_require__(6);\n\tvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the sign of a value. The sign of a value x is:\n\t   *\n\t   * -  1 when x > 1\n\t   * - -1 when x < 0\n\t   * -  0 when x == 0\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sign(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sign(3.5);               // returns 1\n\t   *    math.sign(-4.2);              // returns -1\n\t   *    math.sign(0);                 // returns 0\n\t   *\n\t   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]\n\t   *\n\t   * See also:\n\t   *\n\t   *    abs\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t   *            The number for which to determine the sign\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n\t   *            The sign of `x`",
            "line": " lib/math.js:45175"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:45248"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the square of a value, `x * x`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.square(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.square(2);           // returns number 4\n\t   *    math.square(3);           // returns number 9\n\t   *    math.pow(3, 2);           // returns number 9\n\t   *    math.multiply(3, 3);      // returns number 9\n\t   *\n\t   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, cube, sqrt, pow\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t   *            Number for which to calculate the square\n\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n\t   *            Squared value",
            "line": " lib/math.js:45250"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:45319"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Unary plus operation.\n\t   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.unaryPlus(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.unaryPlus(3.5);      // returns 3.5\n\t   *    math.unaryPlus(1);     // returns 1\n\t   *\n\t   * See also:\n\t   *\n\t   *    unaryMinus, add, subtract\n\t   *\n\t   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n\t   *            Input value\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t   *            Returns the input value when numeric, converts to a number when input is non-numeric.",
            "line": " lib/math.js:45321"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:45397"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Calculate the extended greatest common divisor for two values.\n\t   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.xgcd(a, b)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.xgcd(8, 12);             // returns [4, -1, 1]\n\t   *    math.gcd(8, 12);              // returns 4\n\t   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]\n\t   *\n\t   * See also:\n\t   *\n\t   *    gcd, lcm\n\t   *\n\t   * @param {number | BigNumber} a  An integer number\n\t   * @param {number | BigNumber} b  An integer number\n\t   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n\t   *                              where `div = gcd(a, b)` and `a*m + b*n = div`",
            "line": " lib/math.js:45399"
        },
        {
            "message": "Missing item type\nCalculate xgcd for two numbers",
            "line": " lib/math.js:45441"
        },
        {
            "message": "Missing item type\nCalculate xgcd for two BigNumbers",
            "line": " lib/math.js:45486"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:45540"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(398),\n\t  __webpack_require__(402),\n\t  __webpack_require__(403),\n\t  __webpack_require__(405),\n\t  __webpack_require__(407),\n\t  __webpack_require__(410),\n\t  __webpack_require__(412)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:45542"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigBitAnd = __webpack_require__(399);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm06 = load(__webpack_require__(383));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Bitwise AND two values, `x & y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitAnd(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitAnd(53, 131);               // returns number 1\n\t   *\n\t   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x First value to and\n\t   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n\t   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`",
            "line": " lib/math.js:45557"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:45710"
        },
        {
            "message": "Missing item type\nvar bitwise = __webpack_require__(400);\n/**\n\t * Bitwise and for Bignumbers\n\t *\n\t * Special Cases:\n\t *   N &  n =  N\n\t *   n &  0 =  0\n\t *   n & -1 =  n\n\t *   n &  n =  n\n\t *   I &  I =  I\n\t *  -I & -I = -I\n\t *   I & -I =  0\n\t *   I &  n =  n\n\t *   I & -n =  I\n\t *  -I &  n =  0\n\t *  -I & -n = -I\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` & `y`, is fully precise\n\t * @private",
            "line": " lib/math.js:45712"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:45784"
        },
        {
            "message": "Missing item type\nvar bitNot = __webpack_require__(401);\n/**\n\t * Applies bitwise function to numbers\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @param {function (a, b)} func\n\t * @return {BigNumber}",
            "line": " lib/math.js:45786"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:45914"
        },
        {
            "message": "Missing item type\n/**\n\t * Bitwise not\n\t * @param {BigNumber} value\n\t * @return {BigNumber} Result of ~`x`, fully precise\n\t *",
            "line": " lib/math.js:45916"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:45941"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar bigBitNot = __webpack_require__(401);\n\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Bitwise NOT value, `~x`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitNot(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitNot(1);               // returns number -2\n\t   *\n\t   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x Value to not\n\t   * @return {number | BigNumber | Array | Matrix} NOT of `x`",
            "line": " lib/math.js:45943"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:46003"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigBitOr = __webpack_require__(404);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm04 = load(__webpack_require__(55));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Bitwise OR two values, `x | y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the lowest print base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitOr(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitOr(1, 2);               // returns number 3\n\t   *\n\t   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x First value to or\n\t   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n\t   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`",
            "line": " lib/math.js:46005"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:46158"
        },
        {
            "message": "Missing item type\nvar bitwise = __webpack_require__(400);\n/**\n\t * Bitwise OR for BigNumbers\n\t *\n\t * Special Cases:\n\t *   N |  n =  N\n\t *   n |  0 =  n\n\t *   n | -1 = -1\n\t *   n |  n =  n\n\t *   I |  I =  I\n\t *  -I | -I = -I\n\t *   I | -n = -1\n\t *   I | -I = -1\n\t *   I |  n =  I\n\t *  -I |  n = -I\n\t *  -I | -n = -n\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` | `y`, fully precise",
            "line": " lib/math.js:46160"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:46217"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigBitXor = __webpack_require__(406);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Bitwise XOR two values, `x ^ y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.bitXor(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bitXor(1, 2);               // returns number 3\n\t   *\n\t   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x First value to xor\n\t   * @param  {number | BigNumber | Array | Matrix} y Second value to xor\n\t   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`",
            "line": " lib/math.js:46219"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:46372"
        },
        {
            "message": "Missing item type\nvar bitwise = __webpack_require__(400);\n\tvar bitNot = __webpack_require__(401);\n/**\n\t * Bitwise XOR for BigNumbers\n\t *\n\t * Special Cases:\n\t *   N ^  n =  N\n\t *   n ^  0 =  n\n\t *   n ^  n =  0\n\t *   n ^ -1 = ~n\n\t *   I ^  n =  I\n\t *   I ^ -n = -I\n\t *   I ^ -I = -1\n\t *  -I ^  n = -I\n\t *  -I ^ -n =  I\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` ^ `y`, fully precise\n\t *",
            "line": " lib/math.js:46374"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:46438"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigLeftShift = __webpack_require__(408);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm08 = load(__webpack_require__(409));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.leftShift(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.leftShift(1, 2);               // returns number 4\n\t   *\n\t   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]\n\t   *\n\t   * See also:\n\t   *\n\t   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n\t   * @param  {number | BigNumber} y Amount of shifts\n\t   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times",
            "line": " lib/math.js:46440"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:46606"
        },
        {
            "message": "Missing item type\n/**\n\t * Bitwise left shift\n\t *\n\t * Special Cases:\n\t *  n << -n = N\n\t *  n <<  N = N\n\t *  N <<  n = N\n\t *  n <<  0 = n\n\t *  0 <<  n = 0\n\t *  I <<  I = N\n\t *  I <<  n = I\n\t *  n <<  I = I\n\t *\n\t * @param {BigNumber} x\n\t * @param {BigNumber} y\n\t * @return {BigNumber} Result of `x` << `y`\n\t *",
            "line": " lib/math.js:46608"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:46653"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t   *\n\t   *\n\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n\t   *          └  0            ; otherwise\n\t   *\n\t   *\n\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t   *\n\t   * @return {Matrix}                    SparseMatrix (C)\n\t   *\n\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " lib/math.js:46655"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:46819"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar bigRightArithShift = __webpack_require__(411);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n\t  \n\t  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm08 = load(__webpack_require__(409));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.rightArithShift(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.rightArithShift(4, 2);               // returns number 1\n\t   *\n\t   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n\t   *\n\t   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n\t   * @param  {number | BigNumber} y Amount of shifts\n\t   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times",
            "line": " lib/math.js:46821"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:46987"
        },
        {
            "message": "Missing item type\n/*\n\t * Special Cases:\n\t *   n >> -n =  N\n\t *   n >>  N =  N\n\t *   N >>  n =  N\n\t *   I >>  I =  N\n\t *   n >>  0 =  n\n\t *   I >>  n =  I\n\t *  -I >>  n = -I\n\t *  -I >>  I = -I\n\t *   n >>  I =  I\n\t *  -n >>  I = -1\n\t *   0 >>  n =  0\n\t *\n\t * @param {BigNumber} value\n\t * @param {BigNumber} value\n\t * @return {BigNumber} Result of `x` >> `y`\n\t *",
            "line": " lib/math.js:46989"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:47040"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t  var equalScalar = load(__webpack_require__(48));\n\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm08 = load(__webpack_require__(409));\n\t  var algorithm10 = load(__webpack_require__(56));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n\t   * For matrices, the function is evaluated element wise.\n\t   * For units, the function is evaluated on the best prefix base.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.rightLogShift(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.rightLogShift(4, 2);               // returns number 1\n\t   *\n\t   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]\n\t   *\n\t   * See also:\n\t   *\n\t   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n\t   *\n\t   * @param  {number | Array | Matrix} x Value to be shifted\n\t   * @param  {number} y Amount of shifts\n\t   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times",
            "line": " lib/math.js:47042"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:47208"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(414),\n\t  __webpack_require__(420),\n\t  __webpack_require__(415),\n\t  __webpack_require__(421)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:47210"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var stirlingS2 = load(__webpack_require__(415));\n\t  var isNegative = load(__webpack_require__(368));\n\t  var isInteger = load(__webpack_require__(419));\n  /**\n\t   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\n\t   * bellNumbers only takes integer arguments.\n\t   * The following condition must be enforced: n >= 0\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.bellNumbers(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.bellNumbers(3); // returns 5;\n\t   *    math.bellNumbers(8); // returns 4140;\n\t   *\n\t   * See also:\n\t   *\n\t   *    stirlingS2\n\t   *\n\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t   * @return {Number | BigNumber}     B(n)",
            "line": " lib/math.js:47222"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:47279"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(84));\n\t  var divide = load(__webpack_require__(329));\n\t  var pow = load(__webpack_require__(82));\n\t  var factorial = load(__webpack_require__(416));\n\t  var combinations = load(__webpack_require__(418));\n\t  var isNegative = load(__webpack_require__(368));\n\t  var isInteger = load(__webpack_require__(419));\n\t  var larger = load(__webpack_require__(64));\n  /**\n\t   * The Stirling numbers of the second kind, counts the number of ways to partition\n\t   * a set of n labelled objects into k nonempty unlabelled subsets.\n\t   * stirlingS2 only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   *  If n = k or k = 1, then s(n,k) = 1\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.stirlingS2(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.stirlingS2(5, 3); //returns 25\n\t   *\n\t   * See also:\n\t   *\n\t   *    Bell numbers\n\t   *\n\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t   * @param {Number | BigNumber} k    Number of objects in the subset\n\t   * @return {Number | BigNumber}     S(n,k)",
            "line": " lib/math.js:47281"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:47354"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var gamma = load(__webpack_require__(417));\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Compute the factorial of a value\n\t   *\n\t   * Factorial only supports an integer value as argument.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.factorial(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.factorial(5);    // returns 120\n\t   *    math.factorial(3);    // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, gamma, permutations\n\t   *\n\t   * @param {number | BigNumber | Array | Matrix} n   An integer number\n\t   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`",
            "line": " lib/math.js:47356"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:47421"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var multiply = load(__webpack_require__(84));\n\t  var pow = load(__webpack_require__(82));\n  /**\n\t   * Compute the gamma function of a value using Lanczos approximation for\n\t   * small values, and an extended Stirling approximation for large values.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.gamma(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.gamma(5);       // returns 24\n\t   *    math.gamma(-0.5);    // returns -3.5449077018110335\n\t   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, factorial, permutations\n\t   *\n\t   * @param {number | Array | Matrix} n   A real or complex number\n\t   * @return {number | Array | Matrix}    The gamma of `n`",
            "line": " lib/math.js:47423"
        },
        {
            "message": "Missing item type\nCalculate factorial for a BigNumber",
            "line": " lib/math.js:47575"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:47629"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the number of ways of picking `k` unordered outcomes from `n`\n\t   * possibilities.\n\t   *\n\t   * Combinations only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.combinations(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.combinations(7, 5); // returns 21\n\t   *\n\t   * See also:\n\t   *\n\t   *    permutations, factorial\n\t   *\n\t   * @param {number | BigNumber} n    Total number of objects in the set\n\t   * @param {number | BigNumber} k    Number of objects in the subset\n\t   * @return {number | BigNumber}     Number of possible combinations.",
            "line": " lib/math.js:47631"
        },
        {
            "message": "Missing item type\nTest whether BigNumber n is a positive integer",
            "line": " lib/math.js:47713"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:47726"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is an integer number.\n\t   * The function supports `number`, `BigNumber`, and `Fraction`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isInteger(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isInteger(2);                     // returns true\n\t   *    math.isInteger(0);                     // returns true\n\t   *    math.isInteger(0.5);                   // returns false\n\t   *    math.isInteger(math.bignumber(500));   // returns true\n\t   *    math.isInteger(math.fraction(4));      // returns true\n\t   *    math.isInteger('3');                   // returns true\n\t   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]\n\t   *    math.isInteger(math.complex('2-4i');   // throws an error\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isPositive, isNegative, isZero\n\t   *\n\t   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n\t   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n\t   *                    Throws an error in case of an unknown data type.",
            "line": " lib/math.js:47728"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:47788"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var combinations = load(__webpack_require__(418));\n\t  var add = load(__webpack_require__(53));\n\t  var isPositive = load(__webpack_require__(381));\n\t  var isInteger = load(__webpack_require__(419));\n\t  var larger = load(__webpack_require__(64));\n  /**\n\t   * The composition counts of n into k parts.\n\t   *\n\t   * composition only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.composition(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.composition(5, 3); // returns 6\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations\n\t   *\n\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t   * @param {Number | BigNumber} k    Number of objects in the subset\n\t   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.",
            "line": " lib/math.js:47790"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:47845"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var divide = load(__webpack_require__(329));\n\t  var multiply = load(__webpack_require__(84));\n\t  var combinations = load(__webpack_require__(418));\n\t  var isNegative = load(__webpack_require__(368));\n\t  var isInteger = load(__webpack_require__(419));\n\n  /**\n\t   * The Catalan Numbers enumerate combinatorial structures of many different types.\n\t   * catalan only takes integer arguments.\n\t   * The following condition must be enforced: n >= 0\n\t   *\n\t   * Syntax:\n\t   *\n\t   *   math.catalan(n)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.catalan(3); // returns 5;\n\t   *    math.catalan(8); // returns 1430;\n\t   *\n\t   * See also:\n\t   *\n\t   *    bellNumbers\n\t   *\n\t   * @param {Number | BigNumber} n    nth Catalan number\n\t   * @return {Number | BigNumber}     Cn(n)",
            "line": " lib/math.js:47847"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:47902"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(423),\n\t  __webpack_require__(424),\n\t  __webpack_require__(425),\n\t  __webpack_require__(426)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:47904"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the argument of a complex value.\n\t   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.arg(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(2, 2);\n\t   *    math.arg(a) / math.pi;          // returns number 0.25\n\t   *\n\t   *    var b = math.complex('2 + 3i');\n\t   *    math.arg(b);                    // returns number 0.982793723247329\n\t   *    math.atan2(3, 2);               // returns number 0.982793723247329\n\t   *\n\t   * See also:\n\t   *\n\t   *    re, im, conj, abs\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | BigNumber | Array | Matrix} The argument of x",
            "line": " lib/math.js:47916"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:47979"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the complex conjugate of a complex value.\n\t   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.conj(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i\n\t   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i\n\t   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i\n\t   *\n\t   * See also:\n\t   *\n\t   *    re, im, arg, abs\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t   *            The complex conjugate of x",
            "line": " lib/math.js:47981"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:48040"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Get the imaginary part of a complex number.\n\t   * For a complex number `a + bi`, the function returns `b`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.im(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    math.re(a);                     // returns number 2\n\t   *    math.im(a);                     // returns number 3\n\t   *\n\t   *    math.re(math.complex('-5.2i')); // returns number -5.2\n\t   *    math.re(math.complex(2.4));     // returns number 0\n\t   *\n\t   * See also:\n\t   *\n\t   *    re, conj, abs, arg\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | BigNumber | Array | Matrix} The imaginary part of x",
            "line": " lib/math.js:48042"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:48103"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Get the real part of a complex number.\n\t   * For a complex number `a + bi`, the function returns `a`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.re(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    var a = math.complex(2, 3);\n\t   *    math.re(a);                     // returns number 2\n\t   *    math.im(a);                     // returns number 3\n\t   *\n\t   *    math.re(math.complex('-5.2i')); // returns number 0\n\t   *    math.re(math.complex(2.4));     // returns number 2.4\n\t   *\n\t   * See also:\n\t   *\n\t   *    im, conj, abs, arg\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t   *            A complex number or array with complex numbers\n\t   * @return {number | BigNumber | Array | Matrix} The real part of x",
            "line": " lib/math.js:48105"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:48166"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(428),\n\t  __webpack_require__(429)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:48168"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var abs = load(__webpack_require__(86));\n\t  var add = load(__webpack_require__(51));\n\t  var matrix = load(__webpack_require__(52));\n\t  var multiply = load(__webpack_require__(84));\n\t  var subtract = load(__webpack_require__(77));\n  /**\n\t   * Calculates the point of intersection of two lines in two or three dimensions\n\t   * and of a line and a plane in three dimensions. The inputs are in the form of\n\t   * arrays or 1 dimensional matrices. The line intersection functions return null\n\t   * if the lines do not meet.\n\t   *\n\t   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n\t   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]\n\t   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]\n\t   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]\n\t   *\n\t   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n\t   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n\t   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n\t   *                              OR Co-efficients of the plane's equation\n\t   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n\t   *                              OR null if the calculation is for line and plane\n\t   * @return {Array}              Returns the point of intersection of lines/lines-planes",
            "line": " lib/math.js:48178"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:48324"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t    * Calculates:\n\t    *    The eucledian distance between two points in 2 and 3 dimensional spaces.\n\t    *    Distance between point and a line in 2 and 3 dimensional spaces.\n\t    *    Pairwise distance between a set of 2D or 3D points\n\t    * NOTE:\n\t    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n\t    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n\t    *\n\t    * Syntax:\n\t    *    math.distance([x1, y1], [x2, y2])\n\t    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n\t    *    math.distance([x1, y1, z1], [x2, y2, z2])\n\t    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n\t    *    math.distance([[A], [B], [C]...])\n\t    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n\t    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n\t    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n\t    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n\t    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n\t    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n\t    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n\t    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n\t    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n\t    *\n\t    * Examples:\n\t    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n\t    *    math.distance(\n\t    *     {pointOneX: 0, pointOneY: 0},\n\t    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n\t    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n\t    *    math.distance(\n\t    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n\t    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n\t    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n\t    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n\t    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n\t    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n\t    *    math.distance(\n\t    *     {pointX: 1, pointY: 4},\n\t    *     {lineOnePtX: 6, lineOnePtY: 3},\n\t    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n\t    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n\t    *    math.distance(\n\t    *     {pointX: 2, pointY: 3, pointZ: 1},\n\t    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n\t    *\n\t    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n\t    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n\t    * @return {Number | BigNumber} Returns the distance from two/three points",
            "line": " lib/math.js:48326"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:48631"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(431),\n\t  __webpack_require__(432),\n\t  __webpack_require__(434),\n\t  __webpack_require__(435)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:48633"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t  var zeros = load(__webpack_require__(392));\n\t  var not = load(__webpack_require__(432));\n\t  var isZero = load(__webpack_require__(433));\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm06 = load(__webpack_require__(383));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.and(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.and(2, 4);   // returns true\n\t   *\n\t   *    a = [2, 0, 0];\n\t   *    b = [3, 7, 0];\n\t   *    c = 0;\n\t   *\n\t   *    math.and(a, b);   // returns [true, false, false]\n\t   *    math.and(a, c);   // returns [false, false, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    not, or, xor\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when both inputs are defined with a nonzero/nonempty value.",
            "line": " lib/math.js:48645"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:48820"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  /**\n\t   * Logical `not`. Flips boolean value of a given parameter.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.not(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.not(2);      // returns false\n\t   *    math.not(0);      // returns true\n\t   *    math.not(true);   // returns false\n\t   *\n\t   *    a = [2, -7, 0];\n\t   *    math.not(a);      // returns [false, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    and, or, xor\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when input is a zero or empty value.",
            "line": " lib/math.js:48822"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:48889"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is zero.\n\t   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n\t   * `Complex`, and `Unit`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isZero(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isZero(0);                     // returns true\n\t   *    math.isZero(2);                     // returns false\n\t   *    math.isZero(0.5);                   // returns false\n\t   *    math.isZero(math.bignumber(0));     // returns true\n\t   *    math.isZero(math.fraction(0));      // returns true\n\t   *    math.isZero(math.fraction(1,3));    // returns false\n\t   *    math.isZero(math.complex('2 - 4i'); // returns false\n\t   *    math.isZero(math.complex('0i');     // returns true\n\t   *    math.isZero('0');                   // returns true\n\t   *    math.isZero('2');                   // returns false\n\t   *    math.isZero([2, 0, -3]');           // returns [false, true, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isPositive, isNegative, isInteger\n\t   *\n\t   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n\t   * @return {boolean}  Returns true when `x` is zero.\n\t   *                    Throws an error in case of an unknown data type.",
            "line": " lib/math.js:48891"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:48965"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.or(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.or(2, 4);   // returns true\n\t   *\n\t   *    a = [2, 5, 0];\n\t   *    b = [0, 22, 0];\n\t   *    c = 0;\n\t   *\n\t   *    math.or(a, b);   // returns [true, true, false]\n\t   *    math.or(b, c);   // returns [false, true, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    and, not, xor\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.",
            "line": " lib/math.js:48967"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:49129"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.xor(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.xor(2, 4);   // returns false\n\t   *\n\t   *    a = [2, 0, 0];\n\t   *    b = [2, 7, 0];\n\t   *    c = 0;\n\t   *\n\t   *    math.xor(a, b);   // returns [false, true, false]\n\t   *    math.xor(a, c);   // returns [true, false, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    and, not, or\n\t   *\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t   * @return {boolean | Array | Matrix}\n\t   *            Returns true when one and only one input is defined with a nonzero/nonempty value.",
            "line": " lib/math.js:49131"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:49293"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(313),\n\t  __webpack_require__(437),\n\t  __webpack_require__(331),\n\t  __webpack_require__(438),\n\t  __webpack_require__(439),\n\t  __webpack_require__(83),\n\t  __webpack_require__(315),\n\t  __webpack_require__(440),\n\t  __webpack_require__(317),\n\t  __webpack_require__(330),\n\t  __webpack_require__(320),\n\t  __webpack_require__(441),\n\t  __webpack_require__(442),\n\t  __webpack_require__(335),\n\t  __webpack_require__(444),\n\t  __webpack_require__(445),\n\t  __webpack_require__(446),\n\t  __webpack_require__(447),\n\t  __webpack_require__(288),\n\t  __webpack_require__(389),\n\t  __webpack_require__(347),\n\t  __webpack_require__(392)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:49295"
        },
        {
            "message": "Missing item type\n'use strict';\nvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t  var matrix   = load(__webpack_require__(52));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(84));\n  /**\n\t   * Calculate the cross product for two vectors in three dimensional space.\n\t   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n\t   * as:\n\t   *\n\t   *    cross(A, B) = [\n\t   *      a2 * b3 - a3 * b2,\n\t   *      a3 * b1 - a1 * b3,\n\t   *      a1 * b2 - a2 * b1\n\t   *    ]\n\t   *\n\t   * If one of the input vectors has a dimension greater than 1, the output\n\t   * vector will be a 1x3 (2-dimensional) matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cross(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cross([1, 1, 0],   [0, 1, 1]);       // Returns [1, -1, 1]\n\t   *    math.cross([3, -3, 1],  [4, 9, 2]);       // Returns [-15, -2, 39]\n\t   *    math.cross([2, 3, 4],   [5, 6, 7]);       // Returns [-3, 6, -3]\n\t   *    math.cross([[1, 2, 3]], [[4], [5], [6]]); // Returns [[-3, 6, -3]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    dot, multiply\n\t   *\n\t   * @param  {Array | Matrix} x   First vector\n\t   * @param  {Array | Matrix} y   Second vector\n\t   * @return {Array | Matrix}     Returns the cross product of `x` and `y`",
            "line": " lib/math.js:49325"
        },
        {
            "message": "Missing item type\nCalculate the cross product for two arrays",
            "line": " lib/math.js:49391"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:49430"
        },
        {
            "message": "Missing item type\n'use strict';\nvar array     = __webpack_require__(40);\n\tvar clone     = __webpack_require__(3).clone;\n\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t  \n\t  /**\n\t   * Create a diagonal matrix or retrieve the diagonal of a matrix\n\t   *\n\t   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n\t   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n\t   * When k is positive, the values are placed on the super diagonal.\n\t   * When k is negative, the values are placed on the sub diagonal.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.diag(X)\n\t   *     math.diag(X, format)\n\t   *     math.diag(X, k)\n\t   *     math.diag(X, k, format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     // create a diagonal matrix\n\t   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\t   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n\t   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\t   *\n\t   *    // retrieve the diagonal from a matrix\n\t   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\t   *    math.diag(a);   // returns [1, 5, 9]\n\t   *\n\t   * See also:\n\t   *\n\t   *     ones, zeros, eye\n\t   *\n\t   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n\t   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n\t   *                                    in or retrieved.\n\t   * @param {string} [format='dense']   The matrix storage format.\n\t   *\n\t   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.",
            "line": " lib/math.js:49432"
        },
        {
            "message": "Missing item type\nCreeate diagonal matrix from a vector or vice versa",
            "line": " lib/math.js:49537"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:49606"
        },
        {
            "message": "Missing item type\n'use strict';\nvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t  var add      = load(__webpack_require__(51));\n\t  var multiply = load(__webpack_require__(84));\n  /**\n\t   * Calculate the dot product of two vectors. The dot product of\n\t   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:\n\t   *\n\t   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.dot(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15\n\t   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15\n\t   *\n\t   * See also:\n\t   *\n\t   *    multiply, cross\n\t   *\n\t   * @param  {Array | Matrix} x     First vector\n\t   * @param  {Array | Matrix} y     Second vector\n\t   * @return {number}               Returns the dot product of `x` and `y`",
            "line": " lib/math.js:49608"
        },
        {
            "message": "Missing item type\nCalculate the dot product for two arrays",
            "line": " lib/math.js:49661"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:49691"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\tvar _flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Flatten a multi dimensional matrix into a single dimensional matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.flatten(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]\n\t   *\n\t   * See also:\n\t   *\n\t   *    concat, resize, size, squeeze\n\t   *\n\t   * @param {Matrix | Array} x   Matrix to be flattened\n\t   * @return {Matrix | Array} Returns the flattened matrix",
            "line": " lib/math.js:49693"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:49742"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar resize = __webpack_require__(40).resize;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Create a matrix filled with ones. The created matrix can have one or\n\t   * multiple dimensions.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.ones(m)\n\t   *    math.ones(m, format)\n\t   *    math.ones(m, n)\n\t   *    math.ones(m, n, format)\n\t   *    math.ones([m, n])\n\t   *    math.ones([m, n], format)\n\t   *    math.ones([m, n, p, ...])\n\t   *    math.ones([m, n, p, ...], format)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.ones(3);                   // returns [1, 1, 1]\n\t   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]\n\t   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n\t   *\n\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]\n\t   *\n\t   * See also:\n\t   *\n\t   *    zeros, eye, size, range\n\t   *\n\t   * @param {...number | Array} size    The size of each dimension of the matrix\n\t   * @param {string} [format]           The Matrix storage format\n\t   *\n\t   * @return {Array | Matrix | number}  A matrix filled with ones",
            "line": " lib/math.js:49744"
        },
        {
            "message": "Missing item type\nCreate an Array or Matrix with ones",
            "line": " lib/math.js:49826"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:49882"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var asc = load(__webpack_require__(443));\n\t  function desc(a, b) {\n\t    return -asc(a, b);\n\t  }\n  /**\n\t   * Partition-based selection of an array or 1D matrix.\n\t   * Will find the kth smallest value, and mutates the input array.\n\t   * Uses Quickselect.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.partitionSelect(x, k)\n\t   *    math.partitionSelect(x, k, compare)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.partitionSelect([5, 10, 1], 2);           // returns 10\n\t   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'\n\t   *\n\t   *    function sortByLength (a, b) {\n\t   *      return a.length - b.length;\n\t   *    }\n\t   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'\n\t   *\n\t   * See also:\n\t   *\n\t   *    sort\n\t   *\n\t   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n\t   * @param {Number} k            The kth smallest value to be retrieved; zero-based index\n\t   * @param {Function | 'asc' | 'desc'} [compare='asc']\n\t   *        An optional comparator function. The function is called as\n\t   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n\t   *        and 0 when a == b.\n\t   * @return {*} Returns the kth lowest value.",
            "line": " lib/math.js:49884"
        },
        {
            "message": "Missing item type\nQuickselect algorithm.\nCode adapted from:\nhttp://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html",
            "line": " lib/math.js:49966"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:50024"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm05 = load(__webpack_require__(79));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n\t  \n\t  /**\n\t   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n\t   *\n\t   * x and y are considered equal when the relative difference between x and y\n\t   * is smaller than the configured epsilon. The function cannot be used to\n\t   * compare values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.compare(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.compare(6, 1);           // returns 1\n\t   *    math.compare(2, 3);           // returns -1\n\t   *    math.compare(7, 7);           // returns 0\n\t   *\n\t   *    var a = math.unit('5 cm');\n\t   *    var b = math.unit('40 mm');\n\t   *    math.compare(a, b);           // returns 1\n\t   *\n\t   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, smallerEq, larger, largerEq\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.",
            "line": " lib/math.js:50026"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:50212"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\n\tvar ArgumentsError = __webpack_require__(11);\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar format = __webpack_require__(23).format;\n\tvar clone = __webpack_require__(3).clone;\n\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Resize a matrix\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.resize(x, size)\n\t   *     math.resize(x, size, defaultValue)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]\n\t   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]\n\t   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n\t   *     math.resize(\"hello\", [8], \"!\");    // returns string 'hello!!!'\n\t   *\n\t   * See also:\n\t   *\n\t   *     size, squeeze, subset\n\t   *\n\t   * @param {Array | Matrix | *} x             Matrix to be resized\n\t   * @param {Array | Matrix} size              One dimensional array with numbers\n\t   * @param {number | string} [defaultValue=0] Zero by default, except in\n\t   *                                           case of a string, in that case\n\t   *                                           defaultValue = ' '\n\t   * @return {* | Array | Matrix} A resized clone of matrix `x`",
            "line": " lib/math.js:50214"
        },
        {
            "message": "Missing item type\nResize a string",
            "line": " lib/math.js:50310"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:50356"
        },
        {
            "message": "Missing item type\n'use strict';\nvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Calculate the size of a matrix or scalar.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.size(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.size(2.3);                  // returns []\n\t   *     math.size('hello world');        // returns [11]\n\t   *\n\t   *     var A = [[1, 2, 3], [4, 5, 6]];\n\t   *     math.size(A);                    // returns [2, 3]\n\t   *     math.size(math.range(1,6));      // returns [5]\n\t   *\n\t   * See also:\n\t   *\n\t   *     resize, squeeze, subset\n\t   *\n\t   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\n\t   * @return {Array | Matrix} A vector with size of `x`.",
            "line": " lib/math.js:50358"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:50417"
        },
        {
            "message": "Missing item type\n'use strict';\nvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var asc = load(__webpack_require__(443));\n\t  var desc = function (a, b) {\n\t    return -asc(a, b);\n\t  };\n  /**\n\t   * Sort the items in a matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sort(x)\n\t   *    math.sort(x, compare)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sort([5, 10, 1]); // returns [1, 5, 10]\n\t   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']\n\t   *\n\t   *    function sortByLength (a, b) {\n\t   *      return a.length - b.length;\n\t   *    }\n\t   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']\n\t   *\n\t   * See also:\n\t   *\n\t   *    filter, forEach, map\n\t   *\n\t   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n\t   * @param {Function | 'asc' | 'desc'} [compare='asc']\n\t   *        An optional _comparator function. The function is called as\n\t   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n\t   *        and 0 when a == b.\n\t   * @return {Matrix | Array} Returns the sorted matrix.",
            "line": " lib/math.js:50419"
        },
        {
            "message": "Missing item type\nGet the comparator for given order ('asc' or 'desc')",
            "line": " lib/math.js:50495"
        },
        {
            "message": "Missing item type\nValidate whether an array is one dimensional\nThrows an error when this is not the case",
            "line": " lib/math.js:50512"
        },
        {
            "message": "Missing item type\nValidate whether a matrix is one dimensional\nThrows an error when this is not the case",
            "line": " lib/math.js:50524"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:50543"
        },
        {
            "message": "Missing item type\n'use strict';\nvar object = __webpack_require__(3);\n\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n  /**\n\t   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.squeeze(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.squeeze([3]);           // returns 3\n\t   *     math.squeeze([[3]]);         // returns 3\n\t   *\n\t   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)\n\t   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)\n\t   *\n\t   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)\n\t   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)\n\t   *\n\t   *     // only inner and outer dimensions are removed\n\t   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n\t   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n\t   *\n\t   * See also:\n\t   *\n\t   *     subset\n\t   *\n\t   * @param {Matrix | Array} x      Matrix to be squeezed\n\t   * @return {Matrix | Array} Squeezed matrix",
            "line": " lib/math.js:50545"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:50610"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  //require('./distribution'), // TODO: rethink math.distribution\n\t  __webpack_require__(418),\n\t  __webpack_require__(416),\n\t  __webpack_require__(417),\n\t  __webpack_require__(449),\n\t  __webpack_require__(451),\n\t  __webpack_require__(452),\n\t  __webpack_require__(453),\n\t  __webpack_require__(455),\n\t  __webpack_require__(456)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:50612"
        },
        {
            "message": "Missing item type\n'use strict';\n\nfunction factory(type, config, load, typed) {\n\t    var matrix = load(__webpack_require__(52));\n\t    var divide = load(__webpack_require__(329));\n\t    var sum = load(__webpack_require__(450));\n\t    var multiply = load(__webpack_require__(84));\n\t    var dotDivide = load(__webpack_require__(371));\n\t    var log = load(__webpack_require__(385));\n\t    var isNumeric = load(__webpack_require__(89));\n    /**\n\t     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n\t     *\n\t     * Syntax:\n\t     *\n\t     *     math.kldivergence(x, y)\n\t     *\n\t     * Examples:\n\t     *\n\t     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153\n\t     *\n\t     *\n\t     * @param  {Array | Matrix} q    First vector\n\t     * @param  {Array | Matrix} p    Second vector\n\t     * @return {number}              Returns distance between q and p",
            "line": " lib/math.js:50630"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:50725"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(53));\n  /**\n\t   * Compute the sum of a matrix or a list with values.\n\t   * In case of a (multi dimensional) array or matrix, the sum of all\n\t   * elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.sum(a, b, c, ...)\n\t   *     math.sum(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.sum(2, 1, 4, 3);               // returns 10\n\t   *     math.sum([2, 1, 4, 3]);             // returns 10\n\t   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, min, max, prod, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The sum of all values",
            "line": " lib/math.js:50727"
        },
        {
            "message": "Missing item type\nRecursively calculate the sum of an n-dimensional array",
            "line": " lib/math.js:50781"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:50815"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var multiply = load(__webpack_require__(84));\n\t  var divide = load(__webpack_require__(329));\n\t  var factorial = load(__webpack_require__(416));\n\t  var isInteger = load(__webpack_require__(419));\n\t  var isPositive = load(__webpack_require__(381));\n  /**\n\t   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n\t   *\n\t   * multinomial takes one array of integers as an argument.\n\t   * The following condition must be enforced: every ai <= 0\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.multinomial(a) // a is an array type\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.multinomial([1,2,1]); // returns 12\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, factorial\n\t   *\n\t   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n\t   * @return {Number | BigNumber}         Multinomial coefficient.",
            "line": " lib/math.js:50817"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:50874"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t  var factorial = load(__webpack_require__(416));\n  /**\n\t   * Compute the number of ways of obtaining an ordered subset of `k` elements\n\t   * from a set of `n` elements.\n\t   *\n\t   * Permutations only takes integer arguments.\n\t   * The following condition must be enforced: k <= n.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.permutations(n)\n\t   *     math.permutations(n, k)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.permutations(5);     // 120\n\t   *    math.permutations(5, 3);  // 60\n\t   *\n\t   * See also:\n\t   *\n\t   *    combinations, factorial\n\t   *\n\t   * @param {number | BigNumber} n   The number of objects in total\n\t   * @param {number | BigNumber} [k] The number of objects in the subset\n\t   * @return {number | BigNumber}    The number of permutations",
            "line": " lib/math.js:50876"
        },
        {
            "message": "Missing item type\nTest whether BigNumber n is a positive integer",
            "line": " lib/math.js:50961"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:50974"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var distribution = load(__webpack_require__(454));\n  /**\n\t   * Random pick one or more values from a one dimensional array.\n\t   * Array elements are picked using a random function with uniform or weighted distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.pickRandom(array)\n\t   *     math.pickRandom(array, number)\n\t   *     math.pickRandom(array, weights)\n\t   *     math.pickRandom(array, number, weights)\n\t   *     math.pickRandom(array, weights, number)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.pickRandom([3, 6, 12, 2]);                  // returns one of the values in the array\n\t   *     math.pickRandom([3, 6, 12, 2], 2);               // returns an array of two of the values in the array\n\t   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1]);    // returns one of the values in the array with weighted distribution\n\t   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]); // returns an array of two of the values in the array with weighted distribution\n\t   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2); // returns an array of two of the values in the array with weighted distribution\n\t   *\n\t   * See also:\n\t   *\n\t   *     random, randomInt\n\t   *\n\t   * @param {Array} array     A one dimensional array\n\t   * @param {Int} number      An int or float\n\t   * @param {Array} weights   An array of ints or floats\n\t   * @return {number} One of the elements of the provided input array\n\t   * @return {array} An array of elements of the provided input array",
            "line": " lib/math.js:50976"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:51025"
        },
        {
            "message": "Missing item type\n'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\tvar isCollection = __webpack_require__(322);\n\tvar isNumber = __webpack_require__(6).isNumber;\n// TODO: rethink math.distribution\n\t// TODO: rework to a typed function\n\tfunction factory (type, config, load, typed) {\n\t  var matrix = load(__webpack_require__(52));\n\t  var array = __webpack_require__(40);\n  /**\n\t   * Create a distribution object with a set of random functions for given\n\t   * random distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.distribution(name)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     var normalDist = math.distribution('normal'); // create a normal distribution\n\t   *     normalDist.random(0, 10);                     // get a random value between 0 and 10\n\t   *\n\t   * See also:\n\t   *\n\t   *     random, randomInt, pickRandom\n\t   *\n\t   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.\n\t   * @return {Object}       Returns a distribution object containing functions:\n\t   *                        `random([size] [, min] [, max])`,\n\t   *                        `randomInt([min] [, max])`,\n\t   *                        `pickRandom(array)`",
            "line": " lib/math.js:51027"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:51327"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var distribution = load(__webpack_require__(454));\n  /**\n\t   * Return a random number larger or equal to `min` and smaller than `max`\n\t   * using a uniform distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.random()                // generate a random number between 0 and 1\n\t   *     math.random(max)             // generate a random number between 0 and max\n\t   *     math.random(min, max)        // generate a random number between min and max\n\t   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n\t   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n\t   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.random();       // returns a random number between 0 and 1\n\t   *     math.random(100);    // returns a random number between 0 and 100\n\t   *     math.random(30, 40); // returns a random number between 30 and 40\n\t   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1\n\t   *\n\t   * See also:\n\t   *\n\t   *     randomInt, pickRandom\n\t   *\n\t   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n\t   *                                size and filled with random values is returned\n\t   * @param {number} [min]  Minimum boundary for the random value, included\n\t   * @param {number} [max]  Maximum boundary for the random value, excluded\n\t   * @return {number | Array | Matrix} A random number",
            "line": " lib/math.js:51329"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:51378"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var distribution = load(__webpack_require__(454));\n  /**\n\t   * Return a random integer number larger or equal to `min` and smaller than `max`\n\t   * using a uniform distribution.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.randomInt(max)             // generate a random integer between 0 and max\n\t   *     math.randomInt(min, max)        // generate a random integer between min and max\n\t   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n\t   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n\t   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.randomInt(100);    // returns a random integer between 0 and 100\n\t   *     math.randomInt(30, 40); // returns a random integer between 30 and 40\n\t   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1\n\t   *\n\t   * See also:\n\t   *\n\t   *     random, pickRandom\n\t   *\n\t   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n\t   *                                size and filled with random values is returned\n\t   * @param {number} [min]  Minimum boundary for the random value, included\n\t   * @param {number} [max]  Maximum boundary for the random value, excluded\n\t   * @return {number | Array | Matrix} A random integer value",
            "line": " lib/math.js:51380"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:51427"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(443),\n\t  __webpack_require__(458),\n\t  __webpack_require__(88),\n\t  __webpack_require__(64),\n\t  __webpack_require__(354),\n\t  __webpack_require__(60),\n\t  __webpack_require__(459),\n\t  __webpack_require__(460)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:51429"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var equal = load(__webpack_require__(88));\n  /**\n\t   * Test element wise whether two matrices are equal.\n\t   * The function accepts both matrices and scalar values.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.deepEqual(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.deepEqual(2, 4);   // returns false\n\t   *\n\t   *    a = [2, 5, 1];\n\t   *    b = [2, 7, 1];\n\t   *\n\t   *    math.deepEqual(a, b);   // returns false\n\t   *    math.equal(a, b);       // returns [true, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal\n\t   *\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t   *            Returns true when the input matrices have the same size and each of their elements is equal.",
            "line": " lib/math.js:51445"
        },
        {
            "message": "Missing item type\nTest whether two arrays have the same size and all elements are equal",
            "line": " lib/math.js:51489"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:51530"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether value x is smaller or equal to y.\n\t   *\n\t   * The function returns true when x is smaller than y or the relative\n\t   * difference between x and y is smaller than the configured epsilon. The\n\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.smallerEq(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.smaller(1 + 2, 3);        // returns false\n\t   *    math.smallerEq(1 + 2, 3);      // returns true\n\t   *\n\t   * See also:\n\t   *\n\t   *    equal, unequal, smaller, larger, largerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false",
            "line": " lib/math.js:51532"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:51710"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm07 = load(__webpack_require__(62));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t   * Test whether two values are unequal.\n\t   *\n\t   * The function tests whether the relative difference between x and y is\n\t   * larger than the configured epsilon. The function cannot be used to compare\n\t   * values smaller than approximately 2.22e-16.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n\t   *\n\t   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n\t   * with everything except `null`, and `undefined` is unequal with everying\n\t   * except. `undefined`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.unequal(x, y)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.unequal(2 + 2, 3);       // returns true\n\t   *    math.unequal(2 + 2, 4);       // returns false\n\t   *\n\t   *    var a = math.unit('50 cm');\n\t   *    var b = math.unit('5 m');\n\t   *    math.unequal(a, b);           // returns false\n\t   *\n\t   *    var c = [2, 5, 1];\n\t   *    var d = [2, 7, 1];\n\t   *\n\t   *    math.unequal(c, d);           // returns [false, true, false]\n\t   *    math.deepEqual(c, d);         // returns false\n\t   *\n\t   *    math.unequal(0, null);        // returns true\n\t   * See also:\n\t   *\n\t   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n\t   *\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n\t   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false",
            "line": " lib/math.js:51712"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:51920"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(462)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:51922"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar sign = __webpack_require__(6).sign;\n\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Compute the erf function of a value using a rational Chebyshev\n\t   * approximations for different intervals of x.\n\t   *\n\t   * This is a translation of W. J. Cody's Fortran implementation from 1987\n\t   * ( http://www.netlib.org/specfun/erf ). See the AMS publication\n\t   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n\t   * for an explanation of this process.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.erf(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.erf(0.2);    // returns 0.22270258921047847\n\t   *    math.erf(-0.5);   // returns -0.5204998778130465\n\t   *    math.erf(4);      // returns 0.9999999845827421\n\t   *\n\t   * @param {number | Array | Matrix} x   A real number\n\t   * @return {number | Array | Matrix}    The erf of `x`",
            "line": " lib/math.js:51931"
        },
        {
            "message": "Missing item type\nApproximates the error function erf() for x <= 0.46875 using this function:\n              n\nerf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n             j=0",
            "line": " lib/math.js:51996"
        },
        {
            "message": "Missing item type\nApproximates the complement of the error function erfc() for\n0.46875 <= x <= 4.0 using this function:\n                      n\nerfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n                     j=0",
            "line": " lib/math.js:52015"
        },
        {
            "message": "Missing item type\nApproximates the complement of the error function erfc() for x > 4.0 using\nthis function:\n\nerfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n              n\n   1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n             j=0",
            "line": " lib/math.js:52037"
        },
        {
            "message": "Missing item type\nUpper bound for the first approximation interval, 0 <= x <= THRESH",
            "line": " lib/math.js:52068"
        },
        {
            "message": "Missing item type\nConstant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)",
            "line": " lib/math.js:52074"
        },
        {
            "message": "Missing item type\nCoefficients for each term of the numerator sum (p_j) for each approximation\ninterval (see W. J. Cody's paper for more details)",
            "line": " lib/math.js:52080"
        },
        {
            "message": "Missing item type\nCoefficients for each term of the denominator sum (q_j) for each approximation\ninterval (see W. J. Cody's paper for more details)",
            "line": " lib/math.js:52101"
        },
        {
            "message": "Missing item type\nMaximum/minimum safe numbers to input to erf() (in ES6+, this number is\nNumber.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\nreturn 1",
            "line": " lib/math.js:52120"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:52132"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(323),\n\t  __webpack_require__(328),\n\t  __webpack_require__(464),\n\t  __webpack_require__(333),\n\t  __webpack_require__(465),\n\t  __webpack_require__(466),\n\t  __webpack_require__(467),\n\t  __webpack_require__(468),\n\t  __webpack_require__(450),\n\t  __webpack_require__(469)\n\t];\n\n/***/ },",
            "line": " lib/math.js:52134"
        },
        {
            "message": "Missing item type\n'use strict';\nvar flatten = __webpack_require__(40).flatten;\n\tvar reduce = __webpack_require__(325);\n\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(53));\n\t  var divide = load(__webpack_require__(81));\n\t  var compare = load(__webpack_require__(443));\n\t  var partitionSelect = load(__webpack_require__(442));\n  /**\n\t   * Compute the median of a matrix or a list with values. The values are\n\t   * sorted and the middle value is returned. In case of an even number of\n\t   * values, the average of the two middle values is returned.\n\t   * Supported types of values are: Number, BigNumber, Unit\n\t   *\n\t   * In case of a (multi dimensional) array or matrix, the median of all\n\t   * elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.median(a, b, c, ...)\n\t   *     math.median(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.median(5, 2, 7);        // returns 5\n\t   *     math.median([3, -1, 5, 7]);  // returns 4\n\t   *\n\t   * See also:\n\t   *\n\t   *     mean, min, max, sum, prod, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The median",
            "line": " lib/math.js:52151"
        },
        {
            "message": "Missing item type\nRecursively calculate the median of an n-dimensional array",
            "line": " lib/math.js:52213"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:52273"
        },
        {
            "message": "Missing item type\n'use strict';\nvar flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n  /**\n\t  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n\t  * If there are more than one modes, it returns a list of those values.\n\t  *\n\t  * Syntax:\n\t  *\n\t  *     math.mode(a, b, c, ...)\n\t  *     math.mode(A)\n\t  *\n\t  * Examples:\n\t  *\n\t  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]\n\t  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]\n\t  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n\t  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n\t  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n\t  *\n\t  * See also:\n\t  *\n\t  *     median,\n\t  *     mean\n\t  *\n\t  * @param {... *} args  A single matrix\n\t  * @return {*} The mode of all values",
            "line": " lib/math.js:52275"
        },
        {
            "message": "Missing item type\nCalculates the mode in an 1-dimensional array",
            "line": " lib/math.js:52319"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:52355"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t  var multiply = load(__webpack_require__(80));\n  /**\n\t   * Compute the product of a matrix or a list with values.\n\t   * In case of a (multi dimensional) array or matrix, the sum of all\n\t   * elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.prod(a, b, c, ...)\n\t   *     math.prod(A)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.multiply(2, 3);           // returns 6\n\t   *     math.prod(2, 3);               // returns 6\n\t   *     math.prod(2, 3, 4);            // returns 24\n\t   *     math.prod([2, 3, 4]);          // returns 24\n\t   *     math.prod([[2, 5], [4, 3]]);   // returns 120\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, min, max, sum, std, var\n\t   *\n\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t   * @return {*} The product of all values",
            "line": " lib/math.js:52357"
        },
        {
            "message": "Missing item type\nRecursively calculate the product of an n-dimensional array",
            "line": " lib/math.js:52412"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:52437"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\tvar isNumber = __webpack_require__(6).isNumber;\n\tvar flatten = __webpack_require__(40).flatten;\n\tvar isCollection = __webpack_require__(322);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(51));\n\t  var multiply = load(__webpack_require__(84));\n\t  var partitionSelect = load(__webpack_require__(442));\n\t  var compare = load(__webpack_require__(443));\n  /**\n\t   * Compute the prob order quantile of a matrix or a list with values.\n\t   * The sequence is sorted and the middle value is returned.\n\t   * Supported types of sequence values are: Number, BigNumber, Unit\n\t   * Supported types of probability are: Number, BigNumber\n\t   *\n\t   * In case of a (multi dimensional) array or matrix, the prob order quantile\n\t   * of all elements will be calculated.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.quantileSeq(A, prob[, sorted])\n\t   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])\n\t   *     math.quantileSeq(A, N[, sorted])\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4\n\t   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]\n\t   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]\n\t   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4\n\t   *\n\t   * See also:\n\t   *\n\t   *     median, mean, min, max, sum, prod, std, var\n\t   *\n\t   * @param {Array, Matrix} data                A single matrix or Array\n\t   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is\n\t   *                                            the amount of evenly distributed steps of\n\t   *                                            probabilities; only one of these options can\n\t   *                                            be provided\n\t   * @param {Boolean} sorted=false              is data sorted in ascending order\n\t   * @return {Number, BigNumber, Unit, Array}   Quantile(s)",
            "line": " lib/math.js:52439"
        },
        {
            "message": "Missing item type\nCalculate the prob order quantile of an n-dimensional array.",
            "line": " lib/math.js:52590"
        },
        {
            "message": "Missing item type\nCheck if array value types are valid, throw error otherwise.",
            "line": " lib/math.js:52681"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:52700"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var sqrt       = load(__webpack_require__(380));\n\t  var variance   = load(__webpack_require__(469));\n  /**\n\t   * Compute the standard deviation of a matrix or a  list with values.\n\t   * The standard deviations is defined as the square root of the variance:\n\t   * `std(A) = sqrt(var(A))`.\n\t   * In case of a (multi dimensional) array or matrix, the standard deviation\n\t   * over all elements will be calculated.\n\t   *\n\t   * Optionally, the type of normalization can be specified as second\n\t   * parameter. The parameter `normalization` can be one of the following values:\n\t   *\n\t   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\t   * - 'uncorrected'        The sum of squared errors is divided by n\n\t   * - 'biased'             The sum of squared errors is divided by (n + 1)\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.std(a, b, c, ...)\n\t   *     math.std(A)\n\t   *     math.std(A, normalization)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.std(2, 4, 6);                     // returns 2\n\t   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611\n\t   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979\n\t   *     math.std([2, 4, 6, 8], 'biased');      // returns 2\n\t   *\n\t   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, max, min, prod, sum, var\n\t   *\n\t   * @param {Array | Matrix} array\n\t   *                        A single matrix or or multiple scalar values\n\t   * @param {string} [normalization='unbiased']\n\t   *                        Determines how to normalize the variance.\n\t   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n\t   * @return {*} The standard deviation",
            "line": " lib/math.js:52702"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:52780"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t  var add = load(__webpack_require__(53));\n\t  var subtract = load(__webpack_require__(77));\n\t  var multiply = load(__webpack_require__(80));\n\t  var divide = load(__webpack_require__(81));\n  /**\n\t   * Compute the variance of a matrix or a  list with values.\n\t   * In case of a (multi dimensional) array or matrix, the variance over all\n\t   * elements will be calculated.\n\t   *\n\t   * Optionally, the type of normalization can be specified as second\n\t   * parameter. The parameter `normalization` can be one of the following values:\n\t   *\n\t   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\t   * - 'uncorrected'        The sum of squared errors is divided by n\n\t   * - 'biased'             The sum of squared errors is divided by (n + 1)\n\t   *\n\t   * Note that older browser may not like the variable name `var`. In that\n\t   * case, the function can be called as `math['var'](...)` instead of\n\t   * `math.var(...)`.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.var(a, b, c, ...)\n\t   *     math.var(A)\n\t   *     math.var(A, normalization)\n\t   *\n\t   * Examples:\n\t   *\n\t   *     math.var(2, 4, 6);                     // returns 4\n\t   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667\n\t   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5\n\t   *     math.var([2, 4, 6, 8], 'biased');      // returns 4\n\t   *\n\t   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5\n\t   *\n\t   * See also:\n\t   *\n\t   *    mean, median, max, min, prod, std, sum\n\t   *\n\t   * @param {Array | Matrix} array\n\t   *                        A single matrix or or multiple scalar values\n\t   * @param {string} [normalization='unbiased']\n\t   *                        Determines how to normalize the variance.\n\t   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n\t   * @return {*} The variance",
            "line": " lib/math.js:52782"
        },
        {
            "message": "Missing item type\nRecursively calculate the variance of an n-dimensional array",
            "line": " lib/math.js:52857"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:52914"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(90),\n\t  __webpack_require__(471)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:52916"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isString = __webpack_require__(23).isString;\n\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Interpolate values into a string template.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.print(template, values)\n\t   *     math.print(template, values, precision)\n\t   *     math.print(template, values, options)\n\t   *\n\t   * Example usage:\n\t   *\n\t   *     // the following outputs: 'Lucy is 5 years old'\n\t   *     math.print('Lucy is $age years old', {age: 5});\n\t   *\n\t   *     // the following outputs: 'The value of pi is 3.141592654'\n\t   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);\n\t   *\n\t   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\n\t   *     math.print('Hello $user.name! The date is $date', {\n\t   *       user: {\n\t   *         name: 'Mary',\n\t   *       },\n\t   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\n\t   *     });\n\t   *\n\t   * See also:\n\t   *\n\t   *     format\n\t   *\n\t   * @param {string} template     A string containing variable placeholders.\n\t   * @param {Object} values       An object containing variables which will\n\t   *                              be filled in in the template.\n\t   * @param {number | Object} [options]  Formatting options,\n\t   *                              or the number of digits to format numbers.\n\t   *                              See function math.format for a description\n\t   *                              of all options.\n\t   * @return {string} Interpolated string",
            "line": " lib/math.js:52926"
        },
        {
            "message": "Missing item type\nInterpolate values into a string template.",
            "line": " lib/math.js:52982"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53017"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(473),\n\t  __webpack_require__(474),\n\t  __webpack_require__(475),\n\t  __webpack_require__(476),\n\t  __webpack_require__(477),\n\t  __webpack_require__(478),\n\t  __webpack_require__(479),\n\t  __webpack_require__(480),\n\t  __webpack_require__(481),\n\t  __webpack_require__(482),\n\t  __webpack_require__(483),\n\t  __webpack_require__(484),\n\t  __webpack_require__(485),\n\t  __webpack_require__(486),\n\t  __webpack_require__(487),\n\t  __webpack_require__(488),\n\t  __webpack_require__(489),\n\t  __webpack_require__(490),\n\t  __webpack_require__(491),\n\t  __webpack_require__(492),\n\t  __webpack_require__(493),\n\t  __webpack_require__(494),\n\t  __webpack_require__(495),\n\t  __webpack_require__(496),\n\t  __webpack_require__(497)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:53019"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse cosine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acos(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acos(0.5);           // returns number 1.0471975511965979\n\t   *    math.acos(math.cos(1.5)); // returns number 1.5\n\t   *\n\t   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, atan, asin\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x",
            "line": " lib/math.js:53052"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53115"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the hyperbolic arccos of a value,\n\t   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acosh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acosh(1.5);       // returns 0.9624236501192069\n\t   *\n\t   * See also:\n\t   *\n\t   *    cosh, asinh, atanh\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x",
            "line": " lib/math.js:53117"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic arccos of a number",
            "line": " lib/math.js:53175"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53189"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acot(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acot(0.5);           // returns number 0.4636476090008061\n\t   *    math.acot(math.cot(1.5)); // returns number 1.5\n\t   *\n\t   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    cot, atan\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x   Function input\n\t   * @return {number | Complex | Array | Matrix} The arc cotangent of x",
            "line": " lib/math.js:53191"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53249"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the hyperbolic arccotangent of a value,\n\t   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acoth(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acoth(0.5);       // returns 0.8047189562170503\n\t   *\n\t   * See also:\n\t   *\n\t   *    acsch, asech\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x",
            "line": " lib/math.js:53251"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53310"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acsc(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acsc(0.5);           // returns number 0.5235987755982989\n\t   *    math.acsc(math.csc(1.5)); // returns number ~1.5\n\t   *\n\t   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    csc, asin, asec\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x   Function input\n\t   * @return {number | Complex | Array | Matrix} The arc cosecant of x",
            "line": " lib/math.js:53312"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53374"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the hyperbolic arccosecant of a value,\n\t   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.acsch(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.acsch(0.5);       // returns 1.4436354751788103\n\t   *\n\t   * See also:\n\t   *\n\t   *    asech, acoth\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x",
            "line": " lib/math.js:53376"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53433"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asec(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asec(0.5);           // returns 1.0471975511965979\n\t   *    math.asec(math.sec(1.5)); // returns 1.5\n\t   *\n\t   *    math.asec(2);             // returns 0 + 1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    acos, acot, acsc\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} The arc secant of x",
            "line": " lib/math.js:53435"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53496"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  var acosh = typed.find(load(__webpack_require__(474)), ['Complex']);\n  /**\n\t   * Calculate the hyperbolic arcsecant of a value,\n\t   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asech(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asech(0.5);       // returns 1.3169578969248166\n\t   *\n\t   * See also:\n\t   *\n\t   *    acsch, acoth\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x",
            "line": " lib/math.js:53498"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53566"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse sine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asin(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asin(0.5);           // returns number 0.5235987755982989\n\t   *    math.asin(math.sin(1.5)); // returns number ~1.5\n\t   *\n\t   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    sin, atan, acos\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x",
            "line": " lib/math.js:53568"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53632"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the hyperbolic arcsine of a value,\n\t   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.asinh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.asinh(0.5);       // returns 0.48121182505960347\n\t   *\n\t   * See also:\n\t   *\n\t   *    acosh, atanh\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x",
            "line": " lib/math.js:53634"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53691"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the inverse tangent of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.atan(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.atan(0.5);           // returns number 0.4636476090008061\n\t   *    math.atan(math.tan(1.5)); // returns number 1.5\n\t   *\n\t   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    tan, asin, acos\n\t   *\n\t   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x",
            "line": " lib/math.js:53693"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53752"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t  var algorithm03 = load(__webpack_require__(61));\n\t  var algorithm09 = load(__webpack_require__(374));\n\t  var algorithm11 = load(__webpack_require__(85));\n\t  var algorithm12 = load(__webpack_require__(63));\n\t  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Calculate the inverse tangent function with two arguments, y/x.\n\t   * By providing two arguments, the right quadrant of the computed angle can be\n\t   * determined.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.atan2(y, x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.atan2(2, 2) / math.pi;       // returns number 0.25\n\t   *\n\t   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg\n\t   *    var x = math.cos(angle);\n\t   *    var y = math.sin(angle);\n\t   *\n\t   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t   *\n\t   * See also:\n\t   *\n\t   *    tan, atan, sin, cos\n\t   *\n\t   * @param {number | Array | Matrix} y  Second dimension\n\t   * @param {number | Array | Matrix} x  First dimension\n\t   * @return {number | Array | Matrix} Four-quadrant inverse tangent",
            "line": " lib/math.js:53754"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53910"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic arctangent of a value,\n\t   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.atanh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.atanh(0.5);       // returns 0.5493061443340549\n\t   *\n\t   * See also:\n\t   *\n\t   *    acosh, asinh\n\t   *\n\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x",
            "line": " lib/math.js:53912"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic arctangent of a number",
            "line": " lib/math.js:53967"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:53981"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the cosine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cos(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cos(2);                      // returns number -0.4161468365471422\n\t   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475\n\t   *    math.cos(math.unit(180, 'deg'));  // returns number -1\n\t   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5\n\t   *\n\t   *    var angle = 0.2;\n\t   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, tan\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x",
            "line": " lib/math.js:53983"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54049"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic cosine of a value,\n\t   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cosh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cosh(0.5);       // returns number 1.1276259652063807\n\t   *\n\t   * See also:\n\t   *\n\t   *    sinh, tanh\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x",
            "line": " lib/math.js:54051"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic cosine of a number",
            "line": " lib/math.js:54107"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54121"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.cot(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.cot(2);      // returns number -0.45765755436028577\n\t   *    1 / math.tan(2);  // returns number -0.45765755436028577\n\t   *\n\t   * See also:\n\t   *\n\t   *    tan, sec, csc\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Cotangent of x",
            "line": " lib/math.js:54123"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54185"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic cotangent of a value,\n\t   * defined as `coth(x) = 1 / tanh(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.coth(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    // coth(x) = 1 / tanh(x)\n\t   *    math.coth(2);         // returns 1.0373147207275482\n\t   *    1 / math.tanh(2);     // returns 1.0373147207275482\n\t   *\n\t   * See also:\n\t   *\n\t   *    sinh, tanh, cosh\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x",
            "line": " lib/math.js:54187"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic cosine of a number",
            "line": " lib/math.js:54245"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54260"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.csc(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.csc(2);      // returns number 1.099750170294617\n\t   *    1 / math.sin(2);  // returns number 1.099750170294617\n\t   *\n\t   * See also:\n\t   *\n\t   *    sin, sec, cot\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Cosecant of x",
            "line": " lib/math.js:54262"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54324"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar sign = __webpack_require__(6).sign;\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic cosecant of a value,\n\t   * defined as `csch(x) = 1 / sinh(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.csch(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    // csch(x) = 1/ sinh(x)\n\t   *    math.csch(0.5);       // returns 1.9190347513349437\n\t   *    1 / math.sinh(0.5);   // returns 1.9190347513349437\n\t   *\n\t   * See also:\n\t   *\n\t   *    sinh, sech, coth\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x",
            "line": " lib/math.js:54326"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic cosecant of a number",
            "line": " lib/math.js:54385"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54405"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sec(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sec(2);      // returns number -2.4029979617223822\n\t   *    1 / math.cos(2);  // returns number -2.4029979617223822\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, csc, cot\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Secant of x",
            "line": " lib/math.js:54407"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54469"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic secant of a value,\n\t   * defined as `sech(x) = 1 / cosh(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sech(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    // sech(x) = 1/ cosh(x)\n\t   *    math.sech(0.5);       // returns 0.886818883970074\n\t   *    1 / math.cosh(0.5);   // returns 0.886818883970074\n\t   *\n\t   * See also:\n\t   *\n\t   *    cosh, csch, coth\n\t   *\n\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x",
            "line": " lib/math.js:54471"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic secant of a number",
            "line": " lib/math.js:54529"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54543"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t   * Calculate the sine of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sin(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sin(2);                      // returns number 0.9092974268256813\n\t   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475\n\t   *    math.sin(math.unit(90, 'deg'));   // returns number 1\n\t   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5\n\t   *\n\t   *    var angle = 0.2;\n\t   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n\t   *\n\t   * See also:\n\t   *\n\t   *    cos, tan\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x",
            "line": " lib/math.js:54545"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54612"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic sine of a value,\n\t   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.sinh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.sinh(0.5);       // returns number 0.5210953054937474\n\t   *\n\t   * See also:\n\t   *\n\t   *    cosh, tanh\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x",
            "line": " lib/math.js:54614"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic sine of a number",
            "line": " lib/math.js:54671"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54685"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.tan(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.tan(0.5);                    // returns number 0.5463024898437905\n\t   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905\n\t   *    math.tan(math.pi / 4);            // returns number 1\n\t   *    math.tan(math.unit(45, 'deg'));   // returns number 1\n\t   *\n\t   * See also:\n\t   *\n\t   *    atan, sin, cos\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x",
            "line": " lib/math.js:54687"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54750"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Calculate the hyperbolic tangent of a value,\n\t   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.tanh(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\n\t   *    math.tanh(0.5);                   // returns 0.46211715726000974\n\t   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974\n\t   *    1 / math.coth(0.5);               // returns 0.46211715726000974\n\t   *\n\t   * See also:\n\t   *\n\t   *    sinh, cosh, coth\n\t   *\n\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x",
            "line": " lib/math.js:54752"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic tangent of a number",
            "line": " lib/math.js:54812"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54827"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(499)\n\t];\n\n/***/ },",
            "line": " lib/math.js:54829"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm13 = load(__webpack_require__(57));\n\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t   * Change the unit of a value.\n\t   *\n\t   * For matrices, the function is evaluated element wise.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *    math.to(x, unit)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm\n\t   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm\n\t   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits\n\t   *\n\t   * See also:\n\t   *\n\t   *    unit\n\t   *\n\t   * @param {Unit | Array | Matrix} x     The unit to be converted.\n\t   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n\t   *                                      or a unit without value.\n\t   * @return {Unit | Array | Matrix} value with changed, fixed unit.",
            "line": " lib/math.js:54837"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54931"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(501),\n\t  __webpack_require__(419),\n\t  __webpack_require__(368),\n\t  __webpack_require__(89),\n\t  __webpack_require__(381),\n\t  __webpack_require__(502),\n\t  __webpack_require__(433),\n\t  __webpack_require__(503),\n\t  __webpack_require__(91)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:54933"
        },
        {
            "message": "Missing item type\n'use strict';\nvar object= __webpack_require__(3);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Clone an object.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.clone(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.clone(3.5);                   // returns number 3.5\n\t   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i\n\t   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg\n\t   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]\n\t   *    math.clone(\"hello world\");         // returns string \"hello world\"\n\t   *\n\t   * @param {*} x   Object to be cloned\n\t   * @return {*} A clone of object x",
            "line": " lib/math.js:54950"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:54988"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is prime: has no divisors other than itself and one.\n\t   * The function supports type `number`, `bignumber`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isPrime(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isPrime(3);                     // returns true\n\t   *    math.isPrime(-2);                    // returns false\n\t   *    math.isPrime(0);                     // returns false\n\t   *    math.isPrime(-0);                    // returns false\n\t   *    math.isPrime(0.5);                   // returns false\n\t   *    math.isPrime('2');                   // returns true\n\t   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isZero, isNegative, isInteger\n\t   *\n\t   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t   *                    Throws an error in case of an unknown data type.",
            "line": " lib/math.js:54990"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:55075"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Test whether a value is NaN (not a number).\n\t   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\n\t   *\n\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t   *\n\t   * Syntax:\n\t   *\n\t   *     math.isNaN(x)\n\t   *\n\t   * Examples:\n\t   *\n\t   *    math.isNaN(3);                     // returns false\n\t   *    math.isNaN(NaN);                   // returns true\n\t   *    math.isNaN(0);                     // returns false\n\t   *    math.isNaN(math.bignumber(NaN));   // returns true\n\t   *    math.isNaN(math.bignumber(0));     // returns false\n\t   *    math.isNaN(math.fraction(-2, 5));  // returns false\n\t   *    math.isNaN('-2');                  // returns false\n\t   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]\n\t   *\n\t   * See also:\n\t   *\n\t   *    isNumeric, isNegative, isPositive, isZero, isInteger\n\t   *\n\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t   * @return {boolean}  Returns true when `x` is NaN.\n\t   *                    Throws an error in case of an unknown data type.",
            "line": " lib/math.js:55077"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:55147"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t  __webpack_require__(505)\n\t];\n\n\n/***/ },",
            "line": " lib/math.js:55149"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t  /**\n\t   * Instantiate mathjs data types from their JSON representation\n\t   * @param {string} key\n\t   * @param {*} value\n\t   * @returns {*} Returns the revived object",
            "line": " lib/math.js:55158"
        },
        {
            "message": "Missing item type",
            "line": " lib/math.js:55184"
        },
        {
            "message": "Missing item type\n'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\tvar DimensionError = __webpack_require__(42);\n\tvar IndexError = __webpack_require__(43);\nmodule.exports = [\n\t  {\n\t    name: 'ArgumentsError', path: 'error',\n\t    factory: function () {\n\t      return ArgumentsError;\n\t    }\n\t  },\n\t  {\n\t    name: 'DimensionError',\n\t    path: 'error',\n\t    factory: function () {\n\t      return DimensionError;\n\t    }\n\t  },\n\t  {\n\t    name: 'IndexError',\n\t    path: 'error',\n\t    factory: function () {\n\t      return IndexError;\n\t    }\n\t  }\n\t];\n// TODO: implement an InvalidValueError?\n\n\n/***/ }\n/******/ ])\n});\n;",
            "line": " lib/math.js:55186"
        },
        {
            "message": "Missing item type\nConstructs a promise for an immediate reference, passes promises through, or\ncoerces promises from different systems.",
            "line": " lib/q.js:461"
        },
        {
            "message": "Missing item type\nPerforms a task in a future turn of the event loop.",
            "line": " lib/q.js:483"
        },
        {
            "message": "Missing item type\nControls whether or not long stack traces will be on",
            "line": " lib/q.js:489"
        },
        {
            "message": "Missing item type\nConstructs a {promise, resolve, reject} object.\n\n`resolve` is a callback to invoke with a more resolved value for the\npromise. To fulfill the promise, invoke `resolve` with any value that is\nnot a thenable. To reject the promise, invoke `resolve` with a rejected\nthenable, or invoke `reject` with the reason directly. To resolve the\npromise to another thenable, thus putting it in the same state, invoke\n`resolve` with that other thenable.",
            "line": " lib/q.js:494"
        },
        {
            "message": "Missing item type\nCreates a Node-style callback that will resolve or reject the deferred\npromise.",
            "line": " lib/q.js:620"
        },
        {
            "message": "Missing item type",
            "line": " lib/q.js:638"
        },
        {
            "message": "Missing item type\nIf two promises eventually fulfill to the same value, promises that value,\nbut otherwise rejects.",
            "line": " lib/q.js:673"
        },
        {
            "message": "Missing item type\nReturns a promise for the first of an array of promises to become fulfilled.",
            "line": " lib/q.js:697"
        },
        {
            "message": "Missing item type\nConstructs a Promise with a promise descriptor object and optional fallback\nfunction.  The descriptor contains methods like when(rejected), get(name),\nset(name, value), post(name, args), and delete(name), which all\nreturn either a value, a promise for a value, or a rejection.  The fallback\naccepts the operation name, a resolver, and any further arguments that would\nhave been forwarded to the appropriate method above had a method been\nprovided with the proper name.  The API makes no guarantees about the nature\nof the returned object, apart from that it is usable whereever promises are\nbought and sold.",
            "line": " lib/q.js:720"
        },
        {
            "message": "Missing item type\nRegisters an observer on a promise.\n\nGuarantees:\n\n1. that fulfilled and rejected will be called only once.\n2. that either the fulfilled callback or the rejected callback will be\n   called, but not both.\n3. that fulfilled and rejected will not be called in this turn.",
            "line": " lib/q.js:861"
        },
        {
            "message": "Missing item type\nIf an object is not a promise, it is as \"near\" as possible.\nIf a promise is rejected, it is as \"near\" as possible too.\nIf it’s a fulfilled promise, the fulfillment value is nearer.\nIf it’s a deferred promise and the deferred has been resolved, the\nresolution is \"nearer\".",
            "line": " lib/q.js:898"
        },
        {
            "message": "Missing item type",
            "line": " lib/q.js:920"
        },
        {
            "message": "Missing item type",
            "line": " lib/q.js:936"
        },
        {
            "message": "Missing item type",
            "line": " lib/q.js:949"
        },
        {
            "message": "Missing item type",
            "line": " lib/q.js:962"
        },
        {
            "message": "Missing item type\nConstructs a rejected promise.",
            "line": " lib/q.js:1067"
        },
        {
            "message": "Missing item type\nConstructs a fulfilled promise for an immediate reference.",
            "line": " lib/q.js:1093"
        },
        {
            "message": "Missing item type\nConverts thenables to Q promises.",
            "line": " lib/q.js:1132"
        },
        {
            "message": "Missing item type\nAnnotates an object such that it will never be\ntransferred away from this process over any promise\ncommunication channel.",
            "line": " lib/q.js:1149"
        },
        {
            "message": "Missing item type\nSpreads the values of a promised array of arguments into the\nfulfillment callback.",
            "line": " lib/q.js:1169"
        },
        {
            "message": "Missing item type\nThe async function is a decorator for generator functions, turning\nthem into asynchronous generators.  Although generators are only part\nof the newest ECMAScript 6 drafts, this code does not cause syntax\nerrors in older engines.  This code should continue to work and will\nin fact improve over time as the language improves.\n\nES6 generators are currently part of V8 version 3.19 with the\n--harmony-generators runtime flag enabled.  SpiderMonkey has had them\nfor longer, but under an older Python-inspired form.  This function\nworks on both kinds of generators.\n\nDecorates a generator function such that:\n - it may yield promises\n - execution will continue when that promise is fulfilled\n - the value of the yield expression will be the fulfilled value\n - it returns a promise for the return value (when the generator\n   stops iterating)\n - the decorated function returns a promise for the return value\n   of the generator or the first rejected promise among those\n   yielded.\n - if an error is thrown in the generator, it propagates through\n   every following yield until it is caught, or until it escapes\n   the generator function altogether, and is translated into a\n   rejection for the promise returned by the decorated generator.",
            "line": " lib/q.js:1190"
        },
        {
            "message": "Missing item type\nThe spawn function is a small wrapper around async that immediately\ncalls the generator and also ends the promise chain, so that any\nunhandled errors are thrown instead of forwarded to the error\nhandler. This is useful because it's extremely common to run\ngenerators at the top-level to work with libraries.",
            "line": " lib/q.js:1255"
        },
        {
            "message": "Missing item type\nThrows a ReturnValue exception to stop an asynchronous generator.\n\nThis interface is a stop-gap measure to support generator return\nvalues in older Firefox/SpiderMonkey.  In browsers that support ES6\ngenerators like Chromium 29, just use \"return\" in your generator\nfunctions.",
            "line": " lib/q.js:1268"
        },
        {
            "message": "Missing item type\nThe promised function decorator ensures that any promise arguments\nare settled and passed as values (`this` is also settled and passed\nas a value).  It will also ensure that the result of a function is\nalways a promise.",
            "line": " lib/q.js:1297"
        },
        {
            "message": "Missing item type\nsends a message to a value in a future turn",
            "line": " lib/q.js:1321"
        },
        {
            "message": "Missing item type\nGets the value of a property in a future turn.",
            "line": " lib/q.js:1342"
        },
        {
            "message": "Missing item type\nSets the value of a property in a future turn.",
            "line": " lib/q.js:1356"
        },
        {
            "message": "Missing item type\nDeletes a property in a future turn.",
            "line": " lib/q.js:1371"
        },
        {
            "message": "Missing item type\nInvokes a method in a future turn.",
            "line": " lib/q.js:1387"
        },
        {
            "message": "Missing item type\nInvokes a method in a future turn.",
            "line": " lib/q.js:1410"
        },
        {
            "message": "Missing item type\nApplies the promised function in a future turn.",
            "line": " lib/q.js:1429"
        },
        {
            "message": "Missing item type\nCalls the promised function in a future turn.",
            "line": " lib/q.js:1442"
        },
        {
            "message": "Missing item type\nBinds the promised function, transforming return values into a fulfilled\npromise and thrown errors into a rejected one.",
            "line": " lib/q.js:1456"
        },
        {
            "message": "Missing item type\nRequests the names of the owned properties of a promised\nobject in a future turn.",
            "line": " lib/q.js:1483"
        },
        {
            "message": "Missing item type\nTurns an array of promises into a promise for an array.  If any of\nthe promises gets rejected, the whole array is rejected immediately.",
            "line": " lib/q.js:1497"
        },
        {
            "message": "Missing item type\nWaits for all promises to be settled, either fulfilled or\nrejected.  This is distinct from `all` since that would stop\nwaiting at the first rejection.  The promise returned by\n`allResolved` will never be rejected.",
            "line": " lib/q.js:1546"
        },
        {
            "message": "Missing item type",
            "line": " lib/q.js:1571"
        },
        {
            "message": "Missing item type\nTurns an array of promises into a promise for an array of their states (as\nreturned by `inspect`) when they have all settled.",
            "line": " lib/q.js:1579"
        },
        {
            "message": "Missing item type\nCaptures the failure of a promise, giving an oportunity to recover\nwith a callback.  If the given promise is fulfilled, the returned\npromise is fulfilled.",
            "line": " lib/q.js:1598"
        },
        {
            "message": "Missing item type\nAttaches a listener that can respond to progress notifications from a\npromise's originating deferred. This listener receives the exact arguments\npassed to ``deferred.notify``.",
            "line": " lib/q.js:1617"
        },
        {
            "message": "Missing item type\nProvides an opportunity to observe the settling of a promise,\nregardless of whether the promise is fulfilled or rejected.  Forwards\nthe resolution to the returned promise when the callback is done.\nThe callback can return a promise to defer completion.",
            "line": " lib/q.js:1634"
        },
        {
            "message": "Missing item type\nTerminates a chain of promises, forcing rejections to be\nthrown as exceptions.",
            "line": " lib/q.js:1665"
        },
        {
            "message": "Missing item type\nCauses a promise to be rejected if it does not get fulfilled before\nsome milliseconds time out.",
            "line": " lib/q.js:1701"
        },
        {
            "message": "Missing item type\nReturns a promise for the given value (or promised value), some\nmilliseconds after it resolved. Passes rejections immediately.",
            "line": " lib/q.js:1731"
        },
        {
            "message": "Missing item type\nPasses a continuation to a Node function, which is called with the given\narguments provided as an array, and returns a promise.\n\n     Q.nfapply(FS.readFile, [__filename])\n     .then(function (content) {\n     })",
            "line": " lib/q.js:1758"
        },
        {
            "message": "Missing item type\nPasses a continuation to a Node function, which is called with the given\narguments provided individually, and returns a promise.",
            "line": " lib/q.js:1779"
        },
        {
            "message": "Missing item type\nWraps a NodeJS continuation passing function and returns an equivalent\nversion that returns a promise.",
            "line": " lib/q.js:1801"
        },
        {
            "message": "Missing item type\nCalls a method of a Node-style object that accepts a Node-style\ncallback with a given array of arguments, plus a provided callback.",
            "line": " lib/q.js:1848"
        },
        {
            "message": "Missing item type\nCalls a method of a Node-style object that accepts a Node-style\ncallback, forwarding the given variadic arguments, plus a provided\ncallback argument.",
            "line": " lib/q.js:1871"
        },
        {
            "message": "Missing item type\nIf a function would like to support both Node continuation-passing-style and\npromise-returning-style, it can end its internal promise chain with\n`nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\nelects to use a nodeback, the result will be sent there.  If they do not\npass a nodeback, they will receive the result promise.",
            "line": " lib/q.js:1901"
        },
        {
            "message": "Missing item type\nCopyright (c) 2016 Hussain Mir Ali",
            "line": " K_Means.js:1"
        },
        {
            "message": "Missing item type\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })",
            "line": " util.js:1"
        },
        {
            "message": "Missing item type",
            "line": " util.js:43"
        },
        {
            "message": "Missing item type\n/**\n\t * math.js\n\t * https://github.com/josdejong/mathjs\n\t *\n\t * Math.js is an extensive math library for JavaScript and Node.js,\n\t * It features real and complex numbers, units, matrices, a large set of\n\t * mathematical functions, and a flexible expression parser.\n\t *\n\t * @version 3.8.0\n\t * @date    2016-11-18\n\t *\n\t * @license\n\t * Copyright (C) 2013-2016 Jos de Jong <wjosdejong@gmail.com>\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n\t * use this file except in compliance with the License. You may obtain a copy\n\t * of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\t * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions and limitations under\n\t * the License.",
            "line": " util.js:45"
        },
        {
            "message": "Missing item type\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })",
            "line": " util.js:85"
        },
        {
            "message": "Missing item type",
            "line": " util.js:126"
        },
        {
            "message": "Missing item type\nvar core = __webpack_require__(1);\n/**\n\t\t * math.js factory function. Creates a new instance of math.js\n\t\t *\n\t\t * @param {Object} [config] Available configuration options:\n\t\t *                            {number} epsilon\n\t\t *                              Minimum relative difference between two\n\t\t *                              compared values, used by all comparison functions.\n\t\t *                            {string} matrix\n\t\t *                              A string 'matrix' (default) or 'array'.\n\t\t *                            {string} number\n\t\t *                              A string 'number' (default), 'bignumber', or\n\t\t *                              'fraction'\n\t\t *                            {number} precision\n\t\t *                              The number of significant digits for BigNumbers.\n\t\t *                              Not applicable for Numbers.\n\t\t *                            {boolean} predictable\n\t\t *                              Predictable output type of functions. When true,\n\t\t *                              output type depends only on the input types. When\n\t\t *                              false (default), output type can vary depending\n\t\t *                              on input values. For example `math.sqrt(-2)`\n\t\t *                              returns `NaN` when predictable is false, and\n\t\t *                              returns `complex('2i')` when true.",
            "line": " util.js:128"
        },
        {
            "message": "Missing item type",
            "line": " util.js:170"
        },
        {
            "message": "Missing item type\nmodule.exports = __webpack_require__(2);\n\n\t/***/ },",
            "line": " util.js:172"
        },
        {
            "message": "Missing item type\nvar isFactory = __webpack_require__(3).isFactory;\n\t\tvar deepExtend = __webpack_require__(3).deepExtend;\n\t\tvar typedFactory = __webpack_require__(4);\n\t\tvar emitter = __webpack_require__(8);\nvar importFactory = __webpack_require__(10);\n\t\tvar configFactory = __webpack_require__(12);\n/**\n\t\t * Math.js core. Creates a new, empty math.js instance\n\t\t * @param {Object} [options] Available options:\n\t\t *                            {number} epsilon\n\t\t *                              Minimum relative difference between two\n\t\t *                              compared values, used by all comparison functions.\n\t\t *                            {string} matrix\n\t\t *                              A string 'Matrix' (default) or 'Array'.\n\t\t *                            {string} number\n\t\t *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n\t\t *                            {number} precision\n\t\t *                              The number of significant digits for BigNumbers.\n\t\t *                              Not applicable for Numbers.\n\t\t *                            {boolean} predictable\n\t\t *                              Predictable output type of functions. When true,\n\t\t *                              output type depends only on the input types. When\n\t\t *                              false (default), output type can vary depending\n\t\t *                              on input values. For example `math.sqrt(-2)`\n\t\t *                              returns `NaN` when predictable is false, and\n\t\t *                              returns `complex('2i')` when true.\n\t\t * @returns {Object} Returns a bare-bone math.js instance containing\n\t\t *                   functions:\n\t\t *                   - `import` to add new functions\n\t\t *                   - `config` to change configuration\n\t\t *                   - `on`, `off`, `once`, `emit` for events",
            "line": " util.js:178"
        },
        {
            "message": "Missing item type\nLoad a function or data type from a factory.\nIf the function or data type already exists, the existing instance is\nreturned.",
            "line": " util.js:257"
        },
        {
            "message": "Missing item type",
            "line": " util.js:306"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Clone an object\n\t\t *\n\t\t *     clone(x)\n\t\t *\n\t\t * Can clone any primitive type, array, and object.\n\t\t * If x has a function clone, this function will be invoked to clone the object.\n\t\t *\n\t\t * @param {*} x\n\t\t * @return {*} clone",
            "line": " util.js:308"
        },
        {
            "message": "Missing item type\nExtend object a with the properties of object b",
            "line": " util.js:361"
        },
        {
            "message": "Missing item type\nDeep extend an object a with the properties of object b",
            "line": " util.js:376"
        },
        {
            "message": "Missing item type\nDeep test equality of all fields in two pairs of arrays or objects.",
            "line": " util.js:410"
        },
        {
            "message": "Missing item type\nTest whether the current JavaScript engine supports Object.defineProperty",
            "line": " util.js:458"
        },
        {
            "message": "Missing item type\nAttach a lazy loading property to a constant.\nThe given function `fn` is called once when the property is first requested.\nOn older browsers (<IE8), the function will fall back to direct evaluation\nof the properties value.",
            "line": " util.js:474"
        },
        {
            "message": "Missing item type\nTraverse a path into an object.\nWhen a namespace is missing, it will be created",
            "line": " util.js:512"
        },
        {
            "message": "Missing item type\nTest whether an object is a factory. a factory has fields:\n\n- factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n- name: string (optional)\n- path: string    A dot separated path (optional)\n- math: boolean   If true (false by default), the math namespace is passed\n                  as fifth argument of the factory function",
            "line": " util.js:536"
        },
        {
            "message": "Missing item type",
            "line": " util.js:553"
        },
        {
            "message": "Missing item type\nvar typedFunction = __webpack_require__(5);\n\t\tvar digits = __webpack_require__(6).digits;\n// returns a new instance of typed-function\n\t\tvar createTyped = function () {\n\t\t  // initially, return the original instance of typed-function\n\t\t  // consecutively, return a new instance from typed.create.\n\t\t  createTyped = typedFunction.create;\n\t\t  return typedFunction;\n\t\t};\n/**\n\t\t * Factory function for creating a new typed instance\n\t\t * @param {Object} type   Object with data types like Complex and BigNumber\n\t\t * @returns {Function}",
            "line": " util.js:555"
        },
        {
            "message": "Missing item type",
            "line": " util.js:748"
        },
        {
            "message": "Missing item type\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t\t * typed-function\n\t\t *\n\t\t * Type checking for JavaScript functions\n\t\t *\n\t\t * https://github.com/josdejong/typed-function",
            "line": " util.js:750"
        },
        {
            "message": "Missing item type\nGet a type test function for a specific data type",
            "line": " util.js:778"
        },
        {
            "message": "Missing item type\nRetrieve the function name from a set of functions, and check\nwhether the name of all functions match (if given)",
            "line": " util.js:810"
        },
        {
            "message": "Missing item type\nCreate an ArgumentsError. Creates messages like:\n\n  Unexpected type of argument (expected: ..., actual: ..., index: ...)\n  Too few arguments (expected: ..., index: ...)\n  Too many arguments (expected: ..., actual: ...)",
            "line": " util.js:840"
        },
        {
            "message": "Missing item type\nCollection with function references (local shortcuts to functions)",
            "line": " util.js:891"
        },
        {
            "message": "Missing item type\nAdd a function reference.",
            "line": " util.js:902"
        },
        {
            "message": "Missing item type\nCreate code lines for all function references",
            "line": " util.js:921"
        },
        {
            "message": "Missing item type\nA function parameter",
            "line": " util.js:943"
        },
        {
            "message": "Missing item type\nOrder Params\nany type ('any') will be ordered last, and object as second last (as other\ntypes may be an object as well, like Array).",
            "line": " util.js:990"
        },
        {
            "message": "Missing item type\nTest whether this parameters types overlap an other parameters types.\nWill not match ['any'] with ['number']",
            "line": " util.js:1058"
        },
        {
            "message": "Missing item type\nTest whether this parameters types matches an other parameters types.\nWhen any of the two parameters contains `any`, true is returned",
            "line": " util.js:1073"
        },
        {
            "message": "Missing item type\nCreate a clone of this param",
            "line": " util.js:1083"
        },
        {
            "message": "Missing item type\nTest whether this parameter contains conversions",
            "line": " util.js:1093"
        },
        {
            "message": "Missing item type\nTests whether this parameters contains any of the provided types",
            "line": " util.js:1102"
        },
        {
            "message": "Missing item type\nReturn a string representation of this params types, like 'string' or\n'number | boolean' or '...number'",
            "line": " util.js:1117"
        },
        {
            "message": "Missing item type\nA function signature",
            "line": " util.js:1142"
        },
        {
            "message": "Missing item type\nCreate a clone of this signature",
            "line": " util.js:1186"
        },
        {
            "message": "Missing item type\nExpand a signature: split params with union types in separate signatures\nFor example split a Signature \"string | number\" into two signatures.",
            "line": " util.js:1194"
        },
        {
            "message": "Missing item type\nCompare two signatures.\n\nWhen two params are equal and contain conversions, they will be sorted\nby lowest index of the first conversions.",
            "line": " util.js:1251"
        },
        {
            "message": "Missing item type\nTest whether any of the signatures parameters has conversions",
            "line": " util.js:1289"
        },
        {
            "message": "Missing item type\nTest whether this signature should be ignored.\nChecks whether any of the parameters contains a type listed in\ntyped.ignore",
            "line": " util.js:1303"
        },
        {
            "message": "Missing item type\nTest whether the path of this signature matches a given path.",
            "line": " util.js:1326"
        },
        {
            "message": "Missing item type\nGenerate the code to invoke this signature",
            "line": " util.js:1350"
        },
        {
            "message": "Missing item type\nReturn a string representation of the signature",
            "line": " util.js:1382"
        },
        {
            "message": "Missing item type\nA group of signatures with the same parameter on given index",
            "line": " util.js:1390"
        },
        {
            "message": "Missing item type\nGenerate code for this group of signatures",
            "line": " util.js:1406"
        },
        {
            "message": "Missing item type\nGenerate inner code for this group of signatures.\nThis is a helper function of Node.prototype.toCode",
            "line": " util.js:1502"
        },
        {
            "message": "Missing item type\nGenerate code to throw exceptions",
            "line": " util.js:1536"
        },
        {
            "message": "Missing item type\nSplit all raw signatures into an array with expanded Signatures",
            "line": " util.js:1575"
        },
        {
            "message": "Missing item type\nFilter all any type signatures",
            "line": " util.js:1669"
        },
        {
            "message": "Missing item type\ncreate a map with normalized signatures as key and the function as value",
            "line": " util.js:1686"
        },
        {
            "message": "Missing item type\nParse signatures recursively in a node tree.",
            "line": " util.js:1707"
        },
        {
            "message": "Missing item type\nGenerate an array like ['arg0', 'arg1', 'arg2']",
            "line": " util.js:1802"
        },
        {
            "message": "Missing item type\nCompose a function from sub-functions each handling a single type signature.\nSignatures:\n  typed(signature: string, fn: function)\n  typed(name: string, signature: string, fn: function)\n  typed(signatures: Object.<string, function>)\n  typed(name: string, signatures: Object.<string, function>)",
            "line": " util.js:1817"
        },
        {
            "message": "Missing item type\nCalculate the maximum number of parameters in givens signatures",
            "line": " util.js:1877"
        },
        {
            "message": "Missing item type\nGet the type of a value",
            "line": " util.js:1895"
        },
        {
            "message": "Missing item type\nTest whether an array contains some item",
            "line": " util.js:1921"
        },
        {
            "message": "Missing item type\nReturns the last item in the array",
            "line": " util.js:1931"
        },
        {
            "message": "Missing item type\nConstruct the typed function itself with various signatures\n\nSignatures:\n\n  typed(signatures: Object.<string, function>)\n  typed(name: string, signatures: Object.<string, function>)",
            "line": " util.js:1973"
        },
        {
            "message": "Missing item type\nFind a specific signature from a (composed) typed function, for\nexample:\n\n  typed.find(fn, ['number', 'string'])\n  typed.find(fn, 'number, string')\n\nFunction find only only works for exact matches.",
            "line": " util.js:2032"
        },
        {
            "message": "Missing item type\nConvert a given value to another data type.",
            "line": " util.js:2081"
        },
        {
            "message": "Missing item type",
            "line": " util.js:2141"
        },
        {
            "message": "Missing item type\n'use strict';\nvar NumberFormatter = __webpack_require__(7);\n/**\n\t\t * Test whether value is a number\n\t\t * @param {*} value\n\t\t * @return {boolean} isNumber",
            "line": " util.js:2143"
        },
        {
            "message": "Missing item type\nCheck if a number is integer",
            "line": " util.js:2158"
        },
        {
            "message": "Missing item type\nCalculate the sign of a number",
            "line": " util.js:2170"
        },
        {
            "message": "Missing item type\nConvert a number to a formatted string representation.\n\nSyntax:\n\n   format(value)\n   format(value, options)\n   format(value, precision)\n   format(value, fn)\n\nWhere:\n\n   {number} value   The value to be formatted\n   {Object} options An object with formatting options. Available options:\n                    {string} notation\n                        Number notation. Choose from:\n                        'fixed'          Always use regular number notation.\n                                         For example '123.40' and '14000000'\n                        'exponential'    Always use exponential notation.\n                                         For example '1.234e+2' and '1.4e+7'\n                        'engineering'    Always use engineering notation.\n                                         For example '123.4e+0' and '14.0e+6'\n                        'auto' (default) Regular number notation for numbers\n                                         having an absolute value between\n                                         `lower` and `upper` bounds, and uses\n                                         exponential notation elsewhere.\n                                         Lower bound is included, upper bound\n                                         is excluded.\n                                         For example '123.4' and '1.4e7'.\n                    {number} precision   A number between 0 and 16 to round\n                                         the digits of the number.\n                                         In case of notations 'exponential' and\n                                         'auto', `precision` defines the total\n                                         number of significant digits returned\n                                         and is undefined by default.\n                                         In case of notation 'fixed',\n                                         `precision` defines the number of\n                                         significant digits after the decimal\n                                         point, and is 0 by default.\n                    {Object} exponential An object containing two parameters,\n                                         {number} lower and {number} upper,\n                                         used by notation 'auto' to determine\n                                         when to return exponential notation.\n                                         Default values are `lower=1e-3` and\n                                         `upper=1e5`.\n                                         Only applicable for notation `auto`.\n   {Function} fn    A custom formatting function. Can be used to override the\n                    built-in notations. Function `fn` is called with `value` as\n                    parameter and must return a string. Is useful for example to\n                    format all values inside a matrix in a particular way.\n\nExamples:\n\n   format(6.4);                                        // '6.4'\n   format(1240000);                                    // '1.24e6'\n   format(1/3);                                        // '0.3333333333333333'\n   format(1/3, 3);                                     // '0.333'\n   format(21385, 2);                                   // '21000'\n   format(12.071, {notation: 'fixed'});                // '12'\n   format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n   format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n   format(12345678, {notation: 'engineering'});        // '12.345678e+6'",
            "line": " util.js:2187"
        },
        {
            "message": "Missing item type\nFormat a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "line": " util.js:2318"
        },
        {
            "message": "Missing item type\nFormat a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'",
            "line": " util.js:2330"
        },
        {
            "message": "Missing item type\nFormat a number with fixed notation.",
            "line": " util.js:2342"
        },
        {
            "message": "Missing item type\nFormat a number with a certain precision",
            "line": " util.js:2352"
        },
        {
            "message": "Missing item type\nCount the number of significant digits of a number.\n\nFor example:\n  2.34 returns 3\n  0.0034 returns 2\n  120.5e+30 returns 4",
            "line": " util.js:2365"
        },
        {
            "message": "Missing item type\nMinimum number added to one that makes the result different than one",
            "line": " util.js:2384"
        },
        {
            "message": "Missing item type\nCompares two floating point numbers.",
            "line": " util.js:2389"
        },
        {
            "message": "Missing item type",
            "line": " util.js:2432"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Format a number using methods toPrecision, toFixed, toExponential.\n\t\t * @param {number | string} value\n\t\t * @constructor",
            "line": " util.js:2434"
        },
        {
            "message": "Missing item type\nFormat a number with engineering notation.",
            "line": " util.js:2480"
        },
        {
            "message": "Missing item type\nFormat a number with fixed notation.",
            "line": " util.js:2520"
        },
        {
            "message": "Missing item type\nFormat a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "line": " util.js:2550"
        },
        {
            "message": "Missing item type\nFormat a number with a certain precision",
            "line": " util.js:2573"
        },
        {
            "message": "Missing item type\nCrete a clone of the NumberFormatter",
            "line": " util.js:2619"
        },
        {
            "message": "Missing item type\nRound the number of digits of a number *",
            "line": " util.js:2631"
        },
        {
            "message": "Missing item type\nCreate an array filled with zeros.",
            "line": " util.js:2670"
        },
        {
            "message": "Missing item type",
            "line": " util.js:2686"
        },
        {
            "message": "Missing item type\nvar Emitter = __webpack_require__(9);\n/**\n\t\t * Extend given object with emitter functions `on`, `off`, `once`, `emit`\n\t\t * @param {Object} obj\n\t\t * @return {Object} obj",
            "line": " util.js:2688"
        },
        {
            "message": "Missing item type",
            "line": " util.js:2711"
        },
        {
            "message": "Missing item type\nfunction E () {\n\t\t\t// Keep this empty so it's easier to inherit from\n\t\t  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n\t\t}\nE.prototype = {\n\t\t\ton: function (name, callback, ctx) {\n\t\t    var e = this.e || (this.e = {});\n    (e[name] || (e[name] = [])).push({\n\t\t      fn: callback,\n\t\t      ctx: ctx\n\t\t    });\n    return this;\n\t\t  },\n  once: function (name, callback, ctx) {\n\t\t    var self = this;\n\t\t    function listener () {\n\t\t      self.off(name, listener);\n\t\t      callback.apply(ctx, arguments);\n\t\t    };\n    listener._ = callback\n\t\t    return this.on(name, listener, ctx);\n\t\t  },\n  emit: function (name) {\n\t\t    var data = [].slice.call(arguments, 1);\n\t\t    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n\t\t    var i = 0;\n\t\t    var len = evtArr.length;\n    for (i; i < len; i++) {\n\t\t      evtArr[i].fn.apply(evtArr[i].ctx, data);\n\t\t    }\n    return this;\n\t\t  },\n  off: function (name, callback) {\n\t\t    var e = this.e || (this.e = {});\n\t\t    var evts = e[name];\n\t\t    var liveEvents = [];\n    if (evts && callback) {\n\t\t      for (var i = 0, len = evts.length; i < len; i++) {\n\t\t        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n\t\t          liveEvents.push(evts[i]);\n\t\t      }\n\t\t    }\n    // Remove event from queue to prevent memory leak\n\t\t    // Suggested by https://github.com/lazd\n\t\t    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n    (liveEvents.length)\n\t\t      ? e[name] = liveEvents\n\t\t      : delete e[name];\n    return this;\n\t\t  }\n\t\t};\nmodule.exports = E;\n\n\n\t/***/ },",
            "line": " util.js:2713"
        },
        {
            "message": "Missing item type\n'use strict';\nvar lazy = __webpack_require__(3).lazy;\n\t\tvar isFactory = __webpack_require__(3).isFactory;\n\t\tvar traverse = __webpack_require__(3).traverse;\n\t\tvar extend = __webpack_require__(3).extend;\n\t\tvar ArgumentsError = __webpack_require__(11);\nfunction factory (type, config, load, typed, math) {\n\t\t  /**\n\t\t   * Import functions from an object or a module\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.import(object)\n\t\t   *    math.import(object, options)\n\t\t   *\n\t\t   * Where:\n\t\t   *\n\t\t   * - `object: Object`\n\t\t   *   An object with functions to be imported.\n\t\t   * - `options: Object` An object with import options. Available options:\n\t\t   *   - `override: boolean`\n\t\t   *     If true, existing functions will be overwritten. False by default.\n\t\t   *   - `silent: boolean`\n\t\t   *     If true, the function will not throw errors on duplicates or invalid\n\t\t   *     types. False by default.\n\t\t   *   - `wrap: boolean`\n\t\t   *     If true, the functions will be wrapped in a wrapper function\n\t\t   *     which converts data types like Matrix to primitive data types like Array.\n\t\t   *     The wrapper is needed when extending math.js with libraries which do not\n\t\t   *     support these data type. False by default.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    // define new functions and variables\n\t\t   *    math.import({\n\t\t   *      myvalue: 42,\n\t\t   *      hello: function (name) {\n\t\t   *        return 'hello, ' + name + '!';\n\t\t   *      }\n\t\t   *    });\n\t\t   *\n\t\t   *    // use the imported function and variable\n\t\t   *    math.myvalue * 2;               // 84\n\t\t   *    math.hello('user');             // 'hello, user!'\n\t\t   *\n\t\t   *    // import the npm module 'numbers'\n\t\t   *    // (must be installed first with `npm install numbers`)\n\t\t   *    math.import(require('numbers'), {wrap: true});\n\t\t   *\n\t\t   *    math.fibonacci(7); // returns 13\n\t\t   *\n\t\t   * @param {Object | Array} object   Object with functions to be imported.\n\t\t   * @param {Object} [options]        Import options.",
            "line": " util.js:2785"
        },
        {
            "message": "Missing item type\nAdd a property to the math namespace and create a chain proxy for it.",
            "line": " util.js:2886"
        },
        {
            "message": "Missing item type\nCreate a wrapper a round an function which converts the arguments\nto their primitive values (like convert a Matrix to Array)",
            "line": " util.js:2937"
        },
        {
            "message": "Missing item type\nImport an instance of a factory into math.js",
            "line": " util.js:2961"
        },
        {
            "message": "Missing item type\nCheck whether given object is a type which can be imported",
            "line": " util.js:3013"
        },
        {
            "message": "Missing item type\nTest whether a given thing is a typed-function",
            "line": " util.js:3033"
        },
        {
            "message": "Missing item type",
            "line": " util.js:3051"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Create a syntax error with the message:\n\t\t *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n\t\t * @param {string} fn     Function name\n\t\t * @param {number} count  Actual argument count\n\t\t * @param {number} min    Minimum required argument count\n\t\t * @param {number} [max]  Maximum required argument count\n\t\t * @extends Error",
            "line": " util.js:3053"
        },
        {
            "message": "Missing item type",
            "line": " util.js:3091"
        },
        {
            "message": "Missing item type\n'use strict';\nvar object = __webpack_require__(3);\nfunction factory (type, config, load, typed, math) {\n\t\t  var MATRIX = ['Matrix', 'Array'];                   // valid values for option matrix\n\t\t  var NUMBER = ['number', 'BigNumber', 'Fraction'];   // valid values for option number\n  /**\n\t\t   * Set configuration options for math.js, and get current options.\n\t\t   * Will emit a 'config' event, with arguments (curr, prev).\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.config(config: Object): Object\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.config().number;                // outputs 'number'\n\t\t   *     math.eval('0.4');                    // outputs number 0.4\n\t\t   *     math.config({number: 'Fraction'});\n\t\t   *     math.eval('0.4');                    // outputs Fraction 2/5\n\t\t   *\n\t\t   * @param {Object} [options] Available options:\n\t\t   *                            {number} epsilon\n\t\t   *                              Minimum relative difference between two\n\t\t   *                              compared values, used by all comparison functions.\n\t\t   *                            {string} matrix\n\t\t   *                              A string 'Matrix' (default) or 'Array'.\n\t\t   *                            {string} number\n\t\t   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n\t\t   *                            {number} precision\n\t\t   *                              The number of significant digits for BigNumbers.\n\t\t   *                              Not applicable for Numbers.\n\t\t   *                            {string} parenthesis\n\t\t   *                              How to display parentheses in LaTeX and string\n\t\t   *                              output.\n\t\t   * @return {Object} Returns the current configuration",
            "line": " util.js:3093"
        },
        {
            "message": "Missing item type\nTest whether an Array contains a specific item.",
            "line": " util.js:3164"
        },
        {
            "message": "Missing item type\nFind a string in an array. Case insensitive search",
            "line": " util.js:3174"
        },
        {
            "message": "Missing item type\nValidate an option",
            "line": " util.js:3188"
        },
        {
            "message": "Missing item type",
            "line": " util.js:3216"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(14),        // data types (Matrix, Complex, Unit, ...)\n\t\t  __webpack_require__(100),   // constants\n\t\t  __webpack_require__(102),  // expression parsing\n\t\t  __webpack_require__(338),    // functions\n\t\t  __webpack_require__(504),        // serialization utility (math.json.reviver)\n\t\t  __webpack_require__(506)        // errors\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:3218"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(15),\n\t\t  __webpack_require__(20),\n\t\t  __webpack_require__(21),\n\t\t  __webpack_require__(26),\n\t\t  __webpack_require__(33),\n\t\t  __webpack_require__(37),\n\t\t  __webpack_require__(70),\n\t\t  __webpack_require__(71),\n\t\t  __webpack_require__(73),\n\t\t  __webpack_require__(74)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:3232"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  // type\n\t\t  __webpack_require__(16),\n  // construction function\n\t\t  __webpack_require__(18)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:3250"
        },
        {
            "message": "Missing item type\nvar Decimal = __webpack_require__(17);\nfunction factory (type, config, load, typed, math) {\n\t\t  var BigNumber = Decimal.clone({precision: config.precision});\n  /**\n\t\t   * Attach type information",
            "line": " util.js:3263"
        },
        {
            "message": "Missing item type\nGet a JSON representation of a BigNumber containing\ntype information",
            "line": " util.js:3276"
        },
        {
            "message": "Missing item type\nInstantiate a BigNumber from a JSON object",
            "line": " util.js:3289"
        },
        {
            "message": "Missing item type",
            "line": " util.js:3314"
        },
        {
            "message": "Missing item type",
            "line": " util.js:3316"
        },
        {
            "message": "Missing item type",
            "line": " util.js:8341"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a BigNumber, which can store numbers with arbitrary precision.\n\t\t   * When a matrix is provided, all elements will be converted to BigNumber.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.bignumber(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    0.1 + 0.2;                                  // returns number 0.30000000000000004\n\t\t   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3\n\t\t   *\n\t\t   *\n\t\t   *    7.2e500;                                    // returns number Infinity\n\t\t   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    boolean, complex, index, matrix, string, unit\n\t\t   *\n\t\t   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n\t\t   *                                                    0 by default.\n\t\t   * @returns {BigNumber} The created bignumber",
            "line": " util.js:8343"
        },
        {
            "message": "Missing item type",
            "line": " util.js:8415"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Execute the callback function element wise for each element in array and any\n\t\t * nested array\n\t\t * Returns an array with the results\n\t\t * @param {Array | Matrix} array\n\t\t * @param {Function} callback   The callback is called with two parameters:\n\t\t *                              value1 and value2, which contain the current\n\t\t *                              element of both arrays.\n\t\t * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n\t\t *\n\t\t * @return {Array | Matrix} res",
            "line": " util.js:8417"
        },
        {
            "message": "Missing item type",
            "line": " util.js:8446"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a boolean or convert a string or number to a boolean.\n\t\t   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n\t\t   * case of zero.\n\t\t   * Strings can be `'true'` or `'false'`, or can contain a number.\n\t\t   * When value is a matrix, all elements will be converted to boolean.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.boolean(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.boolean(0);     // returns false\n\t\t   *    math.boolean(1);     // returns true\n\t\t   *    math.boolean(-3);     // returns true\n\t\t   *    math.boolean('true');     // returns true\n\t\t   *    math.boolean('false');     // returns false\n\t\t   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, complex, index, matrix, string, unit\n\t\t   *\n\t\t   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n\t\t   * @return {boolean | Array | Matrix} The boolean value",
            "line": " util.js:8448"
        },
        {
            "message": "Missing item type",
            "line": " util.js:8530"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  // type\n\t\t  __webpack_require__(22),\n  // construction function\n\t\t  __webpack_require__(25)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:8532"
        },
        {
            "message": "Missing item type\n'use strict';\nvar format = __webpack_require__(23).format;\n\t\tvar lazy = __webpack_require__(3).lazy;\nfunction factory (type, config, load, typed, math) {\n\t\t  /**\n\t\t   * @constructor Chain\n\t\t   * Wrap any value in a chain, allowing to perform chained operations on\n\t\t   * the value.\n\t\t   *\n\t\t   * All methods available in the math.js library can be called upon the chain,\n\t\t   * and then will be evaluated with the value itself as first argument.\n\t\t   * The chain can be closed by executing chain.done(), which will return\n\t\t   * the final value.\n\t\t   *\n\t\t   * The Chain has a number of special functions:\n\t\t   * - done()             Finalize the chained operation and return the\n\t\t   *                      chain's value.\n\t\t   * - valueOf()          The same as done()\n\t\t   * - toString()         Returns a string representation of the chain's value.\n\t\t   *\n\t\t   * @param {*} [value]",
            "line": " util.js:8545"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:8584"
        },
        {
            "message": "Missing item type\nClose the chain. Returns the final value.\nDoes the same as method valueOf()",
            "line": " util.js:8590"
        },
        {
            "message": "Missing item type\nClose the chain. Returns the final value.\nDoes the same as method done()",
            "line": " util.js:8599"
        },
        {
            "message": "Missing item type\nGet a string representation of the value in the chain",
            "line": " util.js:8608"
        },
        {
            "message": "Missing item type\nCreate a proxy method for the chain",
            "line": " util.js:8616"
        },
        {
            "message": "Missing item type\nCreate a proxy method for the chain",
            "line": " util.js:8629"
        },
        {
            "message": "Missing item type\nMake a function chainable",
            "line": " util.js:8647"
        },
        {
            "message": "Missing item type\nCreate a proxy for a single method, or an object with multiple methods.\nExample usage:\n\n  Chain.createProxy('add', function add (x, y) {...});\n  Chain.createProxy({\n    add:      function add (x, y) {...},\n    subtract: function subtract (x, y) {...}\n  }",
            "line": " util.js:8664"
        },
        {
            "message": "Missing item type",
            "line": " util.js:8714"
        },
        {
            "message": "Missing item type\n'use strict';\nvar formatNumber = __webpack_require__(6).format;\n\t\tvar formatBigNumber = __webpack_require__(24).format;\n/**\n\t\t * Test whether value is a string\n\t\t * @param {*} value\n\t\t * @return {boolean} isString",
            "line": " util.js:8716"
        },
        {
            "message": "Missing item type\nCheck if a text ends with a certain string.",
            "line": " util.js:8732"
        },
        {
            "message": "Missing item type\nFormat a value of any type into a string.\n\nUsage:\n    math.format(value)\n    math.format(value, precision)\n\nWhen value is a function:\n\n- When the function has a property `syntax`, it returns this\n  syntax description.\n- In other cases, a string `'function'` is returned.\n\nWhen `value` is an Object:\n\n- When the object contains a property `format` being a function, this\n  function is invoked as `value.format(options)` and the result is returned.\n- When the object has its own `toString` method, this method is invoked\n  and the result is returned.\n- In other cases the function will loop over all object properties and\n  return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n\nExample usage:\n    math.format(2/7);                // '0.2857142857142857'\n    math.format(math.pi, 3);         // '3.14'\n    math.format(new Complex(2, 3));  // '2 + 3i'\n    math.format('hello');            // '\"hello\"'",
            "line": " util.js:8743"
        },
        {
            "message": "Missing item type\nRecursively format an n-dimensional matrix\nExample output: \"[[1, 2], [3, 4]]\"",
            "line": " util.js:8834"
        },
        {
            "message": "Missing item type",
            "line": " util.js:8863"
        },
        {
            "message": "Missing item type\n/**\n\t\t * Convert a BigNumber to a formatted string representation.\n\t\t *\n\t\t * Syntax:\n\t\t *\n\t\t *    format(value)\n\t\t *    format(value, options)\n\t\t *    format(value, precision)\n\t\t *    format(value, fn)\n\t\t *\n\t\t * Where:\n\t\t *\n\t\t *    {number} value   The value to be formatted\n\t\t *    {Object} options An object with formatting options. Available options:\n\t\t *                     {string} notation\n\t\t *                         Number notation. Choose from:\n\t\t *                         'fixed'          Always use regular number notation.\n\t\t *                                          For example '123.40' and '14000000'\n\t\t *                         'exponential'    Always use exponential notation.\n\t\t *                                          For example '1.234e+2' and '1.4e+7'\n\t\t *                         'auto' (default) Regular number notation for numbers\n\t\t *                                          having an absolute value between\n\t\t *                                          `lower` and `upper` bounds, and uses\n\t\t *                                          exponential notation elsewhere.\n\t\t *                                          Lower bound is included, upper bound\n\t\t *                                          is excluded.\n\t\t *                                          For example '123.4' and '1.4e7'.\n\t\t *                     {number} precision   A number between 0 and 16 to round\n\t\t *                                          the digits of the number.\n\t\t *                                          In case of notations 'exponential' and\n\t\t *                                          'auto', `precision` defines the total\n\t\t *                                          number of significant digits returned\n\t\t *                                          and is undefined by default.\n\t\t *                                          In case of notation 'fixed',\n\t\t *                                          `precision` defines the number of\n\t\t *                                          significant digits after the decimal\n\t\t *                                          point, and is 0 by default.\n\t\t *                     {Object} exponential An object containing two parameters,\n\t\t *                                          {number} lower and {number} upper,\n\t\t *                                          used by notation 'auto' to determine\n\t\t *                                          when to return exponential notation.\n\t\t *                                          Default values are `lower=1e-3` and\n\t\t *                                          `upper=1e5`.\n\t\t *                                          Only applicable for notation `auto`.\n\t\t *    {Function} fn    A custom formatting function. Can be used to override the\n\t\t *                     built-in notations. Function `fn` is called with `value` as\n\t\t *                     parameter and must return a string. Is useful for example to\n\t\t *                     format all values inside a matrix in a particular way.\n\t\t *\n\t\t * Examples:\n\t\t *\n\t\t *    format(6.4);                                        // '6.4'\n\t\t *    format(1240000);                                    // '1.24e6'\n\t\t *    format(1/3);                                        // '0.3333333333333333'\n\t\t *    format(1/3, 3);                                     // '0.333'\n\t\t *    format(21385, 2);                                   // '21000'\n\t\t *    format(12.071, {notation: 'fixed'});                // '12'\n\t\t *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n\t\t *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n\t\t *\n\t\t * @param {BigNumber} value\n\t\t * @param {Object | Function | number} [options]\n\t\t * @return {string} str The formatted value",
            "line": " util.js:8865"
        },
        {
            "message": "Missing item type\nFormat a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'",
            "line": " util.js:9022"
        },
        {
            "message": "Missing item type\nFormat a number with fixed notation.",
            "line": " util.js:9039"
        },
        {
            "message": "Missing item type",
            "line": " util.js:9052"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Wrap any value in a chain, allowing to perform chained operations on\n\t\t   * the value.\n\t\t   *\n\t\t   * All methods available in the math.js library can be called upon the chain,\n\t\t   * and then will be evaluated with the value itself as first argument.\n\t\t   * The chain can be closed by executing `chain.done()`, which returns\n\t\t   * the final value.\n\t\t   *\n\t\t   * The chain has a number of special functions:\n\t\t   *\n\t\t   * - `done()`     Finalize the chain and return the chain's value.\n\t\t   * - `valueOf()`  The same as `done()`\n\t\t   * - `toString()` Executes `math.format()` onto the chain's value, returning\n\t\t   *                a string representation of the value.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.chain(value)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.chain(3)\n\t\t   *         .add(4)\n\t\t   *         .subtract(2)\n\t\t   *         .done();     // 5\n\t\t   *\n\t\t   *     math.chain( [[1, 2], [3, 4]] )\n\t\t   *         .subset(math.index(0, 0), 8)\n\t\t   *         .multiply(3)\n\t\t   *         .done();     // [[24, 6], [9, 12]]\n\t\t   *\n\t\t   * @param {*} [value]   A value of any type on which to start a chained operation.\n\t\t   * @return {math.type.Chain} The created chain",
            "line": " util.js:9054"
        },
        {
            "message": "Missing item type",
            "line": " util.js:9109"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  // type\n\t\t  __webpack_require__(27),\n  // construction function\n\t\t  __webpack_require__(31)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:9111"
        },
        {
            "message": "Missing item type\nvar Complex = __webpack_require__(28);\n\t\tvar format = __webpack_require__(6).format;\n\t\tvar isNumber = __webpack_require__(6).isNumber;\nfunction factory (type, config, load, typed, math) {\n  /**\n\t\t   * Attach type information",
            "line": " util.js:9124"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the complex number",
            "line": " util.js:9139"
        },
        {
            "message": "Missing item type\nGet a string representation of the complex number,\nwith optional formatting options.",
            "line": " util.js:9164"
        },
        {
            "message": "Missing item type\nCreate a complex number from polar coordinates\n\nUsage:\n\n    Complex.fromPolar(r: number, phi: number) : Complex\n    Complex.fromPolar({r: number, phi: number}) : Complex",
            "line": " util.js:9223"
        },
        {
            "message": "Missing item type\nCreate a Complex number from a JSON object",
            "line": " util.js:9269"
        },
        {
            "message": "Missing item type",
            "line": " util.js:9300"
        },
        {
            "message": "Missing item type\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**\n\t\t * @license Complex.js v2.0.1 11/02/2016\n\t\t *\n\t\t * Copyright (c) 2016, Robert Eisele (robert@xarg.org)\n\t\t * Dual licensed under the MIT or GPL Version 2 licenses.",
            "line": " util.js:9302"
        },
        {
            "message": "Missing item type\nThis class allows the manipilation of complex numbers.\n You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\nObject form\n { re: <real>, im: <imaginary> }\n { arg: <angle>, abs: <radius> }\n { phi: <angle>, r: <radius> }\nDouble form\n 99.3 - Single double value\nString form\n \"23.1337\" - Simple real number\n \"15+3i\" - a simple complex number\n \"3-i\" - a simple complex number\nExample:\nvar c = new Complex(\"99.3+8i\");\n c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);",
            "line": " util.js:9311"
        },
        {
            "message": "Missing item type\nCalculates log(sqrt(a^2+b^2)) in a way to avoid overflows",
            "line": " util.js:9354"
        },
        {
            "message": "Missing item type",
            "line": " util.js:9513"
        },
        {
            "message": "Missing item type\nCalculates the sign of a complex number",
            "line": " util.js:9534"
        },
        {
            "message": "Missing item type\nAdds two complex numbers",
            "line": " util.js:9548"
        },
        {
            "message": "Missing item type\nSubtracts two complex numbers",
            "line": " util.js:9562"
        },
        {
            "message": "Missing item type\nMultiplies two complex numbers",
            "line": " util.js:9576"
        },
        {
            "message": "Missing item type\nDivides two complex numbers",
            "line": " util.js:9595"
        },
        {
            "message": "Missing item type\nCalculate the power of two complex numbers",
            "line": " util.js:9643"
        },
        {
            "message": "Missing item type\nCalculate the complex square root",
            "line": " util.js:9709"
        },
        {
            "message": "Missing item type\nCalculate the complex exponent",
            "line": " util.js:9741"
        },
        {
            "message": "Missing item type\nCalculate the natural log",
            "line": " util.js:9758"
        },
        {
            "message": "Missing item type\nCalculate the magniture of the complex number",
            "line": " util.js:9777"
        },
        {
            "message": "Missing item type\nCalculate the angle of the complex number",
            "line": " util.js:9800"
        },
        {
            "message": "Missing item type\nCalculate the sine of the complex number",
            "line": " util.js:9810"
        },
        {
            "message": "Missing item type\nCalculate the cosine",
            "line": " util.js:9825"
        },
        {
            "message": "Missing item type\nCalculate the tangent",
            "line": " util.js:9840"
        },
        {
            "message": "Missing item type\nCalculate the cotangent",
            "line": " util.js:9856"
        },
        {
            "message": "Missing item type\nCalculate the secant",
            "line": " util.js:9872"
        },
        {
            "message": "Missing item type\nCalculate the cosecans",
            "line": " util.js:9888"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus sinus",
            "line": " util.js:9904"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus cosinus",
            "line": " util.js:9925"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus tangent",
            "line": " util.js:9946"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus cotangent",
            "line": " util.js:9976"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus secant",
            "line": " util.js:10000"
        },
        {
            "message": "Missing item type\nCalculate the complex arcus cosecans",
            "line": " util.js:10024"
        },
        {
            "message": "Missing item type\nCalculate the complex sinh",
            "line": " util.js:10048"
        },
        {
            "message": "Missing item type\nCalculate the complex cosh",
            "line": " util.js:10063"
        },
        {
            "message": "Missing item type\nCalculate the complex tanh",
            "line": " util.js:10078"
        },
        {
            "message": "Missing item type\nCalculate the complex coth",
            "line": " util.js:10094"
        },
        {
            "message": "Missing item type\nCalculate the complex coth",
            "line": " util.js:10110"
        },
        {
            "message": "Missing item type\nCalculate the complex sech",
            "line": " util.js:10126"
        },
        {
            "message": "Missing item type\nCalculate the complex asinh",
            "line": " util.js:10142"
        },
        {
            "message": "Missing item type\nCalculate the complex asinh",
            "line": " util.js:10163"
        },
        {
            "message": "Missing item type\nCalculate the complex atanh",
            "line": " util.js:10184"
        },
        {
            "message": "Missing item type\nCalculate the complex acoth",
            "line": " util.js:10216"
        },
        {
            "message": "Missing item type\nCalculate the complex acsch",
            "line": " util.js:10241"
        },
        {
            "message": "Missing item type\nCalculate the complex asech",
            "line": " util.js:10269"
        },
        {
            "message": "Missing item type\nCalculate the complex inverse 1/z",
            "line": " util.js:10293"
        },
        {
            "message": "Missing item type\nReturns the complex conjugate",
            "line": " util.js:10310"
        },
        {
            "message": "Missing item type\nGets the negated complex number",
            "line": " util.js:10320"
        },
        {
            "message": "Missing item type\nCeils the actual complex number",
            "line": " util.js:10330"
        },
        {
            "message": "Missing item type\nFloors the actual complex number",
            "line": " util.js:10344"
        },
        {
            "message": "Missing item type\nCeils the actual complex number",
            "line": " util.js:10358"
        },
        {
            "message": "Missing item type\nCompares two complex numbers",
            "line": " util.js:10372"
        },
        {
            "message": "Missing item type\nClones the actual object",
            "line": " util.js:10385"
        },
        {
            "message": "Missing item type\nGets a string of the actual complex number",
            "line": " util.js:10395"
        },
        {
            "message": "Missing item type\nReturns the actual number as a vector",
            "line": " util.js:10436"
        },
        {
            "message": "Missing item type\nReturns the actual real value of the current object",
            "line": " util.js:10446"
        },
        {
            "message": "Missing item type\nChecks if the given complex number is not a number",
            "line": " util.js:10459"
        },
        {
            "message": "Missing item type",
            "line": " util.js:10490"
        },
        {
            "message": "Missing item type\nmodule.exports = function(module) {\n\t\t\tif(!module.webpackPolyfill) {\n\t\t\t\tmodule.deprecate = function() {};\n\t\t\t\tmodule.paths = [];\n\t\t\t\t// module.parent = undefined by default\n\t\t\t\tmodule.children = [];\n\t\t\t\tmodule.webpackPolyfill = 1;\n\t\t\t}\n\t\t\treturn module;\n\t\t}\n\n\n\t/***/ },",
            "line": " util.js:10492"
        },
        {
            "message": "Missing item type\nmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\n\n\n\t/***/ },",
            "line": " util.js:10508"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Create a complex value or convert a value to a complex value.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.complex()                           // creates a complex value with zero\n\t\t   *                                              // as real and imaginary part.\n\t\t   *     math.complex(re : number, im : string)   // creates a complex value with provided\n\t\t   *                                              // values for real and imaginary part.\n\t\t   *     math.complex(re : number)                // creates a complex value with provided\n\t\t   *                                              // real value and zero imaginary part.\n\t\t   *     math.complex(complex : Complex)          // clones the provided complex value.\n\t\t   *     math.complex(arg : string)               // parses a string into a complex value.\n\t\t   *     math.complex(array : Array)              // converts the elements of the array\n\t\t   *                                              // or matrix element wise into a\n\t\t   *                                              // complex value.\n\t\t   *     math.complex({re: number, im: number})   // creates a complex value with provided\n\t\t   *                                              // values for real an imaginary part.\n\t\t   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n\t\t   *                                              // polar coordinates\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i\n\t\t   *    a.re = 5;                        // a = Complex 5 - 4i\n\t\t   *    var i = a.im;                    // Number -4;\n\t\t   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i\n\t\t   *    var c = math.complex();          // Complex 0 + 0i\n\t\t   *    var d = math.add(a, b);          // Complex 5 + 2i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, index, matrix, number, string, unit\n\t\t   *\n\t\t   * @param {* | Array | Matrix} [args]\n\t\t   *            Arguments specifying the real and imaginary part of the complex number\n\t\t   * @return {Complex | Array | Matrix} Returns a complex value",
            "line": " util.js:10515"
        },
        {
            "message": "Missing item type",
            "line": " util.js:10619"
        },
        {
            "message": "Missing item type\n'use strict';\nexports.symbols = {\n\t\t  // GREEK LETTERS\n\t\t  Alpha: 'A',     alpha: '\\\\alpha',\n\t\t  Beta: 'B',      beta: '\\\\beta',\n\t\t  Gamma: '\\\\Gamma',    gamma: '\\\\gamma',\n\t\t  Delta: '\\\\Delta',    delta: '\\\\delta',\n\t\t  Epsilon: 'E',   epsilon: '\\\\epsilon',  varepsilon: '\\\\varepsilon',\n\t\t  Zeta: 'Z',      zeta: '\\\\zeta',\n\t\t  Eta: 'H',       eta: '\\\\eta',\n\t\t  Theta: '\\\\Theta',    theta: '\\\\theta',    vartheta: '\\\\vartheta',\n\t\t  Iota: 'I',      iota: '\\\\iota',\n\t\t  Kappa: 'K',     kappa: '\\\\kappa',    varkappa: '\\\\varkappa',\n\t\t  Lambda: '\\\\Lambda',   lambda: '\\\\lambda',\n\t\t  Mu: 'M',        mu: '\\\\mu',\n\t\t  Nu: 'N',        nu: '\\\\nu',\n\t\t  Xi: '\\\\Xi',       xi: '\\\\xi',\n\t\t  Omicron: 'O',   omicron: 'o',\n\t\t  Pi: '\\\\Pi',       pi: '\\\\pi',       varpi: '\\\\varpi',\n\t\t  Rho: 'P',       rho: '\\\\rho',      varrho: '\\\\varrho',\n\t\t  Sigma: '\\\\Sigma',    sigma: '\\\\sigma',    varsigma: '\\\\varsigma',\n\t\t  Tau: 'T',       tau: '\\\\tau',\n\t\t  Upsilon: '\\\\Upsilon',  upsilon: '\\\\upsilon',\n\t\t  Phi: '\\\\Phi',      phi: '\\\\phi',      varphi: '\\\\varphi',\n\t\t  Chi: 'X',       chi: '\\\\chi',\n\t\t  Psi: '\\\\Psi',      psi: '\\\\psi',\n\t\t  Omega: '\\\\Omega',    omega: '\\\\omega',\n\t\t  //logic\n\t\t  'true': '\\\\mathrm{True}',\n\t\t  'false': '\\\\mathrm{False}',\n\t\t  //other\n\t\t  i: 'i', //TODO use \\i ??\n\t\t  inf: '\\\\infty',\n\t\t  Inf: '\\\\infty',\n\t\t  infinity: '\\\\infty',\n\t\t  Infinity: '\\\\infty',\n\t\t  oo: '\\\\infty',\n\t\t  lim: '\\\\lim',\n\t\t  'undefined': '\\\\mathbf{?}'\n\t\t};\nexports.operators = {\n\t\t  'transpose': '^\\\\top',\n\t\t  'factorial': '!',\n\t\t  'pow': '^',\n\t\t  'dotPow': '.^\\\\wedge', //TODO find ideal solution\n\t\t  'unaryPlus': '+',\n\t\t  'unaryMinus': '-',\n\t\t  'bitNot': '~', //TODO find ideal solution\n\t\t  'not': '\\\\neg',\n\t\t  'multiply': '\\\\cdot',\n\t\t  'divide': '\\\\frac', //TODO how to handle that properly?\n\t\t  'dotMultiply': '.\\\\cdot', //TODO find ideal solution\n\t\t  'dotDivide': '.:', //TODO find ideal solution\n\t\t  'mod': '\\\\mod',\n\t\t  'add': '+',\n\t\t  'subtract': '-',\n\t\t  'to': '\\\\rightarrow',\n\t\t  'leftShift': '<<',\n\t\t  'rightArithShift': '>>',\n\t\t  'rightLogShift': '>>>',\n\t\t  'equal': '=',\n\t\t  'unequal': '\\\\neq',\n\t\t  'smaller': '<',\n\t\t  'larger': '>',\n\t\t  'smallerEq': '\\\\leq',\n\t\t  'largerEq': '\\\\geq',\n\t\t  'bitAnd': '\\\\&',\n\t\t  'bitXor': '\\\\underline{|}',\n\t\t  'bitOr': '|',\n\t\t  'and': '\\\\wedge',\n\t\t  'xor': '\\\\veebar',\n\t\t  'or': '\\\\vee'\n\t\t};\nexports.defaultTemplate = '\\\\mathrm{${name}}\\\\left(${args}\\\\right)';\nvar units = {\n\t\t  deg: '^\\\\circ'\n\t\t};\n//@param {string} name\n\t\t//@param {boolean} isUnit\n\t\texports.toSymbol = function (name, isUnit) {\n\t\t  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n\t\t  if (isUnit) {\n\t\t    if (units.hasOwnProperty(name)) {\n\t\t      return units[name];\n\t\t    }\n\t\t    return '\\\\mathrm{' + name + '}';\n\t\t  }\n  if (exports.symbols.hasOwnProperty(name)) {\n\t\t    return exports.symbols[name];\n\t\t  }\n\t\t  else if (name.indexOf('_') !== -1) {\n\t\t    //symbol with index (eg. alpha_1)\n\t\t    var index = name.indexOf('_');\n\t\t    return exports.toSymbol(name.substring(0, index)) + '_{'\n\t\t      + exports.toSymbol(name.substring(index + 1)) + '}';\n\t\t  }\n\t\t  return name;\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:10621"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  // type\n\t\t  __webpack_require__(34),\n  // construction function\n\t\t  __webpack_require__(36)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:10731"
        },
        {
            "message": "Missing item type\nvar Fraction = __webpack_require__(35);\n/**\n\t\t * Attach type information",
            "line": " util.js:10744"
        },
        {
            "message": "Missing item type\nGet a JSON representation of a Fraction containing type information",
            "line": " util.js:10754"
        },
        {
            "message": "Missing item type\nInstantiate a Fraction from a JSON object",
            "line": " util.js:10767"
        },
        {
            "message": "Missing item type",
            "line": " util.js:10787"
        },
        {
            "message": "Missing item type\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**\n\t\t * @license Fraction.js v3.3.1 09/09/2015\n\t\t * http://www.xarg.org/2014/03/precise-calculations-in-javascript/\n\t\t *\n\t\t * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n\t\t * Dual licensed under the MIT or GPL Version 2 licenses.",
            "line": " util.js:10789"
        },
        {
            "message": "Missing item type\nThis class offers the possibility to calculate fractions.\n You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\nArray/Object form\n [ 0 => <nominator>, 1 => <denominator> ]\n [ n => <nominator>, d => <denominator> ]\nInteger form\n - Single integer value\nDouble form\n - Single double value\nString form\n 123.456 - a simple double\n 123/456 - a string fraction\n 123.'456' - a double with repeating decimal places\n 123.(456) - synonym\n 123.45'6' - a double with repeating last place\n 123.45(6) - synonym\nExample:\nvar f = new Fraction(\"9.4'31'\");\n f.mul([-4, 3]).div(4.9);",
            "line": " util.js:10800"
        },
        {
            "message": "Missing item type\nModule constructor",
            "line": " util.js:11090"
        },
        {
            "message": "Missing item type\nBoolean global variable to be able to disable automatic reduction of the fraction",
            "line": " util.js:11116"
        },
        {
            "message": "Missing item type\nCalculates the absolute value\n\nEx: new Fraction(-4).abs() => 4",
            "line": " util.js:11128"
        },
        {
            "message": "Missing item type\nInverts the sign of the current fraction\n\nEx: new Fraction(-4).neg() => 4",
            "line": " util.js:11138"
        },
        {
            "message": "Missing item type\nAdds two rational numbers\n\nEx: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30",
            "line": " util.js:11148"
        },
        {
            "message": "Missing item type\nSubtracts two rational numbers\n\nEx: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30",
            "line": " util.js:11162"
        },
        {
            "message": "Missing item type\nMultiplies two rational numbers\n\nEx: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111",
            "line": " util.js:11176"
        },
        {
            "message": "Missing item type\nDivides two rational numbers\n\nEx: new Fraction(\"-17.(345)\").inverse().div(3)",
            "line": " util.js:11190"
        },
        {
            "message": "Missing item type\nClones the actual object\n\nEx: new Fraction(\"-17.(345)\").clone()",
            "line": " util.js:11204"
        },
        {
            "message": "Missing item type\nCalculates the modulo of two rational numbers - a more precise fmod\n\nEx: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)",
            "line": " util.js:11213"
        },
        {
            "message": "Missing item type\nCalculates the fractional gcd of two rational numbers\n\nEx: new Fraction(5,8).gcd(3,7) => 1/56",
            "line": " util.js:11253"
        },
        {
            "message": "Missing item type\nCalculates the fractional lcm of two rational numbers\n\nEx: new Fraction(5,8).lcm(3,7) => 15",
            "line": " util.js:11267"
        },
        {
            "message": "Missing item type\nCalculates the ceil of a rational number\n\nEx: new Fraction('4.(3)').ceil() => (5 / 1)",
            "line": " util.js:11284"
        },
        {
            "message": "Missing item type\nCalculates the floor of a rational number\n\nEx: new Fraction('4.(3)').floor() => (4 / 1)",
            "line": " util.js:11299"
        },
        {
            "message": "Missing item type\nRounds a rational numbers\n\nEx: new Fraction('4.(3)').round() => (4 / 1)",
            "line": " util.js:11314"
        },
        {
            "message": "Missing item type\nGets the inverse of the fraction, means numerator and denumerator are exchanged\n\nEx: new Fraction([-3, 4]).inverse() => -4 / 3",
            "line": " util.js:11329"
        },
        {
            "message": "Missing item type\nCalculates the fraction to some integer exponent\n\nEx: new Fraction(-1,2).pow(-3) => -8",
            "line": " util.js:11339"
        },
        {
            "message": "Missing item type\nCheck if two rational numbers are the same\n\nEx: new Fraction(19.6).equals([98, 5]);",
            "line": " util.js:11353"
        },
        {
            "message": "Missing item type\nCheck if two rational numbers are the same\n\nEx: new Fraction(19.6).equals([98, 5]);",
            "line": " util.js:11364"
        },
        {
            "message": "Missing item type\nCheck if two rational numbers are divisible\n\nEx: new Fraction(19.6).divisible(1.5);",
            "line": " util.js:11376"
        },
        {
            "message": "Missing item type\nReturns a decimal representation of the fraction\n\nEx: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183",
            "line": " util.js:11387"
        },
        {
            "message": "Missing item type\nReturns a string-fraction representation of a Fraction object\n\nEx: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"",
            "line": " util.js:11397"
        },
        {
            "message": "Missing item type\nReturns a latex representation of a Fraction object\n\nEx: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"",
            "line": " util.js:11428"
        },
        {
            "message": "Missing item type\nReturns an array of continued fraction elements\n\nEx: new Fraction(\"7/8\").toContinued() => [0,1,7]",
            "line": " util.js:11460"
        },
        {
            "message": "Missing item type\nCreates a string representation of a fraction with all digits\n\nEx: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"",
            "line": " util.js:11482"
        },
        {
            "message": "Missing item type",
            "line": " util.js:11573"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a fraction convert a value to a fraction.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *     math.fraction(numerator, denominator)\n\t\t   *     math.fraction({n: numerator, d: denominator})\n\t\t   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n\t\t   *                                                   into fractions\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.fraction(1, 3);\n\t\t   *     math.fraction('2/3');\n\t\t   *     math.fraction({n: 2, d: 3});\n\t\t   *     math.fraction([0.2, 0.25, 1.25]);\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, number, string, unit\n\t\t   *\n\t\t   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n\t\t   *            Arguments specifying the numerator and denominator of\n\t\t   *            the fraction\n\t\t   * @return {Fraction | Array | Matrix} Returns a fraction",
            "line": " util.js:11575"
        },
        {
            "message": "Missing item type",
            "line": " util.js:11648"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  // types\n\t\t  __webpack_require__(38),\n\t\t  __webpack_require__(46),\n\t\t  __webpack_require__(47),\n\t\t  __webpack_require__(50),\n\t\t  __webpack_require__(59),\n\t\t  __webpack_require__(65),\n\t\t  __webpack_require__(66),\n\t\t  __webpack_require__(67),\n  // construction functions\n\t\t  __webpack_require__(68),\n\t\t  __webpack_require__(52),\n\t\t  __webpack_require__(69)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:11650"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\nvar isString = string.isString;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * @constructor Matrix\n\t\t   *\n\t\t   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n\t\t   * array. A matrix can be constructed as:\n\t\t   *     var matrix = math.matrix(data)\n\t\t   *\n\t\t   * Matrix contains the functions to resize, get and set values, get the size,\n\t\t   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n\t\t   * Furthermore, one can iterate over the matrix using map and forEach.\n\t\t   * The internal Array of the Matrix can be accessed using the function valueOf.\n\t\t   *\n\t\t   * Example usage:\n\t\t   *     var matrix = math.matrix([[1, 2], [3, 4]]);\n\t\t   *     matix.size();              // [2, 2]\n\t\t   *     matrix.resize([3, 2], 5);\n\t\t   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]\n\t\t   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n\t\t   *",
            "line": " util.js:11672"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:11709"
        },
        {
            "message": "Missing item type\nGet the Matrix storage constructor for the given format.",
            "line": " util.js:11715"
        },
        {
            "message": "Missing item type\nGet the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "line": " util.js:11741"
        },
        {
            "message": "Missing item type\nGet the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "line": " util.js:11754"
        },
        {
            "message": "Missing item type\nCreate a new Matrix With the type of the current matrix instance",
            "line": " util.js:11767"
        },
        {
            "message": "Missing item type\nGet a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "line": " util.js:11776"
        },
        {
            "message": "Missing item type\nGet a single element from the matrix.",
            "line": " util.js:11794"
        },
        {
            "message": "Missing item type\nReplace a single element in the matrix.",
            "line": " util.js:11804"
        },
        {
            "message": "Missing item type\nResize the matrix to the given size. Returns a copy of the matrix when \n`copy=true`, otherwise return the matrix itself (resize in place).",
            "line": " util.js:11818"
        },
        {
            "message": "Missing item type\nCreate a clone of the matrix",
            "line": " util.js:11835"
        },
        {
            "message": "Missing item type\nRetrieve the size of the matrix.",
            "line": " util.js:11844"
        },
        {
            "message": "Missing item type\nCreate a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "line": " util.js:11853"
        },
        {
            "message": "Missing item type\nExecute a callback function on each entry of the matrix.",
            "line": " util.js:11868"
        },
        {
            "message": "Missing item type\nCreate an Array with a copy of the data of the Matrix",
            "line": " util.js:11879"
        },
        {
            "message": "Missing item type\nGet the primitive value of the Matrix: a multidimensional array",
            "line": " util.js:11888"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix, with optional formatting options.",
            "line": " util.js:11897"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix",
            "line": " util.js:11910"
        },
        {
            "message": "Missing item type",
            "line": " util.js:11928"
        },
        {
            "message": "Missing item type\n'use strict';\nexports.array = __webpack_require__(40);\n\t\texports['boolean'] = __webpack_require__(44);\n\t\texports['function'] = __webpack_require__(45);\n\t\texports.number = __webpack_require__(6);\n\t\texports.object = __webpack_require__(3);\n\t\texports.string = __webpack_require__(23);\n\t\texports.types = __webpack_require__(41);\n\t\texports.emitter = __webpack_require__(8);\n\n\n\t/***/ },",
            "line": " util.js:11930"
        },
        {
            "message": "Missing item type\n'use strict';\nvar number = __webpack_require__(6);\n\t\tvar string = __webpack_require__(23);\n\t\tvar object = __webpack_require__(3);\n\t\tvar types = __webpack_require__(41);\nvar DimensionError = __webpack_require__(42);\n\t\tvar IndexError = __webpack_require__(43);\n/**\n\t\t * Calculate the size of a multi dimensional array.\n\t\t * This function checks the size of the first entry, it does not validate\n\t\t * whether all dimensions match. (use function `validate` for that)\n\t\t * @param {Array} x\n\t\t * @Return {Number[]} size",
            "line": " util.js:11946"
        },
        {
            "message": "Missing item type\nRecursively validate whether each element in a multi dimensional array\nhas a size corresponding to the provided size array.",
            "line": " util.js:11976"
        },
        {
            "message": "Missing item type\nValidate whether each element in a multi dimensional array has\na size corresponding to the provided size array.",
            "line": " util.js:12014"
        },
        {
            "message": "Missing item type\nTest whether index is an integer number with index >= 0 and index < length\nwhen length is provided",
            "line": " util.js:12035"
        },
        {
            "message": "Missing item type\nResize a multi dimensional array. The resized array is returned.",
            "line": " util.js:12053"
        },
        {
            "message": "Missing item type\nRecursively resize a multi dimensional array",
            "line": " util.js:12088"
        },
        {
            "message": "Missing item type\nSqueeze a multi dimensional array",
            "line": " util.js:12151"
        },
        {
            "message": "Missing item type\nRecursively squeeze a multi dimensional array",
            "line": " util.js:12181"
        },
        {
            "message": "Missing item type\nUnsqueeze a multi dimensional array: add dimensions when missing\n\nParamter `size` will be mutated to match the new, unqueezed matrix size.",
            "line": " util.js:12207"
        },
        {
            "message": "Missing item type\nRecursively unsqueeze a multi dimensional array",
            "line": " util.js:12239"
        },
        {
            "message": "Missing item type\nFlatten a multi dimensional array, put all elements in a one dimensional\narray",
            "line": " util.js:12264"
        },
        {
            "message": "Missing item type\nTest whether an object is an array",
            "line": " util.js:12289"
        },
        {
            "message": "Missing item type",
            "line": " util.js:12297"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Determine the type of a variable\n\t\t *\n\t\t *     type(x)\n\t\t *\n\t\t * The following types are recognized:\n\t\t *\n\t\t *     'undefined'\n\t\t *     'null'\n\t\t *     'boolean'\n\t\t *     'number'\n\t\t *     'string'\n\t\t *     'Array'\n\t\t *     'Function'\n\t\t *     'Date'\n\t\t *     'RegExp'\n\t\t *     'Object'\n\t\t *\n\t\t * @param {*} x\n\t\t * @return {string} Returns the name of the type. Primitive types are lower case,\n\t\t *                  non-primitive types are upper-camel-case.\n\t\t *                  For example 'number', 'string', 'Array', 'Date'.",
            "line": " util.js:12299"
        },
        {
            "message": "Missing item type\nTest whether a value is a scalar",
            "line": " util.js:12346"
        },
        {
            "message": "Missing item type",
            "line": " util.js:12357"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Create a range error with the message:\n\t\t *     'Dimension mismatch (<actual size> != <expected size>)'\n\t\t * @param {number | number[]} actual        The actual size\n\t\t * @param {number | number[]} expected      The expected size\n\t\t * @param {string} [relation='!=']          Optional relation between actual\n\t\t *                                          and expected size: '!=', '<', etc.\n\t\t * @extends RangeError",
            "line": " util.js:12359"
        },
        {
            "message": "Missing item type",
            "line": " util.js:12398"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Create a range error with the message:\n\t\t *     'Index out of range (index < min)'\n\t\t *     'Index out of range (index < max)'\n\t\t *\n\t\t * @param {number} index     The actual index\n\t\t * @param {number} [min=0]   Minimum index (included)\n\t\t * @param {number} [max]     Maximum index (excluded)\n\t\t * @extends RangeError",
            "line": " util.js:12400"
        },
        {
            "message": "Missing item type",
            "line": " util.js:12450"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Test whether value is a boolean\n\t\t * @param {*} value\n\t\t * @return {boolean} isBoolean",
            "line": " util.js:12452"
        },
        {
            "message": "Missing item type",
            "line": " util.js:12466"
        },
        {
            "message": "Missing item type\n// function utils\n/*\n\t\t * Memoize a given function by caching the computed result.\n\t\t * The cache of a memoized function can be cleared by deleting the `cache`\n\t\t * property of the function.\n\t\t *\n\t\t * @param {function} fn                     The function to be memoized.\n\t\t *                                          Must be a pure function.\n\t\t * @param {function(args: Array)} [hasher]  A custom hash builder.\n\t\t *                                          Is JSON.stringify by default.\n\t\t * @return {function}                       Returns the memoized function",
            "line": " util.js:12468"
        },
        {
            "message": "Missing item type\nFind the maximum number of arguments expected by a typed function.",
            "line": " util.js:12502"
        },
        {
            "message": "Missing item type",
            "line": " util.js:12517"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\n\t\tvar DimensionError = __webpack_require__(42);\nvar string = util.string;\n\t\tvar array = util.array;\n\t\tvar object = util.object;\n\t\tvar number = util.number;\nvar isArray = Array.isArray;\n\t\tvar isNumber = number.isNumber;\n\t\tvar isInteger = number.isInteger;\n\t\tvar isString = string.isString;\nvar validateIndex = array.validateIndex;\nfunction factory (type, config, load, typed) {\n\t\t  var Matrix = load(__webpack_require__(38)); // force loading Matrix (do not use via type.Matrix)\n  /**\n\t\t   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n\t\t   * @class DenseMatrix",
            "line": " util.js:12519"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:12596"
        },
        {
            "message": "Missing item type\nGet the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "line": " util.js:12602"
        },
        {
            "message": "Missing item type\nGet the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "line": " util.js:12615"
        },
        {
            "message": "Missing item type\nCreate a new DenseMatrix",
            "line": " util.js:12628"
        },
        {
            "message": "Missing item type\nGet a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "line": " util.js:12638"
        },
        {
            "message": "Missing item type\nGet a single element from the matrix.",
            "line": " util.js:12667"
        },
        {
            "message": "Missing item type\nReplace a single element in the matrix.",
            "line": " util.js:12693"
        },
        {
            "message": "Missing item type\nGet a submatrix of this matrix",
            "line": " util.js:12733"
        },
        {
            "message": "Missing item type\nRecursively get a submatrix of a multi dimensional matrix.\nIndex is not checked for correct number or length of dimensions.",
            "line": " util.js:12771"
        },
        {
            "message": "Missing item type\nReplace a submatrix in this matrix\nIndexes are zero-based.",
            "line": " util.js:12799"
        },
        {
            "message": "Missing item type\nReplace a submatrix of a multi dimensional matrix.",
            "line": " util.js:12884"
        },
        {
            "message": "Missing item type\nResize the matrix to the given size. Returns a copy of the matrix when\n`copy=true`, otherwise return the matrix itself (resize in place).",
            "line": " util.js:12912"
        },
        {
            "message": "Missing item type\nEnlarge the matrix when it is smaller than given size.\nIf the matrix is larger or equal sized, nothing is done.",
            "line": " util.js:12954"
        },
        {
            "message": "Missing item type\nCreate a clone of the matrix",
            "line": " util.js:12987"
        },
        {
            "message": "Missing item type\nRetrieve the size of the matrix.",
            "line": " util.js:13001"
        },
        {
            "message": "Missing item type\nCreate a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "line": " util.js:13010"
        },
        {
            "message": "Missing item type\nExecute a callback function on each entry of the matrix.",
            "line": " util.js:13041"
        },
        {
            "message": "Missing item type\nCreate an Array with a copy of the data of the DenseMatrix",
            "line": " util.js:13064"
        },
        {
            "message": "Missing item type\nGet the primitive value of the DenseMatrix: a multidimensional array",
            "line": " util.js:13073"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix, with optional formatting options.",
            "line": " util.js:13082"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix",
            "line": " util.js:13095"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the matrix",
            "line": " util.js:13104"
        },
        {
            "message": "Missing item type\nGet the kth Matrix diagonal.",
            "line": " util.js:13118"
        },
        {
            "message": "Missing item type\nCreate a diagonal matrix.",
            "line": " util.js:13168"
        },
        {
            "message": "Missing item type\nGenerate a matrix from a JSON object",
            "line": " util.js:13293"
        },
        {
            "message": "Missing item type\nSwap rows i and j in Matrix.",
            "line": " util.js:13305"
        },
        {
            "message": "Missing item type\nSwap rows i and j in Dense Matrix data structure.",
            "line": " util.js:13333"
        },
        {
            "message": "Missing item type\nPreprocess data, which can be an Array or DenseMatrix with nested Arrays and\nMatrices. Replaces all nested Matrices with Arrays",
            "line": " util.js:13346"
        },
        {
            "message": "Missing item type",
            "line": " util.js:13380"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\n\t\tvar DimensionError = __webpack_require__(42);\nvar array = util.array;\n\t\tvar object = util.object;\n\t\tvar string = util.string;\n\t\tvar number = util.number;\nvar isArray = Array.isArray;\n\t\tvar isNumber = number.isNumber;\n\t\tvar isInteger = number.isInteger;\n\t\tvar isString = string.isString;\nvar validateIndex = array.validateIndex;\nfunction factory (type, config, load, typed) {\n\t\t  var Matrix = load(__webpack_require__(38)); // force loading Matrix (do not use via type.Matrix)\n\t\t  var equalScalar = load(__webpack_require__(48));\n  /**\n\t\t   * Sparse Matrix implementation. This type implements a Compressed Column Storage format\n\t\t   * for sparse matrices.\n\t\t   * @class SparseMatrix",
            "line": " util.js:13382"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:13539"
        },
        {
            "message": "Missing item type\nGet the storage format used by the matrix.\n\nUsage:\n    var format = matrix.storage()                   // retrieve storage format",
            "line": " util.js:13545"
        },
        {
            "message": "Missing item type\nGet the datatype of the data stored in the matrix.\n\nUsage:\n    var format = matrix.datatype()                   // retrieve matrix datatype",
            "line": " util.js:13558"
        },
        {
            "message": "Missing item type\nCreate a new SparseMatrix",
            "line": " util.js:13571"
        },
        {
            "message": "Missing item type\nGet the matrix density.\n\nUsage:\n    var density = matrix.density()                   // retrieve matrix density",
            "line": " util.js:13581"
        },
        {
            "message": "Missing item type\nGet a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "line": " util.js:13598"
        },
        {
            "message": "Missing item type\nGet a single element from the matrix.",
            "line": " util.js:13797"
        },
        {
            "message": "Missing item type\nReplace a single element in the matrix.",
            "line": " util.js:13830"
        },
        {
            "message": "Missing item type\nResize the matrix to the given size. Returns a copy of the matrix when \n`copy=true`, otherwise return the matrix itself (resize in place).",
            "line": " util.js:13938"
        },
        {
            "message": "Missing item type\nCreate a clone of the matrix",
            "line": " util.js:14092"
        },
        {
            "message": "Missing item type\nRetrieve the size of the matrix.",
            "line": " util.js:14108"
        },
        {
            "message": "Missing item type\nCreate a new matrix with the results of the callback function executed on\neach entry of the matrix.",
            "line": " util.js:14117"
        },
        {
            "message": "Missing item type\nCreate a new matrix with the results of the callback function executed on the interval\n[minRow..maxRow, minColumn..maxColumn].",
            "line": " util.js:14146"
        },
        {
            "message": "Missing item type\nExecute a callback function on each entry of the matrix.",
            "line": " util.js:14223"
        },
        {
            "message": "Missing item type\nCreate an Array with a copy of the data of the SparseMatrix",
            "line": " util.js:14271"
        },
        {
            "message": "Missing item type\nGet the primitive value of the SparseMatrix: a two dimensions array",
            "line": " util.js:14280"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix, with optional formatting options.",
            "line": " util.js:14320"
        },
        {
            "message": "Missing item type\nGet a string representation of the matrix",
            "line": " util.js:14353"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the matrix",
            "line": " util.js:14362"
        },
        {
            "message": "Missing item type\nGet the kth Matrix diagonal.",
            "line": " util.js:14378"
        },
        {
            "message": "Missing item type\nGenerate a matrix from a JSON object",
            "line": " util.js:14449"
        },
        {
            "message": "Missing item type\nCreate a diagonal matrix.",
            "line": " util.js:14461"
        },
        {
            "message": "Missing item type\nSwap rows i and j in Matrix.",
            "line": " util.js:14602"
        },
        {
            "message": "Missing item type\nLoop rows with data in column j.",
            "line": " util.js:14630"
        },
        {
            "message": "Missing item type\nSwap rows x and y in Sparse Matrix data structures.",
            "line": " util.js:14650"
        },
        {
            "message": "Missing item type",
            "line": " util.js:14724"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  /**\n\t\t   * Test whether two values are equal.\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n\t\t   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n\t\t   * @private",
            "line": " util.js:14726"
        },
        {
            "message": "Missing item type",
            "line": " util.js:14783"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Compares two BigNumbers.\n\t\t * @param {BigNumber} x       First value to compare\n\t\t * @param {BigNumber} y       Second value to compare\n\t\t * @param {number} [epsilon]  The maximum relative difference between x and y\n\t\t *                            If epsilon is undefined or null, the function will\n\t\t *                            test whether x and y are exactly equal.\n\t\t * @return {boolean} whether the two numbers are nearly equal",
            "line": " util.js:14785"
        },
        {
            "message": "Missing item type",
            "line": " util.js:14834"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n\t\t  \n\t\t  var add = load(__webpack_require__(51));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  \n\t\t  /**\n\t\t   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array \n\t\t   * of the vector elements and an ordered list of non-zero elements.",
            "line": " util.js:14836"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:14858"
        },
        {
            "message": "Missing item type\nSet the value for index i.",
            "line": " util.js:14864"
        },
        {
            "message": "Missing item type",
            "line": " util.js:14981"
        },
        {
            "message": "Missing item type\n'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var addScalar = load(__webpack_require__(53));\n\t\t  var latex = __webpack_require__(32);\n\t\t  \n\t\t  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm04 = load(__webpack_require__(55));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Add two or more values, `x + y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.add(x, y)\n\t\t   *    math.add(x, y, z, ...)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.add(2, 3);               // returns number 5\n\t\t   *    math.add(2, 3, 4);            // returns number 9\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    var b = math.complex(-4, 1);\n\t\t   *    math.add(a, b);               // returns Complex -2 + 4i\n\t\t   *\n\t\t   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\t\t   *\n\t\t   *    var c = math.unit('5 cm');\n\t\t   *    var d = math.unit('2.1 mm');\n\t\t   *    math.add(c, d);               // returns Unit 52.1 mm\n\t\t   *\n\t\t   *    math.add(\"2.3\", \"4\");         // returns number 6.3\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    subtract, sum\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`",
            "line": " util.js:14983"
        },
        {
            "message": "Missing item type",
            "line": " util.js:15151"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a Matrix. The function creates a new `math.type.Matrix` object from\n\t\t   * an `Array`. A Matrix has utility functions to manipulate the data in the\n\t\t   * matrix, like getting the size and getting or setting values in the matrix.\n\t\t   * Supported storage formats are 'dense' and 'sparse'.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n\t\t   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n\t\t   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n\t\t   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n\t\t   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n\t\t   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var m = math.matrix([[1, 2], [3, 4]]);\n\t\t   *    m.size();                        // Array [2, 2]\n\t\t   *    m.resize([3, 2], 5);\n\t\t   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n\t\t   *    m.get([1, 0])                    // number 3\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, index, number, string, unit, sparse\n\t\t   *\n\t\t   * @param {Array | Matrix} [data]    A multi dimensional array\n\t\t   * @param {string} [format]          The Matrix storage format\n\t\t   *\n\t\t   * @return {Matrix} The created matrix",
            "line": " util.js:15153"
        },
        {
            "message": "Missing item type\nCreate a new Matrix with given storage format",
            "line": " util.js:15224"
        },
        {
            "message": "Missing item type",
            "line": " util.js:15245"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory(type, config, load, typed) {\n  /**\n\t\t   * Add two scalar values, `x + y`.\n\t\t   * This function is meant for internal use: it is used by the public function\n\t\t   * `add`\n\t\t   *\n\t\t   * This function does not support collections (Array or Matrix), and does\n\t\t   * not validate the number of of inputs.\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n\t\t   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`\n\t\t   * @private",
            "line": " util.js:15247"
        },
        {
            "message": "Missing item type",
            "line": " util.js:15302"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n\t\t   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤\n\t\t   *          └  Dij          ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n\t\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "line": " util.js:15304"
        },
        {
            "message": "Missing item type",
            "line": " util.js:15422"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t\t   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n\t\t   *          └  B(i,j)       ; B(i,j) !== 0\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " util.js:15424"
        },
        {
            "message": "Missing item type",
            "line": " util.js:15615"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t\t   * Callback function invoked NZ times (number of nonzero items in S).\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  b          ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t\t   * @param {Scalar}   b                 The Scalar value\n\t\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "line": " util.js:15617"
        },
        {
            "message": "Missing item type",
            "line": " util.js:15731"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\n\t\tvar DimensionError = __webpack_require__(42);\nvar string = util.string,\n\t\t    isString = string.isString;\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). \n\t\t   * Callback function invoked MxN times.\n\t\t   *\n\t\t   * C(i,j,...z) = f(Aij..z, Bij..z)\n\t\t   *\n\t\t   * @param {Matrix}   a                 The DenseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The DenseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658",
            "line": " util.js:15733"
        },
        {
            "message": "Missing item type",
            "line": " util.js:15841"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). \n\t\t   * Callback function invoked MxN times.\n\t\t   *\n\t\t   * C(i,j,...z) = f(Aij..z, b)\n\t\t   *\n\t\t   * @param {Matrix}   a                 The DenseMatrix instance (A)\n\t\t   * @param {Scalar}   b                 The Scalar value\n\t\t   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042",
            "line": " util.js:15843"
        },
        {
            "message": "Missing item type",
            "line": " util.js:15929"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var smaller = load(__webpack_require__(60));\n\t\t  var larger = load(__webpack_require__(64));\n\t\t  \n\t\t  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\t\t  \n\t\t  /**\n\t\t   * Fibonacci Heap implementation, used interally for Matrix math.\n\t\t   * @class FibonacciHeap\n\t\t   * @constructor FibonacciHeap",
            "line": " util.js:15931"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:15956"
        },
        {
            "message": "Missing item type\nInserts a new data element into the heap. No heap consolidation is\nperformed at this time, the new node is simply inserted into the root\nlist of this heap. Running time: O(1) actual.",
            "line": " util.js:15962"
        },
        {
            "message": "Missing item type\nReturns the number of nodes in heap. Running time: O(1) actual.",
            "line": " util.js:16003"
        },
        {
            "message": "Missing item type\nRemoves all elements from this heap.",
            "line": " util.js:16011"
        },
        {
            "message": "Missing item type\nReturns true if the heap is empty, otherwise false.",
            "line": " util.js:16020"
        },
        {
            "message": "Missing item type\nExtracts the node with minimum key from heap. Amortized running \ntime: O(log n).",
            "line": " util.js:16028"
        },
        {
            "message": "Missing item type\nRemoves a node from the heap given the reference to the node. The trees\nin the heap will be consolidated, if necessary. This operation may fail\nto remove the correct element if there are nodes with key value -Infinity.\nRunning time: O(log n) amortized.",
            "line": " util.js:16084"
        },
        {
            "message": "Missing item type\nDecreases the key value for a heap node, given the new value to take on.\nThe structure of the heap may be changed and will not be consolidated. \nRunning time: O(1) amortized.",
            "line": " util.js:16098"
        },
        {
            "message": "Missing item type\nThe reverse of the link operation: removes node from the child list of parent.\nThis method assumes that min is non-null. Running time: O(1).",
            "line": " util.js:16122"
        },
        {
            "message": "Missing item type\nPerforms a cascading cut operation. This cuts node from its parent and then\ndoes the same for its parent, and so on up the tree.\nRunning time: O(log n); O(1) excluding the recursion.",
            "line": " util.js:16149"
        },
        {
            "message": "Missing item type\nMake the first node a child of the second one. Running time: O(1) actual.",
            "line": " util.js:16173"
        },
        {
            "message": "Missing item type",
            "line": " util.js:16284"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether value x is smaller than y.\n\t\t   *\n\t\t   * The function returns true when x is smaller than y and the relative\n\t\t   * difference between x and y is smaller than the configured epsilon. The\n\t\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.smaller(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.smaller(2, 3);            // returns true\n\t\t   *    math.smaller(5, 2 * 2);        // returns false\n\t\t   *\n\t\t   *    var a = math.unit('5 cm');\n\t\t   *    var b = math.unit('2 inch');\n\t\t   *    math.smaller(a, b);            // returns true\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false",
            "line": " util.js:16286"
        },
        {
            "message": "Missing item type",
            "line": " util.js:16469"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n\t\t   * Callback function invoked M*N times.\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤\n\t\t   *          └  f(Dij, 0)    ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n\t\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "line": " util.js:16471"
        },
        {
            "message": "Missing item type",
            "line": " util.js:16600"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked MxN times.\n\t\t   *\n\t\t   * C(i,j) = f(Aij, Bij)\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " util.js:16602"
        },
        {
            "message": "Missing item type",
            "line": " util.js:16730"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t\t   * Callback function invoked MxN times.\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  f(0, b)    ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t\t   * @param {Scalar}   b                 The Scalar value\n\t\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t\t   *\n\t\t   * @return {Matrix}                    DenseMatrix (C)\n\t\t   *\n\t\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "line": " util.js:16732"
        },
        {
            "message": "Missing item type",
            "line": " util.js:16846"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether value x is larger than y.\n\t\t   *\n\t\t   * The function returns true when x is larger than y and the relative\n\t\t   * difference between x and y is larger than the configured epsilon. The\n\t\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.larger(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.larger(2, 3);             // returns false\n\t\t   *    math.larger(5, 2 + 2);         // returns true\n\t\t   *\n\t\t   *    var a = math.unit('5 cm');\n\t\t   *    var b = math.unit('2 inch');\n\t\t   *    math.larger(a, b);             // returns false\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal, smaller, smallerEq, largerEq, compare\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false",
            "line": " util.js:16848"
        },
        {
            "message": "Missing item type",
            "line": " util.js:17031"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\n\t\tvar object = util.object;\nvar isArray = Array.isArray;\n\t\tvar isString = string.isString;\nfunction factory (type, config, load) {\n  var DenseMatrix = load(__webpack_require__(46));\n  var smaller = load(__webpack_require__(60));\n  function ImmutableDenseMatrix(data, datatype) {\n\t\t    if (!(this instanceof ImmutableDenseMatrix))\n\t\t      throw new SyntaxError('Constructor must be called with the new operator');\n\t\t    if (datatype && !isString(datatype))\n\t\t      throw new Error('Invalid datatype: ' + datatype);\n    if ((data && data.isMatrix === true) || isArray(data)) {\n\t\t      // use DenseMatrix implementation\n\t\t      var matrix = new DenseMatrix(data, datatype);\n\t\t      // internal structures\n\t\t      this._data = matrix._data;\n\t\t      this._size = matrix._size;\n\t\t      this._datatype = matrix._datatype;\n\t\t      this._min = null;\n\t\t      this._max = null;\n\t\t    }\n\t\t    else if (data && isArray(data.data) && isArray(data.size)) {\n\t\t      // initialize fields from JSON representation\n\t\t      this._data = data.data;\n\t\t      this._size = data.size;\n\t\t      this._datatype = data.datatype;\n\t\t      this._min = typeof data.min !== 'undefined' ? data.min : null;\n\t\t      this._max = typeof data.max !== 'undefined' ? data.max : null;\n\t\t    }\n\t\t    else if (data) {\n\t\t      // unsupported type\n\t\t      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n\t\t    }\n\t\t    else {\n\t\t      // nothing provided\n\t\t      this._data = [];\n\t\t      this._size = [0];\n\t\t      this._datatype = datatype;\n\t\t      this._min = null;\n\t\t      this._max = null;\n\t\t    }\n\t\t  }\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n  /**\n\t\t   * Attach type information",
            "line": " util.js:17033"
        },
        {
            "message": "Missing item type\nGet a subset of the matrix, or replace a subset of the matrix.\n\nUsage:\n    var subset = matrix.subset(index)               // retrieve subset\n    var value = matrix.subset(index, replacement)   // replace subset",
            "line": " util.js:17097"
        },
        {
            "message": "Missing item type\nReplace a single element in the matrix.",
            "line": " util.js:17136"
        },
        {
            "message": "Missing item type\nResize the matrix to the given size. Returns a copy of the matrix when\n`copy=true`, otherwise return the matrix itself (resize in place).",
            "line": " util.js:17149"
        },
        {
            "message": "Missing item type\nCreate a clone of the matrix",
            "line": " util.js:17165"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the matrix",
            "line": " util.js:17178"
        },
        {
            "message": "Missing item type\nGenerate a matrix from a JSON object",
            "line": " util.js:17191"
        },
        {
            "message": "Missing item type\nSwap rows i and j in Matrix.",
            "line": " util.js:17202"
        },
        {
            "message": "Missing item type\nCalculate the minimum value in the set",
            "line": " util.js:17214"
        },
        {
            "message": "Missing item type\nCalculate the maximum value in the set",
            "line": " util.js:17233"
        },
        {
            "message": "Missing item type",
            "line": " util.js:17261"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type) {\n\t\t  \n\t\t  /**\n\t\t   * Create an index. An Index can store ranges and sets for multiple dimensions.\n\t\t   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n\t\t   *\n\t\t   * Usage:\n\t\t   *     var index = new Index(range1, range2, matrix1, array1, ...);\n\t\t   *\n\t\t   * Where each parameter can be any of:\n\t\t   *     A number\n\t\t   *     A string (containing a name of an object property)\n\t\t   *     An instance of Range\n\t\t   *     An Array with the Set values\n\t\t   *     A Matrix with the Set values\n\t\t   *\n\t\t   * The parameters start, end, and step must be integer numbers.\n\t\t   *\n\t\t   * @class Index\n\t\t   * @Constructor Index\n\t\t   * @param {...*} ranges",
            "line": " util.js:17263"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:17332"
        },
        {
            "message": "Missing item type\nCreate a clone of the index",
            "line": " util.js:17349"
        },
        {
            "message": "Missing item type\nCreate an index from an array with ranges/numbers",
            "line": " util.js:17361"
        },
        {
            "message": "Missing item type\nRetrieve the size of the index, the number of elements for each dimension.",
            "line": " util.js:17374"
        },
        {
            "message": "Missing item type\nGet the maximum value for each of the indexes ranges.",
            "line": " util.js:17390"
        },
        {
            "message": "Missing item type\nGet the minimum value for each of the indexes ranges.",
            "line": " util.js:17406"
        },
        {
            "message": "Missing item type\nLoop over each of the ranges of the index",
            "line": " util.js:17422"
        },
        {
            "message": "Missing item type\nRetrieve the dimension for the given index",
            "line": " util.js:17435"
        },
        {
            "message": "Missing item type\nTest whether this index contains an object property",
            "line": " util.js:17445"
        },
        {
            "message": "Missing item type\nReturns the object property name when the Index holds a single object property,\nelse returns null",
            "line": " util.js:17453"
        },
        {
            "message": "Missing item type\nTest whether this index contains only a single value.\n\nThis is the case when the index is created with only scalar values as ranges,\nnot for ranges resolving into a single value.",
            "line": " util.js:17462"
        },
        {
            "message": "Missing item type\nExpand the Index into an array.\nFor example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]",
            "line": " util.js:17474"
        },
        {
            "message": "Missing item type\nGet the primitive value of the Index, a two dimensional array.\nEquivalent to Index.toArray().",
            "line": " util.js:17489"
        },
        {
            "message": "Missing item type\nGet the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'",
            "line": " util.js:17497"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the Index",
            "line": " util.js:17518"
        },
        {
            "message": "Missing item type\nInstantiate an Index from a JSON object",
            "line": " util.js:17531"
        },
        {
            "message": "Missing item type",
            "line": " util.js:17550"
        },
        {
            "message": "Missing item type\n'use strict';\nvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a range. A range has a start, step, and end, and contains functions\n\t\t   * to iterate over the range.\n\t\t   *\n\t\t   * A range can be constructed as:\n\t\t   *     var range = new Range(start, end);\n\t\t   *     var range = new Range(start, end, step);\n\t\t   *\n\t\t   * To get the result of the range:\n\t\t   *     range.forEach(function (x) {\n\t\t   *         console.log(x);\n\t\t   *     });\n\t\t   *     range.map(function (x) {\n\t\t   *         return math.sin(x);\n\t\t   *     });\n\t\t   *     range.toArray();\n\t\t   *\n\t\t   * Example usage:\n\t\t   *     var c = new Range(2, 6);         // 2:1:5\n\t\t   *     c.toArray();                     // [2, 3, 4, 5]\n\t\t   *     var d = new Range(2, -3, -1);    // 2:-1:-2\n\t\t   *     d.toArray();                     // [2, 1, 0, -1, -2]\n\t\t   *\n\t\t   * @class Range\n\t\t   * @constructor Range\n\t\t   * @param {number} start  included lower bound\n\t\t   * @param {number} end    excluded upper bound\n\t\t   * @param {number} [step] step size, default value is 1",
            "line": " util.js:17552"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:17617"
        },
        {
            "message": "Missing item type\nParse a string into a range,\nThe string contains the start, optional step, and end, separated by a colon.\nIf the string does not contain a valid range, null is returned.\nFor example str='0:2:11'.",
            "line": " util.js:17623"
        },
        {
            "message": "Missing item type\nCreate a clone of the range",
            "line": " util.js:17659"
        },
        {
            "message": "Missing item type\nRetrieve the size of the range.\nReturns an array containing one number, the number of elements in the range.",
            "line": " util.js:17667"
        },
        {
            "message": "Missing item type\nCalculate the minimum value in the range",
            "line": " util.js:17693"
        },
        {
            "message": "Missing item type\nCalculate the maximum value in the range",
            "line": " util.js:17716"
        },
        {
            "message": "Missing item type\nExecute a callback function for each value in the range.",
            "line": " util.js:17740"
        },
        {
            "message": "Missing item type\nExecute a callback function for each value in the Range, and return the\nresults as an array",
            "line": " util.js:17769"
        },
        {
            "message": "Missing item type\nCreate an Array with a copy of the Ranges data",
            "line": " util.js:17786"
        },
        {
            "message": "Missing item type\nGet the primitive value of the Range, a one dimensional array",
            "line": " util.js:17799"
        },
        {
            "message": "Missing item type\nGet a string representation of the range, with optional formatting options.\nOutput is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'",
            "line": " util.js:17809"
        },
        {
            "message": "Missing item type\nGet a string representation of the range.",
            "line": " util.js:17829"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the range",
            "line": " util.js:17838"
        },
        {
            "message": "Missing item type\nInstantiate a Range from a JSON object",
            "line": " util.js:17853"
        },
        {
            "message": "Missing item type",
            "line": " util.js:17872"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create an index. An Index can store ranges having start, step, and end\n\t\t   * for multiple dimensions.\n\t\t   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.index(range1, range2, ...)\n\t\t   *\n\t\t   * Where each range can be any of:\n\t\t   *\n\t\t   * - A number\n\t\t   * - A string for getting/setting an object property\n\t\t   * - An instance of `Range`\n\t\t   * - A one-dimensional Array or a Matrix with numbers\n\t\t   *\n\t\t   * Indexes must be zero-based, integer numbers.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var math = math.js\n\t\t   *\n\t\t   *    var b = [1, 2, 3, 4, 5];\n\t\t   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]\n\t\t   *\n\t\t   *    var a = math.matrix([[1, 2], [3, 4]]);\n\t\t   *    a.subset(math.index(0, 1));             // returns 2\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, matrix, number, string, unit\n\t\t   *\n\t\t   * @param {...*} ranges   Zero or more ranges or numbers.\n\t\t   * @return {Index}        Returns the created index",
            "line": " util.js:17874"
        },
        {
            "message": "Missing item type",
            "line": " util.js:17942"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from\n\t\t   * an `Array`. A Matrix has utility functions to manipulate the data in the\n\t\t   * matrix, like getting the size and getting or setting values in the matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sparse()               // creates an empty sparse matrix.\n\t\t   *    math.sparse(data)           // creates a sparse matrix with initial data.\n\t\t   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var m = math.sparse([[1, 2], [3, 4]]);\n\t\t   *    m.size();                        // Array [2, 2]\n\t\t   *    m.resize([3, 2], 5);\n\t\t   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n\t\t   *    m.get([1, 0])                    // number 3\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, index, number, string, unit, matrix\n\t\t   *\n\t\t   * @param {Array | Matrix} [data]    A two dimensional array\n\t\t   *\n\t\t   * @return {Matrix} The created matrix",
            "line": " util.js:17944"
        },
        {
            "message": "Missing item type",
            "line": " util.js:18009"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a number or convert a string, boolean, or unit to a number.\n\t\t   * When value is a matrix, all elements will be converted to number.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.number(value)\n\t\t   *    math.number(unit, valuelessUnit)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.number(2);                         // returns number 2\n\t\t   *    math.number('7.2');                     // returns number 7.2\n\t\t   *    math.number(true);                      // returns number 1\n\t\t   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]\n\t\t   *    math.number(math.unit('52cm'), 'm');    // returns 0.52\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, index, matrix, string, unit\n\t\t   *\n\t\t   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n\t\t   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n\t\t   * @return {number | Array | Matrix} The created number",
            "line": " util.js:18011"
        },
        {
            "message": "Missing item type",
            "line": " util.js:18094"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  // type\n\t\t  __webpack_require__(72)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:18096"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * A ResultSet contains a list or results\n\t\t   * @class ResultSet\n\t\t   * @param {Array} entries\n\t\t   * @constructor ResultSet",
            "line": " util.js:18106"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:18125"
        },
        {
            "message": "Missing item type\nReturns the array with results hold by this ResultSet",
            "line": " util.js:18131"
        },
        {
            "message": "Missing item type\nReturns the stringified results of the ResultSet",
            "line": " util.js:18140"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the ResultSet",
            "line": " util.js:18149"
        },
        {
            "message": "Missing item type\nInstantiate a ResultSet from a JSON object",
            "line": " util.js:18162"
        },
        {
            "message": "Missing item type",
            "line": " util.js:18181"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a string or convert any object into a string.\n\t\t   * Elements of Arrays and Matrices are processed element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.string(value)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.string(4.2);               // returns string '4.2'\n\t\t   *    math.string(math.complex(3, 2); // returns string '3 + 2i'\n\t\t   *\n\t\t   *    var u = math.unit(5, 'km');\n\t\t   *    math.string(u.to('m'));         // returns string '5000 m'\n\t\t   *\n\t\t   *    math.string([true, false]);     // returns ['true', 'false']\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, index, matrix, number, unit\n\t\t   *\n\t\t   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n\t\t   * @return {string | Array | Matrix} The created string",
            "line": " util.js:18183"
        },
        {
            "message": "Missing item type",
            "line": " util.js:18256"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  // type\n\t\t  __webpack_require__(75),\n  // construction function\n\t\t  __webpack_require__(96),\n  // create new units\n\t\t  __webpack_require__(97),\n  // split units\n\t\t  __webpack_require__(98),\n  // physical constants\n\t\t  __webpack_require__(99)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:18258"
        },
        {
            "message": "Missing item type\n'use strict';\nvar endsWith = __webpack_require__(23).endsWith;\n\t\tvar clone = __webpack_require__(3).clone;\n\t\tvar constants = __webpack_require__(76);\nfunction factory (type, config, load, typed, math) {\n\t\t  var add       = load(__webpack_require__(53));\n\t\t  var subtract  = load(__webpack_require__(77));\n\t\t  var multiply  = load(__webpack_require__(80));\n\t\t  var divide    = load(__webpack_require__(81));\n\t\t  var pow       = load(__webpack_require__(82));\n\t\t  var abs       = load(__webpack_require__(86));\n\t\t  var fix       = load(__webpack_require__(87));\n\t\t  var equal     = load(__webpack_require__(88));\n\t\t  var isNumeric = load(__webpack_require__(89));\n\t\t  var format    = load(__webpack_require__(90));\n\t\t  var getTypeOf = load(__webpack_require__(91));\n\t\t  var toNumber  = load(__webpack_require__(70));\n\t\t  var Complex   = load(__webpack_require__(27));\n  /**\n\t\t   * A unit can be constructed in the following ways:\n\t\t   *     var a = new Unit(value, name);\n\t\t   *     var b = new Unit(null, name);\n\t\t   *     var c = Unit.parse(str);\n\t\t   *\n\t\t   * Example usage:\n\t\t   *     var a = new Unit(5, 'cm');               // 50 mm\n\t\t   *     var b = Unit.parse('23 kg');             // 23 kg\n\t\t   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m\n\t\t   *     var d = new Unit(9.81, \"m/s^2\");         // 9.81 m/s^2\n\t\t   *\n\t\t   * @class Unit\n\t\t   * @constructor Unit\n\t\t   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n\t\t   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.",
            "line": " util.js:18280"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:18363"
        },
        {
            "message": "Missing item type\nParse a string into a unit. The value of the unit is parsed as number,\nBigNumber, or Fraction depending on the math.js config setting `number`.\n\nThrows an exception if the provided string does not contain a valid unit or\ncannot be parsed.",
            "line": " util.js:18507"
        },
        {
            "message": "Missing item type\ncreate a copy of this unit",
            "line": " util.js:18693"
        },
        {
            "message": "Missing item type\nReturn whether the unit is derived (such as m/s, or cm^2, but not N)",
            "line": " util.js:18719"
        },
        {
            "message": "Missing item type\nNormalize a value, based on its currently set unit(s)",
            "line": " util.js:18731"
        },
        {
            "message": "Missing item type\nDenormalize a value, based on its currently set unit(s)",
            "line": " util.js:18772"
        },
        {
            "message": "Missing item type\nFind a unit from a string",
            "line": " util.js:18820"
        },
        {
            "message": "Missing item type\nTest if the given expression is a unit.\nThe unit can have a prefix but cannot have a value.",
            "line": " util.js:18861"
        },
        {
            "message": "Missing item type\ncheck if this unit has given base unit\nIf this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.",
            "line": " util.js:18873"
        },
        {
            "message": "Missing item type\nCheck if this unit has a base or bases equal to another base or bases\nFor derived units, the exponent on each base also must match",
            "line": " util.js:18899"
        },
        {
            "message": "Missing item type\nCheck if this unit equals another unit",
            "line": " util.js:18916"
        },
        {
            "message": "Missing item type\nMultiply this unit with another one",
            "line": " util.js:18926"
        },
        {
            "message": "Missing item type\nDivide this unit by another one",
            "line": " util.js:18966"
        },
        {
            "message": "Missing item type\nCalculate the power of a unit",
            "line": " util.js:19007"
        },
        {
            "message": "Missing item type\nReturn the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise",
            "line": " util.js:19045"
        },
        {
            "message": "Missing item type\nCalculate the absolute value of a unit",
            "line": " util.js:19060"
        },
        {
            "message": "Missing item type\nConvert the unit to a specific unit name.",
            "line": " util.js:19081"
        },
        {
            "message": "Missing item type\nReturn the value of the unit when represented with given valueless unit",
            "line": " util.js:19123"
        },
        {
            "message": "Missing item type\nReturn the value of the unit in the original numeric type",
            "line": " util.js:19134"
        },
        {
            "message": "Missing item type\nGet a string representation of the unit.",
            "line": " util.js:19155"
        },
        {
            "message": "Missing item type\nGet a JSON representation of the unit",
            "line": " util.js:19164"
        },
        {
            "message": "Missing item type\nInstantiate a Unit from a JSON object",
            "line": " util.js:19179"
        },
        {
            "message": "Missing item type\nReturns the string representation of the unit.",
            "line": " util.js:19192"
        },
        {
            "message": "Missing item type\nAttempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the \"best\" units for formatting.\nIntended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.",
            "line": " util.js:19199"
        },
        {
            "message": "Missing item type\nGet a string representation of the units of this Unit, without the value.",
            "line": " util.js:19274"
        },
        {
            "message": "Missing item type\nGet a string representation of the Unit, with optional formatting options.",
            "line": " util.js:19339"
        },
        {
            "message": "Missing item type\nCalculate the best prefix using current value.",
            "line": " util.js:19400"
        },
        {
            "message": "Missing item type\nReturns an array of units whose sum is equal to this unit",
            "line": " util.js:19455"
        },
        {
            "message": "Missing item type\nCalculate the values for the angle units.\nValue is calculated as number or BigNumber depending on the configuration",
            "line": " util.js:21039"
        },
        {
            "message": "Missing item type\nA unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\nA user perhaps could issue a command to select a preferred unit system, or use the default (see below).\nAuto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.",
            "line": " util.js:21074"
        },
        {
            "message": "Missing item type\nSet a unit system for formatting derived units.",
            "line": " util.js:21138"
        },
        {
            "message": "Missing item type\nReturn the current unit system.",
            "line": " util.js:21151"
        },
        {
            "message": "Missing item type\nConverters to convert from number to an other numeric type like BigNumber\nor Fraction",
            "line": " util.js:21163"
        },
        {
            "message": "Missing item type\nRetrieve the right convertor function corresponding with the type\nof provided exampleValue.",
            "line": " util.js:21185"
        },
        {
            "message": "Missing item type\nWrapper around createUnitSingle.\nExample: \n createUnit({\n   foo: { },\n   bar: {\n     definition: 'kg/foo',\n     aliases: ['ba', 'barr', 'bars'],\n     offset: 200\n   },\n   baz: '4 bar'\n }, \n {\n   override: true;\n });",
            "line": " util.js:21244"
        },
        {
            "message": "Missing item type\nCreate a user-defined unit and register it with the Unit type.\nExample: \n createUnitSingle('knot', '0.514444444 m/s')\n createUnitSingle('acre', new Unit(43560, 'ft^2'))",
            "line": " util.js:21292"
        },
        {
            "message": "Missing item type",
            "line": " util.js:21499"
        },
        {
            "message": "Missing item type\nvar memoize = __webpack_require__(45).memoize;\n/**\n\t\t * Calculate BigNumber e\n\t\t * @param {function} BigNumber   BigNumber constructor\n\t\t * @returns {BigNumber} Returns e",
            "line": " util.js:21501"
        },
        {
            "message": "Missing item type\nCalculate BigNumber golden ratio, phi = (1+sqrt(5))/2",
            "line": " util.js:21514"
        },
        {
            "message": "Missing item type\nCalculate BigNumber pi.",
            "line": " util.js:21523"
        },
        {
            "message": "Missing item type\nCalculate BigNumber tau, tau = 2 * pi",
            "line": " util.js:21532"
        },
        {
            "message": "Missing item type\nCreate a hash for a BigNumber constructor function. The created has is\nthe configured precision",
            "line": " util.js:21541"
        },
        {
            "message": "Missing item type",
            "line": " util.js:21554"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t\t  var addScalar = load(__webpack_require__(53));\n\t\t  var unaryMinus = load(__webpack_require__(78));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm05 = load(__webpack_require__(79));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  // TODO: split function subtract in two: subtract and subtractScalar\n  /**\n\t\t   * Subtract two values, `x - y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.subtract(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.subtract(5.3, 2);        // returns number 3.3\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    var b = math.complex(4, 1);\n\t\t   *    math.subtract(a, b);          // returns Complex -2 + 2i\n\t\t   *\n\t\t   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]\n\t\t   *\n\t\t   *    var c = math.unit('2.1 km');\n\t\t   *    var d = math.unit('500m');\n\t\t   *    math.subtract(c, d);          // returns Unit 1.6 km\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    add\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n\t\t   *            Initial value\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n\t\t   *            Value to subtract from `x`\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t\t   *            Subtraction of `x` and `y`",
            "line": " util.js:21556"
        },
        {
            "message": "Missing item type",
            "line": " util.js:21759"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Inverse the sign of a value, apply a unary minus operation.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise. Boolean values and\n\t\t   * strings will be converted to a number. For complex numbers, both real and\n\t\t   * complex value are inverted.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.unaryMinus(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.unaryMinus(3.5);      // returns -3.5\n\t\t   *    math.unaryMinus(-4.2);     // returns 4.2\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    add, subtract, unaryPlus\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.",
            "line": " util.js:21761"
        },
        {
            "message": "Missing item type",
            "line": " util.js:21835"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n\t\t  \n\t\t  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  0            ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " util.js:21837"
        },
        {
            "message": "Missing item type",
            "line": " util.js:22017"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory(type, config, load, typed) {\n\t\t  \n\t\t  /**\n\t\t   * Multiply two scalar values, `x * y`.\n\t\t   * This function is meant for internal use: it is used by the public function\n\t\t   * `multiply`\n\t\t   *\n\t\t   * This function does not support collections (Array or Matrix), and does\n\t\t   * not validate the number of of inputs.\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n\t\t   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`\n\t\t   * @private",
            "line": " util.js:22019"
        },
        {
            "message": "Missing item type",
            "line": " util.js:22080"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory(type, config, load, typed) {\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n  /**\n\t\t   * Divide two scalar values, `x / y`.\n\t\t   * This function is meant for internal use: it is used by the public functions\n\t\t   * `divide` and `inv`.\n\t\t   *\n\t\t   * This function does not support collections (Array or Matrix), and does\n\t\t   * not validate the number of of inputs.\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n\t\t   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`\n\t\t   * @private",
            "line": " util.js:22082"
        },
        {
            "message": "Missing item type",
            "line": " util.js:22145"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n\t\t  var eye = load(__webpack_require__(83));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var fraction = load(__webpack_require__(36));\n\t\t  var number = load(__webpack_require__(70));\n  /**\n\t\t   * Calculates the power of x to y, `x ^ y`.\n\t\t   * Matrix exponentiation is supported for square matrices `x`, and positive\n\t\t   * integer exponents `y`.\n\t\t   *\n\t\t   * For cubic roots of negative numbers, the function returns the principal\n\t\t   * root by default. In order to let the function return the real root,\n\t\t   * math.js can be configured with `math.config({predictable: true})`.\n\t\t   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.pow(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.pow(2, 3);               // returns number 8\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    math.pow(a, 2)                // returns Complex -5 + 12i\n\t\t   *\n\t\t   *    var b = [[1, 2], [4, 3]];\n\t\t   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply, sqrt, cbrt, nthRoot\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base\n\t\t   * @param  {number | BigNumber | Complex} y                   The exponent\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`",
            "line": " util.js:22147"
        },
        {
            "message": "Missing item type\nCalculates the power of x to y, x^y, for two numbers.",
            "line": " util.js:22242"
        },
        {
            "message": "Missing item type\nCalculate the power of a 2d array",
            "line": " util.js:22279"
        },
        {
            "message": "Missing item type\nCalculate the power of a 2d matrix",
            "line": " util.js:22311"
        },
        {
            "message": "Missing item type",
            "line": " util.js:22335"
        },
        {
            "message": "Missing item type\n'use strict';\nvar array = __webpack_require__(40);\n\t\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  \n\t\t  /**\n\t\t   * Create a 2-dimensional identity matrix with size m x n or n x n.\n\t\t   * The matrix has ones on the diagonal and zeros elsewhere.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.eye(n)\n\t\t   *    math.eye(n, format)\n\t\t   *    math.eye(m, n)\n\t\t   *    math.eye(m, n, format)\n\t\t   *    math.eye([m, n])\n\t\t   *    math.eye([m, n], format)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\t\t   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]\n\t\t   *\n\t\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t\t   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    diag, ones, zeros, size, range\n\t\t   *\n\t\t   * @param {...number | Matrix | Array} size   The size for the matrix\n\t\t   * @param {string} [format]                   The Matrix storage format\n\t\t   *\n\t\t   * @return {Matrix | Array | number} A matrix with ones on the diagonal.",
            "line": " util.js:22337"
        },
        {
            "message": "Missing item type\nCreate an identity matrix",
            "line": " util.js:22433"
        },
        {
            "message": "Missing item type",
            "line": " util.js:22487"
        },
        {
            "message": "Missing item type\n'use strict';\nvar extend = __webpack_require__(3).extend;\n\t\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t\t  var addScalar = load(__webpack_require__(53));\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n\t\t  var equalScalar = load(__webpack_require__(48));\n  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  var DenseMatrix = type.DenseMatrix;\n\t\t  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Multiply two or more values, `x * y`.\n\t\t   * For matrices, the matrix product is calculated.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.multiply(x, y)\n\t\t   *    math.multiply(x, y, z, ...)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.multiply(4, 5.2);        // returns number 20.8\n\t\t   *    math.multiply(2, 3, 4);       // returns number 24\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    var b = math.complex(4, 1);\n\t\t   *    math.multiply(a, b);          // returns Complex 5 + 14i\n\t\t   *\n\t\t   *    var c = [[1, 2], [4, 3]];\n\t\t   *    var d = [[1, 2, 3], [3, -4, 7]];\n\t\t   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]\n\t\t   *\n\t\t   *    var e = math.unit('2.1 km');\n\t\t   *    math.multiply(3, e);          // returns Unit 6.3 km\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    divide, prod, cross, dot\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`",
            "line": " util.js:22489"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " util.js:22697"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " util.js:22743"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " util.js:22760"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " util.js:22820"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " util.js:22838"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " util.js:22870"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " util.js:22931"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " util.js:22999"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " util.js:23110"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " util.js:23214"
        },
        {
            "message": "Missing item type\nC = A * B",
            "line": " util.js:23327"
        },
        {
            "message": "Missing item type",
            "line": " util.js:23463"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n\t\t   * Callback function invoked NZ times (number of nonzero items in S).\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  0          ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   s                 The SparseMatrix instance (S)\n\t\t   * @param {Scalar}   b                 The Scalar value\n\t\t   * @param {Function} callback          The f(Aij,b) operation to invoke\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813",
            "line": " util.js:23465"
        },
        {
            "message": "Missing item type",
            "line": " util.js:23578"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the absolute value of a number. For matrices, the function is\n\t\t   * evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.abs(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.abs(3.5);                // returns number 3.5\n\t\t   *    math.abs(-4.2);               // returns number 4.2\n\t\t   *\n\t\t   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sign\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t\t   *            A number or matrix for which to get the absolute value\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n\t\t   *            Absolute value of `x`",
            "line": " util.js:23580"
        },
        {
            "message": "Missing item type",
            "line": " util.js:23645"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Round a value towards zero.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.fix(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.fix(3.2);                // returns number 3\n\t\t   *    math.fix(3.8);                // returns number 3\n\t\t   *    math.fix(-4.2);               // returns number -4\n\t\t   *    math.fix(-4.7);               // returns number -4\n\t\t   *\n\t\t   *    var c = math.complex(3.2, -2.7);\n\t\t   *    math.fix(c);                  // returns Complex 3 - 2i\n\t\t   *\n\t\t   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    ceil, floor, round\n\t\t   *\n\t\t   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value",
            "line": " util.js:23647"
        },
        {
            "message": "Missing item type",
            "line": " util.js:23716"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var equalScalar = load(__webpack_require__(48));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether two values are equal.\n\t\t   *\n\t\t   * The function tests whether the relative difference between x and y is\n\t\t   * smaller than the configured epsilon. The function cannot be used to\n\t\t   * compare values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n\t\t   *\n\t\t   * Values `null` and `undefined` are compared strictly, thus `null` is only\n\t\t   * equal to `null` and nothing else, and `undefined` is only equal to\n\t\t   * `undefined` and nothing else.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.equal(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.equal(2 + 2, 3);         // returns false\n\t\t   *    math.equal(2 + 2, 4);         // returns true\n\t\t   *\n\t\t   *    var a = math.unit('50 cm');\n\t\t   *    var b = math.unit('5 m');\n\t\t   *    math.equal(a, b);             // returns true\n\t\t   *\n\t\t   *    var c = [2, 5, 1];\n\t\t   *    var d = [2, 7, 1];\n\t\t   *\n\t\t   *    math.equal(c, d);             // returns [true, false, true]\n\t\t   *    math.deepEqual(c, d);         // returns false\n\t\t   *\n\t\t   *    math.equal(0, null);          // returns false\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual\n\t\t   *\n\t\t   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false",
            "line": " util.js:23718"
        },
        {
            "message": "Missing item type",
            "line": " util.js:23891"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is an numeric value.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isNumeric(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isNumeric(2);                     // returns true\n\t\t   *    math.isNumeric(0);                     // returns true\n\t\t   *    math.isNumeric(math.bignumber(500));   // returns true\n\t\t   *    math.isNumeric(math.fraction(4));      // returns true\n\t\t   *    math.isNumeric(math.complex('2-4i');   // returns false\n\t\t   *    math.isNumeric('3');                   // returns false\n\t\t   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isZero, isPositive, isNegative, isInteger\n\t\t   *\n\t\t   * @param {*} x       Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n\t\t   *                    `Fraction`, or `boolean`. Returns false for other types.\n\t\t   *                    Throws an error in case of unknown types.",
            "line": " util.js:23893"
        },
        {
            "message": "Missing item type",
            "line": " util.js:23950"
        },
        {
            "message": "Missing item type\n'use strict';\nvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Format a value of any type into a string.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.format(value)\n\t\t   *    math.format(value, options)\n\t\t   *    math.format(value, precision)\n\t\t   *    math.format(value, callback)\n\t\t   *\n\t\t   * Where:\n\t\t   *\n\t\t   *  - `value: *`\n\t\t   *    The value to be formatted\n\t\t   *  - `options: Object`\n\t\t   *    An object with formatting options. Available options:\n\t\t   *    - `notation: string`\n\t\t   *      Number notation. Choose from:\n\t\t   *      - 'fixed'\n\t\t   *        Always use regular number notation.\n\t\t   *        For example '123.40' and '14000000'\n\t\t   *      - 'exponential'\n\t\t   *        Always use exponential notation.\n\t\t   *        For example '1.234e+2' and '1.4e+7'\n\t\t   *      - 'engineering'\n\t\t   *        Always use engineering notation.\n\t\t   *        For example '123.4e+0' and '14.0e+6'\n\t\t   *      - 'auto' (default)\n\t\t   *        Regular number notation for numbers having an absolute value between\n\t\t   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\n\t\t   *        Lower bound is included, upper bound is excluded.\n\t\t   *        For example '123.4' and '1.4e7'.\n\t\t   *    - `precision: number`\n\t\t   *      A number between 0 and 16 to round the digits of the number. In case\n\t\t   *      of notations 'exponential' and 'auto', `precision` defines the total\n\t\t   *      number of significant digits returned and is undefined by default.\n\t\t   *      In case of notation 'fixed', `precision` defines the number of\n\t\t   *      significant digits after the decimal point, and is 0 by default.\n\t\t   *    - `exponential: Object`\n\t\t   *      An object containing two parameters, {number} lower and {number} upper,\n\t\t   *      used by notation 'auto' to determine when to return exponential\n\t\t   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only\n\t\t   *      applicable for notation `auto`.\n\t\t   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.\n\t\t   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is\n\t\t   *      configured, and will output `0.(3)` when 'decimal' is configured.\n\t\t   * - `callback: function`\n\t\t   *   A custom formatting function, invoked for all numeric elements in `value`,\n\t\t   *   for example all elements of a matrix, or the real and imaginary\n\t\t   *   parts of a complex number. This callback can be used to override the\n\t\t   *   built-in numeric notation with any type of formatting. Function `callback`\n\t\t   *   is called with `value` as parameter and must return a string.\n\t\t   *\n\t\t   * When `value` is an Object:\n\t\t   *\n\t\t   * - When the object contains a property `format` being a function, this function\n\t\t   *   is invoked as `value.format(options)` and the result is returned.\n\t\t   * - When the object has its own `toString` method, this method is invoked\n\t\t   *   and the result is returned.\n\t\t   * - In other cases the function will loop over all object properties and\n\t\t   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n\t\t   *\n\t\t   * When value is a function:\n\t\t   *\n\t\t   * - When the function has a property `syntax`, it returns this\n\t\t   *   syntax description.\n\t\t   * - In other cases, a string `'function'` is returned.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.format(6.4);                                        // returns '6.4'\n\t\t   *    math.format(1240000);                                    // returns '1.24e6'\n\t\t   *    math.format(1/3);                                        // returns '0.3333333333333333'\n\t\t   *    math.format(1/3, 3);                                     // returns '0.333'\n\t\t   *    math.format(21385, 2);                                   // returns '21000'\n\t\t   *    math.format(12.071, {notation: 'fixed'});                // returns '12'\n\t\t   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'\n\t\t   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'\n\t\t   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'\n\t\t   *\n\t\t   *    function formatCurrency(value) {\n\t\t   *      // return currency notation with two digits:\n\t\t   *      return '$' + value.toFixed(2);\n\t\t   *\n\t\t   *      // you could also use math.format inside the callback:\n\t\t   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});\n\t\t   *    }\n\t\t   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    print\n\t\t   *\n\t\t   * @param {*} value                               Value to be stringified\n\t\t   * @param {Object | Function | number} [options]  Formatting options\n\t\t   * @return {string} The formatted value",
            "line": " util.js:23952"
        },
        {
            "message": "Missing item type",
            "line": " util.js:24070"
        },
        {
            "message": "Missing item type\n'use strict';\nvar types = __webpack_require__(41);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Determine the type of a variable.\n\t\t   *\n\t\t   * Function `typeof` recognizes the following types of objects:\n\t\t   *\n\t\t   * Object                 | Returns       | Example\n\t\t   * ---------------------- | ------------- | ------------------------------------------\n\t\t   * null                   | `'null'`      | `math.typeof(null)`\n\t\t   * number                 | `'number'`    | `math.typeof(3.5)`\n\t\t   * boolean                | `'boolean'`   | `math.typeof (true)`\n\t\t   * string                 | `'string'`    | `math.typeof ('hello world')`\n\t\t   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`\n\t\t   * Date                   | `'Date'`      | `math.typeof (new Date())`\n\t\t   * Function               | `'Function'`  | `math.typeof (function () {})`\n\t\t   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`\n\t\t   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`\n\t\t   * undefined              | `'undefined'` | `math.typeof(undefined)`\n\t\t   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`\n\t\t   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`\n\t\t   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`\n\t\t   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`\n\t\t   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`\n\t\t   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`\n\t\t   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`\n\t\t   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`\n\t\t   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.typeof(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.typeof(3.5);                     // returns 'number'\n\t\t   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'\n\t\t   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'\n\t\t   *    math.typeof('hello world');           // returns 'string'\n\t\t   *\n\t\t   * @param {*} x     The variable for which to test the type.\n\t\t   * @return {string} Returns the name of the type. Primitive types are lower case,\n\t\t   *                  non-primitive types are upper-camel-case.\n\t\t   *                  For example 'number', 'string', 'Array', 'Date'.",
            "line": " util.js:24072"
        },
        {
            "message": "Missing item type",
            "line": " util.js:24153"
        },
        {
            "message": "Missing item type\n/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n\t\t//\n\t\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t\t// copy of this software and associated documentation files (the\n\t\t// \"Software\"), to deal in the Software without restriction, including\n\t\t// without limitation the rights to use, copy, modify, merge, publish,\n\t\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t\t// persons to whom the Software is furnished to do so, subject to the\n\t\t// following conditions:\n\t\t//\n\t\t// The above copyright notice and this permission notice shall be included\n\t\t// in all copies or substantial portions of the Software.\n\t\t//\n\t\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar formatRegExp = /%[sdj%]/g;\n\t\texports.format = function(f) {\n\t\t  if (!isString(f)) {\n\t\t    var objects = [];\n\t\t    for (var i = 0; i < arguments.length; i++) {\n\t\t      objects.push(inspect(arguments[i]));\n\t\t    }\n\t\t    return objects.join(' ');\n\t\t  }\n  var i = 1;\n\t\t  var args = arguments;\n\t\t  var len = args.length;\n\t\t  var str = String(f).replace(formatRegExp, function(x) {\n\t\t    if (x === '%%') return '%';\n\t\t    if (i >= len) return x;\n\t\t    switch (x) {\n\t\t      case '%s': return String(args[i++]);\n\t\t      case '%d': return Number(args[i++]);\n\t\t      case '%j':\n\t\t        try {\n\t\t          return JSON.stringify(args[i++]);\n\t\t        } catch (_) {\n\t\t          return '[Circular]';\n\t\t        }\n\t\t      default:\n\t\t        return x;\n\t\t    }\n\t\t  });\n\t\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t\t    if (isNull(x) || !isObject(x)) {\n\t\t      str += ' ' + x;\n\t\t    } else {\n\t\t      str += ' ' + inspect(x);\n\t\t    }\n\t\t  }\n\t\t  return str;\n\t\t};\n\n// Mark that a method should not be used.\n\t\t// Returns a modified function which warns once by default.\n\t\t// If --no-deprecation is set, then it is a no-op.\n\t\texports.deprecate = function(fn, msg) {\n\t\t  // Allow for deprecating things in the process of starting up.\n\t\t  if (isUndefined(global.process)) {\n\t\t    return function() {\n\t\t      return exports.deprecate(fn, msg).apply(this, arguments);\n\t\t    };\n\t\t  }\n  if (process.noDeprecation === true) {\n\t\t    return fn;\n\t\t  }\n  var warned = false;\n\t\t  function deprecated() {\n\t\t    if (!warned) {\n\t\t      if (process.throwDeprecation) {\n\t\t        throw new Error(msg);\n\t\t      } else if (process.traceDeprecation) {\n\t\t        console.trace(msg);\n\t\t      } else {\n\t\t        console.error(msg);\n\t\t      }\n\t\t      warned = true;\n\t\t    }\n\t\t    return fn.apply(this, arguments);\n\t\t  }\n  return deprecated;\n\t\t};\n\nvar debugs = {};\n\t\tvar debugEnviron;\n\t\texports.debuglog = function(set) {\n\t\t  if (isUndefined(debugEnviron))\n\t\t    debugEnviron = process.env.NODE_DEBUG || '';\n\t\t  set = set.toUpperCase();\n\t\t  if (!debugs[set]) {\n\t\t    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n\t\t      var pid = process.pid;\n\t\t      debugs[set] = function() {\n\t\t        var msg = exports.format.apply(exports, arguments);\n\t\t        console.error('%s %d: %s', set, pid, msg);\n\t\t      };\n\t\t    } else {\n\t\t      debugs[set] = function() {};\n\t\t    }\n\t\t  }\n\t\t  return debugs[set];\n\t\t};\n\n/**\n\t\t * Echos the value of a value. Trys to print the value out\n\t\t * in the best way possible given the different types.\n\t\t *\n\t\t * @param {Object} obj The object to print out.\n\t\t * @param {Object} opts Optional options object that alters the output.",
            "line": " util.js:24155"
        },
        {
            "message": "Missing item type\nInherit the prototype methods from one constructor into another.\n\nThe Function.prototype.inherits from lang.js rewritten as a standalone\nfunction (not on Function.prototype). NOTE: If this file is to be loaded\nduring bootstrapping this function needs to be rewritten using some native\nfunctions as prototype setup using normal JavaScript does not work as\nexpected during bootstrapping (see mirror.js in r114903).",
            "line": " util.js:24713"
        },
        {
            "message": "Missing item type",
            "line": " util.js:24746"
        },
        {
            "message": "Missing item type\n// shim for using process in browser\nvar process = module.exports = {};\n\t\tvar queue = [];\n\t\tvar draining = false;\n\t\tvar currentQueue;\n\t\tvar queueIndex = -1;\nfunction cleanUpNextTick() {\n\t\t    draining = false;\n\t\t    if (currentQueue.length) {\n\t\t        queue = currentQueue.concat(queue);\n\t\t    } else {\n\t\t        queueIndex = -1;\n\t\t    }\n\t\t    if (queue.length) {\n\t\t        drainQueue();\n\t\t    }\n\t\t}\nfunction drainQueue() {\n\t\t    if (draining) {\n\t\t        return;\n\t\t    }\n\t\t    var timeout = setTimeout(cleanUpNextTick);\n\t\t    draining = true;\n    var len = queue.length;\n\t\t    while(len) {\n\t\t        currentQueue = queue;\n\t\t        queue = [];\n\t\t        while (++queueIndex < len) {\n\t\t            if (currentQueue) {\n\t\t                currentQueue[queueIndex].run();\n\t\t            }\n\t\t        }\n\t\t        queueIndex = -1;\n\t\t        len = queue.length;\n\t\t    }\n\t\t    currentQueue = null;\n\t\t    draining = false;\n\t\t    clearTimeout(timeout);\n\t\t}\nprocess.nextTick = function (fun) {\n\t\t    var args = new Array(arguments.length - 1);\n\t\t    if (arguments.length > 1) {\n\t\t        for (var i = 1; i < arguments.length; i++) {\n\t\t            args[i - 1] = arguments[i];\n\t\t        }\n\t\t    }\n\t\t    queue.push(new Item(fun, args));\n\t\t    if (queue.length === 1 && !draining) {\n\t\t        setTimeout(drainQueue, 0);\n\t\t    }\n\t\t};\n// v8 likes predictible objects\n\t\tfunction Item(fun, array) {\n\t\t    this.fun = fun;\n\t\t    this.array = array;\n\t\t}\n\t\tItem.prototype.run = function () {\n\t\t    this.fun.apply(null, this.array);\n\t\t};\n\t\tprocess.title = 'browser';\n\t\tprocess.browser = true;\n\t\tprocess.env = {};\n\t\tprocess.argv = [];\n\t\tprocess.version = ''; // empty string to avoid regexp issues\n\t\tprocess.versions = {};\nfunction noop() {}\nprocess.on = noop;\n\t\tprocess.addListener = noop;\n\t\tprocess.once = noop;\n\t\tprocess.off = noop;\n\t\tprocess.removeListener = noop;\n\t\tprocess.removeAllListeners = noop;\n\t\tprocess.emit = noop;\nprocess.binding = function (name) {\n\t\t    throw new Error('process.binding is not supported');\n\t\t};\nprocess.cwd = function () { return '/' };\n\t\tprocess.chdir = function (dir) {\n\t\t    throw new Error('process.chdir is not supported');\n\t\t};\n\t\tprocess.umask = function() { return 0; };\n\n\n\t/***/ },",
            "line": " util.js:24748"
        },
        {
            "message": "Missing item type\nmodule.exports = function isBuffer(arg) {\n\t\t  return arg && typeof arg === 'object'\n\t\t    && typeof arg.copy === 'function'\n\t\t    && typeof arg.fill === 'function'\n\t\t    && typeof arg.readUInt8 === 'function';\n\t\t}\n\n\t/***/ },",
            "line": " util.js:24845"
        },
        {
            "message": "Missing item type\nif (typeof Object.create === 'function') {\n\t\t  // implementation from standard node.js 'util' module\n\t\t  module.exports = function inherits(ctor, superCtor) {\n\t\t    ctor.super_ = superCtor\n\t\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t\t      constructor: {\n\t\t        value: ctor,\n\t\t        enumerable: false,\n\t\t        writable: true,\n\t\t        configurable: true\n\t\t      }\n\t\t    });\n\t\t  };\n\t\t} else {\n\t\t  // old school shim for old browsers\n\t\t  module.exports = function inherits(ctor, superCtor) {\n\t\t    ctor.super_ = superCtor\n\t\t    var TempCtor = function () {}\n\t\t    TempCtor.prototype = superCtor.prototype\n\t\t    ctor.prototype = new TempCtor()\n\t\t    ctor.prototype.constructor = ctor\n\t\t  }\n\t\t}\n\n\n\t/***/ },",
            "line": " util.js:24856"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a unit. Depending on the passed arguments, the function\n\t\t   * will create and return a new math.type.Unit object.\n\t\t   * When a matrix is provided, all elements will be converted to units.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.unit(unit : string)\n\t\t   *     math.unit(value : number, unit : string)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm\n\t\t   *    var b = math.unit('23 kg');    // returns Unit 23 kg\n\t\t   *    a.to('m');                     // returns Unit 0.05 m\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n\t\t   *\n\t\t   * @param {* | Array | Matrix} args   A number and unit.\n\t\t   * @return {Unit | Array | Matrix}    The created unit",
            "line": " util.js:24885"
        },
        {
            "message": "Missing item type",
            "line": " util.js:24950"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a user-defined unit and register it with the Unit type.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.createUnit({\n\t\t   *       baseUnit1: {\n\t\t   *         aliases: [string, ...]\n\t\t   *         prefixes: object\n\t\t   *       },\n\t\t   *       unit2: {\n\t\t   *         definition: string,\n\t\t   *         aliases: [string, ...]\n\t\t   *         prefixes: object,\n\t\t   *         offset: number\n\t\t   *       },\n\t\t   *       unit3: string    // Shortcut\n\t\t   *     })\n\t\t   *\n\t\t   *     // Another shortcut:\n\t\t   *     math.createUnit(string, unit : string, [object])\n\t\t   *\n\t\t   * Examples: \n\t\t   *\n\t\t   *     math.createUnit('foo');\n\t\t   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']});\n\t\t   *     math.createUnit('mph', '1 mile/hour');\n\t\t   *\n\t\t   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n\t\t   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n\t\t   * @param {Object} options   (optional) An object containing any of the following properties:\n\t\t   *     prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n\t\t   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n\t\t   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     unit\n\t\t   *\n\t\t   * @return {Unit} The new unit",
            "line": " util.js:24952"
        },
        {
            "message": "Missing item type",
            "line": " util.js:25041"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Split a unit in an array of units whose sum is equal to the original unit.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n\t\t   *\n\t\t   * Example:\n\t\t   *\n\t\t   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch']);\n\t\t   *     // [ 3 feet, 3.3700787401575 inch ]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     unit\n\t\t   *\n\t\t   * @param {Array} [parts] An array of strings or valueless units.\n\t\t   * @return {Array} An array of units.",
            "line": " util.js:25043"
        },
        {
            "message": "Missing item type",
            "line": " util.js:25084"
        },
        {
            "message": "Missing item type\nvar lazy = __webpack_require__(3).lazy;\n\nfunction factory (type, config, load, typed, math) {\n  // helper function to create a unit with a fixed prefix\n\t\t  function fixedUnit(str) {\n\t\t    var unit = type.Unit.parse(str);\n\t\t    unit.fixPrefix = true;\n\t\t    return unit;\n\t\t  }\n  // Source: http://www.wikiwand.com/en/Physical_constant\n  // Universal constants\n\t\t  lazy(math, 'speedOfLight',         function () {return fixedUnit('299792458 m s^-1')});\n\t\t  lazy(math, 'gravitationConstant',  function () {return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2')});\n\t\t  lazy(math, 'planckConstant',       function () {return fixedUnit('6.626069311e-34 J s')});\n\t\t  lazy(math, 'reducedPlanckConstant',function () {return fixedUnit('1.05457172647e-34 J s')});\n  // Electromagnetic constants\n\t\t  lazy(math, 'magneticConstant',          function () {return fixedUnit('1.2566370614e-6 N A^-2')});\n\t\t  lazy(math, 'electricConstant',          function () {return fixedUnit('8.854187817e-12 F m^-1')});\n\t\t  lazy(math, 'vacuumImpedance',           function () {return fixedUnit('376.730313461 ohm')});\n\t\t  lazy(math, 'coulomb',                   function () {return fixedUnit('8.9875517873681764e9 N m^2 C^-2')});\n\t\t  lazy(math, 'elementaryCharge',          function () {return fixedUnit('1.60217656535e-19 C')});\n\t\t  lazy(math, 'bohrMagneton',              function () {return fixedUnit('9.2740096820e-24 J T^-1')});\n\t\t  lazy(math, 'conductanceQuantum',        function () {return fixedUnit('7.748091734625e-5 S')});\n\t\t  lazy(math, 'inverseConductanceQuantum', function () {return fixedUnit('12906.403721742 ohm')});\n\t\t  lazy(math, 'magneticFluxQuantum',       function () {return fixedUnit('2.06783375846e-15 Wb')});\n\t\t  lazy(math, 'nuclearMagneton',           function () {return fixedUnit('5.0507835311e-27 J T^-1')});\n\t\t  lazy(math, 'klitzing',                  function () {return fixedUnit('25812.807443484 ohm')});\n\t\t  //lazy(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed\n  // Atomic and nuclear constants\n\t\t  lazy(math, 'bohrRadius',              function () {return fixedUnit('5.291772109217e-11 m')});\n\t\t  lazy(math, 'classicalElectronRadius', function () {return fixedUnit('2.817940326727e-15 m')});\n\t\t  lazy(math, 'electronMass',            function () {return fixedUnit('9.1093829140e-31 kg')});\n\t\t  lazy(math, 'fermiCoupling',           function () {return fixedUnit('1.1663645e-5 GeV^-2')});\n\t\t  lazy(math, 'fineStructure',           function () {return 7.297352569824e-3});\n\t\t  lazy(math, 'hartreeEnergy',           function () {return fixedUnit('4.3597443419e-18 J')});\n\t\t  lazy(math, 'protonMass',              function () {return fixedUnit('1.67262177774e-27 kg')});\n\t\t  lazy(math, 'deuteronMass',            function () {return fixedUnit('3.3435830926e-27 kg')});\n\t\t  lazy(math, 'neutronMass',             function () {return fixedUnit('1.6749271613e-27 kg')});\n\t\t  lazy(math, 'quantumOfCirculation',    function () {return fixedUnit('3.636947552024e-4 m^2 s^-1')});\n\t\t  lazy(math, 'rydberg',                 function () {return fixedUnit('10973731.56853955 m^-1')});\n\t\t  lazy(math, 'thomsonCrossSection',     function () {return fixedUnit('6.65245873413e-29 m^2')});\n\t\t  lazy(math, 'weakMixingAngle',         function () {return 0.222321});\n\t\t  lazy(math, 'efimovFactor',            function () {return 22.7});\n  // Physico-chemical constants\n\t\t  lazy(math, 'atomicMass',          function () {return fixedUnit('1.66053892173e-27 kg')});\n\t\t  lazy(math, 'avogadro',            function () {return fixedUnit('6.0221412927e23 mol^-1')});\n\t\t  lazy(math, 'boltzmann',           function () {return fixedUnit('1.380648813e-23 J K^-1')});\n\t\t  lazy(math, 'faraday',             function () {return fixedUnit('96485.336521 C mol^-1')});\n\t\t  lazy(math, 'firstRadiation',      function () {return fixedUnit('3.7417715317e-16 W m^2')});\n\t\t  // lazy(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance\n\t\t  lazy(math, 'loschmidt',           function () {return fixedUnit('2.686780524e25 m^-3')});\n\t\t  lazy(math, 'gasConstant',         function () {return fixedUnit('8.314462175 J K^-1 mol^-1')});\n\t\t  lazy(math, 'molarPlanckConstant', function () {return fixedUnit('3.990312717628e-10 J s mol^-1')});\n\t\t  lazy(math, 'molarVolume',         function () {return fixedUnit('2.241396820e-10 m^3 mol^-1')});\n\t\t  lazy(math, 'sackurTetrode',       function () {return -1.164870823});\n\t\t  lazy(math, 'secondRadiation',     function () {return fixedUnit('1.438777013e-2 m K')});\n\t\t  lazy(math, 'stefanBoltzmann',     function () {return fixedUnit('5.67037321e-8 W m^-2 K^-4')});\n\t\t  lazy(math, 'wienDisplacement',    function () {return fixedUnit('2.897772126e-3 m K')});\n  // Adopted values\n\t\t  lazy(math, 'molarMass',         function () {return fixedUnit('1e-3 kg mol^-1')});\n\t\t  lazy(math, 'molarMassC12',      function () {return fixedUnit('1.2e-2 kg mol^-1')});\n\t\t  lazy(math, 'gravity',           function () {return fixedUnit('9.80665 m s^-2')});\n\t\t  // atm is defined in Unit.js\n  // Natural units\n\t\t  lazy(math, 'planckLength',      function () {return fixedUnit('1.61619997e-35 m')});\n\t\t  lazy(math, 'planckMass',        function () {return fixedUnit('2.1765113e-8 kg')});\n\t\t  lazy(math, 'planckTime',        function () {return fixedUnit('5.3910632e-44 s')});\n\t\t  lazy(math, 'planckCharge',      function () {return fixedUnit('1.87554595641e-18 C')});\n\t\t  lazy(math, 'planckTemperature', function () {return fixedUnit('1.41683385e+32 K')});\n}\nexports.factory = factory;\n\t\texports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\n\t\texports.math = true;   // request access to the math namespace\n\n\n\t/***/ },",
            "line": " util.js:25086"
        },
        {
            "message": "Missing item type\n'use strict';\nvar object = __webpack_require__(3);\n\t\tvar bigConstants = __webpack_require__(76);\nfunction factory (type, config, load, typed, math) {\n\t\t  // listen for changed in the configuration, automatically reload\n\t\t  // constants when needed\n\t\t  math.on('config', function (curr, prev) {\n\t\t    if (curr.number !== prev.number) {\n\t\t      factory(type, config, load, typed, math);\n\t\t    }\n\t\t  });\n  math['true']     = true;\n\t\t  math['false']    = false;\n\t\t  math['null']     = null;\n\t\t  math['uninitialized'] = __webpack_require__(40).UNINITIALIZED;\n  if (config.number === 'BigNumber') {\n\t\t    math['Infinity'] = new type.BigNumber(Infinity);\n\t\t    math['NaN']      = new type.BigNumber(NaN);\n    object.lazy(math, 'pi',  function () {return bigConstants.pi(type.BigNumber)});\n\t\t    object.lazy(math, 'tau', function () {return bigConstants.tau(type.BigNumber)});\n\t\t    object.lazy(math, 'e',   function () {return bigConstants.e(type.BigNumber)});\n\t\t    object.lazy(math, 'phi', function () {return bigConstants.phi(type.BigNumber)}); // golden ratio, (1+sqrt(5))/2\n    // uppercase constants (for compatibility with built-in Math)\n\t\t    object.lazy(math, 'E',       function () {return math.e;});\n\t\t    object.lazy(math, 'LN2',     function () {return new type.BigNumber(2).ln();});\n\t\t    object.lazy(math, 'LN10',    function () {return new type.BigNumber(10).ln()});\n\t\t    object.lazy(math, 'LOG2E',   function () {return new type.BigNumber(1).div(new type.BigNumber(2).ln());});\n\t\t    object.lazy(math, 'LOG10E',  function () {return new type.BigNumber(1).div(new type.BigNumber(10).ln())});\n\t\t    object.lazy(math, 'PI',      function () {return math.pi});\n\t\t    object.lazy(math, 'SQRT1_2', function () {return new type.BigNumber('0.5').sqrt()});\n\t\t    object.lazy(math, 'SQRT2',   function () {return new type.BigNumber(2).sqrt()});\n\t\t  }\n\t\t  else {\n\t\t    math['Infinity'] = Infinity;\n\t\t    math['NaN']      = NaN;\n    math.pi  = Math.PI;\n\t\t    math.tau = Math.PI * 2;\n\t\t    math.e   = Math.E;\n\t\t    math.phi = 1.61803398874989484820458683436563811772030917980576286213545; // golden ratio, (1+sqrt(5))/2\n    // uppercase constants (for compatibility with built-in Math)\n\t\t    math.E           = math.e;\n\t\t    math.LN2         = Math.LN2;\n\t\t    math.LN10        = Math.LN10;\n\t\t    math.LOG2E       = Math.LOG2E;\n\t\t    math.LOG10E      = Math.LOG10E;\n\t\t    math.PI          = math.pi;\n\t\t    math.SQRT1_2     = Math.SQRT1_2;\n\t\t    math.SQRT2       = Math.SQRT2;\n\t\t  }\n  // complex i\n\t\t  math.i = type.Complex.I;\n  // meta information\n\t\t  math.version = __webpack_require__(101);\n\t\t}\nexports.factory = factory;\n\t\texports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\n\t\texports.math = true;   // request access to the math namespace\n\n\t/***/ },",
            "line": " util.js:25176"
        },
        {
            "message": "Missing item type\nmodule.exports = '3.8.0';\n\t\t// Note: This file is automatically generated when building math.js.\n\t\t// Changes made in this file will be overwritten.\n\n\n\t/***/ },",
            "line": " util.js:25249"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(103),\n\t\t  __webpack_require__(280),\n\t\t  __webpack_require__(309),\n\t\t  __webpack_require__(311),\n  __webpack_require__(337),\n\t\t  __webpack_require__(282),\n\t\t  __webpack_require__(308)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:25258"
        },
        {
            "message": "Missing item type\nfunction factory (construction, config, load, typed) {\n\t\t  var docs = {};\n\n  // construction functions\n\t\t  docs.bignumber = __webpack_require__(104);\n\t\t  docs['boolean'] = __webpack_require__(105);\n\t\t  docs.complex = __webpack_require__(106);\n\t\t  docs.createUnit = __webpack_require__(107);\n\t\t  docs.fraction = __webpack_require__(108);\n\t\t  docs.index = __webpack_require__(109);\n\t\t  docs.matrix = __webpack_require__(110);\n\t\t  docs.number = __webpack_require__(111);\n\t\t  docs.sparse = __webpack_require__(112);\n\t\t  docs.splitUnit = __webpack_require__(113);\n\t\t  docs.string = __webpack_require__(114);\n\t\t  docs.unit = __webpack_require__(115);\n  // constants\n\t\t  docs.e = __webpack_require__(116);\n\t\t  docs.E = __webpack_require__(116);\n\t\t  docs['false'] = __webpack_require__(117);\n\t\t  docs.i = __webpack_require__(118);\n\t\t  docs['Infinity'] = __webpack_require__(119);\n\t\t  docs.LN2 = __webpack_require__(120);\n\t\t  docs.LN10 = __webpack_require__(121);\n\t\t  docs.LOG2E = __webpack_require__(122);\n\t\t  docs.LOG10E = __webpack_require__(123);\n\t\t  docs.NaN = __webpack_require__(124);\n\t\t  docs['null'] = __webpack_require__(125);\n\t\t  docs.pi = __webpack_require__(126);\n\t\t  docs.PI = __webpack_require__(126);\n\t\t  docs.phi = __webpack_require__(127);\n\t\t  docs.SQRT1_2 = __webpack_require__(128);\n\t\t  docs.SQRT2 = __webpack_require__(129);\n\t\t  docs.tau = __webpack_require__(130);\n\t\t  docs['true'] = __webpack_require__(131);\n\t\t  docs.version = __webpack_require__(132);\n  // physical constants\n\t\t  // TODO: more detailed docs for physical constants\n\t\t  docs.speedOfLight = {description: 'Speed of light in vacuum', examples: ['speedOfLight']};\n\t\t  docs.gravitationConstant = {description: 'Newtonian constant of gravitation', examples: ['gravitationConstant']};\n\t\t  docs.planckConstant = {description: 'Planck constant', examples: ['planckConstant']};\n\t\t  docs.reducedPlanckConstant = {description: 'Reduced Planck constant', examples: ['reducedPlanckConstant']};\n  docs.magneticConstant = {description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant']};\n\t\t  docs.electricConstant = {description: 'Electric constant (vacuum permeability)', examples: ['electricConstant']};\n\t\t  docs.vacuumImpedance = {description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance']};\n\t\t  docs.coulomb = {description: 'Coulomb\\'s constant', examples: ['coulomb']};\n\t\t  docs.elementaryCharge = {description: 'Elementary charge', examples: ['elementaryCharge']};\n\t\t  docs.bohrMagneton = {description: 'Borh magneton', examples: ['bohrMagneton']};\n\t\t  docs.conductanceQuantum = {description: 'Conductance quantum', examples: ['conductanceQuantum']};\n\t\t  docs.inverseConductanceQuantum = {description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']};\n\t\t  //docs.josephson = {description: 'Josephson constant', examples: ['josephson']};\n\t\t  docs.magneticFluxQuantum = {description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum']};\n\t\t  docs.nuclearMagneton = {description: 'Nuclear magneton', examples: ['nuclearMagneton']};\n\t\t  docs.klitzing = {description: 'Von Klitzing constant', examples: ['klitzing']};\n  docs.bohrRadius = {description: 'Borh radius', examples: ['bohrRadius']};\n\t\t  docs.classicalElectronRadius = {description: 'Classical electron radius', examples: ['classicalElectronRadius']};\n\t\t  docs.electronMass = {description: 'Electron mass', examples: ['electronMass']};\n\t\t  docs.fermiCoupling = {description: 'Fermi coupling constant', examples: ['fermiCoupling']};\n\t\t  docs.fineStructure = {description: 'Fine-structure constant', examples: ['fineStructure']};\n\t\t  docs.hartreeEnergy = {description: 'Hartree energy', examples: ['hartreeEnergy']};\n\t\t  docs.protonMass = {description: 'Proton mass', examples: ['protonMass']};\n\t\t  docs.deuteronMass = {description: 'Deuteron Mass', examples: ['deuteronMass']};\n\t\t  docs.neutronMass = {description: 'Neutron mass', examples: ['neutronMass']};\n\t\t  docs.quantumOfCirculation = {description: 'Quantum of circulation', examples: ['quantumOfCirculation']};\n\t\t  docs.rydberg = {description: 'Rydberg constant', examples: ['rydberg']};\n\t\t  docs.thomsonCrossSection = {description: 'Thomson cross section', examples: ['thomsonCrossSection']};\n\t\t  docs.weakMixingAngle = {description: 'Weak mixing angle', examples: ['weakMixingAngle']};\n\t\t  docs.efimovFactor = {description: 'Efimov factor', examples: ['efimovFactor']};\n  docs.atomicMass = {description: 'Atomic mass constant', examples: ['atomicMass']};\n\t\t  docs.avogadro = {description: 'Avogadro\\'s number', examples: ['avogadro']};\n\t\t  docs.boltzmann = {description: 'Boltzmann constant', examples: ['boltzmann']};\n\t\t  docs.faraday = {description: 'Faraday constant', examples: ['faraday']};\n\t\t  docs.firstRadiation = {description: 'First radiation constant', examples: ['firstRadiation']};\n\t\t  docs.loschmidt = {description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt']};\n\t\t  docs.gasConstant = {description: 'Gas constant', examples: ['gasConstant']};\n\t\t  docs.molarPlanckConstant = {description: 'Molar Planck constant', examples: ['molarPlanckConstant']};\n\t\t  docs.molarVolume = {description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume']};\n\t\t  docs.sackurTetrode = {description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode']};\n\t\t  docs.secondRadiation = {description: 'Second radiation constant', examples: ['secondRadiation']};\n\t\t  docs.stefanBoltzmann = {description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann']};\n\t\t  docs.wienDisplacement = {description: 'Wien displacement law constant', examples: ['wienDisplacement']};\n\t\t  //docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};\n  docs.molarMass = {description: 'Molar mass constant', examples: ['molarMass']};\n\t\t  docs.molarMassC12 = {description: 'Molar mass constant of carbon-12', examples: ['molarMassC12']};\n\t\t  docs.gravity = {description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity']};\n  docs.planckLength = {description: 'Planck length', examples: ['planckLength']};\n\t\t  docs.planckMass = {description: 'Planck mass', examples: ['planckMass']};\n\t\t  docs.planckTime = {description: 'Planck time', examples: ['planckTime']};\n\t\t  docs.planckCharge = {description: 'Planck charge', examples: ['planckCharge']};\n\t\t  docs.planckTemperature = {description: 'Planck temperature', examples: ['planckTemperature']};\n  // functions - algebra\n\t\t  docs.lsolve = __webpack_require__(133);\n\t\t  docs.lup = __webpack_require__(134);\n\t\t  docs.lusolve = __webpack_require__(135);\n\t\t  docs.slu = __webpack_require__(136);\n\t\t  docs.usolve = __webpack_require__(137);\n  // functions - arithmetic\n\t\t  docs.abs = __webpack_require__(138);\n\t\t  docs.add = __webpack_require__(139);\n\t\t  docs.cbrt = __webpack_require__(140);\n\t\t  docs.ceil = __webpack_require__(141);\n\t\t  docs.cube = __webpack_require__(142);\n\t\t  docs.divide = __webpack_require__(143);\n\t\t  docs.dotDivide = __webpack_require__(144);\n\t\t  docs.dotMultiply = __webpack_require__(145);\n\t\t  docs.dotPow = __webpack_require__(146);\n\t\t  docs.exp = __webpack_require__(147);\n\t\t  docs.fix = __webpack_require__(148);\n\t\t  docs.floor = __webpack_require__(149);\n\t\t  docs.gcd = __webpack_require__(150);\n\t\t  docs.hypot = __webpack_require__(151);\n\t\t  docs.lcm = __webpack_require__(152);\n\t\t  docs.log = __webpack_require__(153);\n\t\t  docs.log10 = __webpack_require__(154);\n\t\t  docs.mod = __webpack_require__(155);\n\t\t  docs.multiply = __webpack_require__(156);\n\t\t  docs.norm = __webpack_require__(157);\n\t\t  docs.nthRoot = __webpack_require__(158);\n\t\t  docs.pow = __webpack_require__(159);\n\t\t  docs.round = __webpack_require__(160);\n\t\t  docs.sign = __webpack_require__(161);\n\t\t  docs.sqrt = __webpack_require__(162);\n\t\t  docs.square = __webpack_require__(163);\n\t\t  docs.subtract = __webpack_require__(164);\n\t\t  docs.unaryMinus = __webpack_require__(165);\n\t\t  docs.unaryPlus = __webpack_require__(166);\n\t\t  docs.xgcd = __webpack_require__(167);\n  // functions - bitwise\n\t\t  docs.bitAnd = __webpack_require__(168);\n\t\t  docs.bitNot = __webpack_require__(169);\n\t\t  docs.bitOr = __webpack_require__(170);\n\t\t  docs.bitXor = __webpack_require__(171);\n\t\t  docs.leftShift = __webpack_require__(172);\n\t\t  docs.rightArithShift = __webpack_require__(173);\n\t\t  docs.rightLogShift = __webpack_require__(174);\n  // functions - combinatorics\n\t\t  docs.bellNumbers = __webpack_require__(175);\n\t\t  docs.catalan = __webpack_require__(176);\n\t\t  docs.composition = __webpack_require__(177);\n\t\t  docs.stirlingS2 = __webpack_require__(178);\n  // functions - core\n\t\t  docs['config'] =  __webpack_require__(179);\n\t\t  docs['import'] =  __webpack_require__(180);\n\t\t  docs['typed'] =  __webpack_require__(181);\n  // functions - complex\n\t\t  docs.arg = __webpack_require__(182);\n\t\t  docs.conj = __webpack_require__(183);\n\t\t  docs.re = __webpack_require__(184);\n\t\t  docs.im = __webpack_require__(185);\n  // functions - expression\n\t\t  docs['eval'] =  __webpack_require__(186);\n\t\t  docs.help =  __webpack_require__(187);\n  // functions - geometry\n\t\t  docs.distance = __webpack_require__(188);\n\t\t  docs.intersect = __webpack_require__(189);\n  // functions - logical\n\t\t  docs['and'] = __webpack_require__(190);\n\t\t  docs['not'] = __webpack_require__(191);\n\t\t  docs['or'] = __webpack_require__(192);\n\t\t  docs['xor'] = __webpack_require__(193);\n  // functions - matrix\n\t\t  docs['concat'] = __webpack_require__(194);\n\t\t  docs.cross = __webpack_require__(195);\n\t\t  docs.det = __webpack_require__(196);\n\t\t  docs.diag = __webpack_require__(197);\n\t\t  docs.dot = __webpack_require__(198);\n\t\t  docs.eye = __webpack_require__(199);\n\t\t  docs.filter =  __webpack_require__(200);\n\t\t  docs.flatten = __webpack_require__(201);\n\t\t  docs.forEach =  __webpack_require__(202);\n\t\t  docs.inv = __webpack_require__(203);\n\t\t  docs.map =  __webpack_require__(204);\n\t\t  docs.ones = __webpack_require__(205);\n\t\t  docs.partitionSelect =  __webpack_require__(206);\n\t\t  docs.range = __webpack_require__(207);\n\t\t  docs.resize = __webpack_require__(208);\n\t\t  docs.size = __webpack_require__(209);\n\t\t  docs.sort =  __webpack_require__(210);\n\t\t  docs.squeeze = __webpack_require__(211);\n\t\t  docs.subset = __webpack_require__(212);\n\t\t  docs.trace = __webpack_require__(213);\n\t\t  docs.transpose = __webpack_require__(214);\n\t\t  docs.zeros = __webpack_require__(215);\n  // functions - probability\n\t\t  docs.combinations = __webpack_require__(216);\n\t\t  //docs.distribution = require('./function/probability/distribution');\n\t\t  docs.factorial = __webpack_require__(217);\n\t\t  docs.gamma = __webpack_require__(218);\n\t\t  docs.kldivergence = __webpack_require__(219);\n\t\t  docs.multinomial = __webpack_require__(220);\n\t\t  docs.permutations = __webpack_require__(221);\n\t\t  docs.pickRandom = __webpack_require__(222);\n\t\t  docs.random = __webpack_require__(223);\n\t\t  docs.randomInt = __webpack_require__(224);\n  // functions - relational\n\t\t  docs.compare = __webpack_require__(225);\n\t\t  docs.deepEqual = __webpack_require__(226);\n\t\t  docs['equal'] = __webpack_require__(227);\n\t\t  docs.larger = __webpack_require__(228);\n\t\t  docs.largerEq = __webpack_require__(229);\n\t\t  docs.smaller = __webpack_require__(230);\n\t\t  docs.smallerEq = __webpack_require__(231);\n\t\t  docs.unequal = __webpack_require__(232);\n  // functions - special\n\t\t  docs.erf = __webpack_require__(233);\n  // functions - statistics\n\t\t  docs.max = __webpack_require__(234);\n\t\t  docs.mean = __webpack_require__(235);\n\t\t  docs.median = __webpack_require__(236);\n\t\t  docs.min = __webpack_require__(237);\n\t\t  docs.mode = __webpack_require__(238);\n\t\t  docs.prod = __webpack_require__(239);\n\t\t  docs.quantileSeq = __webpack_require__(240);\n\t\t  docs.std = __webpack_require__(241);\n\t\t  docs.sum = __webpack_require__(242);\n\t\t  docs['var'] = __webpack_require__(243);\n  // functions - trigonometry\n\t\t  docs.acos = __webpack_require__(244);\n\t\t  docs.acosh = __webpack_require__(245);\n\t\t  docs.acot = __webpack_require__(246);\n\t\t  docs.acoth = __webpack_require__(247);\n\t\t  docs.acsc = __webpack_require__(248);\n\t\t  docs.acsch = __webpack_require__(249);\n\t\t  docs.asec = __webpack_require__(250);\n\t\t  docs.asech = __webpack_require__(251);\n\t\t  docs.asin = __webpack_require__(252);\n\t\t  docs.asinh = __webpack_require__(253);\n\t\t  docs.atan = __webpack_require__(254);\n\t\t  docs.atanh = __webpack_require__(255);\n\t\t  docs.atan2 = __webpack_require__(256);\n\t\t  docs.cos = __webpack_require__(257);\n\t\t  docs.cosh = __webpack_require__(258);\n\t\t  docs.cot = __webpack_require__(259);\n\t\t  docs.coth = __webpack_require__(260);\n\t\t  docs.csc = __webpack_require__(261);\n\t\t  docs.csch = __webpack_require__(262);\n\t\t  docs.sec = __webpack_require__(263);\n\t\t  docs.sech = __webpack_require__(264);\n\t\t  docs.sin = __webpack_require__(265);\n\t\t  docs.sinh = __webpack_require__(266);\n\t\t  docs.tan = __webpack_require__(267);\n\t\t  docs.tanh = __webpack_require__(268);\n  // functions - units\n\t\t  docs.to = __webpack_require__(269);\n  // functions - utils\n\t\t  docs.clone = __webpack_require__(270);\n\t\t  docs.format = __webpack_require__(271);\n\t\t  docs.isNaN = __webpack_require__(272);\n\t\t  docs.isInteger = __webpack_require__(273);\n\t\t  docs.isNegative = __webpack_require__(274);\n\t\t  docs.isNumeric = __webpack_require__(275);\n\t\t  docs.isPositive = __webpack_require__(276);\n\t\t  docs.isPrime = __webpack_require__(277);\n\t\t  docs.isZero = __webpack_require__(278);\n\t\t  // docs.print = require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.\n\t\t  docs['typeof'] =  __webpack_require__(279);\n  return docs;\n\t\t}\nexports.name = 'docs';\n\t\texports.path = 'expression';\n\t\texports.factory = factory;\n\n\n\t/***/ },",
            "line": " util.js:25274"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'bignumber',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'bignumber(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a big number from a number or string.',\n\t\t  'examples': [\n\t\t    '0.1 + 0.2',\n\t\t    'bignumber(0.1) + bignumber(0.2)',\n\t\t    'bignumber(\"7.2\")',\n\t\t    'bignumber(\"7.2e500\")',\n\t\t    'bignumber([0.1, 0.2, 0.3])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25568"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'boolean',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'x',\n\t\t    'boolean(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Convert a string or number into a boolean.',\n\t\t  'examples': [\n\t\t    'boolean(0)',\n\t\t    'boolean(1)',\n\t\t    'boolean(3)',\n\t\t    'boolean(\"true\")',\n\t\t    'boolean(\"false\")',\n\t\t    'boolean([1, 0, 1, 1])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25593"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'complex',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'complex()',\n\t\t    'complex(re, im)',\n\t\t    'complex(string)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a complex number.',\n\t\t  'examples': [\n\t\t    'complex()',\n\t\t    'complex(2, 3)',\n\t\t    'complex(\"7 - 2i\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25620"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'createUnit',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'createUnit(definitions)',\n\t\t    'createUnit(name, definition)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a user-defined unit and register it with the Unit type.',\n\t\t  'examples': [\n\t\t    'createUnit(\"foo\")',\n\t\t    'createUnit(\"knot\", {definition: \"0.514444444 m/s\", aliases: [\"knots\", \"kt\", \"kts\"]})',\n\t\t    'createUnit(\"mph\", \"1 mile/hour\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'unit', 'splitUnit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25645"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'fraction',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'fraction(num)',\n\t\t    'fraction(num,den)'\n\t\t  ],\n\t\t  'description':\n\t\t    'Create a fraction from a number or from a numerator and denominator.',\n\t\t  'examples': [\n\t\t    'fraction(0.125)',\n\t\t    'fraction(1, 3) + fraction(2, 5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25669"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'index',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    '[start]',\n\t\t    '[start:end]',\n\t\t    '[start:step:end]',\n\t\t    '[start1, start 2, ...]',\n\t\t    '[start1:end1, start2:end2, ...]',\n\t\t    '[start1:step1:end1, start2:step2:end2, ...]'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create an index to get or replace a subset of a matrix',\n\t\t  'examples': [\n\t\t    '[]',\n\t\t    '[1, 2, 3]',\n\t\t    'A = [1, 2, 3; 4, 5, 6]',\n\t\t    'A[1, :]',\n\t\t    'A[1, 2] = 50',\n\t\t    'A[0:2, 0:2] = ones(2, 2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25692"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'matrix',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    '[]',\n\t\t    '[a1, b1, ...; a2, b2, ...]',\n\t\t    'matrix()',\n\t\t    'matrix(\"dense\")',\n\t\t    'matrix([...])'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a matrix.',\n\t\t  'examples': [\n\t\t    '[]',\n\t\t    '[1, 2, 3]',\n\t\t    '[1, 2, 3; 4, 5, 6]',\n\t\t    'matrix()',\n\t\t    'matrix([3, 4])',\n\t\t    'matrix([3, 4; 5, 6], \"sparse\")',\n\t\t    'matrix([3, 4; 5, 6], \"sparse\", \"number\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25723"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'number',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'x',\n\t\t    'number(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a number or convert a string or boolean into a number.',\n\t\t  'examples': [\n\t\t    '2',\n\t\t    '2e3',\n\t\t    '4.05',\n\t\t    'number(2)',\n\t\t    'number(\"7.2\")',\n\t\t    'number(true)',\n\t\t    'number([true, false, true, true])',\n\t\t    'number(\"52cm\", \"m\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25754"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'sparse',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'sparse()',\n\t\t    'sparse([a1, b1, ...; a1, b2, ...])',\n\t\t    'sparse([a1, b1, ...; a1, b2, ...], \"number\")'\n\t\t  ],\n\t\t  'description':\n\t\t  'Create a sparse matrix.',\n\t\t  'examples': [\n\t\t    'sparse()',\n\t\t    'sparse([3, 4; 5, 6])',\n\t\t    'sparse([3, 0; 5, 0], \"number\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25783"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'splitUnit',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'splitUnit(unit: Unit, parts: Unit[])'\n\t\t  ],\n\t\t  'description':\n\t\t      'Split a unit in an array of units whose sum is equal to the original unit.',\n\t\t  'examples': [\n\t\t    'splitUnit(1 m, [\"feet\", \"inch\"])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'unit', 'createUnit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25808"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'string',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    '\"text\"',\n\t\t    'string(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a string or convert a value to a string',\n\t\t  'examples': [\n\t\t    '\"Hello World!\"',\n\t\t    'string(4.2)',\n\t\t    'string(3 + 2i)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25829"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'unit',\n\t\t  'category': 'Construction',\n\t\t  'syntax': [\n\t\t    'value unit',\n\t\t    'unit(value, unit)',\n\t\t    'unit(string)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a unit.',\n\t\t  'examples': [\n\t\t    '5.5 mm',\n\t\t    '3 inch',\n\t\t    'unit(7.1, \"kilogram\")',\n\t\t    'unit(\"23 deg\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25853"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'e',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'e'\n\t\t  ],\n\t\t  'description': 'Euler\\'s number, the base of the natural logarithm. Approximately equal to 2.71828',\n\t\t  'examples': [\n\t\t    'e',\n\t\t    'e ^ 2',\n\t\t    'exp(2)',\n\t\t    'log(e)'\n\t\t  ],\n\t\t  'seealso': ['exp']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25879"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'false',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'false'\n\t\t  ],\n\t\t  'description': 'Boolean value false',\n\t\t  'examples': [\n\t\t    'false'\n\t\t  ],\n\t\t  'seealso': ['true']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25900"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'i',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'i'\n\t\t  ],\n\t\t  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',\n\t\t  'examples': [\n\t\t    'i',\n\t\t    'i * i',\n\t\t    'sqrt(-1)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25918"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'Infinity',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'Infinity'\n\t\t  ],\n\t\t  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',\n\t\t  'examples': [\n\t\t    'Infinity',\n\t\t    '1 / 0'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25938"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'LN2',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'LN2'\n\t\t  ],\n\t\t  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',\n\t\t  'examples': [\n\t\t    'LN2',\n\t\t    'log(2)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25957"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'LN10',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'LN10'\n\t\t  ],\n\t\t  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',\n\t\t  'examples': [\n\t\t    'LN10',\n\t\t    'log(10)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25976"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'LOG2E',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'LOG2E'\n\t\t  ],\n\t\t  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',\n\t\t  'examples': [\n\t\t    'LOG2E',\n\t\t    'log(e, 2)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:25995"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'LOG10E',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'LOG10E'\n\t\t  ],\n\t\t  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',\n\t\t  'examples': [\n\t\t    'LOG10E',\n\t\t    'log(e, 10)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26014"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'NaN',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'NaN'\n\t\t  ],\n\t\t  'description': 'Not a number',\n\t\t  'examples': [\n\t\t    'NaN',\n\t\t    '0 / 0'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26033"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'null',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'null'\n\t\t  ],\n\t\t  'description': 'Value null',\n\t\t  'examples': [\n\t\t    'null'\n\t\t  ],\n\t\t  'seealso': ['true', 'false']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26052"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'pi',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'pi'\n\t\t  ],\n\t\t  'description': 'The number pi is a mathematical constant that is the ratio of a circle\\'s circumference to its diameter, and is approximately equal to 3.14159',\n\t\t  'examples': [\n\t\t    'pi',\n\t\t    'sin(pi/2)'\n\t\t  ],\n\t\t  'seealso': ['tau']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26070"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'phi',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'phi'\n\t\t  ],\n\t\t  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',\n\t\t  'examples': [\n\t\t    'tau'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26089"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'SQRT1_2',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'SQRT1_2'\n\t\t  ],\n\t\t  'description': 'Returns the square root of 1/2, approximately equal to 0.707',\n\t\t  'examples': [\n\t\t    'SQRT1_2',\n\t\t    'sqrt(1/2)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26107"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'SQRT2',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'SQRT2'\n\t\t  ],\n\t\t  'description': 'Returns the square root of 2, approximately equal to 1.414',\n\t\t  'examples': [\n\t\t    'SQRT2',\n\t\t    'sqrt(2)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26126"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'tau',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'tau'\n\t\t  ],\n\t\t  'description': 'Tau is the ratio constant of a circle\\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',\n\t\t  'examples': [\n\t\t    'tau',\n\t\t    '2 * pi'\n\t\t  ],\n\t\t  'seealso': ['pi']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26145"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'true',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'true'\n\t\t  ],\n\t\t  'description': 'Boolean value true',\n\t\t  'examples': [\n\t\t    'true'\n\t\t  ],\n\t\t  'seealso': ['false']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26164"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'version',\n\t\t  'category': 'Constants',\n\t\t  'syntax': [\n\t\t    'version'\n\t\t  ],\n\t\t  'description': 'A string with the version number of math.js',\n\t\t  'examples': [\n\t\t    'version'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26182"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'lsolve',\n\t\t  'category': 'Algebra',\n\t\t  'syntax': [\n\t\t    'x=lsolve(L, b)'\n\t\t  ],\n\t\t  'description':\n\t\t  'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',\n\t\t  'examples': [\n\t\t    'a = [-2, 3; 2, 1]',\n\t\t    'b = [11, 9]',\n\t\t    'x = lsolve(a, b)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'lup', 'lusolve', 'usolve', 'matrix', 'sparse'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26200"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'lup',\n\t\t  'category': 'Algebra',\n\t\t  'syntax': [\n\t\t    'lup(m)'\n\t\t  ],\n\t\t  'description':\n\t\t  'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',\n\t\t  'examples': [\n\t\t    'lup([[2, 1], [1, 4]])',\n\t\t    'lup(matrix([[2, 1], [1, 4]]))',\n\t\t    'lup(sparse([[2, 1], [1, 4]]))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26223"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'lusolve',\n\t\t  'category': 'Algebra',\n\t\t  'syntax': [\n\t\t    'x=lusolve(A, b)',\n\t\t    'x=lusolve(lu, b)'\n\t\t  ],\n\t\t  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',\n\t\t  'examples': [\n\t\t    'a = [-2, 3; 2, 1]',\n\t\t    'b = [11, 9]',\n\t\t    'x = lusolve(a, b)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26246"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'slu',\n\t\t  'category': 'Algebra',\n\t\t  'syntax': [\n\t\t    'slu(A, order, threshold)'\n\t\t  ],\n\t\t  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',\n\t\t  'examples': [\n\t\t    'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26269"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'usolve',\n\t\t  'category': 'Algebra',\n\t\t  'syntax': [\n\t\t    'x=usolve(U, b)'\n\t\t  ],\n\t\t  'description':\n\t\t  'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',\n\t\t  'examples': [\n\t\t    'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26289"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'abs',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'abs(x)'\n\t\t  ],\n\t\t  'description': 'Compute the absolute value.',\n\t\t  'examples': [\n\t\t    'abs(3.5)',\n\t\t    'abs(-4.2)'\n\t\t  ],\n\t\t  'seealso': ['sign']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26310"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'add',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x + y',\n\t\t    'add(x, y)'\n\t\t  ],\n\t\t  'description': 'Add two values.',\n\t\t  'examples': [\n\t\t    'a = 2.1 + 3.6',\n\t\t    'a - 3.6',\n\t\t    '3 + 2i',\n\t\t    '3 cm + 2 inch',\n\t\t    '\"2.3\" + \"4\"'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'subtract'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26329"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'cbrt',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'cbrt(x)',\n\t\t    'cbrt(x, allRoots)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',\n\t\t  'examples': [\n\t\t    'cbrt(64)',\n\t\t    'cube(4)',\n\t\t    'cbrt(-8)',\n\t\t    'cbrt(2 + 3i)',\n\t\t    'cbrt(8i)',\n\t\t    'cbrt(8i, true)',\n\t\t    'cbrt(27 m^3)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'square',\n\t\t    'sqrt',\n\t\t    'cube',\n\t\t    'multiply'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26354"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'ceil',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'ceil(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',\n\t\t  'examples': [\n\t\t    'ceil(3.2)',\n\t\t    'ceil(3.8)',\n\t\t    'ceil(-4.2)'\n\t\t  ],\n\t\t  'seealso': ['floor', 'fix', 'round']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26385"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'cube',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'cube(x)'\n\t\t  ],\n\t\t  'description': 'Compute the cube of a value. The cube of x is x * x * x.',\n\t\t  'examples': [\n\t\t    'cube(2)',\n\t\t    '2^3',\n\t\t    '2 * 2 * 2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'square',\n\t\t    'pow'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26406"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'divide',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x / y',\n\t\t    'divide(x, y)'\n\t\t  ],\n\t\t  'description': 'Divide two values.',\n\t\t  'examples': [\n\t\t    'a = 2 / 3',\n\t\t    'a * 3',\n\t\t    '4.5 / 2',\n\t\t    '3 + 4 / 2',\n\t\t    '(3 + 4) / 2',\n\t\t    '18 km / 4.5'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26430"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'dotDivide',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x ./ y',\n\t\t    'dotDivide(x, y)'\n\t\t  ],\n\t\t  'description': 'Divide two values element wise.',\n\t\t  'examples': [\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'b = [2, 1, 1; 3, 2, 5]',\n\t\t    'a ./ b'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'dotMultiply',\n\t\t    'divide'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26456"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'dotMultiply',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x .* y',\n\t\t    'dotMultiply(x, y)'\n\t\t  ],\n\t\t  'description': 'Multiply two values element wise.',\n\t\t  'examples': [\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'b = [2, 1, 1; 3, 2, 5]',\n\t\t    'a .* b'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'divide',\n\t\t    'dotDivide'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26481"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'dotpow',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x .^ y',\n\t\t    'dotpow(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Calculates the power of x to y element wise.',\n\t\t  'examples': [\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'a .^ 2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'pow'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26506"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'exp',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'exp(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the exponent of a value.',\n\t\t  'examples': [\n\t\t    'exp(1.3)',\n\t\t    'e ^ 1.3',\n\t\t    'log(exp(1.3))',\n\t\t    'x = 2.4',\n\t\t    '(exp(i*x) == cos(x) + i*sin(x))   # Euler\\'s formula'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'pow',\n\t\t    'log'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26529"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'fix',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'fix(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',\n\t\t  'examples': [\n\t\t    'fix(3.2)',\n\t\t    'fix(3.8)',\n\t\t    'fix(-4.2)',\n\t\t    'fix(-4.8)'\n\t\t  ],\n\t\t  'seealso': ['ceil', 'floor', 'round']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26554"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'floor',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'floor(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',\n\t\t  'examples': [\n\t\t    'floor(3.2)',\n\t\t    'floor(3.8)',\n\t\t    'floor(-4.2)'\n\t\t  ],\n\t\t  'seealso': ['ceil', 'fix', 'round']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26576"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'gcd',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'gcd(a, b)',\n\t\t    'gcd(a, b, c, ...)'\n\t\t  ],\n\t\t  'description': 'Compute the greatest common divisor.',\n\t\t  'examples': [\n\t\t    'gcd(8, 12)',\n\t\t    'gcd(-4, 6)',\n\t\t    'gcd(25, 15, -10)'\n\t\t  ],\n\t\t  'seealso': [ 'lcm', 'xgcd' ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26597"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'hypot',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'hypot(a, b, c, ...)',\n\t\t    'hypot([a, b, c, ...])'\n\t\t  ],\n\t\t  'description': 'Calculate the hypotenusa of a list with values. ',\n\t\t  'examples': [\n\t\t    'hypot(3, 4)',\n\t\t    'sqrt(3^2 + 4^2)',\n\t\t    'hypot(-2)',\n\t\t    'hypot([3, 4, 5])'\n\t\t  ],\n\t\t  'seealso': [ 'abs', 'norm' ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26618"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'lcm',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'lcm(x, y)'\n\t\t  ],\n\t\t  'description': 'Compute the least common multiple.',\n\t\t  'examples': [\n\t\t    'lcm(4, 6)',\n\t\t    'lcm(6, 21)',\n\t\t    'lcm(6, 21, 5)'\n\t\t  ],\n\t\t  'seealso': [ 'gcd' ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26640"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'log',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'log(x)',\n\t\t    'log(x, base)'\n\t\t  ],\n\t\t  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',\n\t\t  'examples': [\n\t\t    'log(3.5)',\n\t\t    'a = log(2.4)',\n\t\t    'exp(a)',\n\t\t    '10 ^ 4',\n\t\t    'log(10000, 10)',\n\t\t    'log(10000) / log(10)',\n\t\t    'b = log(1024, 2)',\n\t\t    '2 ^ b'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'exp',\n\t\t    'log10'\n\t\t  ]\n\t\t};\n\n\t/***/ },",
            "line": " util.js:26660"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'log10',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'log10(x)'\n\t\t  ],\n\t\t  'description': 'Compute the 10-base logarithm of a value.',\n\t\t  'examples': [\n\t\t    'log10(0.00001)',\n\t\t    'log10(10000)',\n\t\t    '10 ^ 4',\n\t\t    'log(10000) / log(10)',\n\t\t    'log(10000, 10)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'exp',\n\t\t    'log'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26688"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'mod',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x % y',\n\t\t    'x mod y',\n\t\t    'mod(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Calculates the modulus, the remainder of an integer division.',\n\t\t  'examples': [\n\t\t    '7 % 3',\n\t\t    '11 % 2',\n\t\t    '10 mod 4',\n\t\t    'function isOdd(x) = x % 2',\n\t\t    'isOdd(2)',\n\t\t    'isOdd(3)'\n\t\t  ],\n\t\t  'seealso': ['divide']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26713"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'multiply',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x * y',\n\t\t    'multiply(x, y)'\n\t\t  ],\n\t\t  'description': 'multiply two values.',\n\t\t  'examples': [\n\t\t    'a = 2.1 * 3.4',\n\t\t    'a / 3.4',\n\t\t    '2 * 3 + 4',\n\t\t    '2 * (3 + 4)',\n\t\t    '3 * 2.1 km'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'divide'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26739"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'norm',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'norm(x)',\n\t\t    'norm(x, p)'\n\t\t  ],\n\t\t  'description': 'Calculate the norm of a number, vector or matrix.',\n\t\t  'examples': [\n\t\t    'abs(-3.5)',\n\t\t    'norm(-3.5)',\n\t\t    'norm(3 - 4i))',\n\t\t    'norm([1, 2, -3], Infinity)',\n\t\t    'norm([1, 2, -3], -Infinity)',\n\t\t    'norm([3, 4], 2)',\n\t\t    'norm([[1, 2], [3, 4]], 1)',\n\t\t    'norm([[1, 2], [3, 4]], \\'inf\\')',\n\t\t    'norm([[1, 2], [3, 4]], \\'fro\\')'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26764"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'nthRoot',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'nthRoot(a)',\n\t\t    'nthRoot(a, root)'\n\t\t  ],\n\t\t  'description': 'Calculate the nth root of a value. ' +\n\t\t      'The principal nth root of a positive real number A, ' +\n\t\t      'is the positive real solution of the equation \"x^root = A\".',\n\t\t  'examples': [\n\t\t    '4 ^ 3',\n\t\t    'nthRoot(64, 3)',\n\t\t    'nthRoot(9, 2)',\n\t\t    'sqrt(9)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sqrt',\n\t\t    'pow'\n\t\t  ]\n\t\t};\n\n\t/***/ },",
            "line": " util.js:26790"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'pow',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x ^ y',\n\t\t    'pow(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Calculates the power of x to y, x^y.',\n\t\t  'examples': [\n\t\t    '2^3 = 8',\n\t\t    '2*2*2',\n\t\t    '1 + e ^ (pi * i)'\n\t\t  ],\n\t\t  'seealso': [ 'multiply' ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26816"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'round',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'round(x)',\n\t\t    'round(x, n)'\n\t\t  ],\n\t\t  'description':\n\t\t      'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',\n\t\t  'examples': [\n\t\t    'round(3.2)',\n\t\t    'round(3.8)',\n\t\t    'round(-4.2)',\n\t\t    'round(-4.8)',\n\t\t    'round(pi, 3)',\n\t\t    'round(123.45678, 2)'\n\t\t  ],\n\t\t  'seealso': ['ceil', 'floor', 'fix']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26838"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'sign',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'sign(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',\n\t\t  'examples': [\n\t\t    'sign(3.5)',\n\t\t    'sign(-4.2)',\n\t\t    'sign(0)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'abs'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26863"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'sqrt',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'sqrt(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the square root value. If x = y * y, then y is the square root of x.',\n\t\t  'examples': [\n\t\t    'sqrt(25)',\n\t\t    '5 * 5',\n\t\t    'sqrt(-1)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'square',\n\t\t    'multiply'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26886"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'square',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'square(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the square of a value. The square of x is x * x.',\n\t\t  'examples': [\n\t\t    'square(3)',\n\t\t    'sqrt(9)',\n\t\t    '3^2',\n\t\t    '3 * 3'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'pow',\n\t\t    'sqrt',\n\t\t    'cube'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26910"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'subtract',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    'x - y',\n\t\t    'subtract(x, y)'\n\t\t  ],\n\t\t  'description': 'subtract two values.',\n\t\t  'examples': [\n\t\t    'a = 5.3 - 2',\n\t\t    'a + 2',\n\t\t    '2/3 - 1/6',\n\t\t    '2 * 3 - 3',\n\t\t    '2.1 km - 500m'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'add'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26937"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'unaryMinus',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    '-x',\n\t\t    'unaryMinus(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Inverse the sign of a value. Converts booleans and strings to numbers.',\n\t\t  'examples': [\n\t\t    '-4.5',\n\t\t    '-(-5.6)',\n\t\t    '-\"22\"'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'add', 'subtract', 'unaryPlus'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26962"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'unaryPlus',\n\t\t  'category': 'Operators',\n\t\t  'syntax': [\n\t\t    '+x',\n\t\t    'unaryPlus(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Converts booleans and strings to numbers.',\n\t\t  'examples': [\n\t\t    '+true',\n\t\t    '+\"2\"'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'add', 'subtract', 'unaryMinus'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:26986"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'xgcd',\n\t\t  'category': 'Arithmetic',\n\t\t  'syntax': [\n\t\t    'xgcd(a, b)'\n\t\t  ],\n\t\t  'description': 'Calculate the extended greatest common divisor for two values',\n\t\t  'examples': [\n\t\t    'xgcd(8, 12)',\n\t\t    'gcd(8, 12)',\n\t\t    'xgcd(36163, 21199)'\n\t\t  ],\n\t\t  'seealso': [ 'gcd', 'lcm' ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27009"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'bitAnd',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'x & y',\n\t\t    'bitAnd(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',\n\t\t  'examples': [\n\t\t    '5 & 3',\n\t\t    'bitAnd(53, 131)',\n\t\t    '[1, 12, 31] & 42'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27029"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'bitNot',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    '~x',\n\t\t    'bitNot(x)'\n\t\t  ],\n\t\t  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',\n\t\t  'examples': [\n\t\t    '~1',\n\t\t    '~2',\n\t\t    'bitNot([2, -3, 4])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27052"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'bitOr',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'x | y',\n\t\t    'bitOr(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',\n\t\t  'examples': [\n\t\t    '5 | 3',\n\t\t    'bitOr([1, 2, 3], 4)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27075"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'bitXor',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'bitXor(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',\n\t\t  'examples': [\n\t\t    'bitOr(1, 2)',\n\t\t    'bitXor([2, 3, 4], 4)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27097"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'leftShift',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'x << y',\n\t\t    'leftShift(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise left logical shift of a value x by y number of bits.',\n\t\t  'examples': [\n\t\t    '4 << 1',\n\t\t    '8 >> 1'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27118"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'rightArithShift',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'x >> y',\n\t\t    'leftShift(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',\n\t\t  'examples': [\n\t\t    '8 >> 1',\n\t\t    '4 << 1',\n\t\t    '-12 >> 2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27140"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'rightLogShift',\n\t\t  'category': 'Bitwise',\n\t\t  'syntax': [\n\t\t    'x >> y',\n\t\t    'leftShift(x, y)'\n\t\t  ],\n\t\t  'description': 'Bitwise right logical shift of a value x by y number of bits.',\n\t\t  'examples': [\n\t\t    '8 >>> 1',\n\t\t    '4 << 1',\n\t\t    '-12 >>> 2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27163"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'bellNumbers',\n\t\t  'category': 'Combinatorics',\n\t\t  'syntax': [\n\t\t    'bellNumbers(n)'\n\t\t  ],\n\t\t  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',\n\t\t  'examples': [\n\t\t    'bellNumbers(3)',\n\t\t    'bellNumbers(8)'\n\t\t  ],\n\t\t  'seealso': ['stirlingS2']\n\t\t};\n\n\t/***/ },",
            "line": " util.js:27186"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'catalan',\n\t\t  'category': 'Combinatorics',\n\t\t  'syntax': [\n\t\t    'catalan(n)'\n\t\t  ],\n\t\t  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',\n\t\t  'examples': [\n\t\t    'catalan(3)',\n\t\t    'catalan(8)'\n\t\t  ],\n\t\t  'seealso': ['bellNumbers']\n\t\t};\n\n\t/***/ },",
            "line": " util.js:27204"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'composition',\n\t\t  'category': 'Combinatorics',\n\t\t  'syntax': [\n\t\t    'composition(n, k)'\n\t\t  ],\n\t\t  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',\n\t\t  'examples': [\n\t\t    'composition(5, 3)'\n\t\t  ],\n\t\t  'seealso': ['combinations']\n\t\t};\n\n\t/***/ },",
            "line": " util.js:27222"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'stirlingS2',\n\t\t  'category': 'Combinatorics',\n\t\t  'syntax': [\n\t\t    'stirlingS2(n, k)'\n\t\t  ],\n\t\t  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',\n\t\t  'examples': [\n\t\t    'stirlingS2(5, 3)'\n\t\t  ],\n\t\t  'seealso': ['bellNumbers']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27239"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'config',\n\t\t  'category': 'Core',\n\t\t  'syntax': [\n\t\t    'config()',\n\t\t    'config(options)'\n\t\t  ],\n\t\t  'description': 'Get configuration or change configuration.',\n\t\t  'examples': [\n\t\t    'config()',\n\t\t    '1/3 + 1/4',\n\t\t    'config({number: \"Fraction\"})',\n\t\t    '1/3 + 1/4'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27257"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'import',\n\t\t  'category': 'Core',\n\t\t  'syntax': [\n\t\t    'import(functions)',\n\t\t    'import(functions, options)'\n\t\t  ],\n\t\t  'description': 'Import functions or constants from an object.',\n\t\t  'examples': [\n\t\t    'import({myFn: f(x)=x^2, myConstant: 32 })',\n\t\t    'myFn(2)',\n\t\t    'myConstant'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27279"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'typed',\n\t\t  'category': 'Core',\n\t\t  'syntax': [\n\t\t    'typed(signatures)',\n\t\t    'typed(name, signatures)'\n\t\t  ],\n\t\t  'description': 'Create a typed function.',\n\t\t  'examples': [\n\t\t    'double = typed({ \"number, number\": f(x)=x+x })',\n\t\t    'double(2)',\n\t\t    'double(\"hello\")'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27300"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'arg',\n\t\t  'category': 'Complex',\n\t\t  'syntax': [\n\t\t    'arg(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',\n\t\t  'examples': [\n\t\t    'arg(2 + 2i)',\n\t\t    'atan2(3, 2)',\n\t\t    'arg(2 + 3i)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    're',\n\t\t    'im',\n\t\t    'conj',\n\t\t    'abs'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27321"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'conj',\n\t\t  'category': 'Complex',\n\t\t  'syntax': [\n\t\t    'conj(x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',\n\t\t  'examples': [\n\t\t    'conj(2 + 3i)',\n\t\t    'conj(2 - 3i)',\n\t\t    'conj(-5.2i)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    're',\n\t\t    'im',\n\t\t    'abs',\n\t\t    'arg'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27347"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 're',\n\t\t  'category': 'Complex',\n\t\t  'syntax': [\n\t\t    're(x)'\n\t\t  ],\n\t\t  'description': 'Get the real part of a complex number.',\n\t\t  'examples': [\n\t\t    're(2 + 3i)',\n\t\t    'im(2 + 3i)',\n\t\t    're(-5.2i)',\n\t\t    're(2.4)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'im',\n\t\t    'conj',\n\t\t    'abs',\n\t\t    'arg'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27373"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'im',\n\t\t  'category': 'Complex',\n\t\t  'syntax': [\n\t\t    'im(x)'\n\t\t  ],\n\t\t  'description': 'Get the imaginary part of a complex number.',\n\t\t  'examples': [\n\t\t    'im(2 + 3i)',\n\t\t    're(2 + 3i)',\n\t\t    'im(-5.2i)',\n\t\t    'im(2.4)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    're',\n\t\t    'conj',\n\t\t    'abs',\n\t\t    'arg'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27399"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'eval',\n\t\t  'category': 'Expression',\n\t\t  'syntax': [\n\t\t    'eval(expression)',\n\t\t    'eval([expr1, expr2, expr3, ...])'\n\t\t  ],\n\t\t  'description': 'Evaluate an expression or an array with expressions.',\n\t\t  'examples': [\n\t\t    'eval(\"2 + 3\")',\n\t\t    'eval(\"sqrt(\" + 4 + \")\")'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27425"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'help',\n\t\t  'category': 'Expression',\n\t\t  'syntax': [\n\t\t    'help(object)',\n\t\t    'help(string)'\n\t\t  ],\n\t\t  'description': 'Display documentation on a function or data type.',\n\t\t  'examples': [\n\t\t    'help(sqrt)',\n\t\t    'help(\"complex\")'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27445"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'distance',\n\t\t  'category': 'Geometry',\n\t\t  'syntax': [\n\t\t    'distance([x1, y1], [x2, y2])',\n\t\t    'distance([[x1, y1], [x2, y2])'\n\t\t  ],\n\t\t  'description': 'Calculates the Euclidean distance between two points.',\n\t\t  'examples': [\n\t\t    'distance([0,0], [4,4])',\n\t\t    'distance([[0,0], [4,4]])'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27465"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'intersect',\n\t\t  'category': 'Geometry',\n\t\t  'syntax': [\n\t\t    'intersect(expr1, expr2, expr3, expr4)',\n\t\t    'intersect(expr1, expr2, expr3)'\n\t\t  ],\n\t\t  'description': 'Computes the intersection point of lines and/or planes.',\n\t\t  'examples': [\n\t\t    'intersect([0, 0], [10, 10], [10, 0], [0, 10])',\n\t\t    'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27485"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'and',\n\t\t  'category': 'Logical',\n\t\t  'syntax': [\n\t\t    'x and y',\n\t\t    'and(x, y)'\n\t\t  ],\n\t\t  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',\n\t\t  'examples': [\n\t\t    'true and false',\n\t\t    'true and true',\n\t\t    '2 and 4'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'not', 'or', 'xor'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27505"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'not',\n\t\t  'category': 'Logical',\n\t\t  'syntax': [\n\t\t    'not x',\n\t\t    'not(x)'\n\t\t  ],\n\t\t  'description': 'Logical not. Flips the boolean value of given argument.',\n\t\t  'examples': [\n\t\t    'not true',\n\t\t    'not false',\n\t\t    'not 2',\n\t\t    'not 0'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'and', 'or', 'xor'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27528"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'or',\n\t\t  'category': 'Logical',\n\t\t  'syntax': [\n\t\t    'x or y',\n\t\t    'or(x, y)'\n\t\t  ],\n\t\t  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',\n\t\t  'examples': [\n\t\t    'true or false',\n\t\t    'false or false',\n\t\t    '0 or 4'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'not', 'and', 'xor'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27552"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'xor',\n\t\t  'category': 'Logical',\n\t\t  'syntax': [\n\t\t    'x or y',\n\t\t    'or(x, y)'\n\t\t  ],\n\t\t  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',\n\t\t  'examples': [\n\t\t    'true xor false',\n\t\t    'false xor false',\n\t\t    'true xor true',\n\t\t    '0 or 4'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'not', 'and', 'or'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27575"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'concat',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'concat(A, B, C, ...)',\n\t\t    'concat(A, B, C, ..., dim)'\n\t\t  ],\n\t\t  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',\n\t\t  'examples': [\n\t\t    'A = [1, 2; 5, 6]',\n\t\t    'B = [3, 4; 7, 8]',\n\t\t    'concat(A, B)',\n\t\t    'concat(A, B, 1)',\n\t\t    'concat(A, B, 2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27599"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'cross',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'cross(A, B)'\n\t\t  ],\n\t\t  'description': 'Calculate the cross product for two vectors in three dimensional space.',\n\t\t  'examples': [\n\t\t    'cross([1, 1, 0],  [0, 1, 1])',\n\t\t    'cross([3, -3, 1], [4, 9, 2])',\n\t\t    'cross([2, 3, 4],  [5, 6, 7])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'dot'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27624"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'det',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'det(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the determinant of a matrix',\n\t\t  'examples': [\n\t\t    'det([1, 2; 3, 4])',\n\t\t    'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27647"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'diag',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'diag(x)',\n\t\t    'diag(x, k)'\n\t\t  ],\n\t\t  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',\n\t\t  'examples': [\n\t\t    'diag(1:3)',\n\t\t    'diag(1:3, 1)',\n\t\t    'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',\n\t\t    'diag(a)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27668"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'dot',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'dot(A, B)'\n\t\t  ],\n\t\t  'description': 'Calculate the dot product of two vectors. ' +\n\t\t      'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +\n\t\t      'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',\n\t\t  'examples': [\n\t\t    'dot([2, 4, 1], [2, 2, 3])',\n\t\t    '[2, 4, 1] * [2, 2, 3]'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'multiply',\n\t\t    'cross'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27692"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'eye',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'eye(n)',\n\t\t    'eye(m, n)',\n\t\t    'eye([m, n])',\n\t\t    'eye'\n\t\t  ],\n\t\t  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',\n\t\t  'examples': [\n\t\t    'eye(3)',\n\t\t    'eye(3, 5)',\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'eye(size(a))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27716"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'filter',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'filter(x, test)'\n\t\t  ],\n\t\t  'description': 'Filter items in a matrix.',\n\t\t  'examples': [\n\t\t    'isPositive(x) = x > 0',\n\t\t    'filter([6, -2, -1, 4, 3], isPositive)',\n\t\t    'filter([6, -2, 0, 1, 0], x != 0)'\n\t\t  ],\n\t\t  'seealso': ['sort', 'map', 'forEach']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27742"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'flatten',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'flatten(x)'\n\t\t  ],\n\t\t  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',\n\t\t  'examples': [\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'size(a)',\n\t\t    'b = flatten(a)',\n\t\t    'size(b)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'resize', 'size', 'squeeze'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27762"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'forEach',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'forEach(x, callback)'\n\t\t  ],\n\t\t  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',\n\t\t  'examples': [\n\t\t    'forEach([1, 2, 3], function(val) { console.log(val) })'\n\t\t  ],\n\t\t  'seealso': ['map', 'sort', 'filter']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27785"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'inv',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'inv(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the inverse of a matrix',\n\t\t  'examples': [\n\t\t    'inv([1, 2; 3, 4])',\n\t\t    'inv(4)',\n\t\t    '1 / 4'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27803"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'map',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'map(x, callback)'\n\t\t  ],\n\t\t  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',\n\t\t  'examples': [\n\t\t    'map([1, 2, 3], function(val) { return value * value })'\n\t\t  ],\n\t\t  'seealso': ['filter', 'forEach']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27825"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'ones',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'ones(m)',\n\t\t    'ones(m, n)',\n\t\t    'ones(m, n, p, ...)',\n\t\t    'ones([m])',\n\t\t    'ones([m, n])',\n\t\t    'ones([m, n, p, ...])',\n\t\t    'ones'\n\t\t  ],\n\t\t  'description': 'Create a matrix containing ones.',\n\t\t  'examples': [\n\t\t    'ones(3)',\n\t\t    'ones(3, 5)',\n\t\t    'ones([2,3]) * 4.5',\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'ones(size(a))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27843"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'partitionSelect',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'partitionSelect(x, k)',\n\t\t    'partitionSelect(x, k, compare)'\n\t\t  ],\n\t\t  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',\n\t\t  'examples': [\n\t\t    'partitionSelect([5, 10, 1], 2)',\n\t\t    'partitionSelect([\"C\", \"B\", \"A\", \"D\"], 1)'\n\t\t  ],\n\t\t  'seealso': ['sort']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27873"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'range',\n\t\t  'category': 'Type',\n\t\t  'syntax': [\n\t\t    'start:end',\n\t\t    'start:step:end',\n\t\t    'range(start, end)',\n\t\t    'range(start, end, step)',\n\t\t    'range(string)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Create a range. Lower bound of the range is included, upper bound is excluded.',\n\t\t  'examples': [\n\t\t    '1:5',\n\t\t    '3:-1:-3',\n\t\t    'range(3, 7)',\n\t\t    'range(0, 12, 2)',\n\t\t    'range(\"4:10\")',\n\t\t    'a = [1, 2, 3, 4; 5, 6, 7, 8]',\n\t\t    'a[1:2, 1:2]'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27893"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'resize',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'resize(x, size)',\n\t\t    'resize(x, size, defaultValue)'\n\t\t  ],\n\t\t  'description': 'Resize a matrix.',\n\t\t  'examples': [\n\t\t    'resize([1,2,3,4,5], [3])',\n\t\t    'resize([1,2,3], [5])',\n\t\t    'resize([1,2,3], [5], -1)',\n\t\t    'resize(2, [2, 3])',\n\t\t    'resize(\"hello\", [8], \"!\")'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'size', 'subset', 'squeeze'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27924"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'size',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'size(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the size of a matrix.',\n\t\t  'examples': [\n\t\t    'size(2.3)',\n\t\t    'size(\"hello world\")',\n\t\t    'a = [1, 2; 3, 4; 5, 6]',\n\t\t    'size(a)',\n\t\t    'size(1:6)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27949"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'sort',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'sort(x)',\n\t\t    'sort(x, compare)'\n\t\t  ],\n\t\t  'description': 'Sort the items in a matrix. Compare can be a string \"asc\" or \"desc\", or a custom sort function.',\n\t\t  'examples': [\n\t\t    'sort([5, 10, 1])',\n\t\t    'sort([\"C\", \"B\", \"A\", \"D\"])',\n\t\t    'sortByLength(a, b) = size(a)[1] - size(b)[1]',\n\t\t    'sort([\"Langdon\", \"Tom\", \"Sara\"], sortByLength)'\n\t\t  ],\n\t\t  'seealso': ['map', 'filter', 'forEach']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27973"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'squeeze',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'squeeze(x)'\n\t\t  ],\n\t\t  'description': 'Remove inner and outer singleton dimensions from a matrix.',\n\t\t  'examples': [\n\t\t    'a = zeros(3,2,1)',\n\t\t    'size(squeeze(a))',\n\t\t    'b = zeros(1,1,3)',\n\t\t    'size(squeeze(b))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:27995"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'subset',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'value(index)',\n\t\t    'value(index) = replacement',\n\t\t    'subset(value, [index])',\n\t\t    'subset(value, [index], replacement)'\n\t\t  ],\n\t\t  'description': 'Get or set a subset of a matrix or string. ' +\n\t\t      'Indexes are one-based. ' +\n\t\t      'Both the ranges lower-bound and upper-bound are included.',\n\t\t  'examples': [\n\t\t    'd = [1, 2; 3, 4]',\n\t\t    'e = []',\n\t\t    'e[1, 1:2] = [5, 6]',\n\t\t    'e[2, :] = [7, 8]',\n\t\t    'f = d * e',\n\t\t    'f[2, 1]',\n\t\t    'f[:, 1]'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28018"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'trace',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'trace(A)'\n\t\t  ],\n\t\t  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',\n\t\t  'examples': [\n\t\t    'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',\n\t\t    'trace(A)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28049"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'transpose',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'x\\'',\n\t\t    'transpose(x)'\n\t\t  ],\n\t\t  'description': 'Transpose a matrix',\n\t\t  'examples': [\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'a\\'',\n\t\t    'transpose(a)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28070"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'zeros',\n\t\t  'category': 'Matrix',\n\t\t  'syntax': [\n\t\t    'zeros(m)',\n\t\t    'zeros(m, n)',\n\t\t    'zeros(m, n, p, ...)',\n\t\t    'zeros([m])',\n\t\t    'zeros([m, n])',\n\t\t    'zeros([m, n, p, ...])',\n\t\t    'zeros'\n\t\t  ],\n\t\t  'description': 'Create a matrix containing zeros.',\n\t\t  'examples': [\n\t\t    'zeros(3)',\n\t\t    'zeros(3, 5)',\n\t\t    'a = [1, 2, 3; 4, 5, 6]',\n\t\t    'zeros(size(a))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28093"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'combinations',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'combinations(n, k)'\n\t\t  ],\n\t\t  'description': 'Compute the number of combinations of n items taken k at a time',\n\t\t  'examples': [\n\t\t    'combinations(7, 5)'\n\t\t  ],\n\t\t  'seealso': ['permutations', 'factorial']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28122"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'factorial',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'kldivergence(x, y)'\n\t\t  ],\n\t\t  'description': 'Compute the factorial of a value',\n\t\t  'examples': [\n\t\t    '5!',\n\t\t    '5 * 4 * 3 * 2 * 1',\n\t\t    '3!'\n\t\t  ],\n\t\t  'seealso': ['combinations', 'permutations', 'gamma']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28140"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'gamma',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'gamma(n)'\n\t\t  ],\n\t\t  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',\n\t\t  'examples': [\n\t\t    'gamma(4)',\n\t\t    '3!',\n\t\t    'gamma(1/2)',\n\t\t    'sqrt(pi)'\n\t\t  ],\n\t\t  'seealso': ['factorial']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28160"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'kldivergence',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'n!',\n\t\t    'factorial(n)'\n\t\t  ],\n\t\t  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',\n\t\t  'examples': [\n\t\t    'math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28181"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'multinomial',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'multinomial(A)'\n\t\t  ],\n\t\t  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',\n\t\t  'examples': [\n\t\t    'multinomial([1, 2, 1])'\n\t\t  ],\n\t\t  'seealso': ['combinations', 'factorial']\n\t\t};\n\n\t/***/ },",
            "line": " util.js:28200"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'permutations',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'permutations(n)',\n\t\t    'permutations(n, k)'\n\t\t  ],\n\t\t  'description': 'Compute the number of permutations of n items taken k at a time',\n\t\t  'examples': [\n\t\t    'permutations(5)',\n\t\t    'permutations(5, 3)'\n\t\t  ],\n\t\t  'seealso': ['combinations', 'factorial']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28217"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'pickRandom',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'pickRandom(array)',\n\t\t    'pickRandom(array, number)',\n\t\t    'pickRandom(array, weights)',\n\t\t    'pickRandom(array, number, weights)',\n\t\t    'pickRandom(array, weights, number)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Pick a random entry from a given array.',\n\t\t  'examples': [\n\t\t    'pickRandom(0:10)',\n\t\t    'pickRandom([1, 3, 1, 6])',\n\t\t    'pickRandom([1, 3, 1, 6], 2)',\n\t\t    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])',\n\t\t    'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])',\n\t\t    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'\n\t\t  ],\n\t\t  'seealso': ['random', 'randomInt']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28237"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'random',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'random()',\n\t\t    'random(max)',\n\t\t    'random(min, max)',\n\t\t    'random(size)',\n\t\t    'random(size, max)',\n\t\t    'random(size, min, max)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Return a random number.',\n\t\t  'examples': [\n\t\t    'random()',\n\t\t    'random(10, 20)',\n\t\t    'random([2, 3])'\n\t\t  ],\n\t\t  'seealso': ['pickRandom', 'randomInt']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28265"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'randInt',\n\t\t  'category': 'Probability',\n\t\t  'syntax': [\n\t\t    'randInt(max)',\n\t\t    'randInt(min, max)',\n\t\t    'randInt(size)',\n\t\t    'randInt(size, max)',\n\t\t    'randInt(size, min, max)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Return a random integer number',\n\t\t  'examples': [\n\t\t    'randInt(10, 20)',\n\t\t    'randInt([2, 3], 10)'\n\t\t  ],\n\t\t  'seealso': ['pickRandom', 'random']\n\t\t};\n\n\t/***/ },",
            "line": " util.js:28291"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'compare',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'compare(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',\n\t\t  'examples': [\n\t\t    'compare(2, 3)',\n\t\t    'compare(3, 2)',\n\t\t    'compare(2, 2)',\n\t\t    'compare(5cm, 40mm)',\n\t\t    'compare(2, [1, 2, 3])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28314"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'deepEqual',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'deepEqual(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',\n\t\t  'examples': [\n\t\t    '[1,3,4] == [1,3,4]',\n\t\t    '[1,3,4] == [1,3]'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28339"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'equal',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x == y',\n\t\t    'equal(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check equality of two values. Returns true if the values are equal, and false if not.',\n\t\t  'examples': [\n\t\t    '2+2 == 3',\n\t\t    '2+2 == 4',\n\t\t    'a = 3.2',\n\t\t    'b = 6-2.8',\n\t\t    'a == b',\n\t\t    '50cm == 0.5m'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28361"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'larger',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x > y',\n\t\t    'larger(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',\n\t\t  'examples': [\n\t\t    '2 > 3',\n\t\t    '5 > 2*2',\n\t\t    'a = 3.3',\n\t\t    'b = 6-2.8',\n\t\t    '(a > b)',\n\t\t    '(b < a)',\n\t\t    '5 cm > 2 inch'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28388"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'largerEq',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x >= y',\n\t\t    'largerEq(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',\n\t\t  'examples': [\n\t\t    '2 > 1+1',\n\t\t    '2 >= 1+1',\n\t\t    'a = 3.2',\n\t\t    'b = 6-2.8',\n\t\t    '(a > b)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28416"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'smaller',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x < y',\n\t\t    'smaller(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',\n\t\t  'examples': [\n\t\t    '2 < 3',\n\t\t    '5 < 2*2',\n\t\t    'a = 3.3',\n\t\t    'b = 6-2.8',\n\t\t    '(a < b)',\n\t\t    '5 cm < 2 inch'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28442"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'smallerEq',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x <= y',\n\t\t    'smallerEq(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',\n\t\t  'examples': [\n\t\t    '2 < 1+1',\n\t\t    '2 <= 1+1',\n\t\t    'a = 3.2',\n\t\t    'b = 6-2.8',\n\t\t    '(a < b)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28469"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'unequal',\n\t\t  'category': 'Relational',\n\t\t  'syntax': [\n\t\t    'x != y',\n\t\t    'unequal(x, y)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',\n\t\t  'examples': [\n\t\t    '2+2 != 3',\n\t\t    '2+2 != 4',\n\t\t    'a = 3.2',\n\t\t    'b = 6-2.8',\n\t\t    'a != b',\n\t\t    '50cm != 0.5m',\n\t\t    '5 cm != 2 inch'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28495"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'erf',\n\t\t  'category': 'Special',\n\t\t  'syntax': [\n\t\t    'erf(x)'\n\t\t  ],\n\t\t  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',\n\t\t  'examples': [\n\t\t    'erf(0.2)',\n\t\t    'erf(-0.5)',\n\t\t    'erf(4)'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28523"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'max',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'max(a, b, c, ...)',\n\t\t    'max(A)',\n\t\t    'max(A, dim)'\n\t\t  ],\n\t\t  'description': 'Compute the maximum value of a list of values.',\n\t\t  'examples': [\n\t\t    'max(2, 3, 4, 1)',\n\t\t    'max([2, 3, 4, 1])',\n\t\t    'max([2, 5; 4, 3])',\n\t\t    'max([2, 5; 4, 3], 1)',\n\t\t    'max([2, 5; 4, 3], 2)',\n\t\t    'max(2.7, 7.1, -4.5, 2.0, 4.1)',\n\t\t    'min(2.7, 7.1, -4.5, 2.0, 4.1)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'mean',\n\t\t    'median',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28543"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'mean',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'mean(a, b, c, ...)',\n\t\t    'mean(A)',\n\t\t    'mean(A, dim)'\n\t\t  ],\n\t\t  'description': 'Compute the arithmetic mean of a list of values.',\n\t\t  'examples': [\n\t\t    'mean(2, 3, 4, 1)',\n\t\t    'mean([2, 3, 4, 1])',\n\t\t    'mean([2, 5; 4, 3])',\n\t\t    'mean([2, 5; 4, 3], 1)',\n\t\t    'mean([2, 5; 4, 3], 2)',\n\t\t    'mean([1.0, 2.7, 3.2, 4.0])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'median',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28577"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'median',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'median(a, b, c, ...)',\n\t\t    'median(A)'\n\t\t  ],\n\t\t  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',\n\t\t  'examples': [\n\t\t    'median(5, 2, 7)',\n\t\t    'median([3, -1, 5, 7])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28610"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'min',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'min(a, b, c, ...)',\n\t\t    'min(A)',\n\t\t    'min(A, dim)'\n\t\t  ],\n\t\t  'description': 'Compute the minimum value of a list of values.',\n\t\t  'examples': [\n\t\t    'min(2, 3, 4, 1)',\n\t\t    'min([2, 3, 4, 1])',\n\t\t    'min([2, 5; 4, 3])',\n\t\t    'min([2, 5; 4, 3], 1)',\n\t\t    'min([2, 5; 4, 3], 2)',\n\t\t    'min(2.7, 7.1, -4.5, 2.0, 4.1)',\n\t\t    'max(2.7, 7.1, -4.5, 2.0, 4.1)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'median',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28638"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'mode',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'mode(a, b, c, ...)',\n\t\t    'mode(A)',\n\t\t    'mode(A, a, b, B, c, ...)'\n\t\t  ],\n\t\t  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',\n\t\t  'examples': [\n\t\t    'mode(5, 2, 7)',\n\t\t    'mode([3, -1, 5, 7])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'min',\n\t\t    'median',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28672"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'prod',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'prod(a, b, c, ...)',\n\t\t    'prod(A)'\n\t\t  ],\n\t\t  'description': 'Compute the product of all values.',\n\t\t  'examples': [\n\t\t    'prod(2, 3, 4)',\n\t\t    'prod([2, 3, 4])',\n\t\t    'prod([2, 5; 4, 3])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'min',\n\t\t    'median',\n\t\t    'min',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28702"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'quantileSeq',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'quantileSeq(A, prob[, sorted])',\n\t\t    'quantileSeq(A, [prob1, prob2, ...][, sorted])',\n\t\t    'quantileSeq(A, N[, sorted])'\n\t\t  ],\n\t\t  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \\n\\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',\n\t\t  'examples': [\n\t\t    'quantileSeq([3, -1, 5, 7], 0.5)',\n\t\t    'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',\n\t\t    'quantileSeq([3, -1, 5, 7], 2)',\n\t\t    'quantileSeq([-1, 3, 5, 7], 0.5, true)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'mean',\n\t\t    'median',\n\t\t    'min',\n\t\t    'max',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\t/***/ },",
            "line": " util.js:28732"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'std',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'std(a, b, c, ...)',\n\t\t    'std(A)',\n\t\t    'std(A, normalization)'\n\t\t  ],\n\t\t  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n\t\t  'examples': [\n\t\t    'std(2, 4, 6)',\n\t\t    'std([2, 4, 6, 8])',\n\t\t    'std([2, 4, 6, 8], \"uncorrected\")',\n\t\t    'std([2, 4, 6, 8], \"biased\")',\n\t\t    'std([1, 2, 3; 4, 5, 6])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'min',\n\t\t    'median',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28763"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'sum',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'sum(a, b, c, ...)',\n\t\t    'sum(A)'\n\t\t  ],\n\t\t  'description': 'Compute the sum of all values.',\n\t\t  'examples': [\n\t\t    'sum(2, 3, 4, 1)',\n\t\t    'sum([2, 3, 4, 1])',\n\t\t    'sum([2, 5; 4, 3])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'median',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum',\n\t\t    'var'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28796"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'var',\n\t\t  'category': 'Statistics',\n\t\t  'syntax': [\n\t\t    'var(a, b, c, ...)',\n\t\t    'var(A)',\n\t\t    'var(A, normalization)'\n\t\t  ],\n\t\t  'description': 'Compute the variance of all values. Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n\t\t  'examples': [\n\t\t    'var(2, 4, 6)',\n\t\t    'var([2, 4, 6, 8])',\n\t\t    'var([2, 4, 6, 8], \"uncorrected\")',\n\t\t    'var([2, 4, 6, 8], \"biased\")',\n\t\t    'var([1, 2, 3; 4, 5, 6])'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'max',\n\t\t    'mean',\n\t\t    'min',\n\t\t    'median',\n\t\t    'min',\n\t\t    'prod',\n\t\t    'std',\n\t\t    'sum'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28826"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'acos',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acos(x)'\n\t\t  ],\n\t\t  'description': 'Compute the inverse cosine of a value in radians.',\n\t\t  'examples': [\n\t\t    'acos(0.5)',\n\t\t    'acos(cos(2.3))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'cos',\n\t\t    'atan',\n\t\t    'asin'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28859"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'acosh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acosh(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',\n\t\t  'examples': [\n\t\t    'acosh(1.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'cosh',\n\t\t    'asinh',\n\t\t    'atanh'\n\t\t  ]\n\t\t};\n\n\t/***/ },",
            "line": " util.js:28882"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'acot',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acot(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the inverse cotangent of a value.',\n\t\t  'examples': [\n\t\t    'acot(0.5)',\n\t\t    'acot(cot(0.5))',\n\t\t    'acot(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'cot',\n\t\t    'atan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28903"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'acoth',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acoth(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',\n\t\t  'examples': [\n\t\t    'acoth(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acsch',\n\t\t    'asech'\n\t\t  ]\n\t\t};\n\n\t/***/ },",
            "line": " util.js:28926"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'acsc',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acsc(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the inverse cotangent of a value.',\n\t\t  'examples': [\n\t\t    'acsc(0.5)',\n\t\t    'acsc(csc(0.5))',\n\t\t    'acsc(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'csc',\n\t\t    'asin',\n\t\t    'asec'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28946"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'acsch',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'acsch(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',\n\t\t  'examples': [\n\t\t    'acsch(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'asech',\n\t\t    'acoth'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28970"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'asec',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'asec(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the inverse secant of a value.',\n\t\t  'examples': [\n\t\t    'asec(0.5)',\n\t\t    'asec(sec(0.5))',\n\t\t    'asec(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acos',\n\t\t    'acot',\n\t\t    'acsc'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:28991"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'asech',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'asech(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the inverse secant of a value.',\n\t\t  'examples': [\n\t\t    'asech(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acsch',\n\t\t    'acoth'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29015"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'asin',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'asin(x)'\n\t\t  ],\n\t\t  'description': 'Compute the inverse sine of a value in radians.',\n\t\t  'examples': [\n\t\t    'asin(0.5)',\n\t\t    'asin(sin(2.3))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sin',\n\t\t    'acos',\n\t\t    'atan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29036"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'asinh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'asinh(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',\n\t\t  'examples': [\n\t\t    'asinh(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acosh',\n\t\t    'atanh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29059"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'atan',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'atan(x)'\n\t\t  ],\n\t\t  'description': 'Compute the inverse tangent of a value in radians.',\n\t\t  'examples': [\n\t\t    'atan(0.5)',\n\t\t    'atan(tan(2.3))'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'tan',\n\t\t    'acos',\n\t\t    'asin'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29080"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'atanh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'atanh(x)'\n\t\t  ],\n\t\t  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',\n\t\t  'examples': [\n\t\t    'atanh(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acosh',\n\t\t    'asinh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29103"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'atan2',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'atan2(y, x)'\n\t\t  ],\n\t\t  'description':\n\t\t      'Computes the principal value of the arc tangent of y/x in radians.',\n\t\t  'examples': [\n\t\t    'atan2(2, 2) / pi',\n\t\t    'angle = 60 deg in rad',\n\t\t    'x = cos(angle)',\n\t\t    'y = sin(angle)',\n\t\t    'atan2(y, x)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sin',\n\t\t    'cos',\n\t\t    'tan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29124"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'cos',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'cos(x)'\n\t\t  ],\n\t\t  'description': 'Compute the cosine of x in radians.',\n\t\t  'examples': [\n\t\t    'cos(2)',\n\t\t    'cos(pi / 4) ^ 2',\n\t\t    'cos(180 deg)',\n\t\t    'cos(60 deg)',\n\t\t    'sin(0.2)^2 + cos(0.2)^2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'acos',\n\t\t    'sin',\n\t\t    'tan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29151"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'cosh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'cosh(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic cosine of x in radians.',\n\t\t  'examples': [\n\t\t    'cosh(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sinh',\n\t\t    'tanh',\n\t\t    'coth'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29177"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'cot',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'cot(x)'\n\t\t  ],\n\t\t  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',\n\t\t  'examples': [\n\t\t    'cot(2)',\n\t\t    '1 / tan(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sec',\n\t\t    'csc',\n\t\t    'tan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29199"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'coth',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'coth(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic cotangent of x in radians.',\n\t\t  'examples': [\n\t\t    'coth(2)',\n\t\t    '1 / tanh(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sech',\n\t\t    'csch',\n\t\t    'tanh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29222"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'csc',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'csc(x)'\n\t\t  ],\n\t\t  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',\n\t\t  'examples': [\n\t\t    'csc(2)',\n\t\t    '1 / sin(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sec',\n\t\t    'cot',\n\t\t    'sin'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29245"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'csch',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'csch(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',\n\t\t  'examples': [\n\t\t    'csch(2)',\n\t\t    '1 / sinh(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sech',\n\t\t    'coth',\n\t\t    'sinh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29268"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'sec',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'sec(x)'\n\t\t  ],\n\t\t  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',\n\t\t  'examples': [\n\t\t    'sec(2)',\n\t\t    '1 / cos(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'cot',\n\t\t    'csc',\n\t\t    'cos'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29291"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'sech',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'sech(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',\n\t\t  'examples': [\n\t\t    'sech(2)',\n\t\t    '1 / cosh(2)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'coth',\n\t\t    'csch',\n\t\t    'cosh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29314"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'sin',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'sin(x)'\n\t\t  ],\n\t\t  'description': 'Compute the sine of x in radians.',\n\t\t  'examples': [\n\t\t    'sin(2)',\n\t\t    'sin(pi / 4) ^ 2',\n\t\t    'sin(90 deg)',\n\t\t    'sin(30 deg)',\n\t\t    'sin(0.2)^2 + cos(0.2)^2'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'asin',\n\t\t    'cos',\n\t\t    'tan'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29337"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'sinh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'sinh(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic sine of x in radians.',\n\t\t  'examples': [\n\t\t    'sinh(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'cosh',\n\t\t    'tanh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29363"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'tan',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'tan(x)'\n\t\t  ],\n\t\t  'description': 'Compute the tangent of x in radians.',\n\t\t  'examples': [\n\t\t    'tan(0.5)',\n\t\t    'sin(0.5) / cos(0.5)',\n\t\t    'tan(pi / 4)',\n\t\t    'tan(45 deg)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'atan',\n\t\t    'sin',\n\t\t    'cos'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29384"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'tanh',\n\t\t  'category': 'Trigonometry',\n\t\t  'syntax': [\n\t\t    'tanh(x)'\n\t\t  ],\n\t\t  'description': 'Compute the hyperbolic tangent of x in radians.',\n\t\t  'examples': [\n\t\t    'tanh(0.5)',\n\t\t    'sinh(0.5) / cosh(0.5)'\n\t\t  ],\n\t\t  'seealso': [\n\t\t    'sinh',\n\t\t    'cosh'\n\t\t  ]\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29409"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'to',\n\t\t  'category': 'Units',\n\t\t  'syntax': [\n\t\t    'x to unit',\n\t\t    'to(x, unit)'\n\t\t  ],\n\t\t  'description': 'Change the unit of a value.',\n\t\t  'examples': [\n\t\t    '5 inch to cm',\n\t\t    '3.2kg to g',\n\t\t    '16 bytes in bits'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29431"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'clone',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'clone(x)'\n\t\t  ],\n\t\t  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',\n\t\t  'examples': [\n\t\t    'clone(3.5)',\n\t\t    'clone(2 - 4i)',\n\t\t    'clone(45 deg)',\n\t\t    'clone([1, 2; 3, 4])',\n\t\t    'clone(\"hello world\")'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29452"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'format',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'format(value)',\n\t\t    'format(value, precision)'\n\t\t  ],\n\t\t  'description': 'Format a value of any type as string.',\n\t\t  'examples': [\n\t\t    'format(2.3)',\n\t\t    'format(3 - 4i)',\n\t\t    'format([])',\n\t\t    'format(pi, 3)'\n\t\t  ],\n\t\t  'seealso': ['print']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29474"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'isNaN',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isNaN(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is NaN (not a number)',\n\t\t  'examples': [\n\t\t    'isNaN(2)',\n\t\t    'isNaN(0 / 0)',\n\t\t    'isNaN(NaN)',\n\t\t    'isNaN(Infinity)'\n\t\t  ],\n\t\t  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29496"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'isInteger',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isInteger(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is an integer number.',\n\t\t  'examples': [\n\t\t    'isInteger(2)',\n\t\t    'isInteger(3.5)',\n\t\t    'isInteger([3, 0.5, -2])'\n\t\t  ],\n\t\t  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29517"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'isNegative',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isNegative(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is negative: smaller than zero.',\n\t\t  'examples': [\n\t\t    'isNegative(2)',\n\t\t    'isNegative(0)',\n\t\t    'isNegative(-4)',\n\t\t    'isNegative([3, 0.5, -2])'\n\t\t  ],\n\t\t  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29537"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'isNumeric',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isNumeric(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is a numeric value. ' +\n\t\t    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',\n\t\t  'examples': [\n\t\t    'isNumeric(2)',\n\t\t    'isNumeric(0)',\n\t\t    'isNumeric(bignumber(500))',\n\t\t    'isNumeric(fraction(0.125))',\n\t\t    'isNumeric(\"3\")',\n\t\t    'isNumeric(2 + 3i)',\n\t\t    'isNumeric([2.3, \"foo\", false])'\n\t\t  ],\n\t\t  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29558"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'isPositive',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isPositive(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is positive: larger than zero.',\n\t\t  'examples': [\n\t\t    'isPositive(2)',\n\t\t    'isPositive(0)',\n\t\t    'isPositive(-4)',\n\t\t    'isPositive([3, 0.5, -2])'\n\t\t  ],\n\t\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29583"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'isPrime',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isPrime(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is prime: has no divisors other than itself and one.',\n\t\t  'examples': [\n\t\t    'isPrime(3)',\n\t\t    'isPrime(-2)',\n\t\t    'isPrime([2, 17, 100])'\n\t\t  ],\n\t\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n\t\t};\n\n\t/***/ },",
            "line": " util.js:29604"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'isZero',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'isZero(x)'\n\t\t  ],\n\t\t  'description': 'Test whether a value is zero.',\n\t\t  'examples': [\n\t\t    'isZero(2)',\n\t\t    'isZero(0)',\n\t\t    'isZero(-4)',\n\t\t    'isZero([3, 0, -2, 0])'\n\t\t  ],\n\t\t  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29623"
        },
        {
            "message": "Missing item type\nmodule.exports = {\n\t\t  'name': 'typeof',\n\t\t  'category': 'Utils',\n\t\t  'syntax': [\n\t\t    'typeof(x)'\n\t\t  ],\n\t\t  'description': 'Get the type of a variable.',\n\t\t  'examples': [\n\t\t    'typeof(3.5)',\n\t\t    'typeof(2 - 4i)',\n\t\t    'typeof(45 deg)',\n\t\t    'typeof(\"hello world\")'\n\t\t  ],\n\t\t  'seealso': []\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:29644"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(281),\n\t\t  __webpack_require__(304),\n\t\t  __webpack_require__(305),\n\t\t  __webpack_require__(306),\n\t\t  __webpack_require__(307)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:29665"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var parse = load(__webpack_require__(282));\n  /**\n\t\t   * Parse and compile an expression.\n\t\t   * Returns a an object with a function `eval([scope])` to evaluate the\n\t\t   * compiled expression.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.compile(expr)                       // returns one node\n\t\t   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     var code = math.compile('sqrt(3^2 + 4^2)');\n\t\t   *     code.eval(); // 5\n\t\t   *\n\t\t   *     var scope = {a: 3, b: 4}\n\t\t   *     var code = math.compile('a * b'); // 12\n\t\t   *     code.eval(scope); // 12\n\t\t   *     scope.a = 5;\n\t\t   *     code.eval(scope); // 20\n\t\t   *\n\t\t   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);\n\t\t   *     nodes[2].eval(); // 12\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    parse, eval\n\t\t   *\n\t\t   * @param {string | string[] | Array | Matrix} expr\n\t\t   *            The expression to be compiled\n\t\t   * @return {{eval: Function} | Array.<{eval: Function}>} code\n\t\t   *            An object with the compiled expression\n\t\t   * @throws {Error}",
            "line": " util.js:29678"
        },
        {
            "message": "Missing item type",
            "line": " util.js:29738"
        },
        {
            "message": "Missing item type\n'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\t\tvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var AccessorNode            = load(__webpack_require__(283));\n\t\t  var ArrayNode               = load(__webpack_require__(289));\n\t\t  var AssignmentNode          = load(__webpack_require__(290));\n\t\t  var BlockNode               = load(__webpack_require__(293));\n\t\t  var ConditionalNode         = load(__webpack_require__(294));\n\t\t  var ConstantNode            = load(__webpack_require__(295));\n\t\t  var FunctionAssignmentNode  = load(__webpack_require__(296));\n\t\t  var IndexNode               = load(__webpack_require__(297));\n\t\t  var ObjectNode              = load(__webpack_require__(300));\n\t\t  var OperatorNode            = load(__webpack_require__(301));\n\t\t  var ParenthesisNode         = load(__webpack_require__(303));\n\t\t  var FunctionNode            = load(__webpack_require__(302));\n\t\t  var RangeNode               = load(__webpack_require__(298));\n\t\t  var SymbolNode              = load(__webpack_require__(299));\n\n  /**\n\t\t   * Parse an expression. Returns a node tree, which can be evaluated by\n\t\t   * invoking node.eval();\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     parse(expr)\n\t\t   *     parse(expr, options)\n\t\t   *     parse([expr1, expr2, expr3, ...])\n\t\t   *     parse([expr1, expr2, expr3, ...], options)\n\t\t   *\n\t\t   * Example:\n\t\t   *\n\t\t   *     var node = parse('sqrt(3^2 + 4^2)');\n\t\t   *     node.compile(math).eval(); // 5\n\t\t   *\n\t\t   *     var scope = {a:3, b:4}\n\t\t   *     var node = parse('a * b'); // 12\n\t\t   *     var code = node.compile(math);\n\t\t   *     code.eval(scope); // 12\n\t\t   *     scope.a = 5;\n\t\t   *     code.eval(scope); // 20\n\t\t   *\n\t\t   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n\t\t   *     nodes[2].compile(math).eval(); // 12\n\t\t   *\n\t\t   * @param {string | string[] | Matrix} expr\n\t\t   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n\t\t   *                                                   - `nodes` a set of custom nodes\n\t\t   * @return {Node | Node[]} node\n\t\t   * @throws {Error}",
            "line": " util.js:29740"
        },
        {
            "message": "Missing item type\nGet the first character from the expression.\nThe character is stored into the char c. If the end of the expression is\nreached, the function puts an empty string in c.",
            "line": " util.js:29897"
        },
        {
            "message": "Missing item type\nGet the next character from the expression.\nThe character is stored into the char c. If the end of the expression is\nreached, the function puts an empty string in c.",
            "line": " util.js:29910"
        },
        {
            "message": "Missing item type\nPreview the previous character from the expression.",
            "line": " util.js:29921"
        },
        {
            "message": "Missing item type\nPreview the next character from the expression.",
            "line": " util.js:29930"
        },
        {
            "message": "Missing item type\nPreview the second next character from the expression.",
            "line": " util.js:29939"
        },
        {
            "message": "Missing item type\nGet next token in the current string expr.\nThe token and token type are available as token and token_type",
            "line": " util.js:29948"
        },
        {
            "message": "Missing item type\nGet next token and skip newline tokens",
            "line": " util.js:30106"
        },
        {
            "message": "Missing item type\nOpen parameters.\nNew line characters will be ignored until closeParams() is called",
            "line": " util.js:30116"
        },
        {
            "message": "Missing item type\nClose parameters.\nNew line characters will no longer be ignored",
            "line": " util.js:30124"
        },
        {
            "message": "Missing item type\nChecks whether the current character `c` is a valid alpha character:\n\n- A latin letter (upper or lower case) Ascii: a-z, A-Z\n- An underscore                         Ascii: _\n- A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n- A greek letter                       Unicode: \\u0370 - \\u03FF\n- A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n\nThe previous and next characters are needed to determine whether\nthis character is part of a unicode surrogate pair.",
            "line": " util.js:30132"
        },
        {
            "message": "Missing item type\nTest whether a character is a valid latin, greek, or letter-like character",
            "line": " util.js:30155"
        },
        {
            "message": "Missing item type\nTest whether two given 16 bit characters form a surrogate pair of a\nunicode math symbol.\n\nhttp://unicode-table.com/en/\nhttp://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n\nNote: In ES6 will be unicode aware:\nhttp://stackoverflow.com/questions/280712/javascript-unicode-regexes\nhttps://mathiasbynens.be/notes/es6-unicode-regex",
            "line": " util.js:30164"
        },
        {
            "message": "Missing item type\nCheck whether given character c is a white space character: space, tab, or enter",
            "line": " util.js:30185"
        },
        {
            "message": "Missing item type\nTest whether the character c is a decimal mark (dot).\nThis is the case when it's not the start of a delimiter '.*', './', or '.^'",
            "line": " util.js:30196"
        },
        {
            "message": "Missing item type\nchecks if the given char c is a digit or dot",
            "line": " util.js:30207"
        },
        {
            "message": "Missing item type\nchecks if the given char c is a digit",
            "line": " util.js:30216"
        },
        {
            "message": "Missing item type\nStart of the parse levels below, in order of precedence",
            "line": " util.js:30225"
        },
        {
            "message": "Missing item type\nParse a block with expressions. Expressions can be separated by a newline\ncharacter '\\n', or by a semicolon ';'. In case of a semicolon, no output\nof the preceding line is returned.",
            "line": " util.js:30255"
        },
        {
            "message": "Missing item type\nAssignment of a function or variable,\n- can be a variable like 'a=2.3'\n- or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n- defining a function like 'f(x) = x^2'",
            "line": " util.js:30310"
        },
        {
            "message": "Missing item type\nconditional operation\n\n    condition ? truePart : falsePart\n\nNote: conditional operator is right-associative",
            "line": " util.js:30365"
        },
        {
            "message": "Missing item type\nlogical or, 'x or y'",
            "line": " util.js:30404"
        },
        {
            "message": "Missing item type\nlogical exclusive or, 'x xor y'",
            "line": " util.js:30420"
        },
        {
            "message": "Missing item type\nlogical and, 'x and y'",
            "line": " util.js:30436"
        },
        {
            "message": "Missing item type\nbitwise or, 'x | y'",
            "line": " util.js:30452"
        },
        {
            "message": "Missing item type\nbitwise exclusive or (xor), 'x ^| y'",
            "line": " util.js:30468"
        },
        {
            "message": "Missing item type\nbitwise and, 'x & y'",
            "line": " util.js:30484"
        },
        {
            "message": "Missing item type\nrelational operators",
            "line": " util.js:30500"
        },
        {
            "message": "Missing item type\nBitwise left shift, bitwise right arithmetic shift, bitwise right logical shift",
            "line": " util.js:30530"
        },
        {
            "message": "Missing item type\nconversion operators 'to' and 'in'",
            "line": " util.js:30558"
        },
        {
            "message": "Missing item type\nparse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc",
            "line": " util.js:30593"
        },
        {
            "message": "Missing item type\nadd or subtract",
            "line": " util.js:30641"
        },
        {
            "message": "Missing item type\nmultiply, divide, modulus",
            "line": " util.js:30667"
        },
        {
            "message": "Missing item type\nUnary plus and minus, and logical and bitwise not",
            "line": " util.js:30720"
        },
        {
            "message": "Missing item type\npower\nNote: power operator is right associative",
            "line": " util.js:30746"
        },
        {
            "message": "Missing item type\nLeft hand operators: factorial x!, transpose x'",
            "line": " util.js:30769"
        },
        {
            "message": "Missing item type\nParse a custom node handler. A node handler can be used to process\nnodes in a custom way, for example for handling a plot.\n\nA handler must be passed as second argument of the parse function.\n- must extend math.expression.node.Node\n- must contain a function _compile(defs: Object) : string\n- must contain a function find(filter: Object) : Node[]\n- must contain a function toString() : string\n- the constructor is called with a single argument containing all parameters\n\nFor example:\n\n    nodes = {\n      'plot': PlotHandler\n    };\n\nThe constructor of the handler is called as:\n\n    node = new PlotHandler(params);\n\nThe handler will be invoked when evaluating an expression like:\n\n    node = math.parse('plot(sin(x), x)', nodes);",
            "line": " util.js:30798"
        },
        {
            "message": "Missing item type\nparse symbols: functions, variables, constants, units",
            "line": " util.js:30866"
        },
        {
            "message": "Missing item type\nparse accessors:\n- function invocation in round brackets (...), for example sqrt(2)\n- index enclosed in square brackets [...], for example A[2,3]\n- dot notation for properties, like foo.bar",
            "line": " util.js:30889"
        },
        {
            "message": "Missing item type\nparse a string.\nA string is enclosed by double quotes",
            "line": " util.js:30981"
        },
        {
            "message": "Missing item type\nParse a string surrounded by double quotes \"...\"",
            "line": " util.js:31005"
        },
        {
            "message": "Missing item type\nparse the matrix",
            "line": " util.js:31032"
        },
        {
            "message": "Missing item type\nParse a single comma-separated row from a matrix, like 'a, b, c'",
            "line": " util.js:31103"
        },
        {
            "message": "Missing item type\nparse an object, enclosed in angle brackets{...}, for example {value: 2}",
            "line": " util.js:31122"
        },
        {
            "message": "Missing item type\nparse a number",
            "line": " util.js:31176"
        },
        {
            "message": "Missing item type\nparentheses",
            "line": " util.js:31195"
        },
        {
            "message": "Missing item type\nEvaluated when the expression is not yet ended but expected to end",
            "line": " util.js:31225"
        },
        {
            "message": "Missing item type\nShortcut for getting the current row value (one based)\nReturns the line of the currently handled expression",
            "line": " util.js:31239"
        },
        {
            "message": "Missing item type\nShortcut for getting the current col value (one based)\nReturns the column (position) where the last token starts",
            "line": " util.js:31250"
        },
        {
            "message": "Missing item type\nCreate an error",
            "line": " util.js:31259"
        },
        {
            "message": "Missing item type\nCreate an error",
            "line": " util.js:31273"
        },
        {
            "message": "Missing item type",
            "line": " util.js:31295"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n\t\t  var access = load(__webpack_require__(286));\n  /**\n\t\t   * @constructor AccessorNode\n\t\t   * @extends {Node}\n\t\t   * Access an object property or get a matrix subset\n\t\t   *\n\t\t   * @param {Node} object                 The object from which to retrieve\n\t\t   *                                      a property or subset.\n\t\t   * @param {IndexNode} index             IndexNode containing ranges",
            "line": " util.js:31297"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:31353"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:31387"
        },
        {
            "message": "Missing item type\nCreate a new AccessorNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:31396"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:31409"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:31417"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:31431"
        },
        {
            "message": "Missing item type\nAre parenthesis needed?",
            "line": " util.js:31445"
        },
        {
            "message": "Missing item type",
            "line": " util.js:31464"
        },
        {
            "message": "Missing item type\n'use strict';\nvar keywords = __webpack_require__(285);\n\t\tvar extend = __webpack_require__(3).extend;\n\t\tvar deepEqual= __webpack_require__(3).deepEqual;\nfunction factory (type, config, load, typed, math) {\n\t\t  /**\n\t\t   * Node",
            "line": " util.js:31466"
        },
        {
            "message": "Missing item type\nEvaluate the node",
            "line": " util.js:31484"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:31499"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:31542"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:31559"
        },
        {
            "message": "Missing item type\nCreate a new Node having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:31568"
        },
        {
            "message": "Missing item type\nValidate whether an object is a Node, for use with map",
            "line": " util.js:31579"
        },
        {
            "message": "Missing item type\nRecursively traverse all nodes in a node tree. Executes given callback for\nthis node and each of its child nodes.",
            "line": " util.js:31593"
        },
        {
            "message": "Missing item type\nRecursively transform a node tree via a transform function.\n\nFor example, to replace all nodes of type SymbolNode having name 'x' with a\nConstantNode with value 2:\n\n    var res = Node.transform(function (node, path, parent) {\n      if (node && node.isSymbolNode) && (node.name == 'x')) {\n        return new ConstantNode(2);\n      }\n      else {\n        return node;\n      }\n    });",
            "line": " util.js:31614"
        },
        {
            "message": "Missing item type\nFind any node in the node tree matching given filter function. For example, to\nfind all nodes of type SymbolNode having name 'x':\n\n    var results = Node.filter(function (node) {\n      return (node && node.isSymbolNode) && (node.name == 'x');\n    });",
            "line": " util.js:31648"
        },
        {
            "message": "Missing item type\nCreate a shallow clone of this node",
            "line": " util.js:31684"
        },
        {
            "message": "Missing item type\nCreate a deep clone of this node",
            "line": " util.js:31693"
        },
        {
            "message": "Missing item type\nDeep compare this node with another node.",
            "line": " util.js:31703"
        },
        {
            "message": "Missing item type\nGet string representation. (wrapper function)\n\nThis function can get an object of the following form:\n{\n   handler: //This can be a callback function of the form\n            // \"function callback(node, options)\"or\n            // a map that maps function names (used in FunctionNodes)\n            // to callbacks\n   parenthesis: \"keep\" //the parenthesis option (This is optional)\n}",
            "line": " util.js:31715"
        },
        {
            "message": "Missing item type\nInternal function to generate the string output.\nThis has to be implemented by every Node",
            "line": " util.js:31752"
        },
        {
            "message": "Missing item type\nGet LaTeX representation. (wrapper function)\n\nThis function can get an object of the following form:\n{\n   handler: //This can be a callback function of the form\n            // \"function callback(node, options)\"or\n            // a map that maps function names (used in FunctionNodes)\n            // to callbacks\n   parenthesis: \"keep\" //the parenthesis option (This is optional)\n}",
            "line": " util.js:31763"
        },
        {
            "message": "Missing item type\nInternal function to generate the LaTeX output.\nThis has to be implemented by every Node",
            "line": " util.js:31800"
        },
        {
            "message": "Missing item type\nGet identifier.",
            "line": " util.js:31812"
        },
        {
            "message": "Missing item type\nGet the content of the current Node.",
            "line": " util.js:31820"
        },
        {
            "message": "Missing item type\nValidate the symbol names of a scope.\nThrows an error when the scope contains an illegal symbol.",
            "line": " util.js:31828"
        },
        {
            "message": "Missing item type",
            "line": " util.js:31852"
        },
        {
            "message": "Missing item type\n'use strict';\n// Reserved keywords not allowed to use in the parser\n\t\tmodule.exports = {\n\t\t  end: true\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:31854"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\nfunction factory (type, config, load, typed) {\n\t\t  var subset = load(__webpack_require__(288));\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Retrieve part of an object:\n\t\t   *\n\t\t   * - Retrieve a property from an object\n\t\t   * - Retrieve a part of a string\n\t\t   * - Retrieve a matrix subset\n\t\t   *\n\t\t   * @param {Object | Array | Matrix | string} object\n\t\t   * @param {Index} index\n\t\t   * @return {Object | Array | Matrix | string} Returns the subset",
            "line": " util.js:31866"
        },
        {
            "message": "Missing item type",
            "line": " util.js:31918"
        },
        {
            "message": "Missing item type\nvar IndexError = __webpack_require__(43);\n/**\n\t\t * Transform zero-based indices to one-based indices in errors\n\t\t * @param {Error} err\n\t\t * @returns {Error} Returns the transformed error",
            "line": " util.js:31920"
        },
        {
            "message": "Missing item type",
            "line": " util.js:31941"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar validateIndex = __webpack_require__(40).validateIndex;\n\t\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Get or set a subset of a matrix or string.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *     math.subset(value, index)                                // retrieve a subset\n\t\t   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     // get a subset\n\t\t   *     var d = [[1, 2], [3, 4]];\n\t\t   *     math.subset(d, math.index(1, 0));        // returns 3\n\t\t   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]\n\t\t   *\n\t\t   *     // replace a subset\n\t\t   *     var e = [];\n\t\t   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]\n\t\t   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     size, resize, squeeze, index\n\t\t   *\n\t\t   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n\t\t   * @param {Index} index                     An index containing ranges for each\n\t\t   *                                          dimension\n\t\t   * @param {*} [replacement]                 An array, matrix, or scalar.\n\t\t   *                                          If provided, the subset is replaced with replacement.\n\t\t   *                                          If not provided, the subset is returned\n\t\t   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n\t\t   *                                          the matrix is resized. If not provided,\n\t\t   *                                          math.matrix elements will be left undefined.\n\t\t   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.",
            "line": " util.js:31943"
        },
        {
            "message": "Missing item type\nRetrieve a subset of a string",
            "line": " util.js:32034"
        },
        {
            "message": "Missing item type\nReplace a substring in a string",
            "line": " util.js:32065"
        },
        {
            "message": "Missing item type\nRetrieve a property from an object",
            "line": " util.js:32127"
        },
        {
            "message": "Missing item type\nSet a property on an object",
            "line": " util.js:32147"
        },
        {
            "message": "Missing item type",
            "line": " util.js:32176"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * @constructor ArrayNode\n\t\t   * @extends {Node}\n\t\t   * Holds an 1-dimensional array with items\n\t\t   * @param {Node[]} [items]   1 dimensional array with items",
            "line": " util.js:32178"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:32217"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:32240"
        },
        {
            "message": "Missing item type\nCreate a new ArrayNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:32251"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:32265"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:32273"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:32286"
        },
        {
            "message": "Missing item type",
            "line": " util.js:32319"
        },
        {
            "message": "Missing item type\n'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n\t\t  var ArrayNode = load(__webpack_require__(289));\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var assign = load(__webpack_require__(291));\n\t\t  var access = load(__webpack_require__(286));\n  var keywords = __webpack_require__(285);\n\t\t  var operators = __webpack_require__(292);\n  /**\n\t\t   * @constructor AssignmentNode\n\t\t   * @extends {Node}\n\t\t   *\n\t\t   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n\t\t   * replace a subset of a matrix like `A[2,2]=42`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     new AssignmentNode(symbol, value)\n\t\t   *     new AssignmentNode(object, index, value)\n\t\t   *\n\t\t   * Usage:\n\t\t   *\n\t\t   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2\n\t\t   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n\t\t   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n\t\t   *\n\t\t   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n\t\t   * @param {IndexNode} [index=null]            Index, property name or matrix\n\t\t   *                                            index. Optional. If not provided\n\t\t   *                                            and `object` is a SymbolNode,\n\t\t   *                                            the property is assigned to the\n\t\t   *                                            global scope.\n\t\t   * @param {Node} value                        The value to be assigned",
            "line": " util.js:32321"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:32410"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:32495"
        },
        {
            "message": "Missing item type\nCreate a new AssignmentNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:32507"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:32523"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:32548"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:32564"
        },
        {
            "message": "Missing item type",
            "line": " util.js:32588"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\nfunction factory (type, config, load, typed) {\n\t\t  var subset = load(__webpack_require__(288));\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Replace part of an object:\n\t\t   *\n\t\t   * - Assign a property to an object\n\t\t   * - Replace a part of a string\n\t\t   * - Replace a matrix subset\n\t\t   *\n\t\t   * @param {Object | Array | Matrix | string} object\n\t\t   * @param {Index} index\n\t\t   * @param {*} value\n\t\t   * @return {Object | Array | Matrix | string} Returns the original object\n\t\t   *                                            except in case of a string",
            "line": " util.js:32590"
        },
        {
            "message": "Missing item type",
            "line": " util.js:32645"
        },
        {
            "message": "Missing item type\n'use strict'\n//list of identifiers of nodes in order of their precedence\n\t\t//also contains information about left/right associativity\n\t\t//and which other operator the operator is associative with\n\t\t//Example:\n\t\t// addition is associative with addition and subtraction, because:\n\t\t// (a+b)+c=a+(b+c)\n\t\t// (a+b)-c=a+(b-c)\n\t\t//\n\t\t// postfix operators are left associative, prefix operators \n\t\t// are right associative\n\t\t//\n\t\t//It's also possible to set the following properties:\n\t\t// latexParens: if set to false, this node doesn't need to be enclosed\n\t\t//              in parentheses when using LaTeX\n\t\t// latexLeftParens: if set to false, this !OperatorNode's! \n\t\t//                  left argument doesn't need to be enclosed\n\t\t//                  in parentheses\n\t\t// latexRightParens: the same for the right argument\n\t\tvar properties = [\n\t\t  { //assignment\n\t\t    'AssignmentNode': {},\n\t\t    'FunctionAssignmentNode': {}\n\t\t  },\n\t\t  { //conditional expression\n\t\t    'ConditionalNode': {\n\t\t      latexLeftParens: false,\n\t\t      latexRightParens: false,\n\t\t      latexParens: false\n\t\t      //conditionals don't need parentheses in LaTeX because\n\t\t      //they are 2 dimensional\n\t\t    }\n\t\t  },\n\t\t  { //logical or\n\t\t    'OperatorNode:or': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n  },\n\t\t  { //logical xor\n\t\t    'OperatorNode:xor': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //logical and\n\t\t    'OperatorNode:and': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //bitwise or\n\t\t    'OperatorNode:bitOr': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //bitwise xor\n\t\t    'OperatorNode:bitXor': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //bitwise and\n\t\t    'OperatorNode:bitAnd': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //relational operators\n\t\t    'OperatorNode:equal': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:unequal': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:smaller': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:larger': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:smallerEq': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:largerEq': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //bitshift operators\n\t\t    'OperatorNode:leftShift': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:rightArithShift': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:rightLogShift': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //unit conversion\n\t\t    'OperatorNode:to': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //range\n\t\t    'RangeNode': {}\n\t\t  },\n\t\t  { //addition, subtraction\n\t\t    'OperatorNode:add': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']\n\t\t    },\n\t\t    'OperatorNode:subtract': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //multiply, divide, modulus\n\t\t    'OperatorNode:multiply': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: [\n\t\t        'OperatorNode:multiply',\n\t\t        'OperatorNode:divide',\n\t\t        'Operator:dotMultiply',\n\t\t        'Operator:dotDivide'\n\t\t      ]\n\t\t    },\n\t\t    'OperatorNode:divide': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: [],\n\t\t      latexLeftParens: false,\n\t\t      latexRightParens: false,\n\t\t      latexParens: false\n\t\t      //fractions don't require parentheses because\n\t\t      //they're 2 dimensional, so parens aren't needed\n\t\t      //in LaTeX\n\t\t    },\n\t\t    'OperatorNode:dotMultiply': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: [\n\t\t        'OperatorNode:multiply',\n\t\t        'OperatorNode:divide',\n\t\t        'OperatorNode:dotMultiply',\n\t\t        'OperatorNode:doDivide'\n\t\t      ]\n\t\t    },\n\t\t    'OperatorNode:dotDivide': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    },\n\t\t    'OperatorNode:mod': {\n\t\t      associativity: 'left',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //unary prefix operators\n\t\t    'OperatorNode:unaryPlus': {\n\t\t      associativity: 'right'\n\t\t    },\n\t\t    'OperatorNode:unaryMinus': {\n\t\t      associativity: 'right'\n\t\t    },\n\t\t    'OperatorNode:bitNot': {\n\t\t      associativity: 'right'\n\t\t    },\n\t\t    'OperatorNode:not': {\n\t\t      associativity: 'right'\n\t\t    }\n\t\t  },\n\t\t  { //exponentiation\n\t\t    'OperatorNode:pow': {\n\t\t      associativity: 'right',\n\t\t      associativeWith: [],\n\t\t      latexRightParens: false\n\t\t      //the exponent doesn't need parentheses in\n\t\t      //LaTeX because it's 2 dimensional\n\t\t      //(it's on top)\n\t\t    },\n\t\t    'OperatorNode:dotPow': {\n\t\t      associativity: 'right',\n\t\t      associativeWith: []\n\t\t    }\n\t\t  },\n\t\t  { //factorial\n\t\t    'OperatorNode:factorial': {\n\t\t      associativity: 'left'\n\t\t    }\n\t\t  },\n\t\t  { //matrix transpose\n\t\t    'OperatorNode:transpose': {\n\t\t      associativity: 'left'\n\t\t    }\n\t\t  }\n\t\t];\n/**\n\t\t * Get the precedence of a Node.\n\t\t * Higher number for higher precedence, starting with 0.\n\t\t * Returns null if the precedence is undefined.\n\t\t *\n\t\t * @param {Node}\n\t\t * @param {string} parenthesis\n\t\t * @return {number|null}",
            "line": " util.js:32647"
        },
        {
            "message": "Missing item type\nGet the associativity of an operator (left or right).\nReturns a string containing 'left' or 'right' or null if\nthe associativity is not defined.",
            "line": " util.js:32881"
        },
        {
            "message": "Missing item type\nCheck if an operator is associative with another operator.\nReturns either true or false or null if not defined.",
            "line": " util.js:32921"
        },
        {
            "message": "Missing item type",
            "line": " util.js:32967"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n\t\t  var ResultSet = load(__webpack_require__(72));\n  /**\n\t\t   * @constructor BlockNode\n\t\t   * @extends {Node}\n\t\t   * Holds a set with blocks\n\t\t   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n\t\t   *            An array with blocks, where a block is constructed as an Object\n\t\t   *            with properties block, which is a Node, and visible, which is\n\t\t   *            a boolean. The property visible is optional and is true by default",
            "line": " util.js:32969"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:33013"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child blocks of this node",
            "line": " util.js:33044"
        },
        {
            "message": "Missing item type\nCreate a new BlockNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:33054"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:33073"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:33088"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:33100"
        },
        {
            "message": "Missing item type",
            "line": " util.js:33119"
        },
        {
            "message": "Missing item type\n'use strict';\nvar latex = __webpack_require__(32);\n\t\tvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n\t\t   *\n\t\t   * @param {Node} condition   Condition, must result in a boolean\n\t\t   * @param {Node} trueExpr    Expression evaluated when condition is true\n\t\t   * @param {Node} falseExpr   Expression evaluated when condition is true\n\t\t   *\n\t\t   * @constructor ConditionalNode\n\t\t   * @extends {Node}",
            "line": " util.js:33121"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:33160"
        },
        {
            "message": "Missing item type\nTest whether a condition is met",
            "line": " util.js:33173"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:33213"
        },
        {
            "message": "Missing item type\nCreate a new ConditionalNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:33223"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:33237"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:33245"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:33284"
        },
        {
            "message": "Missing item type",
            "line": " util.js:33305"
        },
        {
            "message": "Missing item type\n'use strict';\nvar getType = __webpack_require__(41).type;\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * A ConstantNode holds a constant value like a number or string. A ConstantNode\n\t\t   * stores a stringified version of the value and uses this to compile to\n\t\t   * JavaScript.\n\t\t   *\n\t\t   * In case of a stringified number as input, this may be compiled to a BigNumber\n\t\t   * when the math instance is configured for BigNumbers.\n\t\t   *\n\t\t   * Usage:\n\t\t   *\n\t\t   *     // stringified values with type\n\t\t   *     new ConstantNode('2.3', 'number');\n\t\t   *     new ConstantNode('true', 'boolean');\n\t\t   *     new ConstantNode('hello', 'string');\n\t\t   *\n\t\t   *     // non-stringified values, type will be automatically detected\n\t\t   *     new ConstantNode(2.3);\n\t\t   *     new ConstantNode('hello');\n\t\t   *\n\t\t   * @param {string | number | boolean | null | undefined} value\n\t\t   *                            When valueType is provided, value must contain\n\t\t   *                            an uninterpreted string representing the value.\n\t\t   *                            When valueType is undefined, value can be a\n\t\t   *                            number, string, boolean, null, or undefined, and\n\t\t   *                            the type will be determined automatically.\n\t\t   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',\n\t\t   *                              'boolean', 'undefined', 'null'\n\t\t   * @constructor ConstantNode\n\t\t   * @extends {Node}",
            "line": " util.js:33307"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:33387"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:33435"
        },
        {
            "message": "Missing item type\nCreate a new ConstantNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:33444"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:33454"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:33462"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:33477"
        },
        {
            "message": "Missing item type",
            "line": " util.js:33510"
        },
        {
            "message": "Missing item type\n'use strict';\nvar keywords = __webpack_require__(285);\n\t\tvar latex = __webpack_require__(32);\n\t\tvar operators = __webpack_require__(292);\nfunction isString (x) {\n\t\t  return typeof x === 'string';\n\t\t}\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * @constructor FunctionAssignmentNode\n\t\t   * @extends {Node}\n\t\t   * Function assignment\n\t\t   *\n\t\t   * @param {string} name           Function name\n\t\t   * @param {string[] | Array.<{name: string, type: string}>} params\n\t\t   *                                Array with function parameter names, or an\n\t\t   *                                array with objects containing the name\n\t\t   *                                and type of the parameter\n\t\t   * @param {Node} expr             The function expression",
            "line": " util.js:33512"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:33566"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:33602"
        },
        {
            "message": "Missing item type\nCreate a new FunctionAssignmentNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:33610"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:33622"
        },
        {
            "message": "Missing item type\nIs parenthesis needed?",
            "line": " util.js:33630"
        },
        {
            "message": "Missing item type\nget string representation",
            "line": " util.js:33644"
        },
        {
            "message": "Missing item type\nget LaTeX representation",
            "line": " util.js:33659"
        },
        {
            "message": "Missing item type",
            "line": " util.js:33682"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n\t\t  var RangeNode = load(__webpack_require__(298));\n\t\t  var SymbolNode = load(__webpack_require__(299));\n  var Range = load(__webpack_require__(67));\n  var isArray = Array.isArray;\n  /**\n\t\t   * @constructor IndexNode\n\t\t   * @extends Node\n\t\t   *\n\t\t   * Describes a subset of a matrix or an object property.\n\t\t   * Cannot be used on its own, needs to be used within an AccessorNode or\n\t\t   * AssignmentNode.\n\t\t   *\n\t\t   * @param {Node[]} dimensions\n\t\t   * @param {boolean} [dotNotation=false]  Optional property describing whether\n\t\t   *                                       this index was written using dot\n\t\t   *                                       notation like `a.b`, or using bracket\n\t\t   *                                       notation like `a[\"b\"]` (default).\n\t\t   *                                       Used to stringify an IndexNode.",
            "line": " util.js:33684"
        },
        {
            "message": "Missing item type\nCompile all range nodes\n\nWhen some of the dimensions has `end` defined, the IndexNode requires\na variable `size` to be defined in the current closure, and must contain\nthe size of the matrix that's being handled. To check whether the `size`\nvariable is needed, call IndexNode.needsSize().",
            "line": " util.js:33742"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:33820"
        },
        {
            "message": "Missing item type\nCreate a new IndexNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:33830"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:33845"
        },
        {
            "message": "Missing item type\nTest whether this IndexNode contains a single property name",
            "line": " util.js:33853"
        },
        {
            "message": "Missing item type\nReturns the property name if IndexNode contains a property.\nIf not, returns null.",
            "line": " util.js:33863"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:33872"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:33884"
        },
        {
            "message": "Missing item type\nTest whether this IndexNode needs the object size, size of the Matrix",
            "line": " util.js:33899"
        },
        {
            "message": "Missing item type",
            "line": " util.js:33918"
        },
        {
            "message": "Missing item type\n'use strict';\nvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * @constructor RangeNode\n\t\t   * @extends {Node}\n\t\t   * create a range\n\t\t   * @param {Node} start  included lower-bound\n\t\t   * @param {Node} end    included upper-bound\n\t\t   * @param {Node} [step] optional step",
            "line": " util.js:33920"
        },
        {
            "message": "Missing item type\nCheck whether the RangeNode needs the `end` symbol to be defined.\nThis end is the size of the Matrix in current dimension.",
            "line": " util.js:33959"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code\n\nWhen the range has a symbol `end` defined, the RangeNode requires\na variable `end` to be defined in the current closure, which must contain\nthe length of the of the matrix that's being handled in the range's\ndimension. To check whether the `end` variable is needed, call\nRangeNode.needsEnd().",
            "line": " util.js:33973"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:34000"
        },
        {
            "message": "Missing item type\nCreate a new RangeNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:34012"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:34026"
        },
        {
            "message": "Missing item type\nCalculate the necessary parentheses",
            "line": " util.js:34034"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:34062"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:34097"
        },
        {
            "message": "Missing item type",
            "line": " util.js:34136"
        },
        {
            "message": "Missing item type\n'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed, math) {\n\t\t  var Node = load(__webpack_require__(284));\n  var Unit = load(__webpack_require__(75));\n  /**\n\t\t   * @constructor SymbolNode\n\t\t   * @extends {Node}\n\t\t   * A symbol node can hold and resolve a symbol\n\t\t   * @param {string} name\n\t\t   * @extends {Node}",
            "line": " util.js:34138"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:34173"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:34208"
        },
        {
            "message": "Missing item type\nCreate a new SymbolNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:34216"
        },
        {
            "message": "Missing item type\nThrows an error 'Undefined symbol {name}'",
            "line": " util.js:34226"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:34234"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:34242"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:34252"
        },
        {
            "message": "Missing item type",
            "line": " util.js:34281"
        },
        {
            "message": "Missing item type\n'use strict';\nvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * @constructor ObjectNode\n\t\t   * @extends {Node}\n\t\t   * Holds an object with keys/values\n\t\t   * @param {Object.<string, Node>} [properties]   array with key/value pairs",
            "line": " util.js:34283"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:34321"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:34343"
        },
        {
            "message": "Missing item type\nCreate a new ObjectNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:34355"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:34371"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:34385"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:34401"
        },
        {
            "message": "Missing item type",
            "line": " util.js:34424"
        },
        {
            "message": "Missing item type\n'use strict';\nvar latex = __webpack_require__(32);\n\t\tvar operators = __webpack_require__(292);\nfunction factory (type, config, load, typed, math) {\n\t\t  var Node         = load(__webpack_require__(284));\n\t\t  var ConstantNode = load(__webpack_require__(295));\n\t\t  var SymbolNode   = load(__webpack_require__(299));\n\t\t  var FunctionNode = load(__webpack_require__(302));\n  /**\n\t\t   * @constructor OperatorNode\n\t\t   * @extends {Node}\n\t\t   * An operator with two arguments, like 2+3\n\t\t   *\n\t\t   * @param {string} op           Operator name, for example '+'\n\t\t   * @param {string} fn           Function name, for example 'add'\n\t\t   * @param {Node[]} args         Operator arguments\n\t\t   * @param {boolean} [implicit]  Is this an implicit multiplication?",
            "line": " util.js:34426"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:34478"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:34502"
        },
        {
            "message": "Missing item type\nCreate a new OperatorNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:34512"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:34526"
        },
        {
            "message": "Missing item type\nCalculate which parentheses are necessary. Gets an OperatorNode\n(which is the root of the tree) and an Array of Nodes\n(this.args) and returns an array where 'true' means that an argument\nhas to be enclosed in parentheses whereas 'false' means the opposite.",
            "line": " util.js:34534"
        },
        {
            "message": "Missing item type\nGet string representation.",
            "line": " util.js:34718"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:34782"
        },
        {
            "message": "Missing item type\nGet identifier.",
            "line": " util.js:34877"
        },
        {
            "message": "Missing item type",
            "line": " util.js:34894"
        },
        {
            "message": "Missing item type\n'use strict';\nvar latex = __webpack_require__(32);\nfunction factory (type, config, load, typed, math) {\n\t\t  var Node = load(__webpack_require__(284));\n\t\t  var SymbolNode = load(__webpack_require__(299));\n  /**\n\t\t   * @constructor FunctionNode\n\t\t   * @extends {./Node}\n\t\t   * invoke a list with arguments on a node\n\t\t   * @param {./Node} fn       Node resolving with a function on which to invoke\n\t\t   *                          the arguments, typically a SymboNode or AccessorNode\n\t\t   * @param {./Node[]} args",
            "line": " util.js:34896"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:34958"
        },
        {
            "message": "Missing item type\nGet a unique name for a arguments to store in defs",
            "line": " util.js:35025"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:35044"
        },
        {
            "message": "Missing item type\nCreate a new FunctionNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:35054"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:35069"
        },
        {
            "message": "Missing item type\nGet string representation. (wrapper function)\nThis overrides parts of Node's toString function.\nIf callback is an object containing callbacks, it\ncalls the correct callback for the current node,\notherwise it falls back to calling Node's toString\nfunction.",
            "line": " util.js:35081"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:35109"
        },
        {
            "message": "Missing item type\nGet LaTeX representation. (wrapper function)\nThis overrides parts of Node's toTex function.\nIf callback is an object containing callbacks, it\ncalls the correct callback for the current node,\notherwise it falls back to calling Node's toTex\nfunction.",
            "line": " util.js:35200"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:35226"
        },
        {
            "message": "Missing item type\nGet identifier.",
            "line": " util.js:35269"
        },
        {
            "message": "Missing item type",
            "line": " util.js:35286"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var Node = load(__webpack_require__(284));\n  /**\n\t\t   * @constructor ParenthesisNode\n\t\t   * @extends {Node}\n\t\t   * A parenthesis node describes manual parenthesis from the user input\n\t\t   * @param {Node} content\n\t\t   * @extends {Node}",
            "line": " util.js:35288"
        },
        {
            "message": "Missing item type\nCompile the node to javascript code",
            "line": " util.js:35321"
        },
        {
            "message": "Missing item type\nGet the content of the current Node.",
            "line": " util.js:35337"
        },
        {
            "message": "Missing item type\nExecute a callback for each of the child nodes of this node",
            "line": " util.js:35346"
        },
        {
            "message": "Missing item type\nCreate a new ParenthesisNode having it's childs be the results of calling\nthe provided callback function for each of the childs of the original node.",
            "line": " util.js:35354"
        },
        {
            "message": "Missing item type\nCreate a clone of this node, a shallow copy",
            "line": " util.js:35365"
        },
        {
            "message": "Missing item type\nGet string representation",
            "line": " util.js:35373"
        },
        {
            "message": "Missing item type\nGet LaTeX representation",
            "line": " util.js:35386"
        },
        {
            "message": "Missing item type",
            "line": " util.js:35407"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var parse = load(__webpack_require__(282));\n  /**\n\t\t   * Evaluate an expression.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.eval(expr)\n\t\t   *     math.eval(expr, scope)\n\t\t   *     math.eval([expr1, expr2, expr3, ...])\n\t\t   *     math.eval([expr1, expr2, expr3, ...], scope)\n\t\t   *\n\t\t   * Example:\n\t\t   *\n\t\t   *     math.eval('(2+3)/4');                // 1.25\n\t\t   *     math.eval('sqrt(3^2 + 4^2)');        // 5\n\t\t   *     math.eval('sqrt(-4)');               // 2i\n\t\t   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]\n\t\t   *\n\t\t   *     var scope = {a:3, b:4};\n\t\t   *     math.eval('a * b', scope);           // 12\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    parse, compile\n\t\t   *\n\t\t   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n\t\t   * @param {Object} [scope]                    Scope to read/write variables\n\t\t   * @return {*} The result of the expression\n\t\t   * @throws {Error}",
            "line": " util.js:35409"
        },
        {
            "message": "Missing item type",
            "line": " util.js:35475"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed, math) {\n\t\t  var docs = load(__webpack_require__(103));\n  /**\n\t\t   * Retrieve help on a function or data type.\n\t\t   * Help files are retrieved from the documentation in math.expression.docs.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.help(search)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    console.log(math.help('sin').toString());\n\t\t   *    console.log(math.help(math.add).toString());\n\t\t   *    console.log(math.help(math.add).toJSON());\n\t\t   *\n\t\t   * @param {Function | string | Object} search   A function or function name\n\t\t   *                                              for which to get help\n\t\t   * @return {Help} A help object",
            "line": " util.js:35477"
        },
        {
            "message": "Missing item type",
            "line": " util.js:35545"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var parse = load(__webpack_require__(282));\n  /**\n\t\t   * Parse an expression. Returns a node tree, which can be evaluated by\n\t\t   * invoking node.eval();\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.parse(expr)\n\t\t   *     math.parse(expr, options)\n\t\t   *     math.parse([expr1, expr2, expr3, ...])\n\t\t   *     math.parse([expr1, expr2, expr3, ...], options)\n\t\t   *\n\t\t   * Example:\n\t\t   *\n\t\t   *     var node = math.parse('sqrt(3^2 + 4^2)');\n\t\t   *     node.compile().eval(); // 5\n\t\t   *\n\t\t   *     var scope = {a:3, b:4}\n\t\t   *     var node = math.parse('a * b'); // 12\n\t\t   *     var code = node.compile();\n\t\t   *     code.eval(scope); // 12\n\t\t   *     scope.a = 5;\n\t\t   *     code.eval(scope); // 20\n\t\t   *\n\t\t   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n\t\t   *     nodes[2].compile().eval(); // 12\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     eval, compile\n\t\t   *\n\t\t   * @param {string | string[] | Matrix} expr          Expression to be parsed\n\t\t   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n\t\t   *                                                   - `nodes` a set of custom nodes\n\t\t   * @return {Node | Node[]} node\n\t\t   * @throws {Error}",
            "line": " util.js:35547"
        },
        {
            "message": "Missing item type",
            "line": " util.js:35600"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed, math) {\n\t\t  var Parser = load(__webpack_require__(308));\n  /**\n\t\t   * Create a parser. The function creates a new `math.expression.Parser` object.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.parser()\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     var parser = new math.parser();\n\t\t   *\n\t\t   *     // evaluate expressions\n\t\t   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5\n\t\t   *     var b = parser.eval('sqrt(-4)');        // 2i\n\t\t   *     var c = parser.eval('2 inch in cm');    // 5.08 cm\n\t\t   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476\n\t\t   *\n\t\t   *     // define variables and functions\n\t\t   *     parser.eval('x = 7 / 2');               // 3.5\n\t\t   *     parser.eval('x + 3');                   // 6.5\n\t\t   *     parser.eval('function f(x, y) = x^y');  // f(x, y)\n\t\t   *     parser.eval('f(2, 3)');                 // 8\n\t\t   *\n\t\t   *     // get and set variables and functions\n\t\t   *     var x = parser.get('x');                // 7\n\t\t   *     var f = parser.get('f');                // function\n\t\t   *     var g = f(3, 2);                        // 9\n\t\t   *     parser.set('h', 500);\n\t\t   *     var i = parser.eval('h / 2');           // 250\n\t\t   *     parser.set('hello', function (name) {\n\t\t   *       return 'hello, ' + name + '!';\n\t\t   *     });\n\t\t   *     parser.eval('hello(\"user\")');           // \"hello, user!\"\n\t\t   *\n\t\t   *     // clear defined functions and variables\n\t\t   *     parser.clear();\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    eval, compile, parse\n\t\t   *\n\t\t   * @return {Parser} Parser",
            "line": " util.js:35602"
        },
        {
            "message": "Missing item type",
            "line": " util.js:35664"
        },
        {
            "message": "Missing item type\n'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed, math) {\n\t\t  var _parse = load(__webpack_require__(282));\n  /**\n\t\t   * @constructor Parser\n\t\t   * Parser contains methods to evaluate or parse expressions, and has a number\n\t\t   * of convenience methods to get, set, and remove variables from memory. Parser\n\t\t   * keeps a scope containing variables in memory, which is used for all\n\t\t   * evaluations.\n\t\t   *\n\t\t   * Methods:\n\t\t   *    var result = parser.eval(expr);    // evaluate an expression\n\t\t   *    var value = parser.get(name);      // retrieve a variable from the parser\n\t\t   *    var values = parser.getAll();      // retrieve all defined variables\n\t\t   *    parser.set(name, value);           // set a variable in the parser\n\t\t   *    parser.remove(name);               // clear a variable from the\n\t\t   *                                       // parsers scope\n\t\t   *    parser.clear();                    // clear the parsers scope\n\t\t   *\n\t\t   * Example usage:\n\t\t   *    var parser = new Parser();\n\t\t   *    // Note: there is a convenience method which can be used instead:\n\t\t   *    // var parser = new math.parser();\n\t\t   *\n\t\t   *    // evaluate expressions\n\t\t   *    parser.eval('sqrt(3^2 + 4^2)');         // 5\n\t\t   *    parser.eval('sqrt(-4)');                // 2i\n\t\t   *    parser.eval('2 inch in cm');            // 5.08 cm\n\t\t   *    parser.eval('cos(45 deg)');             // 0.7071067811865476\n\t\t   *\n\t\t   *    // define variables and functions\n\t\t   *    parser.eval('x = 7 / 2');               // 3.5\n\t\t   *    parser.eval('x + 3');                   // 6.5\n\t\t   *    parser.eval('function f(x, y) = x^y');  // f(x, y)\n\t\t   *    parser.eval('f(2, 3)');                 // 8\n\t\t   *\n\t\t   *    // get and set variables and functions\n\t\t   *    var x = parser.get('x');                // 7\n\t\t   *    var f = parser.get('f');                // function\n\t\t   *    var g = f(3, 2);                        // 9\n\t\t   *    parser.set('h', 500);\n\t\t   *    var i = parser.eval('h / 2');           // 250\n\t\t   *    parser.set('hello', function (name) {\n\t\t   *        return 'hello, ' + name + '!';\n\t\t   *    });\n\t\t   *    parser.eval('hello(\"user\")');           // \"hello, user!\"\n\t\t   *\n\t\t   *    // clear defined functions and variables\n\t\t   *    parser.clear();\n\t\t   *",
            "line": " util.js:35666"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:35731"
        },
        {
            "message": "Missing item type\nParse an expression and return the parsed function node.\nThe node tree can be compiled via `code = node.compile(math)`,\nand the compiled code can be executed as `code.eval([scope])`",
            "line": " util.js:35737"
        },
        {
            "message": "Missing item type\nParse and compile an expression, return the compiled javascript code.\nThe node can be evaluated via code.eval([scope])",
            "line": " util.js:35749"
        },
        {
            "message": "Missing item type\nParse and evaluate the given expression",
            "line": " util.js:35760"
        },
        {
            "message": "Missing item type\nGet a variable (a function or variable) by name from the parsers scope.\nReturns undefined when not found",
            "line": " util.js:35773"
        },
        {
            "message": "Missing item type\nGet a map with all defined variables",
            "line": " util.js:35784"
        },
        {
            "message": "Missing item type\nSet a symbol (a function or variable) by name from the parsers scope.",
            "line": " util.js:35792"
        },
        {
            "message": "Missing item type\nRemove a variable from the parsers scope",
            "line": " util.js:35802"
        },
        {
            "message": "Missing item type\nClear the scope with variables and functions",
            "line": " util.js:35811"
        },
        {
            "message": "Missing item type",
            "line": " util.js:35831"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(283),\n\t\t  __webpack_require__(289),\n\t\t  __webpack_require__(290),\n\t\t  __webpack_require__(293),\n\t\t  __webpack_require__(294),\n\t\t  __webpack_require__(295),\n\t\t  __webpack_require__(297),\n\t\t  __webpack_require__(296),\n\t\t  __webpack_require__(302),\n\t\t  __webpack_require__(284),\n\t\t  __webpack_require__(300),\n\t\t  __webpack_require__(301),\n\t\t  __webpack_require__(303),\n\t\t  __webpack_require__(298),\n\t\t  __webpack_require__(299),\n\t\t  __webpack_require__(310)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:35833"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * @constructor UpdateNode",
            "line": " util.js:35857"
        },
        {
            "message": "Missing item type",
            "line": " util.js:35878"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(312),\n\t\t  __webpack_require__(314),\n\t\t  __webpack_require__(316),\n\t\t  __webpack_require__(318),\n\t\t  __webpack_require__(319),\n\t\t  __webpack_require__(321),\n\t\t  __webpack_require__(327),\n\t\t  __webpack_require__(332),\n\t\t  __webpack_require__(334),\n\t\t  __webpack_require__(336)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:35880"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n/**\n\t\t * Attach a transform function to math.range\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform changed the last `dim` parameter of function concat\n\t\t * from one-based to zero based",
            "line": " util.js:35898"
        },
        {
            "message": "Missing item type",
            "line": " util.js:35942"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar array = __webpack_require__(40);\n\t\tvar IndexError = __webpack_require__(43);\n\t\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Concatenate two or more matrices.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.concat(A, B, C, ...)\n\t\t   *     math.concat(A, B, C, ..., dim)\n\t\t   *\n\t\t   * Where:\n\t\t   *\n\t\t   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n\t\t   *   By default the last dimension of the matrices.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var A = [[1, 2], [5, 6]];\n\t\t   *    var B = [[3, 4], [7, 8]];\n\t\t   *\n\t\t   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n\t\t   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n\t\t   *    math.concat('hello', ' ', 'world'); // returns 'hello world'\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    size, squeeze, subset, transpose\n\t\t   *\n\t\t   * @param {... Array | Matrix} args     Two or more matrices\n\t\t   * @return {Array | Matrix} Concatenated matrix",
            "line": " util.js:35944"
        },
        {
            "message": "Missing item type\nRecursively concatenate two matrices.\nThe contents of the matrices is not cloned.",
            "line": " util.js:36059"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36092"
        },
        {
            "message": "Missing item type\n'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t\t * Attach a transform function to math.filter\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform adds support for equations as test function for math.filter,\n\t\t * so you can do something like 'filter([3, -2, 5], x > 0)'.",
            "line": " util.js:36094"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36164"
        },
        {
            "message": "Missing item type\n'use strict';\nvar size = __webpack_require__(40).size;\n\t\tvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  \n\t\t  /**\n\t\t   * Filter the items in an array or one dimensional matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.filter(x, test)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    function isPositive (x) {\n\t\t   *      return x > 0;\n\t\t   *    }\n\t\t   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]\n\t\t   *\n\t\t   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/); // returns [\"23\", \"100\", \"55\"]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    forEach, map, sort\n\t\t   *\n\t\t   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n\t\t   * @param {Function | RegExp} test\n\t\t   *        A function or regular expression to test items.\n\t\t   *        All entries for which `test` returns true are returned.\n\t\t   *        When `test` is a function, it is invoked with three parameters:\n\t\t   *        the value of the element, the index of the element, and the\n\t\t   *        matrix/array being traversed. The function must return a boolean.\n\t\t   * @return {Matrix | Array} Returns the filtered matrix.",
            "line": " util.js:36166"
        },
        {
            "message": "Missing item type\nFilter values in a callback given a callback function",
            "line": " util.js:36224"
        },
        {
            "message": "Missing item type\nFilter values in a callback given a regular expression",
            "line": " util.js:36253"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36274"
        },
        {
            "message": "Missing item type\n'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t\t * Attach a transform function to math.forEach\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform creates a one-based index instead of a zero-based index",
            "line": " util.js:36276"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36326"
        },
        {
            "message": "Missing item type\n'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Iterate over all elements of a matrix/array, and executes the given callback function.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.forEach(x, callback)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.forEach([1, 2, 3], function(value) {\n\t\t   *      console.log(value);\n\t\t   *    });\n\t\t   *    // outputs 1, 2, 3\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    filter, map, sort\n\t\t   *\n\t\t   * @param {Matrix | Array} x    The matrix to iterate on.\n\t\t   * @param {Function} callback   The callback function is invoked with three\n\t\t   *                              parameters: the value of the element, the index\n\t\t   *                              of the element, and the Matrix/array being traversed.",
            "line": " util.js:36328"
        },
        {
            "message": "Missing item type\nforEach for a multi dimensional array",
            "line": " util.js:36371"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36408"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Attach a transform function to math.index\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform creates a one-based index instead of a zero-based index",
            "line": " util.js:36410"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36465"
        },
        {
            "message": "Missing item type\n'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\n/**\n\t\t * Attach a transform function to math.map\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform creates a one-based index instead of a zero-based index",
            "line": " util.js:36467"
        },
        {
            "message": "Missing item type\nMap for a multi dimensional array. One-based indexes",
            "line": " util.js:36494"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36535"
        },
        {
            "message": "Missing item type\n'use strict';\nvar maxArgumentCount = __webpack_require__(45).maxArgumentCount;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Create a new matrix or array with the results of the callback function executed on\n\t\t   * each entry of the matrix/array.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.map(x, callback)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.map([1, 2, 3], function(value) {\n\t\t   *      return value * value;\n\t\t   *    });  // returns [1, 4, 9]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    filter, forEach, sort\n\t\t   *\n\t\t   * @param {Matrix | Array} x    The matrix to iterate on.\n\t\t   * @param {Function} callback   The callback method is invoked with three\n\t\t   *                              parameters: the value of the element, the index\n\t\t   *                              of the element, and the matrix being traversed.\n\t\t   * @return {Matrix | array}     Transformed map of x",
            "line": " util.js:36537"
        },
        {
            "message": "Missing item type\nMap for a multi dimensional array",
            "line": " util.js:36581"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36620"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\t\tvar isCollection = __webpack_require__(322);\n/**\n\t\t * Attach a transform function to math.max\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform changed the last `dim` parameter of function max\n\t\t * from one-based to zero based",
            "line": " util.js:36622"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36667"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Test whether a value is a collection: an Array or Matrix\n\t\t * @param {*} x\n\t\t * @returns {boolean} isCollection",
            "line": " util.js:36669"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36683"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepForEach = __webpack_require__(324);\n\t\tvar reduce = __webpack_require__(325);\n\t\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t\t  var larger = load(__webpack_require__(64));\n  /**\n\t\t   * Compute the maximum value of a matrix or a  list with values.\n\t\t   * In case of a multi dimensional array, the maximum of the flattened array\n\t\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.max(a, b, c, ...)\n\t\t   *     math.max(A)\n\t\t   *     math.max(A, dim)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.max(2, 1, 4, 3);                  // returns 4\n\t\t   *     math.max([2, 1, 4, 3]);                // returns 4\n\t\t   *\n\t\t   *     // maximum over a specified dimension (zero-based)\n\t\t   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]\n\t\t   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]\n\t\t   *\n\t\t   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n\t\t   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, min, prod, std, sum, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The maximum value",
            "line": " util.js:36685"
        },
        {
            "message": "Missing item type\nReturn the largest of two values",
            "line": " util.js:36750"
        },
        {
            "message": "Missing item type\nRecursively calculate the maximum value in an n-dimensional array",
            "line": " util.js:36761"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36788"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Recursively loop over all elements in a given multi dimensional array\n\t\t * and invoke the callback on each of the elements.\n\t\t * @param {Array | Matrix} array\n\t\t * @param {Function} callback     The callback method is invoked with one\n\t\t *                                parameter: the current element in the array",
            "line": " util.js:36790"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36819"
        },
        {
            "message": "Missing item type\n'use strict';\nvar arraySize = __webpack_require__(40).size;\n\t\tvar IndexError = __webpack_require__(43);\n/**\n\t\t * Reduce a given matrix or array to a new matrix or\n\t\t * array with one less dimension, applying the given\n\t\t * callback in the selected dimension.\n\t\t * @param {Array | Matrix} mat\n\t\t * @param {number} dim\n\t\t * @param {Function} callback\n\t\t * @return {Array | Matrix} res",
            "line": " util.js:36821"
        },
        {
            "message": "Missing item type\nRecursively reduce a matrix",
            "line": " util.js:36851"
        },
        {
            "message": "Missing item type\nTranspose a matrix",
            "line": " util.js:36886"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36908"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isCollection = __webpack_require__(322);\n/**\n\t\t * Test whether an array contains collections\n\t\t * @param {Array} array\n\t\t * @returns {boolean} Returns true when the array contains one or multiple\n\t\t *                    collections (Arrays or Matrices). Returns false otherwise.",
            "line": " util.js:36910"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36932"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\t\tvar isCollection = __webpack_require__(322);\n/**\n\t\t * Attach a transform function to math.mean\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform changed the last `dim` parameter of function mean\n\t\t * from one-based to zero based",
            "line": " util.js:36934"
        },
        {
            "message": "Missing item type",
            "line": " util.js:36979"
        },
        {
            "message": "Missing item type\n'use strict';\nvar size = __webpack_require__(40).size;\n\t\tvar deepForEach = __webpack_require__(324);\n\t\tvar reduce = __webpack_require__(325);\n\t\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var divide = load(__webpack_require__(329));\n  /**\n\t\t   * Compute the mean value of matrix or a list with values.\n\t\t   * In case of a multi dimensional array, the mean of the flattened array\n\t\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.mean(a, b, c, ...)\n\t\t   *     math.mean(A)\n\t\t   *     math.mean(A, dim)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.mean(2, 1, 4, 3);                     // returns 2.5\n\t\t   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725\n\t\t   *\n\t\t   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]\n\t\t   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     median, min, max, sum, prod, std, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The mean of all values",
            "line": " util.js:36981"
        },
        {
            "message": "Missing item type\nCalculate the mean value in an n-dimensional array, returning a\nn-1 dimensional array",
            "line": " util.js:37042"
        },
        {
            "message": "Missing item type\nRecursively calculate the mean value in an n-dimensional array",
            "line": " util.js:37056"
        },
        {
            "message": "Missing item type",
            "line": " util.js:37083"
        },
        {
            "message": "Missing item type\n'use strict';\nvar extend = __webpack_require__(3).extend;\nfunction factory (type, config, load, typed) {\n  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiply     = load(__webpack_require__(84));\n\t\t  var inv          = load(__webpack_require__(330));\n\t\t  var matrix       = load(__webpack_require__(52));\n  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Divide two values, `x / y`.\n\t\t   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.divide(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.divide(2, 3);            // returns number 0.6666666666666666\n\t\t   *\n\t\t   *    var a = math.complex(5, 14);\n\t\t   *    var b = math.complex(4, 1);\n\t\t   *    math.divide(a, b);            // returns Complex 2 + 3i\n\t\t   *\n\t\t   *    var c = [[7, -6], [13, -4]];\n\t\t   *    var d = [[1, 2], [4, 3]];\n\t\t   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]\n\t\t   *\n\t\t   *    var e = math.unit('18 km');\n\t\t   *    math.divide(e, 4.5);          // returns Unit 4 km\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`",
            "line": " util.js:37085"
        },
        {
            "message": "Missing item type",
            "line": " util.js:37178"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix       = load(__webpack_require__(52));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var addScalar    = load(__webpack_require__(53));\n\t\t  var multiply     = load(__webpack_require__(84));\n\t\t  var unaryMinus   = load(__webpack_require__(78));\n\t\t  var det          = load(__webpack_require__(331));\n\t\t  var eye          = load(__webpack_require__(83));\n  /**\n\t\t   * Calculate the inverse of a square matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.inv(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]\n\t\t   *     math.inv(4);                 // returns 0.25\n\t\t   *     1 / 4;                       // returns 0.25\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     det, transpose\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n\t\t   * @return {number | Complex | Array | Matrix} The inverse of `x`.",
            "line": " util.js:37180"
        },
        {
            "message": "Missing item type\nCalculate the inverse of a square matrix",
            "line": " util.js:37272"
        },
        {
            "message": "Missing item type",
            "line": " util.js:37391"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\n\t\tvar object = util.object;\n\t\tvar string = util.string;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var unaryMinus = load(__webpack_require__(78));\n  /**\n\t\t   * Calculate the determinant of a matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.det(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.det([[1, 2], [3, 4]]); // returns -2\n\t\t   *\n\t\t   *    var A = [\n\t\t   *      [-2, 2, 3],\n\t\t   *      [-1, 1, 3],\n\t\t   *      [2, 0, -1]\n\t\t   *    ]\n\t\t   *    math.det(A); // returns 6\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    inv\n\t\t   *\n\t\t   * @param {Array | Matrix} x  A matrix\n\t\t   * @return {number} The determinant of `x`",
            "line": " util.js:37393"
        },
        {
            "message": "Missing item type\nCalculate the determinant of a matrix",
            "line": " util.js:37491"
        },
        {
            "message": "Missing item type",
            "line": " util.js:37565"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n\t\tvar isCollection = __webpack_require__(322);\n/**\n\t\t * Attach a transform function to math.min\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform changed the last `dim` parameter of function min\n\t\t * from one-based to zero based",
            "line": " util.js:37567"
        },
        {
            "message": "Missing item type",
            "line": " util.js:37612"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepForEach = __webpack_require__(324);\n\t\tvar reduce = __webpack_require__(325);\n\t\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t\t  var smaller = load(__webpack_require__(60));\n\t\t  \n\t\t  /**\n\t\t   * Compute the maximum value of a matrix or a  list of values.\n\t\t   * In case of a multi dimensional array, the maximum of the flattened array\n\t\t   * will be calculated. When `dim` is provided, the maximum over the selected\n\t\t   * dimension will be calculated. Parameter `dim` is zero-based.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.min(a, b, c, ...)\n\t\t   *     math.min(A)\n\t\t   *     math.min(A, dim)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.min(2, 1, 4, 3);                  // returns 1\n\t\t   *     math.min([2, 1, 4, 3]);                // returns 1\n\t\t   *\n\t\t   *     // maximum over a specified dimension (zero-based)\n\t\t   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]\n\t\t   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]\n\t\t   *\n\t\t   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n\t\t   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, max, prod, std, sum, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The minimum value",
            "line": " util.js:37614"
        },
        {
            "message": "Missing item type\nReturn the smallest of two values",
            "line": " util.js:37679"
        },
        {
            "message": "Missing item type\nRecursively calculate the minimum value in an n-dimensional array",
            "line": " util.js:37690"
        },
        {
            "message": "Missing item type",
            "line": " util.js:37717"
        },
        {
            "message": "Missing item type\n'use strict';\n/**\n\t\t * Attach a transform function to math.range\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform creates a range which includes the end value",
            "line": " util.js:37719"
        },
        {
            "message": "Missing item type",
            "line": " util.js:37751"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  var ZERO = new type.BigNumber(0);\n\t\t  var ONE = new type.BigNumber(1);\n  /**\n\t\t   * Create an array from a range.\n\t\t   * By default, the range end is excluded. This can be customized by providing\n\t\t   * an extra parameter `includeEnd`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.range(str [, includeEnd])               // Create a range from a string,\n\t\t   *                                                  // where the string contains the\n\t\t   *                                                  // start, optional step, and end,\n\t\t   *                                                  // separated by a colon.\n\t\t   *     math.range(start, end [, includeEnd])        // Create a range with start and\n\t\t   *                                                  // end and a step size of 1.\n\t\t   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n\t\t   *                                                  // and end.\n\t\t   *\n\t\t   * Where:\n\t\t   *\n\t\t   * - `str: string`\n\t\t   *   A string 'start:end' or 'start:step:end'\n\t\t   * - `start: {number | BigNumber}`\n\t\t   *   Start of the range\n\t\t   * - `end: number | BigNumber`\n\t\t   *   End of the range, excluded by default, included when parameter includeEnd=true\n\t\t   * - `step: number | BigNumber`\n\t\t   *   Step size. Default value is 1.\n\t\t   * - `includeEnd: boolean`\n\t\t   *   Option to specify whether to include the end or not. False by default.\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.range(2, 6);        // [2, 3, 4, 5]\n\t\t   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]\n\t\t   *     math.range('2:1:6');     // [2, 3, 4, 5]\n\t\t   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     ones, zeros, size, subset\n\t\t   *\n\t\t   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n\t\t   * @return {Array | Matrix} range",
            "line": " util.js:37753"
        },
        {
            "message": "Missing item type\nCreate a range with numbers. End is excluded",
            "line": " util.js:37877"
        },
        {
            "message": "Missing item type\nCreate a range with numbers. End is included",
            "line": " util.js:37904"
        },
        {
            "message": "Missing item type\nCreate a range with big numbers. End is excluded",
            "line": " util.js:37931"
        },
        {
            "message": "Missing item type\nCreate a range with big numbers. End is included",
            "line": " util.js:37958"
        },
        {
            "message": "Missing item type\nParse a string into a range,\nThe string contains the start, optional step, and end, separated by a colon.\nIf the string does not contain a valid range, null is returned.\nFor example str='0:2:11'.",
            "line": " util.js:37985"
        },
        {
            "message": "Missing item type",
            "line": " util.js:38036"
        },
        {
            "message": "Missing item type\n'use strict';\nvar errorTransform = __webpack_require__(287).transform;\n/**\n\t\t * Attach a transform function to math.subset\n\t\t * Adds a property transform containing the transform function.\n\t\t *\n\t\t * This transform creates a range which includes the end value",
            "line": " util.js:38038"
        },
        {
            "message": "Missing item type",
            "line": " util.js:38070"
        },
        {
            "message": "Missing item type\n'use strict';\nvar object = __webpack_require__(3);\n\t\tvar string = __webpack_require__(23);\nfunction factory (type, config, load, typed) {\n\t\t  var parser = load(__webpack_require__(307))();\n  /**\n\t\t   * Documentation object\n\t\t   * @param {Object} doc  Object containing properties:\n\t\t   *                      {string} name\n\t\t   *                      {string} category\n\t\t   *                      {string} description\n\t\t   *                      {string[]} syntax\n\t\t   *                      {string[]} examples\n\t\t   *                      {string[]} seealso\n\t\t   * @constructor",
            "line": " util.js:38072"
        },
        {
            "message": "Missing item type\nAttach type information",
            "line": " util.js:38103"
        },
        {
            "message": "Missing item type\nGenerate a string representation of the Help object",
            "line": " util.js:38109"
        },
        {
            "message": "Missing item type\nExport the help object to JSON",
            "line": " util.js:38156"
        },
        {
            "message": "Missing item type\nInstantiate a Help object from a JSON object",
            "line": " util.js:38165"
        },
        {
            "message": "Missing item type\nReturns a string representation of the Help object",
            "line": " util.js:38180"
        },
        {
            "message": "Missing item type",
            "line": " util.js:38193"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(339),\n\t\t  __webpack_require__(366),\n\t\t  __webpack_require__(397),\n\t\t  __webpack_require__(413),\n\t\t  __webpack_require__(422),\n\t\t  __webpack_require__(427),\n\t\t  __webpack_require__(430),\n\t\t  __webpack_require__(436),\n\t\t  __webpack_require__(448),\n\t\t  __webpack_require__(457),\n\t\t  __webpack_require__(461),\n\t\t  __webpack_require__(463),\n\t\t  __webpack_require__(470),\n\t\t  __webpack_require__(472),\n\t\t  __webpack_require__(498),\n\t\t  __webpack_require__(500)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:38195"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  // decomposition\n\t\t  __webpack_require__(340),\n\t\t  __webpack_require__(341),\n  // solver\n\t\t  __webpack_require__(361),\n\t\t  __webpack_require__(363),\n\t\t  __webpack_require__(365)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:38219"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nvar object = util.object;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var abs = load(__webpack_require__(86));\n\t\t  var addScalar = load(__webpack_require__(53));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var larger = load(__webpack_require__(64));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var unaryMinus = load(__webpack_require__(78));\n\t\t  \n\t\t  var SparseMatrix = type.SparseMatrix;\n\t\t  var DenseMatrix = type.DenseMatrix;\n\t\t  var Spa = type.Spa;\n\t\t  \n\t\t  /**\n\t\t   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n\t\t   * row permutation vector `p` where `A[p,:] = L * U`\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.lup(A);\n\t\t   *\n\t\t   * Example:\n\t\t   *\n\t\t   *    var m = [[2, 1], [1, 4]];\n\t\t   *    var r = math.lup();\n\t\t   *    // r = {\n\t\t   *    //   L: [[1, 0], [0.5, 1]],\n\t\t   *    //   U: [[2, 1], [0, 3.5]],\n\t\t   *    //   P: [0, 1]\n\t\t   *    // }\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    slu, lsolve, lusolve, usolve\n\t\t   *\n\t\t   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n\t\t   *\n\t\t   * @return {Array<Matrix>}      The lower triangular matrix, the upper triangular matrix and the permutation matrix.",
            "line": " util.js:38235"
        },
        {
            "message": "Missing item type",
            "line": " util.js:38626"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nvar number = util.number,\n\t\t    \n\t\t    isInteger = number.isInteger;\nfunction factory (type, config, load, typed) {\n  var cs_sqr = load(__webpack_require__(342));\n\t\t  var cs_lu = load(__webpack_require__(353));\n  /**\n\t\t   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where\n\t\t   *\n\t\t   * `P * A * Q = L * U`\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.slu(A, order, threshold);\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    lup, lsolve, usolve, lusolve\n\t\t   *\n\t\t   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.\n\t\t   * @param {Number}       order          The Symbolic Ordering and Analysis order:\n\t\t   *                                       0 - Natural ordering, no permutation vector q is returned\n\t\t   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'\n\t\t   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. \n\t\t   *                                           This is appropriatefor LU factorization of unsymmetric matrices.\n\t\t   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.\n\t\t   *                                           A dense row is a row with more than 10*sqr(columns) entries.\n\t\t   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)\n\t\t   *\n\t\t   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.",
            "line": " util.js:38628"
        },
        {
            "message": "Missing item type",
            "line": " util.js:38704"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_amd = load(__webpack_require__(343));\n\t\t  var cs_permute = load(__webpack_require__(348));\n\t\t  var cs_etree = load(__webpack_require__(349));\n\t\t  var cs_post = load(__webpack_require__(350));\n\t\t  var cs_counts = load(__webpack_require__(351));\n  /**\n\t\t   * Symbolic ordering and analysis for QR and LU decompositions.\n\t\t   *\n\t\t   * @param {Number}  order           The ordering strategy (see cs_amd for more details)\n\t\t   * @param {Matrix}  a               The A matrix\n\t\t   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or\n\t\t   *                                  symbolic ordering and analysis for LU decomposition (false)\n\t\t   *\n\t\t   * @return {Object}                 The Symbolic ordering and analysis for matrix A\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:38706"
        },
        {
            "message": "Missing item type\nCompute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent",
            "line": " util.js:38771"
        },
        {
            "message": "Missing item type",
            "line": " util.js:38873"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n\t\t  var cs_fkeep = load(__webpack_require__(345));\n\t\t  var cs_tdfs = load(__webpack_require__(346));\n\t\t  \n\t\t  var add       = load(__webpack_require__(51));\n\t\t  var multiply  = load(__webpack_require__(84));\n\t\t  var transpose = load(__webpack_require__(347));\n  /**\n\t\t   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used \n\t\t   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n\t\t   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n\t\t   * of a right looking sparse Cholesky factorization.\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n\t\t   *\n\t\t   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n\t\t   * @param {Matrix} m        Sparse Matrix\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:38875"
        },
        {
            "message": "Missing item type\nCreates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\nvector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n\nOrder: 0\n  A natural ordering P=null matrix is returned.\n\nOrder: 1\n  Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n  P = M + M'\n\nOrder: 2\n  Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n  P = M' * M\n\nOrder: 3\n  This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n  P = M' * M",
            "line": " util.js:39283"
        },
        {
            "message": "Missing item type\nInitialize quotient graph. There are four kind of nodes and elements that must be represented:\n\n - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).",
            "line": " util.js:39344"
        },
        {
            "message": "Missing item type\nInitialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with \ndegree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\noutput permutation p.",
            "line": " util.js:39386"
        },
        {
            "message": "Missing item type",
            "line": " util.js:39452"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t\t   * This function \"flips\" its input about the integer -1.\n\t\t   *\n\t\t   * @param {Number}  i               The value to flip\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:39454"
        },
        {
            "message": "Missing item type",
            "line": " util.js:39480"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t\t   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\n\t\t   *\n\t\t   * @param {Matrix}   a              The sparse matrix\n\t\t   * @param {function} callback       The callback function, function will be invoked with the following args:\n\t\t   *                                    - The entry row\n\t\t   *                                    - The entry column\n\t\t   *                                    - The entry value\n\t\t   *                                    - The state parameter\n\t\t   * @param {any}      other          The state\n\t\t   *\n\t\t   * @return                          The number of nonzero elements in the matrix\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:39482"
        },
        {
            "message": "Missing item type",
            "line": " util.js:39551"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t\t   * Depth-first search and postorder of a tree rooted at node j\n\t\t   *\n\t\t   * @param {Number}  j               The tree node\n\t\t   * @param {Number}  k               \n\t\t   * @param {Array}   w               The workspace array\n\t\t   * @param {Number}  head            The index offset within the workspace for the head array\n\t\t   * @param {Number}  next            The index offset within the workspace for the next array\n\t\t   * @param {Array}   post            The post ordering array\n\t\t   * @param {Number}  stack           The index offset within the workspace for the stack array\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:39553"
        },
        {
            "message": "Missing item type",
            "line": " util.js:39609"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var DenseMatrix = type.DenseMatrix,\n\t\t      SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Transpose a matrix. All values of the matrix are reflected over its\n\t\t   * main diagonal. Only applicable to two dimensional matrices containing\n\t\t   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n\t\t   * vectors and scalars return the input unchanged.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.transpose(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     var A = [[1, 2, 3], [4, 5, 6]];\n\t\t   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     diag, inv, subset, squeeze\n\t\t   *\n\t\t   * @param {Array | Matrix} x  Matrix to be transposed\n\t\t   * @return {Array | Matrix}   The transposed matrix",
            "line": " util.js:39611"
        },
        {
            "message": "Missing item type",
            "line": " util.js:39793"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type) {\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Permutes a sparse matrix C = P * A * Q\n\t\t   *\n\t\t   * @param {Matrix}  a               The Matrix A\n\t\t   * @param {Array}   pinv            The row permutation vector\n\t\t   * @param {Array}   q               The column permutation vector\n\t\t   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n\t\t   *\n\t\t   * @return {Matrix}                 C = P * A * Q, null on error\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:39795"
        },
        {
            "message": "Missing item type",
            "line": " util.js:39870"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t\t   * Computes the elimination tree of Matrix A (using triu(A)) or the \n\t\t   * elimination tree of A'A without forming A'A.\n\t\t   *\n\t\t   * @param {Matrix}  a               The A Matrix\n\t\t   * @param {boolean} ata             A value of true the function computes the etree of A'A\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:39872"
        },
        {
            "message": "Missing item type",
            "line": " util.js:39952"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_tdfs = load(__webpack_require__(346));\n  /**\n\t\t   * Post order a tree of forest\n\t\t   *\n\t\t   * @param {Array}   parent          The tree or forest\n\t\t   * @param {Number}  n               Number of columns\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:39954"
        },
        {
            "message": "Missing item type",
            "line": " util.js:40017"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var transpose = load(__webpack_require__(347));\n\t\t  \n\t\t  var cs_leaf = load(__webpack_require__(352));\n  /**\n\t\t   * Computes the column counts using the upper triangular part of A.\n\t\t   * It transposes A internally, none of the input parameters are modified.\n\t\t   *\n\t\t   * @param {Matrix} a           The sparse matrix A\n\t\t   *\n\t\t   * @param {Matrix} ata         Count the columns of A'A instead\n\t\t   *\n\t\t   * @return                     An array of size n of the column counts or null on error\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:40019"
        },
        {
            "message": "Missing item type",
            "line": " util.js:40144"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t\t   * This function determines if j is a leaf of the ith row subtree.\n\t\t   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)\n\t\t   *\n\t\t   * @param {Number}  i               The ith row subtree\n\t\t   * @param {Number}  j               The node to test\n\t\t   * @param {Array}   w               The workspace array\n\t\t   * @param {Number}  first           The index offset within the workspace for the first array\n\t\t   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array\n\t\t   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array\n\t\t   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array\n\t\t   *\n\t\t   * @return {Object}\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:40146"
        },
        {
            "message": "Missing item type",
            "line": " util.js:40216"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var abs = load(__webpack_require__(86));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  \n\t\t  var larger = load(__webpack_require__(64));\n\t\t  var largerEq = load(__webpack_require__(354));\n\t\t  \n\t\t  var cs_spsolve = load(__webpack_require__(355));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n\t\t   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L \n\t\t   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n\t\t   * L * U = A(p, q), where p is the inverse of pinv.\n\t\t   *\n\t\t   * @param {Matrix}  m               The A Matrix to factorize\n\t\t   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing \n\t\t   *                                  column ordering q\n\t\t   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n\t\t   *\n\t\t   * @return {Number}                 The numeric LU factorization of A or null\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:40218"
        },
        {
            "message": "Missing item type",
            "line": " util.js:40400"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether value x is larger or equal to y.\n\t\t   *\n\t\t   * The function returns true when x is larger than y or the relative\n\t\t   * difference between x and y is smaller than the configured epsilon. The\n\t\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.largerEq(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.larger(2, 1 + 1);         // returns false\n\t\t   *    math.largerEq(2, 1 + 1);       // returns true\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal, smaller, smallerEq, larger, compare\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false",
            "line": " util.js:40402"
        },
        {
            "message": "Missing item type",
            "line": " util.js:40581"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var subtract = load(__webpack_require__(77));\n  var cs_reach = load(__webpack_require__(356));\n  /**\n\t\t   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the\n\t\t   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the\n\t\t   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U \n\t\t   * is upper triangular with the diagonal entry as the last entry in each column.\n\t\t   *\n\t\t   * @param {Matrix}  g               The G matrix\n\t\t   * @param {Matrix}  b               The B matrix\n\t\t   * @param {Number}  k               The kth column in B\n\t\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t\t   * @param {Array}   x               The soluton to the linear system G * x = b\n\t\t   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n\t\t   * @param {boolean} lo              The lower (true) upper triangular (false) flag\n\t\t   *\n\t\t   * @return {Number}                 The index for the nonzero pattern\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:40583"
        },
        {
            "message": "Missing item type",
            "line": " util.js:40673"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_dfs = load(__webpack_require__(357));\n\t\t  var cs_marked = load(__webpack_require__(358));\n\t\t  var cs_mark = load(__webpack_require__(359));\n  /**\n\t\t   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 \n\t\t   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\n\t\t   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\n\t\t   *\n\t\t   * @param {Matrix}  g               The G matrix\n\t\t   * @param {Matrix}  b               The B matrix\n\t\t   * @param {Number}  k               The kth column in B\n\t\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t\t   * @param {Array}   pinv            The inverse row permutation vector\n\t\t   *\n\t\t   * @return {Number}                 The index for the nonzero pattern\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:40675"
        },
        {
            "message": "Missing item type",
            "line": " util.js:40740"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_marked = load(__webpack_require__(358));\n\t\t  var cs_mark   = load(__webpack_require__(359));\n\t\t  var cs_unflip = load(__webpack_require__(360));\n  /**\n\t\t   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting\n\t\t   * at nodes in B (see cs_reach()).\n\t\t   *\n\t\t   * @param {Number}  j               The starting node for the DFS algorithm\n\t\t   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored\n\t\t   * @param {Number}  top             Start index in stack xi[top..n-1]\n\t\t   * @param {Number}  k               The kth column in B\n\t\t   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n\t\t   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n\t\t   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n\t\t   *\n\t\t   * @return {Number}                 New value of top\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:40742"
        },
        {
            "message": "Missing item type",
            "line": " util.js:40831"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t\t   * Checks if the node at w[j] is marked\n\t\t   *\n\t\t   * @param {Array}   w               The array\n\t\t   * @param {Number}  j               The array index\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:40833"
        },
        {
            "message": "Missing item type",
            "line": " util.js:40860"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n  /**\n\t\t   * Marks the node at w[j]\n\t\t   *\n\t\t   * @param {Array}   w               The array\n\t\t   * @param {Number}  j               The array index\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:40862"
        },
        {
            "message": "Missing item type",
            "line": " util.js:40891"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load) {\n  var cs_flip = load(__webpack_require__(344));\n\t\t  \n\t\t  /**\n\t\t   * Flips the value if it is negative of returns the same value otherwise.\n\t\t   *\n\t\t   * @param {Number}  i               The value to flip\n\t\t   *\n\t\t   * Reference: http://faculty.cse.tamu.edu/davis/publications.html",
            "line": " util.js:40893"
        },
        {
            "message": "Missing item type",
            "line": " util.js:40921"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var equalScalar = load(__webpack_require__(48));\n  var solveValidation = load(__webpack_require__(362));\n  var DenseMatrix = type.DenseMatrix;\n  /** \n\t\t   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.\n\t\t   *\n\t\t   * `L * x = b`\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.lsolve(L, b);\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = [[-2, 3], [2, 1]];\n\t\t   *    var b = [11, 9];\n\t\t   *    var x = lsolve(a, b);  // [[-5.5], [20]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    lup, slu, usolve, lusolve\n\t\t   *\n\t\t   * @param {Matrix, Array} L       A N x N matrix or array (L)\n\t\t   * @param {Matrix, Array} b       A column vector with the b values\n\t\t   *\n\t\t   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)",
            "line": " util.js:40923"
        },
        {
            "message": "Missing item type",
            "line": " util.js:41114"
        },
        {
            "message": "Missing item type\n'use strict';\nvar util = __webpack_require__(39);\nvar string = util.string;\n\t\tvar array = util.array;\nvar isArray = Array.isArray;\nfunction factory (type) {\n\t\t  \n\t\t  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Validates matrix and column vector b for backward/forward substitution algorithms.\n\t\t   *\n\t\t   * @param {Matrix} m            An N x N matrix\n\t\t   * @param {Array | Matrix} b    A column vector\n\t\t   * @param {Boolean} copy        Return a copy of vector b\n\t\t   *\n\t\t   * @return {DenseMatrix}        Dense column vector b",
            "line": " util.js:41116"
        },
        {
            "message": "Missing item type",
            "line": " util.js:41281"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isArray = Array.isArray;\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var lup = load(__webpack_require__(340));\n\t\t  var slu = load(__webpack_require__(341));\n\t\t  var cs_ipvec = load(__webpack_require__(364));\n  var solveValidation = load(__webpack_require__(362));\n  var usolve = load(__webpack_require__(365));\n\t\t  var lsolve = load(__webpack_require__(361));\n  /**\n\t\t   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n\t\t   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];\n\t\t   *\n\t\t   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n\t\t   *\n\t\t   *    var f = math.lup(m);\n\t\t   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n\t\t   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]\n\t\t   *\n\t\t   *    var a = [[-2, 3], [2, 1]];\n\t\t   *    var b = [11, 9];\n\t\t   *    var x = lusolve(a, b);  // [[-5.5], [20]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    lup, slu, lsolve, usolve\n\t\t   *\n\t\t   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n\t\t   * @param {Matrix | Array} b               Column Vector\n\t\t   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n\t\t   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n\t\t   *\n\t\t   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b",
            "line": " util.js:41283"
        },
        {
            "message": "Missing item type",
            "line": " util.js:41412"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory () {\n  /**\n\t\t   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.\n\t\t   *\n\t\t   * @param {Array} p           The permutation vector of length n. null value denotes identity\n\t\t   * @param {Array} b           The input vector\n\t\t   *\n\t\t   * @return {Array}            The output vector x = P'b",
            "line": " util.js:41414"
        },
        {
            "message": "Missing item type",
            "line": " util.js:41459"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var equalScalar = load(__webpack_require__(48));\n  var solveValidation = load(__webpack_require__(362));\n\t\t  \n\t\t  var DenseMatrix = type.DenseMatrix;\n  /**\n\t\t   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n\t\t   *\n\t\t   * `U * x = b`\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.usolve(U, b);\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = [[-2, 3], [2, 1]];\n\t\t   *    var b = [11, 9];\n\t\t   *    var x = usolve(a, b);  // [[8], [9]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    lup, slu, usolve, lusolve\n\t\t   *\n\t\t   * @param {Matrix, Array} U       A N x N matrix or array (U)\n\t\t   * @param {Matrix, Array} b       A column vector with the b values\n\t\t   *\n\t\t   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)",
            "line": " util.js:41461"
        },
        {
            "message": "Missing item type",
            "line": " util.js:41653"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(86),\n\t\t  __webpack_require__(51),\n\t\t  __webpack_require__(53),\n\t\t  __webpack_require__(367),\n\t\t  __webpack_require__(369),\n\t\t  __webpack_require__(370),\n\t\t  __webpack_require__(329),\n\t\t  __webpack_require__(371),\n\t\t  __webpack_require__(373),\n\t\t  __webpack_require__(375),\n\t\t  __webpack_require__(376),\n\t\t  __webpack_require__(87),\n\t\t  __webpack_require__(377),\n\t\t  __webpack_require__(378),\n\t\t  __webpack_require__(379),\n\t\t  __webpack_require__(382),\n\t\t  __webpack_require__(385),\n\t\t  __webpack_require__(386),\n\t\t  __webpack_require__(387),\n\t\t  __webpack_require__(84),\n\t\t  __webpack_require__(388),\n\t\t  __webpack_require__(390),\n\t\t  __webpack_require__(82),\n\t\t  __webpack_require__(391),\n\t\t  __webpack_require__(393),\n\t\t  __webpack_require__(380),\n\t\t  __webpack_require__(394),\n\t\t  __webpack_require__(77),\n\t\t  __webpack_require__(78),\n\t\t  __webpack_require__(395),\n\t\t  __webpack_require__(396)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:41655"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var unaryMinus = load(__webpack_require__(78));\n\t\t  var isNegative = load(__webpack_require__(368));\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Calculate the cubic root of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cbrt(x)\n\t\t   *    math.cbrt(x, allRoots)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cbrt(27);                  // returns 3\n\t\t   *    math.cube(3);                   // returns 27\n\t\t   *    math.cbrt(-64);                 // returns -4\n\t\t   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m\n\t\t   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]\n\t\t   *\n\t\t   *    var x = math.complex('8i');\n\t\t   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i\n\t\t   *    math.cbrt(x, true);             // returns Matrix [\n\t\t   *                                    //    1.7320508075689 + i\n\t\t   *                                    //   -1.7320508075689 + i\n\t\t   *                                    //   -2i\n\t\t   *                                    // ]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    square, sqrt, cube\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x\n\t\t   *            Value for which to calculate the cubic root.\n\t\t   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n\t\t   *            when `x` is a number or complex number. If true, all complex\n\t\t   *            roots are returned, if false (default) the principal root is\n\t\t   *            returned.\n\t\t   * @return {number | BigNumber | Complex | Unit | Array | Matrix}\n\t\t   *            Returns the cubic root of `x`",
            "line": " util.js:41694"
        },
        {
            "message": "Missing item type\nCalculate the cubic root for a complex number",
            "line": " util.js:41765"
        },
        {
            "message": "Missing item type\nCalculate the cubic root for a Unit",
            "line": " util.js:41800"
        },
        {
            "message": "Missing item type\nCalculate cbrt for a number\n\nCode from es6-shim.js:\n  https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577",
            "line": " util.js:41847"
        },
        {
            "message": "Missing item type",
            "line": " util.js:41883"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is negative: smaller than zero.\n\t\t   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isNegative(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isNegative(3);                     // returns false\n\t\t   *    math.isNegative(-2);                    // returns true\n\t\t   *    math.isNegative(0);                     // returns false\n\t\t   *    math.isNegative(-0);                    // returns false\n\t\t   *    math.isNegative(math.bignumber(2));     // returns false\n\t\t   *    math.isNegative(math.fraction(-2, 5));  // returns true\n\t\t   *    math.isNegative('-2');                  // returns true\n\t\t   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isPositive, isZero, isInteger\n\t\t   *\n\t\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "line": " util.js:41885"
        },
        {
            "message": "Missing item type",
            "line": " util.js:41951"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Round a value towards plus infinity\n\t\t   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.ceil(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.ceil(3.2);               // returns number 4\n\t\t   *    math.ceil(3.8);               // returns number 4\n\t\t   *    math.ceil(-4.2);              // returns number -4\n\t\t   *    math.ceil(-4.7);              // returns number -4\n\t\t   *\n\t\t   *    var c = math.complex(3.2, -2.7);\n\t\t   *    math.ceil(c);                 // returns Complex 4 - 2i\n\t\t   *\n\t\t   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    floor, fix, round\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "line": " util.js:41953"
        },
        {
            "message": "Missing item type",
            "line": " util.js:42018"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Compute the cube of a value, `x * x * x`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cube(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cube(2);            // returns number 8\n\t\t   *    math.pow(2, 3);          // returns number 8\n\t\t   *    math.cube(4);            // returns number 64\n\t\t   *    4 * 4 * 4;               // returns number 64\n\t\t   *\n\t\t   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply, square, pow, cbrt\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x",
            "line": " util.js:42020"
        },
        {
            "message": "Missing item type",
            "line": " util.js:42088"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var divideScalar = load(__webpack_require__(81));\n\t\t  var latex = __webpack_require__(32);\n\t\t  \n\t\t  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Divide two matrices element wise. The function accepts both matrices and\n\t\t   * scalar values.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.dotDivide(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.dotDivide(2, 4);   // returns 0.5\n\t\t   *\n\t\t   *    a = [[9, 5], [6, 1]];\n\t\t   *    b = [[3, 2], [5, 2]];\n\t\t   *\n\t\t   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]\n\t\t   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    divide, multiply, dotMultiply\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`",
            "line": " util.js:42090"
        },
        {
            "message": "Missing item type",
            "line": " util.js:42239"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n\t\t   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n\t\t   * C(i,j) = ┤\n\t\t   *          └  0            ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n\t\t   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n\t\t   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n\t\t   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571",
            "line": " util.js:42241"
        },
        {
            "message": "Missing item type",
            "line": " util.js:42364"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var multiplyScalar = load(__webpack_require__(80));\n\t\t  var latex = __webpack_require__(32);\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm09 = load(__webpack_require__(374));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Multiply two matrices element wise. The function accepts both matrices and\n\t\t   * scalar values.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.dotMultiply(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.dotMultiply(2, 4); // returns 8\n\t\t   *\n\t\t   *    a = [[9, 5], [6, 1]];\n\t\t   *    b = [[3, 2], [5, 2]];\n\t\t   *\n\t\t   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]\n\t\t   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply, divide, dotDivide\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`",
            "line": " util.js:42366"
        },
        {
            "message": "Missing item type",
            "line": " util.js:42513"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked NZA times, number of nonzero elements in A.\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  0            ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " util.js:42515"
        },
        {
            "message": "Missing item type",
            "line": " util.js:42668"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var pow = load(__webpack_require__(82));\n\t\t  var latex = __webpack_require__(32);\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Calculates the power of x to y element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.dotPow(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.dotPow(2, 3);            // returns number 8\n\t\t   *\n\t\t   *    var a = [[1, 2], [4, 3]];\n\t\t   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]\n\t\t   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    pow, sqrt, multiply\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n\t\t   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`",
            "line": " util.js:42670"
        },
        {
            "message": "Missing item type",
            "line": " util.js:42815"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the exponent of a value.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.exp(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.exp(2);                  // returns number 7.3890560989306495\n\t\t   *    math.pow(math.e, 2);          // returns number 7.3890560989306495\n\t\t   *    math.log(math.exp(2));        // returns number 2\n\t\t   *\n\t\t   *    math.exp([1, 2, 3]);\n\t\t   *    // returns Array [\n\t\t   *    //   2.718281828459045,\n\t\t   *    //   7.3890560989306495,\n\t\t   *    //   20.085536923187668\n\t\t   *    // ]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    log, pow\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`",
            "line": " util.js:42817"
        },
        {
            "message": "Missing item type",
            "line": " util.js:42878"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Round a value towards minus infinity.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.floor(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.floor(3.2);              // returns number 3\n\t\t   *    math.floor(3.8);              // returns number 3\n\t\t   *    math.floor(-4.2);             // returns number -5\n\t\t   *    math.floor(-4.7);             // returns number -5\n\t\t   *\n\t\t   *    var c = math.complex(3.2, -2.7);\n\t\t   *    math.floor(c);                // returns Complex 3 - 3i\n\t\t   *\n\t\t   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    ceil, fix, round\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "line": " util.js:42880"
        },
        {
            "message": "Missing item type",
            "line": " util.js:42944"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm04 = load(__webpack_require__(55));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Calculate the greatest common divisor for two or more values or arrays.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.gcd(a, b)\n\t\t   *    math.gcd(a, b, c, ...)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.gcd(8, 12);              // returns 4\n\t\t   *    math.gcd(-4, 6);              // returns 2\n\t\t   *    math.gcd(25, 15, -10);        // returns 5\n\t\t   *\n\t\t   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    lcm, xgcd\n\t\t   *\n\t\t   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n\t\t   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor",
            "line": " util.js:42946"
        },
        {
            "message": "Missing item type\nCalculate gcd for BigNumbers",
            "line": " util.js:43100"
        },
        {
            "message": "Missing item type\nCalculate gcd for numbers",
            "line": " util.js:43123"
        },
        {
            "message": "Missing item type",
            "line": " util.js:43149"
        },
        {
            "message": "Missing item type\n'use strict';\nvar flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n\t\t  var abs = load(__webpack_require__(86));\n\t\t  var add = load(__webpack_require__(53));\n\t\t  var divide = load(__webpack_require__(81));\n\t\t  var multiply = load(__webpack_require__(80));\n\t\t  var sqrt = load(__webpack_require__(380));\n\t\t  var smaller = load(__webpack_require__(60));\n\t\t  var isPositive = load(__webpack_require__(381));\n  /**\n\t\t   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n\t\t   *\n\t\t   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n\t\t   *\n\t\t   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.hypot(a, b, ...)\n\t\t   *     math.hypot([a, b, c, ...])\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.hypot(3, 4);      // 5\n\t\t   *     math.hypot(3, 4, 5);   // 7.0710678118654755\n\t\t   *     math.hypot([3, 4, 5]); // 7.0710678118654755\n\t\t   *     math.hypot(-2);        // 2\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     abs, norm\n\t\t   *\n\t\t   * @param {... number | BigNumber} args\n\t\t   * @return {number | BigNumber} Returns the hypothenusa of the input values.",
            "line": " util.js:43151"
        },
        {
            "message": "Missing item type\nCalculate the hypotenusa for an Array with values",
            "line": " util.js:43204"
        },
        {
            "message": "Missing item type",
            "line": " util.js:43239"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the square root of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sqrt(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sqrt(25);                // returns 5\n\t\t   *    math.square(5);               // returns 25\n\t\t   *    math.sqrt(-4);                // returns Complex 2i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    square, multiply, cube, cbrt\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n\t\t   *            Value for which to calculate the square root.\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n\t\t   *            Returns the square root of `x`",
            "line": " util.js:43241"
        },
        {
            "message": "Missing item type\nCalculate sqrt for a number",
            "line": " util.js:43301"
        },
        {
            "message": "Missing item type",
            "line": " util.js:43325"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is positive: larger than zero.\n\t\t   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isPositive(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isPositive(3);                     // returns true\n\t\t   *    math.isPositive(-2);                    // returns false\n\t\t   *    math.isPositive(0);                     // returns false\n\t\t   *    math.isPositive(-0);                    // returns false\n\t\t   *    math.isPositive(0.5);                   // returns true\n\t\t   *    math.isPositive(math.bignumber(2));     // returns true\n\t\t   *    math.isPositive(math.fraction(-2, 5));  // returns false\n\t\t   *    math.isPositive(math.fraction(1,3));    // returns false\n\t\t   *    math.isPositive('2');                   // returns true\n\t\t   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isZero, isNegative, isInteger\n\t\t   *\n\t\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "line": " util.js:43327"
        },
        {
            "message": "Missing item type",
            "line": " util.js:43395"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm06 = load(__webpack_require__(383));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Calculate the least common multiple for two or more values or arrays.\n\t\t   *\n\t\t   * lcm is defined as:\n\t\t   *\n\t\t   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.lcm(a, b)\n\t\t   *    math.lcm(a, b, c, ...)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.lcm(4, 6);               // returns 12\n\t\t   *    math.lcm(6, 21);              // returns 42\n\t\t   *    math.lcm(6, 21, 5);           // returns 210\n\t\t   *\n\t\t   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    gcd, xgcd\n\t\t   *\n\t\t   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n\t\t   * @return {number | BigNumber | Array | Matrix}                           The least common multiple",
            "line": " util.js:43397"
        },
        {
            "message": "Missing item type\nCalculate lcm for two BigNumbers",
            "line": " util.js:43555"
        },
        {
            "message": "Missing item type\nCalculate lcm for two numbers",
            "line": " util.js:43583"
        },
        {
            "message": "Missing item type",
            "line": " util.js:43615"
        },
        {
            "message": "Missing item type\n'use strict';\nvar scatter = __webpack_require__(384);\n\t\tvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t\t   * C(i,j) = ┤  \n\t\t   *          └  0            ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " util.js:43617"
        },
        {
            "message": "Missing item type",
            "line": " util.js:43784"
        },
        {
            "message": "Missing item type\n'use strict';\nmodule.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {\n\t\t  // a arrays\n\t\t  var avalues = a._values;\n\t\t  var aindex = a._index;\n\t\t  var aptr = a._ptr;\n\t\t  // c arrays\n\t\t  var cindex = c._index;\n  // vars\n\t\t  var k, k0, k1, i;\n  // check we need to process values (pattern matrix)\n\t\t  if (x) {\n\t\t    // values in j\n\t\t    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t\t      // row\n\t\t      i = aindex[k];\n\t\t      // check value exists in current j\n\t\t      if (w[i] !== mark) {\n\t\t        // i is new entry in j\n\t\t        w[i] = mark;\n\t\t        // add i to pattern of C\n\t\t        cindex.push(i);\n\t\t        // x(i) = A, check we need to call function this time\n\t\t        if (update) {\n\t\t          // copy value to workspace calling callback function\n\t\t          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);\n\t\t          // function was called on current row\n\t\t          u[i] = mark;\n\t\t        }\n\t\t        else {\n\t\t          // copy value to workspace\n\t\t          x[i] = avalues[k];\n\t\t        }\n\t\t      }\n\t\t      else {\n\t\t        // i exists in C already\n\t\t        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);\n\t\t        // function was called on current row\n\t\t        u[i] = mark;\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t  else {\n\t\t    // values in j\n\t\t    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n\t\t      // row\n\t\t      i = aindex[k];\n\t\t      // check value exists in current j\n\t\t      if (w[i] !== mark) {\n\t\t        // i is new entry in j\n\t\t        w[i] = mark;\n\t\t        // add i to pattern of C\n\t\t        cindex.push(i);\n\t\t      }\n\t\t      else {\n\t\t        // indicate function was called on current row\n\t\t        u[i] = mark;\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t};\n\n\n\t/***/ },",
            "line": " util.js:43786"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var divideScalar = load(__webpack_require__(81));\n  /**\n\t\t   * Calculate the logarithm of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.log(x)\n\t\t   *    math.log(x, base)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.log(3.5);                  // returns 1.252762968495368\n\t\t   *    math.exp(math.log(2.4));        // returns 2.4\n\t\t   *\n\t\t   *    math.pow(10, 4);                // returns 10000\n\t\t   *    math.log(10000, 10);            // returns 4\n\t\t   *    math.log(10000) / math.log(10); // returns 4\n\t\t   *\n\t\t   *    math.log(1024, 2);              // returns 10\n\t\t   *    math.pow(2, 10);                // returns 1024\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    exp, log10\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            Value for which to calculate the logarithm.\n\t\t   * @param {number | BigNumber | Complex} [base=e]\n\t\t   *            Optional base for the logarithm. If not provided, the natural\n\t\t   *            logarithm of `x` is calculated.\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t\t   *            Returns the logarithm of `x`",
            "line": " util.js:43856"
        },
        {
            "message": "Missing item type",
            "line": " util.js:43946"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.log10(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.log10(0.00001);            // returns -5\n\t\t   *    math.log10(10000);              // returns 4\n\t\t   *    math.log(10000) / math.log(10); // returns 4\n\t\t   *    math.pow(10, 4);                // returns 10000\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    exp, log\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            Value for which to calculate the logarithm.\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t\t   *            Returns the 10-base logarithm of `x`",
            "line": " util.js:43948"
        },
        {
            "message": "Missing item type\nCalculate the 10-base logarithm of a number",
            "line": " util.js:44015"
        },
        {
            "message": "Missing item type",
            "line": " util.js:44030"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  var latex = __webpack_require__(32);\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm05 = load(__webpack_require__(79));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Calculates the modulus, the remainder of an integer division.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * The modulus is defined as:\n\t\t   *\n\t\t   *     x - y * floor(x / y)\n\t\t   *\n\t\t   * See http://en.wikipedia.org/wiki/Modulo_operation.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.mod(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.mod(8, 3);                // returns 2\n\t\t   *    math.mod(11, 2);               // returns 1\n\t\t   *\n\t\t   *    function isOdd(x) {\n\t\t   *      return math.mod(x, 2) != 0;\n\t\t   *    }\n\t\t   *\n\t\t   *    isOdd(2);                      // returns false\n\t\t   *    isOdd(3);                      // returns true\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    divide\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n\t\t   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n\t\t   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.",
            "line": " util.js:44032"
        },
        {
            "message": "Missing item type\nCalculate the modulus of two numbers",
            "line": " util.js:44192"
        },
        {
            "message": "Missing item type",
            "line": " util.js:44220"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var abs         = load(__webpack_require__(86));\n\t\t  var add         = load(__webpack_require__(51));\n\t\t  var pow         = load(__webpack_require__(82));\n\t\t  var sqrt        = load(__webpack_require__(380));\n\t\t  var multiply    = load(__webpack_require__(84));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var larger      = load(__webpack_require__(64));\n\t\t  var smaller     = load(__webpack_require__(60));\n\t\t  var matrix      = load(__webpack_require__(52));\n\t\t  var trace       = load(__webpack_require__(389));\n\t\t  var transpose   = load(__webpack_require__(347));\n\n  /**\n\t\t   * Calculate the norm of a number, vector or matrix.\n\t\t   *\n\t\t   * The second parameter p is optional. If not provided, it defaults to 2.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.norm(x)\n\t\t   *    math.norm(x, p)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.abs(-3.5);                         // returns 3.5\n\t\t   *    math.norm(-3.5);                        // returns 3.5\n\t\t   *\n\t\t   *    math.norm(math.complex(3, -4));         // returns 5\n\t\t   *\n\t\t   *    math.norm([1, 2, -3], Infinity);        // returns 3\n\t\t   *    math.norm([1, 2, -3], -Infinity);       // returns 1\n\t\t   *\n\t\t   *    math.norm([3, 4], 2);                   // returns 5\n\t\t   *\n\t\t   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n\t\t   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7\n\t\t   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    abs, hypot\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            Value for which to calculate the norm\n\t\t   * @param  {number | BigNumber | string} [p=2]\n\t\t   *            Vector space.\n\t\t   *            Supported numbers include Infinity and -Infinity.\n\t\t   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n\t\t   * @return {number | BigNumber} the p-norm",
            "line": " util.js:44222"
        },
        {
            "message": "Missing item type\nCalculate the norm for an array",
            "line": " util.js:44318"
        },
        {
            "message": "Missing item type",
            "line": " util.js:44441"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var add = load(__webpack_require__(51));\n  /**\n\t\t   * Calculate the trace of a matrix: the sum of the elements on the main\n\t\t   * diagonal of a square matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.trace(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.trace([[1, 2], [3, 4]]); // returns 5\n\t\t   *\n\t\t   *    var A = [\n\t\t   *      [1, 2, 3],\n\t\t   *      [-1, 2, 3],\n\t\t   *      [2, 0, 3]\n\t\t   *    ]\n\t\t   *    math.trace(A); // returns 6\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    diag\n\t\t   *\n\t\t   * @param {Array | Matrix} x  A matrix\n\t\t   *\n\t\t   * @return {number} The trace of `x`",
            "line": " util.js:44443"
        },
        {
            "message": "Missing item type",
            "line": " util.js:44594"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm06 = load(__webpack_require__(383));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Calculate the nth root of a value.\n\t\t   * The principal nth root of a positive real number A, is the positive real\n\t\t   * solution of the equation\n\t\t   *\n\t\t   *     x^root = A\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.nthRoot(a)\n\t\t   *     math.nthRoot(a, root)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9\n\t\t   *     math.sqrt(9);          // returns 3, as 3^2 == 9\n\t\t   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     sqrt, pow\n\t\t   *\n\t\t   * @param {number | BigNumber | Array | Matrix | Complex} a\n\t\t   *              Value for which to calculate the nth root\n\t\t   * @param {number | BigNumber} [root=2]    The root.\n\t\t   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`",
            "line": " util.js:44596"
        },
        {
            "message": "Missing item type\nCalculate the nth root of a for BigNumbers, solve x^root == a\nhttp://rosettacode.org/wiki/Nth_root#JavaScript",
            "line": " util.js:44776"
        },
        {
            "message": "Missing item type\nCalculate the nth root of a, solve x^root == a\nhttp://rosettacode.org/wiki/Nth_root#JavaScript",
            "line": " util.js:44817"
        },
        {
            "message": "Missing item type\nCalculate the nth root of a Complex Number a using De Moviers Theorem.",
            "line": " util.js:44875"
        },
        {
            "message": "Missing item type",
            "line": " util.js:44899"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar toFixed = __webpack_require__(6).toFixed;\n\t\tvar deepMap = __webpack_require__(19);\nvar NO_INT = 'Number of decimals in function round must be an integer';\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var zeros = load(__webpack_require__(392));\n  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Round a value towards the nearest integer.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.round(x)\n\t\t   *    math.round(x, n)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.round(3.2);              // returns number 3\n\t\t   *    math.round(3.8);              // returns number 4\n\t\t   *    math.round(-4.2);             // returns number -4\n\t\t   *    math.round(-4.7);             // returns number -5\n\t\t   *    math.round(math.pi, 3);       // returns number 3.142\n\t\t   *    math.round(123.45678, 2);     // returns number 123.46\n\t\t   *\n\t\t   *    var c = math.complex(3.2, -2.7);\n\t\t   *    math.round(c);                // returns Complex 3 - 3i\n\t\t   *\n\t\t   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    ceil, fix, floor\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n\t\t   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value",
            "line": " util.js:44901"
        },
        {
            "message": "Missing item type\nround a number to the given number of decimals, or to zero if decimals is\nnot provided",
            "line": " util.js:45063"
        },
        {
            "message": "Missing item type",
            "line": " util.js:45079"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar resize = __webpack_require__(40).resize;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Create a matrix filled with zeros. The created matrix can have one or\n\t\t   * multiple dimensions.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.zeros(m)\n\t\t   *    math.zeros(m, format)\n\t\t   *    math.zeros(m, n)\n\t\t   *    math.zeros(m, n, format)\n\t\t   *    math.zeros([m, n])\n\t\t   *    math.zeros([m, n], format)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.zeros(3);                  // returns [0, 0, 0]\n\t\t   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]\n\t\t   *    math.zeros(3, 'dense');         // returns [0, 0, 0]\n\t\t   *\n\t\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t\t   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    ones, eye, size, range\n\t\t   *\n\t\t   * @param {...number | Array} size    The size of each dimension of the matrix\n\t\t   * @param {string} [format]           The Matrix storage format\n\t\t   *\n\t\t   * @return {Array | Matrix}           A matrix filled with zeros",
            "line": " util.js:45081"
        },
        {
            "message": "Missing item type\nCreate an Array or Matrix with zeros",
            "line": " util.js:45161"
        },
        {
            "message": "Missing item type",
            "line": " util.js:45219"
        },
        {
            "message": "Missing item type\n'use strict';\nvar number = __webpack_require__(6);\n\t\tvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the sign of a value. The sign of a value x is:\n\t\t   *\n\t\t   * -  1 when x > 1\n\t\t   * - -1 when x < 0\n\t\t   * -  0 when x == 0\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sign(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sign(3.5);               // returns 1\n\t\t   *    math.sign(-4.2);              // returns -1\n\t\t   *    math.sign(0);                 // returns 0\n\t\t   *\n\t\t   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    abs\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t\t   *            The number for which to determine the sign\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n\t\t   *            The sign of `x`",
            "line": " util.js:45221"
        },
        {
            "message": "Missing item type",
            "line": " util.js:45294"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the square of a value, `x * x`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.square(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.square(2);           // returns number 4\n\t\t   *    math.square(3);           // returns number 9\n\t\t   *    math.pow(3, 2);           // returns number 9\n\t\t   *    math.multiply(3, 3);      // returns number 9\n\t\t   *\n\t\t   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply, cube, sqrt, pow\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n\t\t   *            Number for which to calculate the square\n\t\t   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n\t\t   *            Squared value",
            "line": " util.js:45296"
        },
        {
            "message": "Missing item type",
            "line": " util.js:45365"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Unary plus operation.\n\t\t   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.unaryPlus(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.unaryPlus(3.5);      // returns 3.5\n\t\t   *    math.unaryPlus(1);     // returns 1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    unaryMinus, add, subtract\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n\t\t   *            Input value\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t\t   *            Returns the input value when numeric, converts to a number when input is non-numeric.",
            "line": " util.js:45367"
        },
        {
            "message": "Missing item type",
            "line": " util.js:45443"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Calculate the extended greatest common divisor for two values.\n\t\t   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.xgcd(a, b)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.xgcd(8, 12);             // returns [4, -1, 1]\n\t\t   *    math.gcd(8, 12);              // returns 4\n\t\t   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    gcd, lcm\n\t\t   *\n\t\t   * @param {number | BigNumber} a  An integer number\n\t\t   * @param {number | BigNumber} b  An integer number\n\t\t   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n\t\t   *                              where `div = gcd(a, b)` and `a*m + b*n = div`",
            "line": " util.js:45445"
        },
        {
            "message": "Missing item type\nCalculate xgcd for two numbers",
            "line": " util.js:45487"
        },
        {
            "message": "Missing item type\nCalculate xgcd for two BigNumbers",
            "line": " util.js:45532"
        },
        {
            "message": "Missing item type",
            "line": " util.js:45586"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(398),\n\t\t  __webpack_require__(402),\n\t\t  __webpack_require__(403),\n\t\t  __webpack_require__(405),\n\t\t  __webpack_require__(407),\n\t\t  __webpack_require__(410),\n\t\t  __webpack_require__(412)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:45588"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar bigBitAnd = __webpack_require__(399);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm06 = load(__webpack_require__(383));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Bitwise AND two values, `x & y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.bitAnd(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.bitAnd(53, 131);               // returns number 1\n\t\t   *\n\t\t   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x First value to and\n\t\t   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n\t\t   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`",
            "line": " util.js:45603"
        },
        {
            "message": "Missing item type",
            "line": " util.js:45756"
        },
        {
            "message": "Missing item type\nvar bitwise = __webpack_require__(400);\n/**\n\t\t * Bitwise and for Bignumbers\n\t\t *\n\t\t * Special Cases:\n\t\t *   N &  n =  N\n\t\t *   n &  0 =  0\n\t\t *   n & -1 =  n\n\t\t *   n &  n =  n\n\t\t *   I &  I =  I\n\t\t *  -I & -I = -I\n\t\t *   I & -I =  0\n\t\t *   I &  n =  n\n\t\t *   I & -n =  I\n\t\t *  -I &  n =  0\n\t\t *  -I & -n = -I\n\t\t *\n\t\t * @param {BigNumber} x\n\t\t * @param {BigNumber} y\n\t\t * @return {BigNumber} Result of `x` & `y`, is fully precise\n\t\t * @private",
            "line": " util.js:45758"
        },
        {
            "message": "Missing item type",
            "line": " util.js:45830"
        },
        {
            "message": "Missing item type\nvar bitNot = __webpack_require__(401);\n/**\n\t\t * Applies bitwise function to numbers\n\t\t * @param {BigNumber} x\n\t\t * @param {BigNumber} y\n\t\t * @param {function (a, b)} func\n\t\t * @return {BigNumber}",
            "line": " util.js:45832"
        },
        {
            "message": "Missing item type",
            "line": " util.js:45960"
        },
        {
            "message": "Missing item type\n/**\n\t\t * Bitwise not\n\t\t * @param {BigNumber} value\n\t\t * @return {BigNumber} Result of ~`x`, fully precise\n\t\t *",
            "line": " util.js:45962"
        },
        {
            "message": "Missing item type",
            "line": " util.js:45987"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar bigBitNot = __webpack_require__(401);\n\t\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Bitwise NOT value, `~x`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * For units, the function is evaluated on the best prefix base.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.bitNot(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.bitNot(1);               // returns number -2\n\t\t   *\n\t\t   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x Value to not\n\t\t   * @return {number | BigNumber | Array | Matrix} NOT of `x`",
            "line": " util.js:45989"
        },
        {
            "message": "Missing item type",
            "line": " util.js:46049"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar bigBitOr = __webpack_require__(404);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm04 = load(__webpack_require__(55));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Bitwise OR two values, `x | y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * For units, the function is evaluated on the lowest print base.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.bitOr(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.bitOr(1, 2);               // returns number 3\n\t\t   *\n\t\t   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x First value to or\n\t\t   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n\t\t   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`",
            "line": " util.js:46051"
        },
        {
            "message": "Missing item type",
            "line": " util.js:46204"
        },
        {
            "message": "Missing item type\nvar bitwise = __webpack_require__(400);\n/**\n\t\t * Bitwise OR for BigNumbers\n\t\t *\n\t\t * Special Cases:\n\t\t *   N |  n =  N\n\t\t *   n |  0 =  n\n\t\t *   n | -1 = -1\n\t\t *   n |  n =  n\n\t\t *   I |  I =  I\n\t\t *  -I | -I = -I\n\t\t *   I | -n = -1\n\t\t *   I | -I = -1\n\t\t *   I |  n =  I\n\t\t *  -I |  n = -I\n\t\t *  -I | -n = -n\n\t\t *\n\t\t * @param {BigNumber} x\n\t\t * @param {BigNumber} y\n\t\t * @return {BigNumber} Result of `x` | `y`, fully precise",
            "line": " util.js:46206"
        },
        {
            "message": "Missing item type",
            "line": " util.js:46263"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar bigBitXor = __webpack_require__(406);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Bitwise XOR two values, `x ^ y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.bitXor(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.bitXor(1, 2);               // returns number 3\n\t\t   *\n\t\t   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x First value to xor\n\t\t   * @param  {number | BigNumber | Array | Matrix} y Second value to xor\n\t\t   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`",
            "line": " util.js:46265"
        },
        {
            "message": "Missing item type",
            "line": " util.js:46418"
        },
        {
            "message": "Missing item type\nvar bitwise = __webpack_require__(400);\n\t\tvar bitNot = __webpack_require__(401);\n/**\n\t\t * Bitwise XOR for BigNumbers\n\t\t *\n\t\t * Special Cases:\n\t\t *   N ^  n =  N\n\t\t *   n ^  0 =  n\n\t\t *   n ^  n =  0\n\t\t *   n ^ -1 = ~n\n\t\t *   I ^  n =  I\n\t\t *   I ^ -n = -I\n\t\t *   I ^ -I = -1\n\t\t *  -I ^  n = -I\n\t\t *  -I ^ -n =  I\n\t\t *\n\t\t * @param {BigNumber} x\n\t\t * @param {BigNumber} y\n\t\t * @return {BigNumber} Result of `x` ^ `y`, fully precise\n\t\t *",
            "line": " util.js:46420"
        },
        {
            "message": "Missing item type",
            "line": " util.js:46484"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar bigLeftShift = __webpack_require__(408);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm08 = load(__webpack_require__(409));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * For units, the function is evaluated on the best prefix base.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.leftShift(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.leftShift(1, 2);               // returns number 4\n\t\t   *\n\t\t   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n\t\t   * @param  {number | BigNumber} y Amount of shifts\n\t\t   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times",
            "line": " util.js:46486"
        },
        {
            "message": "Missing item type",
            "line": " util.js:46652"
        },
        {
            "message": "Missing item type\n/**\n\t\t * Bitwise left shift\n\t\t *\n\t\t * Special Cases:\n\t\t *  n << -n = N\n\t\t *  n <<  N = N\n\t\t *  N <<  n = N\n\t\t *  n <<  0 = n\n\t\t *  0 <<  n = 0\n\t\t *  I <<  I = N\n\t\t *  I <<  n = I\n\t\t *  n <<  I = I\n\t\t *\n\t\t * @param {BigNumber} x\n\t\t * @param {BigNumber} y\n\t\t * @return {BigNumber} Result of `x` << `y`\n\t\t *",
            "line": " util.js:46654"
        },
        {
            "message": "Missing item type",
            "line": " util.js:46699"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\nfunction factory (type, config, load, typed) {\n  var equalScalar = load(__webpack_require__(48));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n\t\t   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n\t\t   * Callback function invoked MAX(NNZA, NNZB) times\n\t\t   *\n\t\t   *\n\t\t   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n\t\t   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n\t\t   *          └  0            ; otherwise\n\t\t   *\n\t\t   *\n\t\t   * @param {Matrix}   a                 The SparseMatrix instance (A)\n\t\t   * @param {Matrix}   b                 The SparseMatrix instance (B)\n\t\t   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n\t\t   *\n\t\t   * @return {Matrix}                    SparseMatrix (C)\n\t\t   *\n\t\t   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294",
            "line": " util.js:46701"
        },
        {
            "message": "Missing item type",
            "line": " util.js:46865"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar bigRightArithShift = __webpack_require__(411);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n\t\t  \n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm08 = load(__webpack_require__(409));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * For units, the function is evaluated on the best prefix base.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.rightArithShift(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.rightArithShift(4, 2);               // returns number 1\n\t\t   *\n\t\t   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n\t\t   * @param  {number | BigNumber} y Amount of shifts\n\t\t   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times",
            "line": " util.js:46867"
        },
        {
            "message": "Missing item type",
            "line": " util.js:47033"
        },
        {
            "message": "Missing item type\n/*\n\t\t * Special Cases:\n\t\t *   n >> -n =  N\n\t\t *   n >>  N =  N\n\t\t *   N >>  n =  N\n\t\t *   I >>  I =  N\n\t\t *   n >>  0 =  n\n\t\t *   I >>  n =  I\n\t\t *  -I >>  n = -I\n\t\t *  -I >>  I = -I\n\t\t *   n >>  I =  I\n\t\t *  -n >>  I = -1\n\t\t *   0 >>  n =  0\n\t\t *\n\t\t * @param {BigNumber} value\n\t\t * @param {BigNumber} value\n\t\t * @return {BigNumber} Result of `x` >> `y`\n\t\t *",
            "line": " util.js:47035"
        },
        {
            "message": "Missing item type",
            "line": " util.js:47086"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t\t  var equalScalar = load(__webpack_require__(48));\n\t\t  var zeros = load(__webpack_require__(392));\n  var algorithm01 = load(__webpack_require__(54));\n\t\t  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm08 = load(__webpack_require__(409));\n\t\t  var algorithm10 = load(__webpack_require__(56));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * For units, the function is evaluated on the best prefix base.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.rightLogShift(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.rightLogShift(4, 2);               // returns number 1\n\t\t   *\n\t\t   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n\t\t   *\n\t\t   * @param  {number | Array | Matrix} x Value to be shifted\n\t\t   * @param  {number} y Amount of shifts\n\t\t   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times",
            "line": " util.js:47088"
        },
        {
            "message": "Missing item type",
            "line": " util.js:47254"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(414),\n\t\t  __webpack_require__(420),\n\t\t  __webpack_require__(415),\n\t\t  __webpack_require__(421)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:47256"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var stirlingS2 = load(__webpack_require__(415));\n\t\t  var isNegative = load(__webpack_require__(368));\n\t\t  var isInteger = load(__webpack_require__(419));\n  /**\n\t\t   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\n\t\t   * bellNumbers only takes integer arguments.\n\t\t   * The following condition must be enforced: n >= 0\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *   math.bellNumbers(n)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.bellNumbers(3); // returns 5;\n\t\t   *    math.bellNumbers(8); // returns 4140;\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    stirlingS2\n\t\t   *\n\t\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t\t   * @return {Number | BigNumber}     B(n)",
            "line": " util.js:47268"
        },
        {
            "message": "Missing item type",
            "line": " util.js:47325"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var divide = load(__webpack_require__(329));\n\t\t  var pow = load(__webpack_require__(82));\n\t\t  var factorial = load(__webpack_require__(416));\n\t\t  var combinations = load(__webpack_require__(418));\n\t\t  var isNegative = load(__webpack_require__(368));\n\t\t  var isInteger = load(__webpack_require__(419));\n\t\t  var larger = load(__webpack_require__(64));\n  /**\n\t\t   * The Stirling numbers of the second kind, counts the number of ways to partition\n\t\t   * a set of n labelled objects into k nonempty unlabelled subsets.\n\t\t   * stirlingS2 only takes integer arguments.\n\t\t   * The following condition must be enforced: k <= n.\n\t\t   *\n\t\t   *  If n = k or k = 1, then s(n,k) = 1\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *   math.stirlingS2(n, k)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.stirlingS2(5, 3); //returns 25\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    Bell numbers\n\t\t   *\n\t\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t\t   * @param {Number | BigNumber} k    Number of objects in the subset\n\t\t   * @return {Number | BigNumber}     S(n,k)",
            "line": " util.js:47327"
        },
        {
            "message": "Missing item type",
            "line": " util.js:47400"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var gamma = load(__webpack_require__(417));\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Compute the factorial of a value\n\t\t   *\n\t\t   * Factorial only supports an integer value as argument.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.factorial(n)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.factorial(5);    // returns 120\n\t\t   *    math.factorial(3);    // returns 6\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    combinations, gamma, permutations\n\t\t   *\n\t\t   * @param {number | BigNumber | Array | Matrix} n   An integer number\n\t\t   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`",
            "line": " util.js:47402"
        },
        {
            "message": "Missing item type",
            "line": " util.js:47467"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var pow = load(__webpack_require__(82));\n  /**\n\t\t   * Compute the gamma function of a value using Lanczos approximation for\n\t\t   * small values, and an extended Stirling approximation for large values.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.gamma(n)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.gamma(5);       // returns 24\n\t\t   *    math.gamma(-0.5);    // returns -3.5449077018110335\n\t\t   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    combinations, factorial, permutations\n\t\t   *\n\t\t   * @param {number | Array | Matrix} n   A real or complex number\n\t\t   * @return {number | Array | Matrix}    The gamma of `n`",
            "line": " util.js:47469"
        },
        {
            "message": "Missing item type\nCalculate factorial for a BigNumber",
            "line": " util.js:47621"
        },
        {
            "message": "Missing item type",
            "line": " util.js:47675"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the number of ways of picking `k` unordered outcomes from `n`\n\t\t   * possibilities.\n\t\t   *\n\t\t   * Combinations only takes integer arguments.\n\t\t   * The following condition must be enforced: k <= n.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.combinations(n, k)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.combinations(7, 5); // returns 21\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    permutations, factorial\n\t\t   *\n\t\t   * @param {number | BigNumber} n    Total number of objects in the set\n\t\t   * @param {number | BigNumber} k    Number of objects in the subset\n\t\t   * @return {number | BigNumber}     Number of possible combinations.",
            "line": " util.js:47677"
        },
        {
            "message": "Missing item type\nTest whether BigNumber n is a positive integer",
            "line": " util.js:47759"
        },
        {
            "message": "Missing item type",
            "line": " util.js:47772"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is an integer number.\n\t\t   * The function supports `number`, `BigNumber`, and `Fraction`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isInteger(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isInteger(2);                     // returns true\n\t\t   *    math.isInteger(0);                     // returns true\n\t\t   *    math.isInteger(0.5);                   // returns false\n\t\t   *    math.isInteger(math.bignumber(500));   // returns true\n\t\t   *    math.isInteger(math.fraction(4));      // returns true\n\t\t   *    math.isInteger('3');                   // returns true\n\t\t   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]\n\t\t   *    math.isInteger(math.complex('2-4i');   // throws an error\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isPositive, isNegative, isZero\n\t\t   *\n\t\t   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "line": " util.js:47774"
        },
        {
            "message": "Missing item type",
            "line": " util.js:47834"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var combinations = load(__webpack_require__(418));\n\t\t  var add = load(__webpack_require__(53));\n\t\t  var isPositive = load(__webpack_require__(381));\n\t\t  var isInteger = load(__webpack_require__(419));\n\t\t  var larger = load(__webpack_require__(64));\n  /**\n\t\t   * The composition counts of n into k parts.\n\t\t   *\n\t\t   * composition only takes integer arguments.\n\t\t   * The following condition must be enforced: k <= n.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *   math.composition(n, k)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.composition(5, 3); // returns 6\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    combinations\n\t\t   *\n\t\t   * @param {Number | BigNumber} n    Total number of objects in the set\n\t\t   * @param {Number | BigNumber} k    Number of objects in the subset\n\t\t   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.",
            "line": " util.js:47836"
        },
        {
            "message": "Missing item type",
            "line": " util.js:47891"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var divide = load(__webpack_require__(329));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var combinations = load(__webpack_require__(418));\n\t\t  var isNegative = load(__webpack_require__(368));\n\t\t  var isInteger = load(__webpack_require__(419));\n\n  /**\n\t\t   * The Catalan Numbers enumerate combinatorial structures of many different types.\n\t\t   * catalan only takes integer arguments.\n\t\t   * The following condition must be enforced: n >= 0\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *   math.catalan(n)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.catalan(3); // returns 5;\n\t\t   *    math.catalan(8); // returns 1430;\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    bellNumbers\n\t\t   *\n\t\t   * @param {Number | BigNumber} n    nth Catalan number\n\t\t   * @return {Number | BigNumber}     Cn(n)",
            "line": " util.js:47893"
        },
        {
            "message": "Missing item type",
            "line": " util.js:47948"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(423),\n\t\t  __webpack_require__(424),\n\t\t  __webpack_require__(425),\n\t\t  __webpack_require__(426)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:47950"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the argument of a complex value.\n\t\t   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.arg(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = math.complex(2, 2);\n\t\t   *    math.arg(a) / math.pi;          // returns number 0.25\n\t\t   *\n\t\t   *    var b = math.complex('2 + 3i');\n\t\t   *    math.arg(b);                    // returns number 0.982793723247329\n\t\t   *    math.atan2(3, 2);               // returns number 0.982793723247329\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    re, im, conj, abs\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            A complex number or array with complex numbers\n\t\t   * @return {number | BigNumber | Array | Matrix} The argument of x",
            "line": " util.js:47962"
        },
        {
            "message": "Missing item type",
            "line": " util.js:48025"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the complex conjugate of a complex value.\n\t\t   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.conj(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i\n\t\t   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i\n\t\t   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    re, im, arg, abs\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            A complex number or array with complex numbers\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix}\n\t\t   *            The complex conjugate of x",
            "line": " util.js:48027"
        },
        {
            "message": "Missing item type",
            "line": " util.js:48086"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Get the imaginary part of a complex number.\n\t\t   * For a complex number `a + bi`, the function returns `b`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.im(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    math.re(a);                     // returns number 2\n\t\t   *    math.im(a);                     // returns number 3\n\t\t   *\n\t\t   *    math.re(math.complex('-5.2i')); // returns number -5.2\n\t\t   *    math.re(math.complex(2.4));     // returns number 0\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    re, conj, abs, arg\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            A complex number or array with complex numbers\n\t\t   * @return {number | BigNumber | Array | Matrix} The imaginary part of x",
            "line": " util.js:48088"
        },
        {
            "message": "Missing item type",
            "line": " util.js:48149"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Get the real part of a complex number.\n\t\t   * For a complex number `a + bi`, the function returns `a`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.re(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    var a = math.complex(2, 3);\n\t\t   *    math.re(a);                     // returns number 2\n\t\t   *    math.im(a);                     // returns number 3\n\t\t   *\n\t\t   *    math.re(math.complex('-5.2i')); // returns number 0\n\t\t   *    math.re(math.complex(2.4));     // returns number 2.4\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    im, conj, abs, arg\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x\n\t\t   *            A complex number or array with complex numbers\n\t\t   * @return {number | BigNumber | Array | Matrix} The real part of x",
            "line": " util.js:48151"
        },
        {
            "message": "Missing item type",
            "line": " util.js:48212"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(428),\n\t\t  __webpack_require__(429)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:48214"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var abs = load(__webpack_require__(86));\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var subtract = load(__webpack_require__(77));\n  /**\n\t\t   * Calculates the point of intersection of two lines in two or three dimensions\n\t\t   * and of a line and a plane in three dimensions. The inputs are in the form of\n\t\t   * arrays or 1 dimensional matrices. The line intersection functions return null\n\t\t   * if the lines do not meet.\n\t\t   *\n\t\t   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n\t\t   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]\n\t\t   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]\n\t\t   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]\n\t\t   *\n\t\t   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n\t\t   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n\t\t   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n\t\t   *                              OR Co-efficients of the plane's equation\n\t\t   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n\t\t   *                              OR null if the calculation is for line and plane\n\t\t   * @return {Array}              Returns the point of intersection of lines/lines-planes",
            "line": " util.js:48224"
        },
        {
            "message": "Missing item type",
            "line": " util.js:48370"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t    * Calculates:\n\t\t    *    The eucledian distance between two points in 2 and 3 dimensional spaces.\n\t\t    *    Distance between point and a line in 2 and 3 dimensional spaces.\n\t\t    *    Pairwise distance between a set of 2D or 3D points\n\t\t    * NOTE:\n\t\t    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n\t\t    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n\t\t    *\n\t\t    * Syntax:\n\t\t    *    math.distance([x1, y1], [x2, y2])\n\t\t    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n\t\t    *    math.distance([x1, y1, z1], [x2, y2, z2])\n\t\t    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n\t\t    *    math.distance([[A], [B], [C]...])\n\t\t    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n\t\t    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n\t\t    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n\t\t    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n\t\t    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n\t\t    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n\t\t    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n\t\t    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n\t\t    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n\t\t    *\n\t\t    * Examples:\n\t\t    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n\t\t    *    math.distance(\n\t\t    *     {pointOneX: 0, pointOneY: 0},\n\t\t    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n\t\t    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n\t\t    *    math.distance(\n\t\t    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n\t\t    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n\t\t    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n\t\t    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n\t\t    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n\t\t    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n\t\t    *    math.distance(\n\t\t    *     {pointX: 1, pointY: 4},\n\t\t    *     {lineOnePtX: 6, lineOnePtY: 3},\n\t\t    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n\t\t    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n\t\t    *    math.distance(\n\t\t    *     {pointX: 2, pointY: 3, pointZ: 1},\n\t\t    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n\t\t    *\n\t\t    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n\t\t    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n\t\t    * @return {Number | BigNumber} Returns the distance from two/three points",
            "line": " util.js:48372"
        },
        {
            "message": "Missing item type",
            "line": " util.js:48677"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(431),\n\t\t  __webpack_require__(432),\n\t\t  __webpack_require__(434),\n\t\t  __webpack_require__(435)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:48679"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n\t\t  var zeros = load(__webpack_require__(392));\n\t\t  var not = load(__webpack_require__(432));\n\t\t  var isZero = load(__webpack_require__(433));\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm06 = load(__webpack_require__(383));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.and(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.and(2, 4);   // returns true\n\t\t   *\n\t\t   *    a = [2, 0, 0];\n\t\t   *    b = [3, 7, 0];\n\t\t   *    c = 0;\n\t\t   *\n\t\t   *    math.and(a, b);   // returns [true, false, false]\n\t\t   *    math.and(a, c);   // returns [false, false, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    not, or, xor\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t\t   * @return {boolean | Array | Matrix}\n\t\t   *            Returns true when both inputs are defined with a nonzero/nonempty value.",
            "line": " util.js:48691"
        },
        {
            "message": "Missing item type",
            "line": " util.js:48866"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  /**\n\t\t   * Logical `not`. Flips boolean value of a given parameter.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.not(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.not(2);      // returns false\n\t\t   *    math.not(0);      // returns true\n\t\t   *    math.not(true);   // returns false\n\t\t   *\n\t\t   *    a = [2, -7, 0];\n\t\t   *    math.not(a);      // returns [false, false, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    and, or, xor\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t\t   * @return {boolean | Array | Matrix}\n\t\t   *            Returns true when input is a zero or empty value.",
            "line": " util.js:48868"
        },
        {
            "message": "Missing item type",
            "line": " util.js:48935"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is zero.\n\t\t   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n\t\t   * `Complex`, and `Unit`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isZero(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isZero(0);                     // returns true\n\t\t   *    math.isZero(2);                     // returns false\n\t\t   *    math.isZero(0.5);                   // returns false\n\t\t   *    math.isZero(math.bignumber(0));     // returns true\n\t\t   *    math.isZero(math.fraction(0));      // returns true\n\t\t   *    math.isZero(math.fraction(1,3));    // returns false\n\t\t   *    math.isZero(math.complex('2 - 4i'); // returns false\n\t\t   *    math.isZero(math.complex('0i');     // returns true\n\t\t   *    math.isZero('0');                   // returns true\n\t\t   *    math.isZero('2');                   // returns false\n\t\t   *    math.isZero([2, 0, -3]');           // returns [false, true, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isPositive, isNegative, isInteger\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is zero.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "line": " util.js:48937"
        },
        {
            "message": "Missing item type",
            "line": " util.js:49011"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm05 = load(__webpack_require__(79));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.or(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.or(2, 4);   // returns true\n\t\t   *\n\t\t   *    a = [2, 5, 0];\n\t\t   *    b = [0, 22, 0];\n\t\t   *    c = 0;\n\t\t   *\n\t\t   *    math.or(a, b);   // returns [true, true, false]\n\t\t   *    math.or(b, c);   // returns [false, true, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    and, not, xor\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t\t   * @return {boolean | Array | Matrix}\n\t\t   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.",
            "line": " util.js:49013"
        },
        {
            "message": "Missing item type",
            "line": " util.js:49175"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.xor(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.xor(2, 4);   // returns false\n\t\t   *\n\t\t   *    a = [2, 0, 0];\n\t\t   *    b = [2, 7, 0];\n\t\t   *    c = 0;\n\t\t   *\n\t\t   *    math.xor(a, b);   // returns [false, true, false]\n\t\t   *    math.xor(a, c);   // returns [true, false, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    and, not, or\n\t\t   *\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n\t\t   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n\t\t   * @return {boolean | Array | Matrix}\n\t\t   *            Returns true when one and only one input is defined with a nonzero/nonempty value.",
            "line": " util.js:49177"
        },
        {
            "message": "Missing item type",
            "line": " util.js:49339"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(313),\n\t\t  __webpack_require__(437),\n\t\t  __webpack_require__(331),\n\t\t  __webpack_require__(438),\n\t\t  __webpack_require__(439),\n\t\t  __webpack_require__(83),\n\t\t  __webpack_require__(315),\n\t\t  __webpack_require__(440),\n\t\t  __webpack_require__(317),\n\t\t  __webpack_require__(330),\n\t\t  __webpack_require__(320),\n\t\t  __webpack_require__(441),\n\t\t  __webpack_require__(442),\n\t\t  __webpack_require__(335),\n\t\t  __webpack_require__(444),\n\t\t  __webpack_require__(445),\n\t\t  __webpack_require__(446),\n\t\t  __webpack_require__(447),\n\t\t  __webpack_require__(288),\n\t\t  __webpack_require__(389),\n\t\t  __webpack_require__(347),\n\t\t  __webpack_require__(392)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:49341"
        },
        {
            "message": "Missing item type\n'use strict';\nvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix   = load(__webpack_require__(52));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var multiply = load(__webpack_require__(84));\n  /**\n\t\t   * Calculate the cross product for two vectors in three dimensional space.\n\t\t   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n\t\t   * as:\n\t\t   *\n\t\t   *    cross(A, B) = [\n\t\t   *      a2 * b3 - a3 * b2,\n\t\t   *      a3 * b1 - a1 * b3,\n\t\t   *      a1 * b2 - a2 * b1\n\t\t   *    ]\n\t\t   *\n\t\t   * If one of the input vectors has a dimension greater than 1, the output\n\t\t   * vector will be a 1x3 (2-dimensional) matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cross(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cross([1, 1, 0],   [0, 1, 1]);       // Returns [1, -1, 1]\n\t\t   *    math.cross([3, -3, 1],  [4, 9, 2]);       // Returns [-15, -2, 39]\n\t\t   *    math.cross([2, 3, 4],   [5, 6, 7]);       // Returns [-3, 6, -3]\n\t\t   *    math.cross([[1, 2, 3]], [[4], [5], [6]]); // Returns [[-3, 6, -3]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    dot, multiply\n\t\t   *\n\t\t   * @param  {Array | Matrix} x   First vector\n\t\t   * @param  {Array | Matrix} y   Second vector\n\t\t   * @return {Array | Matrix}     Returns the cross product of `x` and `y`",
            "line": " util.js:49371"
        },
        {
            "message": "Missing item type\nCalculate the cross product for two arrays",
            "line": " util.js:49437"
        },
        {
            "message": "Missing item type",
            "line": " util.js:49476"
        },
        {
            "message": "Missing item type\n'use strict';\nvar array     = __webpack_require__(40);\n\t\tvar clone     = __webpack_require__(3).clone;\n\t\tvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n\t\t  \n\t\t  /**\n\t\t   * Create a diagonal matrix or retrieve the diagonal of a matrix\n\t\t   *\n\t\t   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n\t\t   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n\t\t   * When k is positive, the values are placed on the super diagonal.\n\t\t   * When k is negative, the values are placed on the sub diagonal.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.diag(X)\n\t\t   *     math.diag(X, format)\n\t\t   *     math.diag(X, k)\n\t\t   *     math.diag(X, k, format)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     // create a diagonal matrix\n\t\t   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\t\t   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n\t\t   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\t\t   *\n\t\t   *    // retrieve the diagonal from a matrix\n\t\t   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\t\t   *    math.diag(a);   // returns [1, 5, 9]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     ones, zeros, eye\n\t\t   *\n\t\t   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n\t\t   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n\t\t   *                                    in or retrieved.\n\t\t   * @param {string} [format='dense']   The matrix storage format.\n\t\t   *\n\t\t   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.",
            "line": " util.js:49478"
        },
        {
            "message": "Missing item type\nCreeate diagonal matrix from a vector or vice versa",
            "line": " util.js:49583"
        },
        {
            "message": "Missing item type",
            "line": " util.js:49652"
        },
        {
            "message": "Missing item type\n'use strict';\nvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t\t  var add      = load(__webpack_require__(51));\n\t\t  var multiply = load(__webpack_require__(84));\n  /**\n\t\t   * Calculate the dot product of two vectors. The dot product of\n\t\t   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:\n\t\t   *\n\t\t   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.dot(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15\n\t\t   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    multiply, cross\n\t\t   *\n\t\t   * @param  {Array | Matrix} x     First vector\n\t\t   * @param  {Array | Matrix} y     Second vector\n\t\t   * @return {number}               Returns the dot product of `x` and `y`",
            "line": " util.js:49654"
        },
        {
            "message": "Missing item type\nCalculate the dot product for two arrays",
            "line": " util.js:49707"
        },
        {
            "message": "Missing item type",
            "line": " util.js:49737"
        },
        {
            "message": "Missing item type\n'use strict';\nvar clone = __webpack_require__(3).clone;\n\t\tvar _flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Flatten a multi dimensional matrix into a single dimensional matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.flatten(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    concat, resize, size, squeeze\n\t\t   *\n\t\t   * @param {Matrix | Array} x   Matrix to be flattened\n\t\t   * @return {Matrix | Array} Returns the flattened matrix",
            "line": " util.js:49739"
        },
        {
            "message": "Missing item type",
            "line": " util.js:49788"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar resize = __webpack_require__(40).resize;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Create a matrix filled with ones. The created matrix can have one or\n\t\t   * multiple dimensions.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.ones(m)\n\t\t   *    math.ones(m, format)\n\t\t   *    math.ones(m, n)\n\t\t   *    math.ones(m, n, format)\n\t\t   *    math.ones([m, n])\n\t\t   *    math.ones([m, n], format)\n\t\t   *    math.ones([m, n, p, ...])\n\t\t   *    math.ones([m, n, p, ...], format)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.ones(3);                   // returns [1, 1, 1]\n\t\t   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]\n\t\t   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n\t\t   *\n\t\t   *    var A = [[1, 2, 3], [4, 5, 6]];\n\t\t   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    zeros, eye, size, range\n\t\t   *\n\t\t   * @param {...number | Array} size    The size of each dimension of the matrix\n\t\t   * @param {string} [format]           The Matrix storage format\n\t\t   *\n\t\t   * @return {Array | Matrix | number}  A matrix filled with ones",
            "line": " util.js:49790"
        },
        {
            "message": "Missing item type\nCreate an Array or Matrix with ones",
            "line": " util.js:49872"
        },
        {
            "message": "Missing item type",
            "line": " util.js:49928"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var asc = load(__webpack_require__(443));\n\t\t  function desc(a, b) {\n\t\t    return -asc(a, b);\n\t\t  }\n  /**\n\t\t   * Partition-based selection of an array or 1D matrix.\n\t\t   * Will find the kth smallest value, and mutates the input array.\n\t\t   * Uses Quickselect.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.partitionSelect(x, k)\n\t\t   *    math.partitionSelect(x, k, compare)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.partitionSelect([5, 10, 1], 2);           // returns 10\n\t\t   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'\n\t\t   *\n\t\t   *    function sortByLength (a, b) {\n\t\t   *      return a.length - b.length;\n\t\t   *    }\n\t\t   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sort\n\t\t   *\n\t\t   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n\t\t   * @param {Number} k            The kth smallest value to be retrieved; zero-based index\n\t\t   * @param {Function | 'asc' | 'desc'} [compare='asc']\n\t\t   *        An optional comparator function. The function is called as\n\t\t   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n\t\t   *        and 0 when a == b.\n\t\t   * @return {*} Returns the kth lowest value.",
            "line": " util.js:49930"
        },
        {
            "message": "Missing item type\nQuickselect algorithm.\nCode adapted from:\nhttp://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html",
            "line": " util.js:50012"
        },
        {
            "message": "Missing item type",
            "line": " util.js:50070"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm05 = load(__webpack_require__(79));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n\t\t  \n\t\t  /**\n\t\t   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n\t\t   *\n\t\t   * x and y are considered equal when the relative difference between x and y\n\t\t   * is smaller than the configured epsilon. The function cannot be used to\n\t\t   * compare values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.compare(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.compare(6, 1);           // returns 1\n\t\t   *    math.compare(2, 3);           // returns -1\n\t\t   *    math.compare(7, 7);           // returns 0\n\t\t   *\n\t\t   *    var a = math.unit('5 cm');\n\t\t   *    var b = math.unit('40 mm');\n\t\t   *    math.compare(a, b);           // returns 1\n\t\t   *\n\t\t   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal, smaller, smallerEq, larger, largerEq\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.",
            "line": " util.js:50072"
        },
        {
            "message": "Missing item type",
            "line": " util.js:50258"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DimensionError = __webpack_require__(42);\n\t\tvar ArgumentsError = __webpack_require__(11);\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar format = __webpack_require__(23).format;\n\t\tvar clone = __webpack_require__(3).clone;\n\t\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Resize a matrix\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.resize(x, size)\n\t\t   *     math.resize(x, size, defaultValue)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]\n\t\t   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]\n\t\t   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n\t\t   *     math.resize(\"hello\", [8], \"!\");    // returns string 'hello!!!'\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     size, squeeze, subset\n\t\t   *\n\t\t   * @param {Array | Matrix | *} x             Matrix to be resized\n\t\t   * @param {Array | Matrix} size              One dimensional array with numbers\n\t\t   * @param {number | string} [defaultValue=0] Zero by default, except in\n\t\t   *                                           case of a string, in that case\n\t\t   *                                           defaultValue = ' '\n\t\t   * @return {* | Array | Matrix} A resized clone of matrix `x`",
            "line": " util.js:50260"
        },
        {
            "message": "Missing item type\nResize a string",
            "line": " util.js:50356"
        },
        {
            "message": "Missing item type",
            "line": " util.js:50402"
        },
        {
            "message": "Missing item type\n'use strict';\nvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Calculate the size of a matrix or scalar.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.size(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.size(2.3);                  // returns []\n\t\t   *     math.size('hello world');        // returns [11]\n\t\t   *\n\t\t   *     var A = [[1, 2, 3], [4, 5, 6]];\n\t\t   *     math.size(A);                    // returns [2, 3]\n\t\t   *     math.size(math.range(1,6));      // returns [5]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     resize, squeeze, subset\n\t\t   *\n\t\t   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\n\t\t   * @return {Array | Matrix} A vector with size of `x`.",
            "line": " util.js:50404"
        },
        {
            "message": "Missing item type",
            "line": " util.js:50463"
        },
        {
            "message": "Missing item type\n'use strict';\nvar size = __webpack_require__(40).size;\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var asc = load(__webpack_require__(443));\n\t\t  var desc = function (a, b) {\n\t\t    return -asc(a, b);\n\t\t  };\n  /**\n\t\t   * Sort the items in a matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sort(x)\n\t\t   *    math.sort(x, compare)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sort([5, 10, 1]); // returns [1, 5, 10]\n\t\t   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']\n\t\t   *\n\t\t   *    function sortByLength (a, b) {\n\t\t   *      return a.length - b.length;\n\t\t   *    }\n\t\t   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    filter, forEach, map\n\t\t   *\n\t\t   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n\t\t   * @param {Function | 'asc' | 'desc'} [compare='asc']\n\t\t   *        An optional _comparator function. The function is called as\n\t\t   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n\t\t   *        and 0 when a == b.\n\t\t   * @return {Matrix | Array} Returns the sorted matrix.",
            "line": " util.js:50465"
        },
        {
            "message": "Missing item type\nGet the comparator for given order ('asc' or 'desc')",
            "line": " util.js:50541"
        },
        {
            "message": "Missing item type\nValidate whether an array is one dimensional\nThrows an error when this is not the case",
            "line": " util.js:50558"
        },
        {
            "message": "Missing item type\nValidate whether a matrix is one dimensional\nThrows an error when this is not the case",
            "line": " util.js:50570"
        },
        {
            "message": "Missing item type",
            "line": " util.js:50589"
        },
        {
            "message": "Missing item type\n'use strict';\nvar object = __webpack_require__(3);\n\t\tvar array = __webpack_require__(40);\nfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n  /**\n\t\t   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.squeeze(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.squeeze([3]);           // returns 3\n\t\t   *     math.squeeze([[3]]);         // returns 3\n\t\t   *\n\t\t   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)\n\t\t   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)\n\t\t   *\n\t\t   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)\n\t\t   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)\n\t\t   *\n\t\t   *     // only inner and outer dimensions are removed\n\t\t   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n\t\t   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     subset\n\t\t   *\n\t\t   * @param {Matrix | Array} x      Matrix to be squeezed\n\t\t   * @return {Matrix | Array} Squeezed matrix",
            "line": " util.js:50591"
        },
        {
            "message": "Missing item type",
            "line": " util.js:50656"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  //require('./distribution'), // TODO: rethink math.distribution\n\t\t  __webpack_require__(418),\n\t\t  __webpack_require__(416),\n\t\t  __webpack_require__(417),\n\t\t  __webpack_require__(449),\n\t\t  __webpack_require__(451),\n\t\t  __webpack_require__(452),\n\t\t  __webpack_require__(453),\n\t\t  __webpack_require__(455),\n\t\t  __webpack_require__(456)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:50658"
        },
        {
            "message": "Missing item type\n'use strict';\n\nfunction factory(type, config, load, typed) {\n\t\t    var matrix = load(__webpack_require__(52));\n\t\t    var divide = load(__webpack_require__(329));\n\t\t    var sum = load(__webpack_require__(450));\n\t\t    var multiply = load(__webpack_require__(84));\n\t\t    var dotDivide = load(__webpack_require__(371));\n\t\t    var log = load(__webpack_require__(385));\n\t\t    var isNumeric = load(__webpack_require__(89));\n    /**\n\t\t     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n\t\t     *\n\t\t     * Syntax:\n\t\t     *\n\t\t     *     math.kldivergence(x, y)\n\t\t     *\n\t\t     * Examples:\n\t\t     *\n\t\t     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153\n\t\t     *\n\t\t     *\n\t\t     * @param  {Array | Matrix} q    First vector\n\t\t     * @param  {Array | Matrix} p    Second vector\n\t\t     * @return {number}              Returns distance between q and p",
            "line": " util.js:50676"
        },
        {
            "message": "Missing item type",
            "line": " util.js:50771"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(53));\n  /**\n\t\t   * Compute the sum of a matrix or a list with values.\n\t\t   * In case of a (multi dimensional) array or matrix, the sum of all\n\t\t   * elements will be calculated.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.sum(a, b, c, ...)\n\t\t   *     math.sum(A)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.sum(2, 1, 4, 3);               // returns 10\n\t\t   *     math.sum([2, 1, 4, 3]);             // returns 10\n\t\t   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, min, max, prod, std, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The sum of all values",
            "line": " util.js:50773"
        },
        {
            "message": "Missing item type\nRecursively calculate the sum of an n-dimensional array",
            "line": " util.js:50827"
        },
        {
            "message": "Missing item type",
            "line": " util.js:50861"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var divide = load(__webpack_require__(329));\n\t\t  var factorial = load(__webpack_require__(416));\n\t\t  var isInteger = load(__webpack_require__(419));\n\t\t  var isPositive = load(__webpack_require__(381));\n  /**\n\t\t   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n\t\t   *\n\t\t   * multinomial takes one array of integers as an argument.\n\t\t   * The following condition must be enforced: every ai <= 0\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.multinomial(a) // a is an array type\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.multinomial([1,2,1]); // returns 12\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    combinations, factorial\n\t\t   *\n\t\t   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n\t\t   * @return {Number | BigNumber}         Multinomial coefficient.",
            "line": " util.js:50863"
        },
        {
            "message": "Missing item type",
            "line": " util.js:50920"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\nfunction factory (type, config, load, typed) {\n\t\t  var factorial = load(__webpack_require__(416));\n  /**\n\t\t   * Compute the number of ways of obtaining an ordered subset of `k` elements\n\t\t   * from a set of `n` elements.\n\t\t   *\n\t\t   * Permutations only takes integer arguments.\n\t\t   * The following condition must be enforced: k <= n.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.permutations(n)\n\t\t   *     math.permutations(n, k)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.permutations(5);     // 120\n\t\t   *    math.permutations(5, 3);  // 60\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    combinations, factorial\n\t\t   *\n\t\t   * @param {number | BigNumber} n   The number of objects in total\n\t\t   * @param {number | BigNumber} [k] The number of objects in the subset\n\t\t   * @return {number | BigNumber}    The number of permutations",
            "line": " util.js:50922"
        },
        {
            "message": "Missing item type\nTest whether BigNumber n is a positive integer",
            "line": " util.js:51007"
        },
        {
            "message": "Missing item type",
            "line": " util.js:51020"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var distribution = load(__webpack_require__(454));\n  /**\n\t\t   * Random pick one or more values from a one dimensional array.\n\t\t   * Array elements are picked using a random function with uniform or weighted distribution.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.pickRandom(array)\n\t\t   *     math.pickRandom(array, number)\n\t\t   *     math.pickRandom(array, weights)\n\t\t   *     math.pickRandom(array, number, weights)\n\t\t   *     math.pickRandom(array, weights, number)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.pickRandom([3, 6, 12, 2]);                  // returns one of the values in the array\n\t\t   *     math.pickRandom([3, 6, 12, 2], 2);               // returns an array of two of the values in the array\n\t\t   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1]);    // returns one of the values in the array with weighted distribution\n\t\t   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]); // returns an array of two of the values in the array with weighted distribution\n\t\t   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2); // returns an array of two of the values in the array with weighted distribution\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     random, randomInt\n\t\t   *\n\t\t   * @param {Array} array     A one dimensional array\n\t\t   * @param {Int} number      An int or float\n\t\t   * @param {Array} weights   An array of ints or floats\n\t\t   * @return {number} One of the elements of the provided input array\n\t\t   * @return {array} An array of elements of the provided input array",
            "line": " util.js:51022"
        },
        {
            "message": "Missing item type",
            "line": " util.js:51071"
        },
        {
            "message": "Missing item type\n'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\t\tvar isCollection = __webpack_require__(322);\n\t\tvar isNumber = __webpack_require__(6).isNumber;\n// TODO: rethink math.distribution\n\t\t// TODO: rework to a typed function\n\t\tfunction factory (type, config, load, typed) {\n\t\t  var matrix = load(__webpack_require__(52));\n\t\t  var array = __webpack_require__(40);\n  /**\n\t\t   * Create a distribution object with a set of random functions for given\n\t\t   * random distribution.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.distribution(name)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     var normalDist = math.distribution('normal'); // create a normal distribution\n\t\t   *     normalDist.random(0, 10);                     // get a random value between 0 and 10\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     random, randomInt, pickRandom\n\t\t   *\n\t\t   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.\n\t\t   * @return {Object}       Returns a distribution object containing functions:\n\t\t   *                        `random([size] [, min] [, max])`,\n\t\t   *                        `randomInt([min] [, max])`,\n\t\t   *                        `pickRandom(array)`",
            "line": " util.js:51073"
        },
        {
            "message": "Missing item type",
            "line": " util.js:51373"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var distribution = load(__webpack_require__(454));\n  /**\n\t\t   * Return a random number larger or equal to `min` and smaller than `max`\n\t\t   * using a uniform distribution.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.random()                // generate a random number between 0 and 1\n\t\t   *     math.random(max)             // generate a random number between 0 and max\n\t\t   *     math.random(min, max)        // generate a random number between min and max\n\t\t   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n\t\t   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n\t\t   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.random();       // returns a random number between 0 and 1\n\t\t   *     math.random(100);    // returns a random number between 0 and 100\n\t\t   *     math.random(30, 40); // returns a random number between 30 and 40\n\t\t   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     randomInt, pickRandom\n\t\t   *\n\t\t   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n\t\t   *                                size and filled with random values is returned\n\t\t   * @param {number} [min]  Minimum boundary for the random value, included\n\t\t   * @param {number} [max]  Maximum boundary for the random value, excluded\n\t\t   * @return {number | Array | Matrix} A random number",
            "line": " util.js:51375"
        },
        {
            "message": "Missing item type",
            "line": " util.js:51424"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var distribution = load(__webpack_require__(454));\n  /**\n\t\t   * Return a random integer number larger or equal to `min` and smaller than `max`\n\t\t   * using a uniform distribution.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.randomInt(max)             // generate a random integer between 0 and max\n\t\t   *     math.randomInt(min, max)        // generate a random integer between min and max\n\t\t   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n\t\t   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n\t\t   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.randomInt(100);    // returns a random integer between 0 and 100\n\t\t   *     math.randomInt(30, 40); // returns a random integer between 30 and 40\n\t\t   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     random, pickRandom\n\t\t   *\n\t\t   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n\t\t   *                                size and filled with random values is returned\n\t\t   * @param {number} [min]  Minimum boundary for the random value, included\n\t\t   * @param {number} [max]  Maximum boundary for the random value, excluded\n\t\t   * @return {number | Array | Matrix} A random integer value",
            "line": " util.js:51426"
        },
        {
            "message": "Missing item type",
            "line": " util.js:51473"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(443),\n\t\t  __webpack_require__(458),\n\t\t  __webpack_require__(88),\n\t\t  __webpack_require__(64),\n\t\t  __webpack_require__(354),\n\t\t  __webpack_require__(60),\n\t\t  __webpack_require__(459),\n\t\t  __webpack_require__(460)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:51475"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var equal = load(__webpack_require__(88));\n  /**\n\t\t   * Test element wise whether two matrices are equal.\n\t\t   * The function accepts both matrices and scalar values.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.deepEqual(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.deepEqual(2, 4);   // returns false\n\t\t   *\n\t\t   *    a = [2, 5, 1];\n\t\t   *    b = [2, 7, 1];\n\t\t   *\n\t\t   *    math.deepEqual(a, b);   // returns false\n\t\t   *    math.equal(a, b);       // returns [true, false, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n\t\t   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n\t\t   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n\t\t   *            Returns true when the input matrices have the same size and each of their elements is equal.",
            "line": " util.js:51491"
        },
        {
            "message": "Missing item type\nTest whether two arrays have the same size and all elements are equal",
            "line": " util.js:51535"
        },
        {
            "message": "Missing item type",
            "line": " util.js:51576"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether value x is smaller or equal to y.\n\t\t   *\n\t\t   * The function returns true when x is smaller than y or the relative\n\t\t   * difference between x and y is smaller than the configured epsilon. The\n\t\t   * function cannot be used to compare values smaller than approximately 2.22e-16.\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.smallerEq(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.smaller(1 + 2, 3);        // returns false\n\t\t   *    math.smallerEq(1 + 2, 3);      // returns true\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, unequal, smaller, larger, largerEq, compare\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false",
            "line": " util.js:51578"
        },
        {
            "message": "Missing item type",
            "line": " util.js:51756"
        },
        {
            "message": "Missing item type\n'use strict';\nvar nearlyEqual = __webpack_require__(6).nearlyEqual;\n\t\tvar bigNearlyEqual = __webpack_require__(49);\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm07 = load(__webpack_require__(62));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  var latex = __webpack_require__(32);\n  /**\n\t\t   * Test whether two values are unequal.\n\t\t   *\n\t\t   * The function tests whether the relative difference between x and y is\n\t\t   * larger than the configured epsilon. The function cannot be used to compare\n\t\t   * values smaller than approximately 2.22e-16.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n\t\t   *\n\t\t   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n\t\t   * with everything except `null`, and `undefined` is unequal with everying\n\t\t   * except. `undefined`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.unequal(x, y)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.unequal(2 + 2, 3);       // returns true\n\t\t   *    math.unequal(2 + 2, 4);       // returns false\n\t\t   *\n\t\t   *    var a = math.unit('50 cm');\n\t\t   *    var b = math.unit('5 m');\n\t\t   *    math.unequal(a, b);           // returns false\n\t\t   *\n\t\t   *    var c = [2, 5, 1];\n\t\t   *    var d = [2, 7, 1];\n\t\t   *\n\t\t   *    math.unequal(c, d);           // returns [false, true, false]\n\t\t   *    math.deepEqual(c, d);         // returns false\n\t\t   *\n\t\t   *    math.unequal(0, null);        // returns true\n\t\t   * See also:\n\t\t   *\n\t\t   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n\t\t   *\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n\t\t   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n\t\t   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false",
            "line": " util.js:51758"
        },
        {
            "message": "Missing item type",
            "line": " util.js:51966"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(462)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:51968"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar sign = __webpack_require__(6).sign;\n\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Compute the erf function of a value using a rational Chebyshev\n\t\t   * approximations for different intervals of x.\n\t\t   *\n\t\t   * This is a translation of W. J. Cody's Fortran implementation from 1987\n\t\t   * ( http://www.netlib.org/specfun/erf ). See the AMS publication\n\t\t   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n\t\t   * for an explanation of this process.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.erf(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.erf(0.2);    // returns 0.22270258921047847\n\t\t   *    math.erf(-0.5);   // returns -0.5204998778130465\n\t\t   *    math.erf(4);      // returns 0.9999999845827421\n\t\t   *\n\t\t   * @param {number | Array | Matrix} x   A real number\n\t\t   * @return {number | Array | Matrix}    The erf of `x`",
            "line": " util.js:51977"
        },
        {
            "message": "Missing item type\nApproximates the error function erf() for x <= 0.46875 using this function:\n              n\nerf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n             j=0",
            "line": " util.js:52042"
        },
        {
            "message": "Missing item type\nApproximates the complement of the error function erfc() for\n0.46875 <= x <= 4.0 using this function:\n                      n\nerfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n                     j=0",
            "line": " util.js:52061"
        },
        {
            "message": "Missing item type\nApproximates the complement of the error function erfc() for x > 4.0 using\nthis function:\n\nerfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n              n\n   1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n             j=0",
            "line": " util.js:52083"
        },
        {
            "message": "Missing item type\nUpper bound for the first approximation interval, 0 <= x <= THRESH",
            "line": " util.js:52114"
        },
        {
            "message": "Missing item type\nConstant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)",
            "line": " util.js:52120"
        },
        {
            "message": "Missing item type\nCoefficients for each term of the numerator sum (p_j) for each approximation\ninterval (see W. J. Cody's paper for more details)",
            "line": " util.js:52126"
        },
        {
            "message": "Missing item type\nCoefficients for each term of the denominator sum (q_j) for each approximation\ninterval (see W. J. Cody's paper for more details)",
            "line": " util.js:52147"
        },
        {
            "message": "Missing item type\nMaximum/minimum safe numbers to input to erf() (in ES6+, this number is\nNumber.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\nreturn 1",
            "line": " util.js:52166"
        },
        {
            "message": "Missing item type",
            "line": " util.js:52178"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(323),\n\t\t  __webpack_require__(328),\n\t\t  __webpack_require__(464),\n\t\t  __webpack_require__(333),\n\t\t  __webpack_require__(465),\n\t\t  __webpack_require__(466),\n\t\t  __webpack_require__(467),\n\t\t  __webpack_require__(468),\n\t\t  __webpack_require__(450),\n\t\t  __webpack_require__(469)\n\t\t];\n\n\t/***/ },",
            "line": " util.js:52180"
        },
        {
            "message": "Missing item type\n'use strict';\nvar flatten = __webpack_require__(40).flatten;\n\t\tvar reduce = __webpack_require__(325);\n\t\tvar containsCollections = __webpack_require__(326);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(53));\n\t\t  var divide = load(__webpack_require__(81));\n\t\t  var compare = load(__webpack_require__(443));\n\t\t  var partitionSelect = load(__webpack_require__(442));\n  /**\n\t\t   * Compute the median of a matrix or a list with values. The values are\n\t\t   * sorted and the middle value is returned. In case of an even number of\n\t\t   * values, the average of the two middle values is returned.\n\t\t   * Supported types of values are: Number, BigNumber, Unit\n\t\t   *\n\t\t   * In case of a (multi dimensional) array or matrix, the median of all\n\t\t   * elements will be calculated.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.median(a, b, c, ...)\n\t\t   *     math.median(A)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.median(5, 2, 7);        // returns 5\n\t\t   *     math.median([3, -1, 5, 7]);  // returns 4\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     mean, min, max, sum, prod, std, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The median",
            "line": " util.js:52197"
        },
        {
            "message": "Missing item type\nRecursively calculate the median of an n-dimensional array",
            "line": " util.js:52259"
        },
        {
            "message": "Missing item type",
            "line": " util.js:52319"
        },
        {
            "message": "Missing item type\n'use strict';\nvar flatten = __webpack_require__(40).flatten;\nfunction factory (type, config, load, typed) {\n  /**\n\t\t  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n\t\t  * If there are more than one modes, it returns a list of those values.\n\t\t  *\n\t\t  * Syntax:\n\t\t  *\n\t\t  *     math.mode(a, b, c, ...)\n\t\t  *     math.mode(A)\n\t\t  *\n\t\t  * Examples:\n\t\t  *\n\t\t  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]\n\t\t  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]\n\t\t  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n\t\t  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n\t\t  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n\t\t  *\n\t\t  * See also:\n\t\t  *\n\t\t  *     median,\n\t\t  *     mean\n\t\t  *\n\t\t  * @param {... *} args  A single matrix\n\t\t  * @return {*} The mode of all values",
            "line": " util.js:52321"
        },
        {
            "message": "Missing item type\nCalculates the mode in an 1-dimensional array",
            "line": " util.js:52365"
        },
        {
            "message": "Missing item type",
            "line": " util.js:52401"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t\t  var multiply = load(__webpack_require__(80));\n  /**\n\t\t   * Compute the product of a matrix or a list with values.\n\t\t   * In case of a (multi dimensional) array or matrix, the sum of all\n\t\t   * elements will be calculated.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.prod(a, b, c, ...)\n\t\t   *     math.prod(A)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.multiply(2, 3);           // returns 6\n\t\t   *     math.prod(2, 3);               // returns 6\n\t\t   *     math.prod(2, 3, 4);            // returns 24\n\t\t   *     math.prod([2, 3, 4]);          // returns 24\n\t\t   *     math.prod([[2, 5], [4, 3]]);   // returns 120\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, min, max, sum, std, var\n\t\t   *\n\t\t   * @param {... *} args  A single matrix or or multiple scalar values\n\t\t   * @return {*} The product of all values",
            "line": " util.js:52403"
        },
        {
            "message": "Missing item type\nRecursively calculate the product of an n-dimensional array",
            "line": " util.js:52458"
        },
        {
            "message": "Missing item type",
            "line": " util.js:52483"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isInteger = __webpack_require__(6).isInteger;\n\t\tvar isNumber = __webpack_require__(6).isNumber;\n\t\tvar flatten = __webpack_require__(40).flatten;\n\t\tvar isCollection = __webpack_require__(322);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(51));\n\t\t  var multiply = load(__webpack_require__(84));\n\t\t  var partitionSelect = load(__webpack_require__(442));\n\t\t  var compare = load(__webpack_require__(443));\n  /**\n\t\t   * Compute the prob order quantile of a matrix or a list with values.\n\t\t   * The sequence is sorted and the middle value is returned.\n\t\t   * Supported types of sequence values are: Number, BigNumber, Unit\n\t\t   * Supported types of probability are: Number, BigNumber\n\t\t   *\n\t\t   * In case of a (multi dimensional) array or matrix, the prob order quantile\n\t\t   * of all elements will be calculated.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.quantileSeq(A, prob[, sorted])\n\t\t   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])\n\t\t   *     math.quantileSeq(A, N[, sorted])\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4\n\t\t   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]\n\t\t   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]\n\t\t   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     median, mean, min, max, sum, prod, std, var\n\t\t   *\n\t\t   * @param {Array, Matrix} data                A single matrix or Array\n\t\t   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is\n\t\t   *                                            the amount of evenly distributed steps of\n\t\t   *                                            probabilities; only one of these options can\n\t\t   *                                            be provided\n\t\t   * @param {Boolean} sorted=false              is data sorted in ascending order\n\t\t   * @return {Number, BigNumber, Unit, Array}   Quantile(s)",
            "line": " util.js:52485"
        },
        {
            "message": "Missing item type\nCalculate the prob order quantile of an n-dimensional array.",
            "line": " util.js:52636"
        },
        {
            "message": "Missing item type\nCheck if array value types are valid, throw error otherwise.",
            "line": " util.js:52727"
        },
        {
            "message": "Missing item type",
            "line": " util.js:52746"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var sqrt       = load(__webpack_require__(380));\n\t\t  var variance   = load(__webpack_require__(469));\n  /**\n\t\t   * Compute the standard deviation of a matrix or a  list with values.\n\t\t   * The standard deviations is defined as the square root of the variance:\n\t\t   * `std(A) = sqrt(var(A))`.\n\t\t   * In case of a (multi dimensional) array or matrix, the standard deviation\n\t\t   * over all elements will be calculated.\n\t\t   *\n\t\t   * Optionally, the type of normalization can be specified as second\n\t\t   * parameter. The parameter `normalization` can be one of the following values:\n\t\t   *\n\t\t   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\t\t   * - 'uncorrected'        The sum of squared errors is divided by n\n\t\t   * - 'biased'             The sum of squared errors is divided by (n + 1)\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.std(a, b, c, ...)\n\t\t   *     math.std(A)\n\t\t   *     math.std(A, normalization)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.std(2, 4, 6);                     // returns 2\n\t\t   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611\n\t\t   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979\n\t\t   *     math.std([2, 4, 6, 8], 'biased');      // returns 2\n\t\t   *\n\t\t   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, max, min, prod, sum, var\n\t\t   *\n\t\t   * @param {Array | Matrix} array\n\t\t   *                        A single matrix or or multiple scalar values\n\t\t   * @param {string} [normalization='unbiased']\n\t\t   *                        Determines how to normalize the variance.\n\t\t   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n\t\t   * @return {*} The standard deviation",
            "line": " util.js:52748"
        },
        {
            "message": "Missing item type",
            "line": " util.js:52826"
        },
        {
            "message": "Missing item type\n'use strict';\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar deepForEach = __webpack_require__(324);\nfunction factory (type, config, load, typed) {\n\t\t  var add = load(__webpack_require__(53));\n\t\t  var subtract = load(__webpack_require__(77));\n\t\t  var multiply = load(__webpack_require__(80));\n\t\t  var divide = load(__webpack_require__(81));\n  /**\n\t\t   * Compute the variance of a matrix or a  list with values.\n\t\t   * In case of a (multi dimensional) array or matrix, the variance over all\n\t\t   * elements will be calculated.\n\t\t   *\n\t\t   * Optionally, the type of normalization can be specified as second\n\t\t   * parameter. The parameter `normalization` can be one of the following values:\n\t\t   *\n\t\t   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\t\t   * - 'uncorrected'        The sum of squared errors is divided by n\n\t\t   * - 'biased'             The sum of squared errors is divided by (n + 1)\n\t\t   *\n\t\t   * Note that older browser may not like the variable name `var`. In that\n\t\t   * case, the function can be called as `math['var'](...)` instead of\n\t\t   * `math.var(...)`.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.var(a, b, c, ...)\n\t\t   *     math.var(A)\n\t\t   *     math.var(A, normalization)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *     math.var(2, 4, 6);                     // returns 4\n\t\t   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667\n\t\t   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5\n\t\t   *     math.var([2, 4, 6, 8], 'biased');      // returns 4\n\t\t   *\n\t\t   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    mean, median, max, min, prod, std, sum\n\t\t   *\n\t\t   * @param {Array | Matrix} array\n\t\t   *                        A single matrix or or multiple scalar values\n\t\t   * @param {string} [normalization='unbiased']\n\t\t   *                        Determines how to normalize the variance.\n\t\t   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n\t\t   * @return {*} The variance",
            "line": " util.js:52828"
        },
        {
            "message": "Missing item type\nRecursively calculate the variance of an n-dimensional array",
            "line": " util.js:52903"
        },
        {
            "message": "Missing item type",
            "line": " util.js:52960"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(90),\n\t\t  __webpack_require__(471)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:52962"
        },
        {
            "message": "Missing item type\n'use strict';\nvar isString = __webpack_require__(23).isString;\n\t\tvar format = __webpack_require__(23).format;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Interpolate values into a string template.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.print(template, values)\n\t\t   *     math.print(template, values, precision)\n\t\t   *     math.print(template, values, options)\n\t\t   *\n\t\t   * Example usage:\n\t\t   *\n\t\t   *     // the following outputs: 'Lucy is 5 years old'\n\t\t   *     math.print('Lucy is $age years old', {age: 5});\n\t\t   *\n\t\t   *     // the following outputs: 'The value of pi is 3.141592654'\n\t\t   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);\n\t\t   *\n\t\t   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\n\t\t   *     math.print('Hello $user.name! The date is $date', {\n\t\t   *       user: {\n\t\t   *         name: 'Mary',\n\t\t   *       },\n\t\t   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\n\t\t   *     });\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *     format\n\t\t   *\n\t\t   * @param {string} template     A string containing variable placeholders.\n\t\t   * @param {Object} values       An object containing variables which will\n\t\t   *                              be filled in in the template.\n\t\t   * @param {number | Object} [options]  Formatting options,\n\t\t   *                              or the number of digits to format numbers.\n\t\t   *                              See function math.format for a description\n\t\t   *                              of all options.\n\t\t   * @return {string} Interpolated string",
            "line": " util.js:52972"
        },
        {
            "message": "Missing item type\nInterpolate values into a string template.",
            "line": " util.js:53028"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53063"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(473),\n\t\t  __webpack_require__(474),\n\t\t  __webpack_require__(475),\n\t\t  __webpack_require__(476),\n\t\t  __webpack_require__(477),\n\t\t  __webpack_require__(478),\n\t\t  __webpack_require__(479),\n\t\t  __webpack_require__(480),\n\t\t  __webpack_require__(481),\n\t\t  __webpack_require__(482),\n\t\t  __webpack_require__(483),\n\t\t  __webpack_require__(484),\n\t\t  __webpack_require__(485),\n\t\t  __webpack_require__(486),\n\t\t  __webpack_require__(487),\n\t\t  __webpack_require__(488),\n\t\t  __webpack_require__(489),\n\t\t  __webpack_require__(490),\n\t\t  __webpack_require__(491),\n\t\t  __webpack_require__(492),\n\t\t  __webpack_require__(493),\n\t\t  __webpack_require__(494),\n\t\t  __webpack_require__(495),\n\t\t  __webpack_require__(496),\n\t\t  __webpack_require__(497)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:53065"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse cosine of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acos(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acos(0.5);           // returns number 1.0471975511965979\n\t\t   *    math.acos(math.cos(1.5)); // returns number 1.5\n\t\t   *\n\t\t   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cos, atan, asin\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x",
            "line": " util.js:53098"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53161"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the hyperbolic arccos of a value,\n\t\t   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acosh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acosh(1.5);       // returns 0.9624236501192069\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cosh, asinh, atanh\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x",
            "line": " util.js:53163"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic arccos of a number",
            "line": " util.js:53221"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53235"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acot(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acot(0.5);           // returns number 0.4636476090008061\n\t\t   *    math.acot(math.cot(1.5)); // returns number 1.5\n\t\t   *\n\t\t   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cot, atan\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x   Function input\n\t\t   * @return {number | Complex | Array | Matrix} The arc cotangent of x",
            "line": " util.js:53237"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53295"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the hyperbolic arccotangent of a value,\n\t\t   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acoth(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acoth(0.5);       // returns 0.8047189562170503\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    acsch, asech\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x",
            "line": " util.js:53297"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53356"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acsc(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acsc(0.5);           // returns number 0.5235987755982989\n\t\t   *    math.acsc(math.csc(1.5)); // returns number ~1.5\n\t\t   *\n\t\t   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    csc, asin, asec\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x   Function input\n\t\t   * @return {number | Complex | Array | Matrix} The arc cosecant of x",
            "line": " util.js:53358"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53420"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the hyperbolic arccosecant of a value,\n\t\t   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.acsch(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.acsch(0.5);       // returns 1.4436354751788103\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    asech, acoth\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x",
            "line": " util.js:53422"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53479"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.asec(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.asec(0.5);           // returns 1.0471975511965979\n\t\t   *    math.asec(math.sec(1.5)); // returns 1.5\n\t\t   *\n\t\t   *    math.asec(2);             // returns 0 + 1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    acos, acot, acsc\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} The arc secant of x",
            "line": " util.js:53481"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53542"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  var acosh = typed.find(load(__webpack_require__(474)), ['Complex']);\n  /**\n\t\t   * Calculate the hyperbolic arcsecant of a value,\n\t\t   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.asech(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.asech(0.5);       // returns 1.3169578969248166\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    acsch, acoth\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x",
            "line": " util.js:53544"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53612"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse sine of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.asin(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.asin(0.5);           // returns number 0.5235987755982989\n\t\t   *    math.asin(math.sin(1.5)); // returns number ~1.5\n\t\t   *\n\t\t   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sin, atan, acos\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x",
            "line": " util.js:53614"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53678"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the hyperbolic arcsine of a value,\n\t\t   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.asinh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.asinh(0.5);       // returns 0.48121182505960347\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    acosh, atanh\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x",
            "line": " util.js:53680"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53737"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the inverse tangent of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.atan(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.atan(0.5);           // returns number 0.4636476090008061\n\t\t   *    math.atan(math.tan(1.5)); // returns number 1.5\n\t\t   *\n\t\t   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    tan, asin, acos\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x",
            "line": " util.js:53739"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53798"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n  var matrix = load(__webpack_require__(52));\n  var algorithm02 = load(__webpack_require__(372));\n\t\t  var algorithm03 = load(__webpack_require__(61));\n\t\t  var algorithm09 = load(__webpack_require__(374));\n\t\t  var algorithm11 = load(__webpack_require__(85));\n\t\t  var algorithm12 = load(__webpack_require__(63));\n\t\t  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Calculate the inverse tangent function with two arguments, y/x.\n\t\t   * By providing two arguments, the right quadrant of the computed angle can be\n\t\t   * determined.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.atan2(y, x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.atan2(2, 2) / math.pi;       // returns number 0.25\n\t\t   *\n\t\t   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg\n\t\t   *    var x = math.cos(angle);\n\t\t   *    var y = math.sin(angle);\n\t\t   *\n\t\t   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    tan, atan, sin, cos\n\t\t   *\n\t\t   * @param {number | Array | Matrix} y  Second dimension\n\t\t   * @param {number | Array | Matrix} x  First dimension\n\t\t   * @return {number | Array | Matrix} Four-quadrant inverse tangent",
            "line": " util.js:53800"
        },
        {
            "message": "Missing item type",
            "line": " util.js:53956"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic arctangent of a value,\n\t\t   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.atanh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.atanh(0.5);       // returns 0.5493061443340549\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    acosh, asinh\n\t\t   *\n\t\t   * @param {number | Complex | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x",
            "line": " util.js:53958"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic arctangent of a number",
            "line": " util.js:54013"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54027"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the cosine of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cos(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cos(2);                      // returns number -0.4161468365471422\n\t\t   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475\n\t\t   *    math.cos(math.unit(180, 'deg'));  // returns number -1\n\t\t   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5\n\t\t   *\n\t\t   *    var angle = 0.2;\n\t\t   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cos, tan\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x",
            "line": " util.js:54029"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54095"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic cosine of a value,\n\t\t   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cosh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cosh(0.5);       // returns number 1.1276259652063807\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sinh, tanh\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x",
            "line": " util.js:54097"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic cosine of a number",
            "line": " util.js:54153"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54167"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.cot(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.cot(2);      // returns number -0.45765755436028577\n\t\t   *    1 / math.tan(2);  // returns number -0.45765755436028577\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    tan, sec, csc\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Cotangent of x",
            "line": " util.js:54169"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54231"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic cotangent of a value,\n\t\t   * defined as `coth(x) = 1 / tanh(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.coth(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    // coth(x) = 1 / tanh(x)\n\t\t   *    math.coth(2);         // returns 1.0373147207275482\n\t\t   *    1 / math.tanh(2);     // returns 1.0373147207275482\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sinh, tanh, cosh\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x",
            "line": " util.js:54233"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic cosine of a number",
            "line": " util.js:54291"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54306"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.csc(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.csc(2);      // returns number 1.099750170294617\n\t\t   *    1 / math.sin(2);  // returns number 1.099750170294617\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sin, sec, cot\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Cosecant of x",
            "line": " util.js:54308"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54370"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar sign = __webpack_require__(6).sign;\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic cosecant of a value,\n\t\t   * defined as `csch(x) = 1 / sinh(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.csch(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    // csch(x) = 1/ sinh(x)\n\t\t   *    math.csch(0.5);       // returns 1.9190347513349437\n\t\t   *    1 / math.sinh(0.5);   // returns 1.9190347513349437\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sinh, sech, coth\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x",
            "line": " util.js:54372"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic cosecant of a number",
            "line": " util.js:54431"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54451"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sec(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sec(2);      // returns number -2.4029979617223822\n\t\t   *    1 / math.cos(2);  // returns number -2.4029979617223822\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cos, csc, cot\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Secant of x",
            "line": " util.js:54453"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54515"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic secant of a value,\n\t\t   * defined as `sech(x) = 1 / cosh(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sech(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    // sech(x) = 1/ cosh(x)\n\t\t   *    math.sech(0.5);       // returns 0.886818883970074\n\t\t   *    1 / math.cosh(0.5);   // returns 0.886818883970074\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cosh, csch, coth\n\t\t   *\n\t\t   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x",
            "line": " util.js:54517"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic secant of a number",
            "line": " util.js:54575"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54589"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n  /**\n\t\t   * Calculate the sine of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sin(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sin(2);                      // returns number 0.9092974268256813\n\t\t   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475\n\t\t   *    math.sin(math.unit(90, 'deg'));   // returns number 1\n\t\t   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5\n\t\t   *\n\t\t   *    var angle = 0.2;\n\t\t   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cos, tan\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x",
            "line": " util.js:54591"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54658"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic sine of a value,\n\t\t   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.sinh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.sinh(0.5);       // returns number 0.5210953054937474\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    cosh, tanh\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x",
            "line": " util.js:54660"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic sine of a number",
            "line": " util.js:54717"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54731"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.tan(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.tan(0.5);                    // returns number 0.5463024898437905\n\t\t   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905\n\t\t   *    math.tan(math.pi / 4);            // returns number 1\n\t\t   *    math.tan(math.unit(45, 'deg'));   // returns number 1\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    atan, sin, cos\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x",
            "line": " util.js:54733"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54796"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Calculate the hyperbolic tangent of a value,\n\t\t   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.tanh(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\n\t\t   *    math.tanh(0.5);                   // returns 0.46211715726000974\n\t\t   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974\n\t\t   *    1 / math.coth(0.5);               // returns 0.46211715726000974\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    sinh, cosh, coth\n\t\t   *\n\t\t   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n\t\t   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x",
            "line": " util.js:54798"
        },
        {
            "message": "Missing item type\nCalculate the hyperbolic tangent of a number",
            "line": " util.js:54858"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54873"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(499)\n\t\t];\n\n\t/***/ },",
            "line": " util.js:54875"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  var latex = __webpack_require__(32);\n  var matrix = load(__webpack_require__(52));\n  var algorithm13 = load(__webpack_require__(57));\n\t\t  var algorithm14 = load(__webpack_require__(58));\n  /**\n\t\t   * Change the unit of a value.\n\t\t   *\n\t\t   * For matrices, the function is evaluated element wise.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *    math.to(x, unit)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm\n\t\t   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm\n\t\t   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    unit\n\t\t   *\n\t\t   * @param {Unit | Array | Matrix} x     The unit to be converted.\n\t\t   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n\t\t   *                                      or a unit without value.\n\t\t   * @return {Unit | Array | Matrix} value with changed, fixed unit.",
            "line": " util.js:54883"
        },
        {
            "message": "Missing item type",
            "line": " util.js:54977"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(501),\n\t\t  __webpack_require__(419),\n\t\t  __webpack_require__(368),\n\t\t  __webpack_require__(89),\n\t\t  __webpack_require__(381),\n\t\t  __webpack_require__(502),\n\t\t  __webpack_require__(433),\n\t\t  __webpack_require__(503),\n\t\t  __webpack_require__(91)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:54979"
        },
        {
            "message": "Missing item type\n'use strict';\nvar object= __webpack_require__(3);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Clone an object.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.clone(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.clone(3.5);                   // returns number 3.5\n\t\t   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i\n\t\t   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg\n\t\t   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]\n\t\t   *    math.clone(\"hello world\");         // returns string \"hello world\"\n\t\t   *\n\t\t   * @param {*} x   Object to be cloned\n\t\t   * @return {*} A clone of object x",
            "line": " util.js:54996"
        },
        {
            "message": "Missing item type",
            "line": " util.js:55034"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is prime: has no divisors other than itself and one.\n\t\t   * The function supports type `number`, `bignumber`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isPrime(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isPrime(3);                     // returns true\n\t\t   *    math.isPrime(-2);                    // returns false\n\t\t   *    math.isPrime(0);                     // returns false\n\t\t   *    math.isPrime(-0);                    // returns false\n\t\t   *    math.isPrime(0.5);                   // returns false\n\t\t   *    math.isPrime('2');                   // returns true\n\t\t   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isZero, isNegative, isInteger\n\t\t   *\n\t\t   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is larger than zero.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "line": " util.js:55036"
        },
        {
            "message": "Missing item type",
            "line": " util.js:55121"
        },
        {
            "message": "Missing item type\n'use strict';\nvar deepMap = __webpack_require__(19);\n\t\tvar number = __webpack_require__(6);\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Test whether a value is NaN (not a number).\n\t\t   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\n\t\t   *\n\t\t   * The function is evaluated element-wise in case of Array or Matrix input.\n\t\t   *\n\t\t   * Syntax:\n\t\t   *\n\t\t   *     math.isNaN(x)\n\t\t   *\n\t\t   * Examples:\n\t\t   *\n\t\t   *    math.isNaN(3);                     // returns false\n\t\t   *    math.isNaN(NaN);                   // returns true\n\t\t   *    math.isNaN(0);                     // returns false\n\t\t   *    math.isNaN(math.bignumber(NaN));   // returns true\n\t\t   *    math.isNaN(math.bignumber(0));     // returns false\n\t\t   *    math.isNaN(math.fraction(-2, 5));  // returns false\n\t\t   *    math.isNaN('-2');                  // returns false\n\t\t   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]\n\t\t   *\n\t\t   * See also:\n\t\t   *\n\t\t   *    isNumeric, isNegative, isPositive, isZero, isInteger\n\t\t   *\n\t\t   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n\t\t   * @return {boolean}  Returns true when `x` is NaN.\n\t\t   *                    Throws an error in case of an unknown data type.",
            "line": " util.js:55123"
        },
        {
            "message": "Missing item type",
            "line": " util.js:55193"
        },
        {
            "message": "Missing item type\nmodule.exports = [\n\t\t  __webpack_require__(505)\n\t\t];\n\n\n\t/***/ },",
            "line": " util.js:55195"
        },
        {
            "message": "Missing item type\n'use strict';\nfunction factory (type, config, load, typed) {\n\t\t  /**\n\t\t   * Instantiate mathjs data types from their JSON representation\n\t\t   * @param {string} key\n\t\t   * @param {*} value\n\t\t   * @returns {*} Returns the revived object",
            "line": " util.js:55204"
        },
        {
            "message": "Missing item type",
            "line": " util.js:55230"
        },
        {
            "message": "Missing item type\n'use strict';\nvar ArgumentsError = __webpack_require__(11);\n\t\tvar DimensionError = __webpack_require__(42);\n\t\tvar IndexError = __webpack_require__(43);\nmodule.exports = [\n\t\t  {\n\t\t    name: 'ArgumentsError', path: 'error',\n\t\t    factory: function () {\n\t\t      return ArgumentsError;\n\t\t    }\n\t\t  },\n\t\t  {\n\t\t    name: 'DimensionError',\n\t\t    path: 'error',\n\t\t    factory: function () {\n\t\t      return DimensionError;\n\t\t    }\n\t\t  },\n\t\t  {\n\t\t    name: 'IndexError',\n\t\t    path: 'error',\n\t\t    factory: function () {\n\t\t      return IndexError;\n\t\t    }\n\t\t  }\n\t\t];\n// TODO: implement an InvalidValueError?\n\n\n\t/***/ }\n\t/******/ ])\n\t});\n\t;\n\n/***/ }\n/******/ ]);",
            "line": " util.js:55232"
        }
    ]
}